// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/persist/types.go

// Package persist is a generated GoMock package.
package persist

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// StartDataPersist mocks base method
func (m *MockManager) StartDataPersist() (DataFlush, error) {
	ret := m.ctrl.Call(m, "StartDataPersist")
	ret0, _ := ret[0].(DataFlush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataPersist indicates an expected call of StartDataPersist
func (mr *MockManagerMockRecorder) StartDataPersist() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataPersist", reflect.TypeOf((*MockManager)(nil).StartDataPersist))
}

// MockDataFlush is a mock of DataFlush interface
type MockDataFlush struct {
	ctrl     *gomock.Controller
	recorder *MockDataFlushMockRecorder
}

// MockDataFlushMockRecorder is the mock recorder for MockDataFlush
type MockDataFlushMockRecorder struct {
	mock *MockDataFlush
}

// NewMockDataFlush creates a new mock instance
func NewMockDataFlush(ctrl *gomock.Controller) *MockDataFlush {
	mock := &MockDataFlush{ctrl: ctrl}
	mock.recorder = &MockDataFlushMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataFlush) EXPECT() *MockDataFlushMockRecorder {
	return m.recorder
}

// Prepare mocks base method
func (m *MockDataFlush) Prepare(opts DataPrepareOptions) (PreparedDataPersist, error) {
	ret := m.ctrl.Call(m, "Prepare", opts)
	ret0, _ := ret[0].(PreparedDataPersist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockDataFlushMockRecorder) Prepare(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDataFlush)(nil).Prepare), opts)
}

// Done mocks base method
func (m *MockDataFlush) Done() error {
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockDataFlushMockRecorder) Done() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockDataFlush)(nil).Done))
}
