// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/persist/types.go

package persist

import (
	gomock "github.com/golang/mock/gomock"
	ts "github.com/m3db/m3db/ts"
	time "time"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) Prepare(namespace ts.ID, shard uint32, blockStart time.Time) (PreparedPersist, error) {
	ret := _m.ctrl.Call(_m, "Prepare", namespace, shard, blockStart)
	ret0, _ := ret[0].(PreparedPersist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) Prepare(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prepare", arg0, arg1, arg2)
}

func (_m *MockManager) SetThroughputLimitOptions(value ThroughputLimitOptions) {
	_m.ctrl.Call(_m, "SetThroughputLimitOptions", value)
}

func (_mr *_MockManagerRecorder) SetThroughputLimitOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetThroughputLimitOptions", arg0)
}

func (_m *MockManager) ThroughputLimitOptions() ThroughputLimitOptions {
	ret := _m.ctrl.Call(_m, "ThroughputLimitOptions")
	ret0, _ := ret[0].(ThroughputLimitOptions)
	return ret0
}

func (_mr *_MockManagerRecorder) ThroughputLimitOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThroughputLimitOptions")
}

// Mock of ThroughputLimitOptions interface
type MockThroughputLimitOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockThroughputLimitOptionsRecorder
}

// Recorder for MockThroughputLimitOptions (not exported)
type _MockThroughputLimitOptionsRecorder struct {
	mock *MockThroughputLimitOptions
}

func NewMockThroughputLimitOptions(ctrl *gomock.Controller) *MockThroughputLimitOptions {
	mock := &MockThroughputLimitOptions{ctrl: ctrl}
	mock.recorder = &_MockThroughputLimitOptionsRecorder{mock}
	return mock
}

func (_m *MockThroughputLimitOptions) EXPECT() *_MockThroughputLimitOptionsRecorder {
	return _m.recorder
}

func (_m *MockThroughputLimitOptions) SetThroughputLimitEnabled(value bool) ThroughputLimitOptions {
	ret := _m.ctrl.Call(_m, "SetThroughputLimitEnabled", value)
	ret0, _ := ret[0].(ThroughputLimitOptions)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) SetThroughputLimitEnabled(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetThroughputLimitEnabled", arg0)
}

func (_m *MockThroughputLimitOptions) ThroughputLimitEnabled() bool {
	ret := _m.ctrl.Call(_m, "ThroughputLimitEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) ThroughputLimitEnabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThroughputLimitEnabled")
}

func (_m *MockThroughputLimitOptions) SetThroughputLimitMbps(value float64) ThroughputLimitOptions {
	ret := _m.ctrl.Call(_m, "SetThroughputLimitMbps", value)
	ret0, _ := ret[0].(ThroughputLimitOptions)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) SetThroughputLimitMbps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetThroughputLimitMbps", arg0)
}

func (_m *MockThroughputLimitOptions) ThroughputLimitMbps() float64 {
	ret := _m.ctrl.Call(_m, "ThroughputLimitMbps")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) ThroughputLimitMbps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThroughputLimitMbps")
}

func (_m *MockThroughputLimitOptions) SetThroughputCheckInterval(value time.Duration) ThroughputLimitOptions {
	ret := _m.ctrl.Call(_m, "SetThroughputCheckInterval", value)
	ret0, _ := ret[0].(ThroughputLimitOptions)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) SetThroughputCheckInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetThroughputCheckInterval", arg0)
}

func (_m *MockThroughputLimitOptions) ThroughputCheckInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "ThroughputCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockThroughputLimitOptionsRecorder) ThroughputCheckInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThroughputCheckInterval")
}
