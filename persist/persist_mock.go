// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/persist/types.go

package persist

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// StartPersist mocks base method
func (_m *MockManager) StartPersist() (Flush, error) {
	ret := _m.ctrl.Call(_m, "StartPersist")
	ret0, _ := ret[0].(Flush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPersist indicates an expected call of StartPersist
func (_mr *MockManagerMockRecorder) StartPersist() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartPersist", reflect.TypeOf((*MockManager)(nil).StartPersist))
}

// MockFlush is a mock of Flush interface
type MockFlush struct {
	ctrl     *gomock.Controller
	recorder *MockFlushMockRecorder
}

// MockFlushMockRecorder is the mock recorder for MockFlush
type MockFlushMockRecorder struct {
	mock *MockFlush
}

// NewMockFlush creates a new mock instance
func NewMockFlush(ctrl *gomock.Controller) *MockFlush {
	mock := &MockFlush{ctrl: ctrl}
	mock.recorder = &MockFlushMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFlush) EXPECT() *MockFlushMockRecorder {
	return _m.recorder
}

// Prepare mocks base method
func (_m *MockFlush) Prepare(opts PrepareOptions) (PreparedPersist, error) {
	ret := _m.ctrl.Call(_m, "Prepare", opts)
	ret0, _ := ret[0].(PreparedPersist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (_mr *MockFlushMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Prepare", reflect.TypeOf((*MockFlush)(nil).Prepare), arg0)
}

// Done mocks base method
func (_m *MockFlush) Done() error {
	ret := _m.ctrl.Call(_m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done
func (_mr *MockFlushMockRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Done", reflect.TypeOf((*MockFlush)(nil).Done))
}
