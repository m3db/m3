// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/persist/fs/commitlog/types.go

package commitlog

import (
	gomock "github.com/golang/mock/gomock"
	clock "github.com/m3db/m3db/clock"
	instrument "github.com/m3db/m3db/instrument"
	fs "github.com/m3db/m3db/persist/fs"
	retention "github.com/m3db/m3db/retention"
	ts "github.com/m3db/m3db/ts"
	time0 "github.com/m3db/m3x/time"
	time "time"
)

// Mock of CommitLog interface
type MockCommitLog struct {
	ctrl     *gomock.Controller
	recorder *_MockCommitLogRecorder
}

// Recorder for MockCommitLog (not exported)
type _MockCommitLogRecorder struct {
	mock *MockCommitLog
}

func NewMockCommitLog(ctrl *gomock.Controller) *MockCommitLog {
	mock := &MockCommitLog{ctrl: ctrl}
	mock.recorder = &_MockCommitLogRecorder{mock}
	return mock
}

func (_m *MockCommitLog) EXPECT() *_MockCommitLogRecorder {
	return _m.recorder
}

func (_m *MockCommitLog) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockCommitLog) Write(series Series, datapoint ts.Datapoint, unit time0.Unit, annotation ts.Annotation) error {
	ret := _m.ctrl.Call(_m, "Write", series, datapoint, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockCommitLog) WriteBehind(series Series, datapoint ts.Datapoint, unit time0.Unit, annotation ts.Annotation) error {
	ret := _m.ctrl.Call(_m, "WriteBehind", series, datapoint, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) WriteBehind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBehind", arg0, arg1, arg2, arg3)
}

func (_m *MockCommitLog) Iter() (Iterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommitLogRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockCommitLog) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Iterator interface
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockIteratorRecorder
}

// Recorder for MockIterator (not exported)
type _MockIteratorRecorder struct {
	mock *MockIterator
}

func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &_MockIteratorRecorder{mock}
	return mock
}

func (_m *MockIterator) EXPECT() *_MockIteratorRecorder {
	return _m.recorder
}

func (_m *MockIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockIterator) Current() (Series, ts.Datapoint, time0.Unit, ts.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(Series)
	ret1, _ := ret[1].(ts.Datapoint)
	ret2, _ := ret[2].(time0.Unit)
	ret3, _ := ret[3].(ts.Annotation)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) ClockOptions(value clock.Options) Options {
	ret := _m.ctrl.Call(_m, "ClockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) ClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions", arg0)
}

func (_m *MockOptions) GetClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "GetClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClockOptions")
}

func (_m *MockOptions) InstrumentOptions(value instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions", arg0)
}

func (_m *MockOptions) GetInstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "GetInstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetInstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstrumentOptions")
}

func (_m *MockOptions) RetentionOptions(value retention.Options) Options {
	ret := _m.ctrl.Call(_m, "RetentionOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) RetentionOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetentionOptions", arg0)
}

func (_m *MockOptions) GetRetentionOptions() retention.Options {
	ret := _m.ctrl.Call(_m, "GetRetentionOptions")
	ret0, _ := ret[0].(retention.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetRetentionOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRetentionOptions")
}

func (_m *MockOptions) FilesystemOptions(value fs.Options) Options {
	ret := _m.ctrl.Call(_m, "FilesystemOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) FilesystemOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FilesystemOptions", arg0)
}

func (_m *MockOptions) GetFilesystemOptions() fs.Options {
	ret := _m.ctrl.Call(_m, "GetFilesystemOptions")
	ret0, _ := ret[0].(fs.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetFilesystemOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFilesystemOptions")
}

func (_m *MockOptions) FlushSize(value int) Options {
	ret := _m.ctrl.Call(_m, "FlushSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) FlushSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushSize", arg0)
}

func (_m *MockOptions) GetFlushSize() int {
	ret := _m.ctrl.Call(_m, "GetFlushSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetFlushSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFlushSize")
}

func (_m *MockOptions) Strategy(value Strategy) Options {
	ret := _m.ctrl.Call(_m, "Strategy", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) Strategy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Strategy", arg0)
}

func (_m *MockOptions) GetStrategy() Strategy {
	ret := _m.ctrl.Call(_m, "GetStrategy")
	ret0, _ := ret[0].(Strategy)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetStrategy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStrategy")
}

func (_m *MockOptions) FlushInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "FlushInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) FlushInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushInterval", arg0)
}

func (_m *MockOptions) GetFlushInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "GetFlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetFlushInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFlushInterval")
}

func (_m *MockOptions) BacklogQueueSize(value int) Options {
	ret := _m.ctrl.Call(_m, "BacklogQueueSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) BacklogQueueSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BacklogQueueSize", arg0)
}

func (_m *MockOptions) GetBacklogQueueSize() int {
	ret := _m.ctrl.Call(_m, "GetBacklogQueueSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) GetBacklogQueueSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBacklogQueueSize")
}
