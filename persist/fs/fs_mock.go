// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/persist/fs (interfaces: DataFileSetWriter,DataFileSetReader,DataFileSetSeeker,IndexFileSetWriter,IndexFileSetReader,IndexSegmentFileSet,IndexSegmentFile)

package fs

import (
	"reflect"
	"time"

	"github.com/m3db/m3x/checked"
	"github.com/m3db/m3x/ident"
	time0 "github.com/m3db/m3x/time"

	"github.com/golang/mock/gomock"
)

// MockDataFileSetWriter is a mock of DataFileSetWriter interface
type MockDataFileSetWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDataFileSetWriterMockRecorder
}

// MockDataFileSetWriterMockRecorder is the mock recorder for MockDataFileSetWriter
type MockDataFileSetWriterMockRecorder struct {
	mock *MockDataFileSetWriter
}

// NewMockDataFileSetWriter creates a new mock instance
func NewMockDataFileSetWriter(ctrl *gomock.Controller) *MockDataFileSetWriter {
	mock := &MockDataFileSetWriter{ctrl: ctrl}
	mock.recorder = &MockDataFileSetWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDataFileSetWriter) EXPECT() *MockDataFileSetWriterMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockDataFileSetWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDataFileSetWriterMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDataFileSetWriter)(nil).Close))
}

// Open mocks base method
func (_m *MockDataFileSetWriter) Open(_param0 DataWriterOpenOptions) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockDataFileSetWriterMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDataFileSetWriter)(nil).Open), arg0)
}

// Write mocks base method
func (_m *MockDataFileSetWriter) Write(_param0 ident.ID, _param1 checked.Bytes, _param2 uint32) error {
	ret := _m.ctrl.Call(_m, "Write", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockDataFileSetWriterMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockDataFileSetWriter)(nil).Write), arg0, arg1, arg2)
}

// WriteAll mocks base method
func (_m *MockDataFileSetWriter) WriteAll(_param0 ident.ID, _param1 []checked.Bytes, _param2 uint32) error {
	ret := _m.ctrl.Call(_m, "WriteAll", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAll indicates an expected call of WriteAll
func (_mr *MockDataFileSetWriterMockRecorder) WriteAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteAll", reflect.TypeOf((*MockDataFileSetWriter)(nil).WriteAll), arg0, arg1, arg2)
}

// MockDataFileSetReader is a mock of DataFileSetReader interface
type MockDataFileSetReader struct {
	ctrl     *gomock.Controller
	recorder *MockDataFileSetReaderMockRecorder
}

// MockDataFileSetReaderMockRecorder is the mock recorder for MockDataFileSetReader
type MockDataFileSetReaderMockRecorder struct {
	mock *MockDataFileSetReader
}

// NewMockDataFileSetReader creates a new mock instance
func NewMockDataFileSetReader(ctrl *gomock.Controller) *MockDataFileSetReader {
	mock := &MockDataFileSetReader{ctrl: ctrl}
	mock.recorder = &MockDataFileSetReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDataFileSetReader) EXPECT() *MockDataFileSetReaderMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockDataFileSetReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDataFileSetReaderMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDataFileSetReader)(nil).Close))
}

// Entries mocks base method
func (_m *MockDataFileSetReader) Entries() int {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(int)
	return ret0
}

// Entries indicates an expected call of Entries
func (_mr *MockDataFileSetReaderMockRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Entries", reflect.TypeOf((*MockDataFileSetReader)(nil).Entries))
}

// EntriesRead mocks base method
func (_m *MockDataFileSetReader) EntriesRead() int {
	ret := _m.ctrl.Call(_m, "EntriesRead")
	ret0, _ := ret[0].(int)
	return ret0
}

// EntriesRead indicates an expected call of EntriesRead
func (_mr *MockDataFileSetReaderMockRecorder) EntriesRead() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EntriesRead", reflect.TypeOf((*MockDataFileSetReader)(nil).EntriesRead))
}

// MetadataRead mocks base method
func (_m *MockDataFileSetReader) MetadataRead() int {
	ret := _m.ctrl.Call(_m, "MetadataRead")
	ret0, _ := ret[0].(int)
	return ret0
}

// MetadataRead indicates an expected call of MetadataRead
func (_mr *MockDataFileSetReaderMockRecorder) MetadataRead() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MetadataRead", reflect.TypeOf((*MockDataFileSetReader)(nil).MetadataRead))
}

// Open mocks base method
func (_m *MockDataFileSetReader) Open(_param0 DataReaderOpenOptions) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockDataFileSetReaderMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDataFileSetReader)(nil).Open), arg0)
}

// Range mocks base method
func (_m *MockDataFileSetReader) Range() time0.Range {
	ret := _m.ctrl.Call(_m, "Range")
	ret0, _ := ret[0].(time0.Range)
	return ret0
}

// Range indicates an expected call of Range
func (_mr *MockDataFileSetReaderMockRecorder) Range() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Range", reflect.TypeOf((*MockDataFileSetReader)(nil).Range))
}

// Read mocks base method
func (_m *MockDataFileSetReader) Read() (ident.ID, checked.Bytes, uint32, error) {
	ret := _m.ctrl.Call(_m, "Read")
	ret0, _ := ret[0].(ident.ID)
	ret1, _ := ret[1].(checked.Bytes)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Read indicates an expected call of Read
func (_mr *MockDataFileSetReaderMockRecorder) Read() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockDataFileSetReader)(nil).Read))
}

// ReadBloomFilter mocks base method
func (_m *MockDataFileSetReader) ReadBloomFilter() (*ManagedConcurrentBloomFilter, error) {
	ret := _m.ctrl.Call(_m, "ReadBloomFilter")
	ret0, _ := ret[0].(*ManagedConcurrentBloomFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBloomFilter indicates an expected call of ReadBloomFilter
func (_mr *MockDataFileSetReaderMockRecorder) ReadBloomFilter() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadBloomFilter", reflect.TypeOf((*MockDataFileSetReader)(nil).ReadBloomFilter))
}

// ReadMetadata mocks base method
func (_m *MockDataFileSetReader) ReadMetadata() (ident.ID, int, uint32, error) {
	ret := _m.ctrl.Call(_m, "ReadMetadata")
	ret0, _ := ret[0].(ident.ID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ReadMetadata indicates an expected call of ReadMetadata
func (_mr *MockDataFileSetReaderMockRecorder) ReadMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadMetadata", reflect.TypeOf((*MockDataFileSetReader)(nil).ReadMetadata))
}

// Status mocks base method
func (_m *MockDataFileSetReader) Status() DataFileSetReaderStatus {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(DataFileSetReaderStatus)
	return ret0
}

// Status indicates an expected call of Status
func (_mr *MockDataFileSetReaderMockRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Status", reflect.TypeOf((*MockDataFileSetReader)(nil).Status))
}

// Validate mocks base method
func (_m *MockDataFileSetReader) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (_mr *MockDataFileSetReaderMockRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Validate", reflect.TypeOf((*MockDataFileSetReader)(nil).Validate))
}

// ValidateData mocks base method
func (_m *MockDataFileSetReader) ValidateData() error {
	ret := _m.ctrl.Call(_m, "ValidateData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateData indicates an expected call of ValidateData
func (_mr *MockDataFileSetReaderMockRecorder) ValidateData() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidateData", reflect.TypeOf((*MockDataFileSetReader)(nil).ValidateData))
}

// ValidateMetadata mocks base method
func (_m *MockDataFileSetReader) ValidateMetadata() error {
	ret := _m.ctrl.Call(_m, "ValidateMetadata")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateMetadata indicates an expected call of ValidateMetadata
func (_mr *MockDataFileSetReaderMockRecorder) ValidateMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidateMetadata", reflect.TypeOf((*MockDataFileSetReader)(nil).ValidateMetadata))
}

// MockDataFileSetSeeker is a mock of DataFileSetSeeker interface
type MockDataFileSetSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockDataFileSetSeekerMockRecorder
}

// MockDataFileSetSeekerMockRecorder is the mock recorder for MockDataFileSetSeeker
type MockDataFileSetSeekerMockRecorder struct {
	mock *MockDataFileSetSeeker
}

// NewMockDataFileSetSeeker creates a new mock instance
func NewMockDataFileSetSeeker(ctrl *gomock.Controller) *MockDataFileSetSeeker {
	mock := &MockDataFileSetSeeker{ctrl: ctrl}
	mock.recorder = &MockDataFileSetSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDataFileSetSeeker) EXPECT() *MockDataFileSetSeekerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockDataFileSetSeeker) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDataFileSetSeekerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDataFileSetSeeker)(nil).Close))
}

// ConcurrentClone mocks base method
func (_m *MockDataFileSetSeeker) ConcurrentClone() (ConcurrentDataFileSetSeeker, error) {
	ret := _m.ctrl.Call(_m, "ConcurrentClone")
	ret0, _ := ret[0].(ConcurrentDataFileSetSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcurrentClone indicates an expected call of ConcurrentClone
func (_mr *MockDataFileSetSeekerMockRecorder) ConcurrentClone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ConcurrentClone", reflect.TypeOf((*MockDataFileSetSeeker)(nil).ConcurrentClone))
}

// ConcurrentIDBloomFilter mocks base method
func (_m *MockDataFileSetSeeker) ConcurrentIDBloomFilter() *ManagedConcurrentBloomFilter {
	ret := _m.ctrl.Call(_m, "ConcurrentIDBloomFilter")
	ret0, _ := ret[0].(*ManagedConcurrentBloomFilter)
	return ret0
}

// ConcurrentIDBloomFilter indicates an expected call of ConcurrentIDBloomFilter
func (_mr *MockDataFileSetSeekerMockRecorder) ConcurrentIDBloomFilter() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ConcurrentIDBloomFilter", reflect.TypeOf((*MockDataFileSetSeeker)(nil).ConcurrentIDBloomFilter))
}

// Entries mocks base method
func (_m *MockDataFileSetSeeker) Entries() int {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(int)
	return ret0
}

// Entries indicates an expected call of Entries
func (_mr *MockDataFileSetSeekerMockRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Entries", reflect.TypeOf((*MockDataFileSetSeeker)(nil).Entries))
}

// Open mocks base method
func (_m *MockDataFileSetSeeker) Open(_param0 ident.ID, _param1 uint32, _param2 time.Time) error {
	ret := _m.ctrl.Call(_m, "Open", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockDataFileSetSeekerMockRecorder) Open(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDataFileSetSeeker)(nil).Open), arg0, arg1, arg2)
}

// Range mocks base method
func (_m *MockDataFileSetSeeker) Range() time0.Range {
	ret := _m.ctrl.Call(_m, "Range")
	ret0, _ := ret[0].(time0.Range)
	return ret0
}

// Range indicates an expected call of Range
func (_mr *MockDataFileSetSeekerMockRecorder) Range() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Range", reflect.TypeOf((*MockDataFileSetSeeker)(nil).Range))
}

// SeekByID mocks base method
func (_m *MockDataFileSetSeeker) SeekByID(_param0 ident.ID) (checked.Bytes, error) {
	ret := _m.ctrl.Call(_m, "SeekByID", _param0)
	ret0, _ := ret[0].(checked.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeekByID indicates an expected call of SeekByID
func (_mr *MockDataFileSetSeekerMockRecorder) SeekByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SeekByID", reflect.TypeOf((*MockDataFileSetSeeker)(nil).SeekByID), arg0)
}

// SeekByIndexEntry mocks base method
func (_m *MockDataFileSetSeeker) SeekByIndexEntry(_param0 IndexEntry) (checked.Bytes, error) {
	ret := _m.ctrl.Call(_m, "SeekByIndexEntry", _param0)
	ret0, _ := ret[0].(checked.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeekByIndexEntry indicates an expected call of SeekByIndexEntry
func (_mr *MockDataFileSetSeekerMockRecorder) SeekByIndexEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SeekByIndexEntry", reflect.TypeOf((*MockDataFileSetSeeker)(nil).SeekByIndexEntry), arg0)
}

// SeekIndexEntry mocks base method
func (_m *MockDataFileSetSeeker) SeekIndexEntry(_param0 ident.ID) (IndexEntry, error) {
	ret := _m.ctrl.Call(_m, "SeekIndexEntry", _param0)
	ret0, _ := ret[0].(IndexEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeekIndexEntry indicates an expected call of SeekIndexEntry
func (_mr *MockDataFileSetSeekerMockRecorder) SeekIndexEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SeekIndexEntry", reflect.TypeOf((*MockDataFileSetSeeker)(nil).SeekIndexEntry), arg0)
}

// MockIndexFileSetWriter is a mock of IndexFileSetWriter interface
type MockIndexFileSetWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIndexFileSetWriterMockRecorder
}

// MockIndexFileSetWriterMockRecorder is the mock recorder for MockIndexFileSetWriter
type MockIndexFileSetWriterMockRecorder struct {
	mock *MockIndexFileSetWriter
}

// NewMockIndexFileSetWriter creates a new mock instance
func NewMockIndexFileSetWriter(ctrl *gomock.Controller) *MockIndexFileSetWriter {
	mock := &MockIndexFileSetWriter{ctrl: ctrl}
	mock.recorder = &MockIndexFileSetWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIndexFileSetWriter) EXPECT() *MockIndexFileSetWriterMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockIndexFileSetWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockIndexFileSetWriterMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockIndexFileSetWriter)(nil).Close))
}

// Open mocks base method
func (_m *MockIndexFileSetWriter) Open(_param0 IndexWriterOpenOptions) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockIndexFileSetWriterMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockIndexFileSetWriter)(nil).Open), arg0)
}

// WriteSegmentFileSet mocks base method
func (_m *MockIndexFileSetWriter) WriteSegmentFileSet(_param0 IndexSegmentFileSet) error {
	ret := _m.ctrl.Call(_m, "WriteSegmentFileSet", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSegmentFileSet indicates an expected call of WriteSegmentFileSet
func (_mr *MockIndexFileSetWriterMockRecorder) WriteSegmentFileSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteSegmentFileSet", reflect.TypeOf((*MockIndexFileSetWriter)(nil).WriteSegmentFileSet), arg0)
}

// MockIndexFileSetReader is a mock of IndexFileSetReader interface
type MockIndexFileSetReader struct {
	ctrl     *gomock.Controller
	recorder *MockIndexFileSetReaderMockRecorder
}

// MockIndexFileSetReaderMockRecorder is the mock recorder for MockIndexFileSetReader
type MockIndexFileSetReaderMockRecorder struct {
	mock *MockIndexFileSetReader
}

// NewMockIndexFileSetReader creates a new mock instance
func NewMockIndexFileSetReader(ctrl *gomock.Controller) *MockIndexFileSetReader {
	mock := &MockIndexFileSetReader{ctrl: ctrl}
	mock.recorder = &MockIndexFileSetReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIndexFileSetReader) EXPECT() *MockIndexFileSetReaderMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockIndexFileSetReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockIndexFileSetReaderMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockIndexFileSetReader)(nil).Close))
}

// Open mocks base method
func (_m *MockIndexFileSetReader) Open(_param0 IndexReaderOpenOptions) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockIndexFileSetReaderMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockIndexFileSetReader)(nil).Open), arg0)
}

// ReadSegmentFileSet mocks base method
func (_m *MockIndexFileSetReader) ReadSegmentFileSet() (IndexSegmentFileSet, error) {
	ret := _m.ctrl.Call(_m, "ReadSegmentFileSet")
	ret0, _ := ret[0].(IndexSegmentFileSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSegmentFileSet indicates an expected call of ReadSegmentFileSet
func (_mr *MockIndexFileSetReaderMockRecorder) ReadSegmentFileSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadSegmentFileSet", reflect.TypeOf((*MockIndexFileSetReader)(nil).ReadSegmentFileSet))
}

// SegmentFileSets mocks base method
func (_m *MockIndexFileSetReader) SegmentFileSets() int {
	ret := _m.ctrl.Call(_m, "SegmentFileSets")
	ret0, _ := ret[0].(int)
	return ret0
}

// SegmentFileSets indicates an expected call of SegmentFileSets
func (_mr *MockIndexFileSetReaderMockRecorder) SegmentFileSets() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentFileSets", reflect.TypeOf((*MockIndexFileSetReader)(nil).SegmentFileSets))
}

// Validate mocks base method
func (_m *MockIndexFileSetReader) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (_mr *MockIndexFileSetReaderMockRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Validate", reflect.TypeOf((*MockIndexFileSetReader)(nil).Validate))
}

// MockIndexSegmentFileSet is a mock of IndexSegmentFileSet interface
type MockIndexSegmentFileSet struct {
	ctrl     *gomock.Controller
	recorder *MockIndexSegmentFileSetMockRecorder
}

// MockIndexSegmentFileSetMockRecorder is the mock recorder for MockIndexSegmentFileSet
type MockIndexSegmentFileSetMockRecorder struct {
	mock *MockIndexSegmentFileSet
}

// NewMockIndexSegmentFileSet creates a new mock instance
func NewMockIndexSegmentFileSet(ctrl *gomock.Controller) *MockIndexSegmentFileSet {
	mock := &MockIndexSegmentFileSet{ctrl: ctrl}
	mock.recorder = &MockIndexSegmentFileSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIndexSegmentFileSet) EXPECT() *MockIndexSegmentFileSetMockRecorder {
	return _m.recorder
}

// Files mocks base method
func (_m *MockIndexSegmentFileSet) Files() []IndexSegmentFile {
	ret := _m.ctrl.Call(_m, "Files")
	ret0, _ := ret[0].([]IndexSegmentFile)
	return ret0
}

// Files indicates an expected call of Files
func (_mr *MockIndexSegmentFileSetMockRecorder) Files() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Files", reflect.TypeOf((*MockIndexSegmentFileSet)(nil).Files))
}

// MajorVersion mocks base method
func (_m *MockIndexSegmentFileSet) MajorVersion() int {
	ret := _m.ctrl.Call(_m, "MajorVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// MajorVersion indicates an expected call of MajorVersion
func (_mr *MockIndexSegmentFileSetMockRecorder) MajorVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MajorVersion", reflect.TypeOf((*MockIndexSegmentFileSet)(nil).MajorVersion))
}

// MinorVersion mocks base method
func (_m *MockIndexSegmentFileSet) MinorVersion() int {
	ret := _m.ctrl.Call(_m, "MinorVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// MinorVersion indicates an expected call of MinorVersion
func (_mr *MockIndexSegmentFileSetMockRecorder) MinorVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MinorVersion", reflect.TypeOf((*MockIndexSegmentFileSet)(nil).MinorVersion))
}

// SegmentMetadata mocks base method
func (_m *MockIndexSegmentFileSet) SegmentMetadata() []byte {
	ret := _m.ctrl.Call(_m, "SegmentMetadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SegmentMetadata indicates an expected call of SegmentMetadata
func (_mr *MockIndexSegmentFileSetMockRecorder) SegmentMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentMetadata", reflect.TypeOf((*MockIndexSegmentFileSet)(nil).SegmentMetadata))
}

// SegmentType mocks base method
func (_m *MockIndexSegmentFileSet) SegmentType() IndexSegmentType {
	ret := _m.ctrl.Call(_m, "SegmentType")
	ret0, _ := ret[0].(IndexSegmentType)
	return ret0
}

// SegmentType indicates an expected call of SegmentType
func (_mr *MockIndexSegmentFileSetMockRecorder) SegmentType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentType", reflect.TypeOf((*MockIndexSegmentFileSet)(nil).SegmentType))
}

// MockIndexSegmentFile is a mock of IndexSegmentFile interface
type MockIndexSegmentFile struct {
	ctrl     *gomock.Controller
	recorder *MockIndexSegmentFileMockRecorder
}

// MockIndexSegmentFileMockRecorder is the mock recorder for MockIndexSegmentFile
type MockIndexSegmentFileMockRecorder struct {
	mock *MockIndexSegmentFile
}

// NewMockIndexSegmentFile creates a new mock instance
func NewMockIndexSegmentFile(ctrl *gomock.Controller) *MockIndexSegmentFile {
	mock := &MockIndexSegmentFile{ctrl: ctrl}
	mock.recorder = &MockIndexSegmentFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIndexSegmentFile) EXPECT() *MockIndexSegmentFileMockRecorder {
	return _m.recorder
}

// Bytes mocks base method
func (_m *MockIndexSegmentFile) Bytes() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Bytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bytes indicates an expected call of Bytes
func (_mr *MockIndexSegmentFileMockRecorder) Bytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bytes", reflect.TypeOf((*MockIndexSegmentFile)(nil).Bytes))
}

// Close mocks base method
func (_m *MockIndexSegmentFile) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockIndexSegmentFileMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockIndexSegmentFile)(nil).Close))
}

// Read mocks base method
func (_m *MockIndexSegmentFile) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (_mr *MockIndexSegmentFileMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockIndexSegmentFile)(nil).Read), arg0)
}

// SegmentFileType mocks base method
func (_m *MockIndexSegmentFile) SegmentFileType() IndexSegmentFileType {
	ret := _m.ctrl.Call(_m, "SegmentFileType")
	ret0, _ := ret[0].(IndexSegmentFileType)
	return ret0
}

// SegmentFileType indicates an expected call of SegmentFileType
func (_mr *MockIndexSegmentFileMockRecorder) SegmentFileType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentFileType", reflect.TypeOf((*MockIndexSegmentFile)(nil).SegmentFileType))
}
