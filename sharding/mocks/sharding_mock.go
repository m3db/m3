// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/sharding (interfaces: ShardSet)

package sharding

import (
	gomock "github.com/golang/mock/gomock"
	sharding "github.com/m3db/m3db/sharding"
	ts "github.com/m3db/m3db/ts"
	shard "github.com/m3db/m3cluster/shard"
)

// Mock of ShardSet interface
type MockShardSet struct {
	ctrl     *gomock.Controller
	recorder *_MockShardSetRecorder
}

// Recorder for MockShardSet (not exported)
type _MockShardSetRecorder struct {
	mock *MockShardSet
}

func NewMockShardSet(ctrl *gomock.Controller) *MockShardSet {
	mock := &MockShardSet{ctrl: ctrl}
	mock.recorder = &_MockShardSetRecorder{mock}
	return mock
}

func (_m *MockShardSet) EXPECT() *_MockShardSetRecorder {
	return _m.recorder
}

func (_m *MockShardSet) All() []shard.Shard {
	ret := _m.ctrl.Call(_m, "All")
	ret0, _ := ret[0].([]shard.Shard)
	return ret0
}

func (_mr *_MockShardSetRecorder) All() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "All")
}

func (_m *MockShardSet) AllIDs() []uint32 {
	ret := _m.ctrl.Call(_m, "AllIDs")
	ret0, _ := ret[0].([]uint32)
	return ret0
}

func (_mr *_MockShardSetRecorder) AllIDs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllIDs")
}

func (_m *MockShardSet) HashFn() sharding.HashFn {
	ret := _m.ctrl.Call(_m, "HashFn")
	ret0, _ := ret[0].(sharding.HashFn)
	return ret0
}

func (_mr *_MockShardSetRecorder) HashFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HashFn")
}

func (_m *MockShardSet) Lookup(_param0 ts.ID) uint32 {
	ret := _m.ctrl.Call(_m, "Lookup", _param0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockShardSetRecorder) Lookup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lookup", arg0)
}

func (_m *MockShardSet) LookupStateByID(_param0 uint32) (shard.State, error) {
	ret := _m.ctrl.Call(_m, "LookupStateByID", _param0)
	ret0, _ := ret[0].(shard.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShardSetRecorder) LookupStateByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupStateByID", arg0)
}

func (_m *MockShardSet) Max() uint32 {
	ret := _m.ctrl.Call(_m, "Max")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockShardSetRecorder) Max() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Max")
}

func (_m *MockShardSet) Min() uint32 {
	ret := _m.ctrl.Call(_m, "Min")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockShardSetRecorder) Min() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Min")
}
