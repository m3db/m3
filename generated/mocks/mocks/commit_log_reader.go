// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: /Users/r/go/src/github.com/m3db/m3db/persist/fs/commitlog/reader.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time0 "github.com/m3db/m3x/time"
	time "time"
)

// Mock of commitLogReader interface
type MockcommitLogReader struct {
	ctrl     *gomock.Controller
	recorder *_MockcommitLogReaderRecorder
}

// Recorder for MockcommitLogReader (not exported)
type _MockcommitLogReaderRecorder struct {
	mock *MockcommitLogReader
}

func NewMockcommitLogReader(ctrl *gomock.Controller) *MockcommitLogReader {
	mock := &MockcommitLogReader{ctrl: ctrl}
	mock.recorder = &_MockcommitLogReaderRecorder{mock}
	return mock
}

func (_m *MockcommitLogReader) EXPECT() *_MockcommitLogReaderRecorder {
	return _m.recorder
}

func (_m *MockcommitLogReader) Open(filePath string) (time.Time, time.Duration, int, error) {
	ret := _m.ctrl.Call(_m, "Open", filePath)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockcommitLogReaderRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0)
}

func (_m *MockcommitLogReader) Read() (m3db.CommitLogSeries, m3db.Datapoint, time0.Unit, m3db.Annotation, error) {
	ret := _m.ctrl.Call(_m, "Read")
	ret0, _ := ret[0].(m3db.CommitLogSeries)
	ret1, _ := ret[1].(m3db.Datapoint)
	ret2, _ := ret[2].(time0.Unit)
	ret3, _ := ret[3].(m3db.Annotation)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockcommitLogReaderRecorder) Read() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read")
}

func (_m *MockcommitLogReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcommitLogReaderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
