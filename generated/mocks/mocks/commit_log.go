// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/interfaces/m3db (interfaces: CommitLog,CommitLogIterator)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time "github.com/m3db/m3x/time"
)

// Mock of CommitLog interface
type MockCommitLog struct {
	ctrl     *gomock.Controller
	recorder *_MockCommitLogRecorder
}

// Recorder for MockCommitLog (not exported)
type _MockCommitLogRecorder struct {
	mock *MockCommitLog
}

func NewMockCommitLog(ctrl *gomock.Controller) *MockCommitLog {
	mock := &MockCommitLog{ctrl: ctrl}
	mock.recorder = &_MockCommitLogRecorder{mock}
	return mock
}

func (_m *MockCommitLog) EXPECT() *_MockCommitLogRecorder {
	return _m.recorder
}

func (_m *MockCommitLog) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockCommitLog) Iter() (m3db.CommitLogIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(m3db.CommitLogIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommitLogRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockCommitLog) Write(_param0 m3db.CommitLogSeries, _param1 m3db.Datapoint, _param2 time.Unit, _param3 m3db.Annotation) error {
	ret := _m.ctrl.Call(_m, "Write", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockCommitLog) WriteBehind(_param0 m3db.CommitLogSeries, _param1 m3db.Datapoint, _param2 time.Unit, _param3 m3db.Annotation) error {
	ret := _m.ctrl.Call(_m, "WriteBehind", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogRecorder) WriteBehind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBehind", arg0, arg1, arg2, arg3)
}

// Mock of CommitLogIterator interface
type MockCommitLogIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockCommitLogIteratorRecorder
}

// Recorder for MockCommitLogIterator (not exported)
type _MockCommitLogIteratorRecorder struct {
	mock *MockCommitLogIterator
}

func NewMockCommitLogIterator(ctrl *gomock.Controller) *MockCommitLogIterator {
	mock := &MockCommitLogIterator{ctrl: ctrl}
	mock.recorder = &_MockCommitLogIteratorRecorder{mock}
	return mock
}

func (_m *MockCommitLogIterator) EXPECT() *_MockCommitLogIteratorRecorder {
	return _m.recorder
}

func (_m *MockCommitLogIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockCommitLogIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockCommitLogIterator) Current() (m3db.CommitLogSeries, m3db.Datapoint, time.Unit, m3db.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(m3db.CommitLogSeries)
	ret1, _ := ret[1].(m3db.Datapoint)
	ret2, _ := ret[2].(time.Unit)
	ret3, _ := ret[3].(m3db.Annotation)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockCommitLogIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockCommitLogIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommitLogIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockCommitLogIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockCommitLogIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}
