// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/interfaces/m3db (interfaces: SeriesIterator)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time "github.com/m3db/m3x/time"
	time0 "time"
)

// Mock of SeriesIterator interface
type MockSeriesIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeriesIteratorRecorder
}

// Recorder for MockSeriesIterator (not exported)
type _MockSeriesIteratorRecorder struct {
	mock *MockSeriesIterator
}

func NewMockSeriesIterator(ctrl *gomock.Controller) *MockSeriesIterator {
	mock := &MockSeriesIterator{ctrl: ctrl}
	mock.recorder = &_MockSeriesIteratorRecorder{mock}
	return mock
}

func (_m *MockSeriesIterator) EXPECT() *_MockSeriesIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeriesIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeriesIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeriesIterator) Current() (m3db.Datapoint, time.Unit, m3db.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(m3db.Datapoint)
	ret1, _ := ret[1].(time.Unit)
	ret2, _ := ret[2].(m3db.Annotation)
	return ret0, ret1, ret2
}

func (_mr *_MockSeriesIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeriesIterator) End() time0.Time {
	ret := _m.ctrl.Call(_m, "End")
	ret0, _ := ret[0].(time0.Time)
	return ret0
}

func (_mr *_MockSeriesIteratorRecorder) End() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "End")
}

func (_m *MockSeriesIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeriesIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeriesIterator) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSeriesIteratorRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockSeriesIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeriesIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeriesIterator) Reset(_param0 string, _param1 time0.Time, _param2 time0.Time, _param3 []m3db.Iterator) {
	_m.ctrl.Call(_m, "Reset", _param0, _param1, _param2, _param3)
}

func (_mr *_MockSeriesIteratorRecorder) Reset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1, arg2, arg3)
}

func (_m *MockSeriesIterator) Start() time0.Time {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(time0.Time)
	return ret0
}

func (_mr *_MockSeriesIteratorRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}
