// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/interfaces/m3db (interfaces: DatabaseBlock,DatabaseSeriesBlocks)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time0 "github.com/m3db/m3x/time"
	time "time"
)

// Mock of DatabaseBlock interface
type MockDatabaseBlock struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseBlockRecorder
}

// Recorder for MockDatabaseBlock (not exported)
type _MockDatabaseBlockRecorder struct {
	mock *MockDatabaseBlock
}

func NewMockDatabaseBlock(ctrl *gomock.Controller) *MockDatabaseBlock {
	mock := &MockDatabaseBlock{ctrl: ctrl}
	mock.recorder = &_MockDatabaseBlockRecorder{mock}
	return mock
}

func (_m *MockDatabaseBlock) EXPECT() *_MockDatabaseBlockRecorder {
	return _m.recorder
}

func (_m *MockDatabaseBlock) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDatabaseBlockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDatabaseBlock) IsSealed() bool {
	ret := _m.ctrl.Call(_m, "IsSealed")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDatabaseBlockRecorder) IsSealed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSealed")
}

func (_m *MockDatabaseBlock) Reset(_param0 time.Time, _param1 m3db.Encoder) {
	_m.ctrl.Call(_m, "Reset", _param0, _param1)
}

func (_mr *_MockDatabaseBlockRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1)
}

func (_m *MockDatabaseBlock) Seal() {
	_m.ctrl.Call(_m, "Seal")
}

func (_mr *_MockDatabaseBlockRecorder) Seal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seal")
}

func (_m *MockDatabaseBlock) StartTime() time.Time {
	ret := _m.ctrl.Call(_m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockDatabaseBlockRecorder) StartTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartTime")
}

func (_m *MockDatabaseBlock) Stream(_param0 m3db.Context) (m3db.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "Stream", _param0)
	ret0, _ := ret[0].(m3db.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseBlockRecorder) Stream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stream", arg0)
}

func (_m *MockDatabaseBlock) Write(_param0 time.Time, _param1 float64, _param2 time0.Unit, _param3 []byte) error {
	ret := _m.ctrl.Call(_m, "Write", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseBlockRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

// Mock of DatabaseSeriesBlocks interface
type MockDatabaseSeriesBlocks struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseSeriesBlocksRecorder
}

// Recorder for MockDatabaseSeriesBlocks (not exported)
type _MockDatabaseSeriesBlocksRecorder struct {
	mock *MockDatabaseSeriesBlocks
}

func NewMockDatabaseSeriesBlocks(ctrl *gomock.Controller) *MockDatabaseSeriesBlocks {
	mock := &MockDatabaseSeriesBlocks{ctrl: ctrl}
	mock.recorder = &_MockDatabaseSeriesBlocksRecorder{mock}
	return mock
}

func (_m *MockDatabaseSeriesBlocks) EXPECT() *_MockDatabaseSeriesBlocksRecorder {
	return _m.recorder
}

func (_m *MockDatabaseSeriesBlocks) AddBlock(_param0 m3db.DatabaseBlock) {
	_m.ctrl.Call(_m, "AddBlock", _param0)
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) AddBlock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlock", arg0)
}

func (_m *MockDatabaseSeriesBlocks) AddSeries(_param0 m3db.DatabaseSeriesBlocks) {
	_m.ctrl.Call(_m, "AddSeries", _param0)
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) AddSeries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddSeries", arg0)
}

func (_m *MockDatabaseSeriesBlocks) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDatabaseSeriesBlocks) GetAllBlocks() map[time.Time]m3db.DatabaseBlock {
	ret := _m.ctrl.Call(_m, "GetAllBlocks")
	ret0, _ := ret[0].(map[time.Time]m3db.DatabaseBlock)
	return ret0
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) GetAllBlocks() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllBlocks")
}

func (_m *MockDatabaseSeriesBlocks) GetBlockAt(_param0 time.Time) (m3db.DatabaseBlock, bool) {
	ret := _m.ctrl.Call(_m, "GetBlockAt", _param0)
	ret0, _ := ret[0].(m3db.DatabaseBlock)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) GetBlockAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockAt", arg0)
}

func (_m *MockDatabaseSeriesBlocks) GetBlockOrAdd(_param0 time.Time) m3db.DatabaseBlock {
	ret := _m.ctrl.Call(_m, "GetBlockOrAdd", _param0)
	ret0, _ := ret[0].(m3db.DatabaseBlock)
	return ret0
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) GetBlockOrAdd(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockOrAdd", arg0)
}

func (_m *MockDatabaseSeriesBlocks) GetMaxTime() time.Time {
	ret := _m.ctrl.Call(_m, "GetMaxTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) GetMaxTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxTime")
}

func (_m *MockDatabaseSeriesBlocks) GetMinTime() time.Time {
	ret := _m.ctrl.Call(_m, "GetMinTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) GetMinTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMinTime")
}

func (_m *MockDatabaseSeriesBlocks) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Len")
}

func (_m *MockDatabaseSeriesBlocks) RemoveBlockAt(_param0 time.Time) {
	_m.ctrl.Call(_m, "RemoveBlockAt", _param0)
}

func (_mr *_MockDatabaseSeriesBlocksRecorder) RemoveBlockAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockAt", arg0)
}
