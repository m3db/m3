// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/interfaces/m3db (interfaces: PersistenceManager)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time "time"
)

// Mock of PersistenceManager interface
type MockPersistenceManager struct {
	ctrl     *gomock.Controller
	recorder *_MockPersistenceManagerRecorder
}

// Recorder for MockPersistenceManager (not exported)
type _MockPersistenceManagerRecorder struct {
	mock *MockPersistenceManager
}

func NewMockPersistenceManager(ctrl *gomock.Controller) *MockPersistenceManager {
	mock := &MockPersistenceManager{ctrl: ctrl}
	mock.recorder = &_MockPersistenceManagerRecorder{mock}
	return mock
}

func (_m *MockPersistenceManager) EXPECT() *_MockPersistenceManagerRecorder {
	return _m.recorder
}

func (_m *MockPersistenceManager) Prepare(_param0 uint32, _param1 time.Time) (m3db.PreparedPersistence, error) {
	ret := _m.ctrl.Call(_m, "Prepare", _param0, _param1)
	ret0, _ := ret[0].(m3db.PreparedPersistence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPersistenceManagerRecorder) Prepare(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prepare", arg0, arg1)
}
