// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: /Users/r/go/src/github.com/m3db/m3db/persist/fs/commitlog/writer.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	time0 "github.com/m3db/m3x/time"
	time "time"
)

// Mock of commitLogWriter interface
type MockcommitLogWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockcommitLogWriterRecorder
}

// Recorder for MockcommitLogWriter (not exported)
type _MockcommitLogWriterRecorder struct {
	mock *MockcommitLogWriter
}

func NewMockcommitLogWriter(ctrl *gomock.Controller) *MockcommitLogWriter {
	mock := &MockcommitLogWriter{ctrl: ctrl}
	mock.recorder = &_MockcommitLogWriterRecorder{mock}
	return mock
}

func (_m *MockcommitLogWriter) EXPECT() *_MockcommitLogWriterRecorder {
	return _m.recorder
}

func (_m *MockcommitLogWriter) Open(start time.Time, duration time.Duration) error {
	ret := _m.ctrl.Call(_m, "Open", start, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcommitLogWriterRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

func (_m *MockcommitLogWriter) IsOpen() bool {
	ret := _m.ctrl.Call(_m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockcommitLogWriterRecorder) IsOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpen")
}

func (_m *MockcommitLogWriter) Write(series m3db.CommitLogSeries, datapoint m3db.Datapoint, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", series, datapoint, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcommitLogWriterRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockcommitLogWriter) Flush() error {
	ret := _m.ctrl.Call(_m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcommitLogWriterRecorder) Flush() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flush")
}

func (_m *MockcommitLogWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcommitLogWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
