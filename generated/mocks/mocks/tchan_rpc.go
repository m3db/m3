// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/generated/thrift/rpc (interfaces: TChanCluster,TChanNode)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/m3db/m3db/generated/thrift/rpc"
	thrift "github.com/uber/tchannel-go/thrift"
)

// Mock of TChanCluster interface
type MockTChanCluster struct {
	ctrl     *gomock.Controller
	recorder *_MockTChanClusterRecorder
}

// Recorder for MockTChanCluster (not exported)
type _MockTChanClusterRecorder struct {
	mock *MockTChanCluster
}

func NewMockTChanCluster(ctrl *gomock.Controller) *MockTChanCluster {
	mock := &MockTChanCluster{ctrl: ctrl}
	mock.recorder = &_MockTChanClusterRecorder{mock}
	return mock
}

func (_m *MockTChanCluster) EXPECT() *_MockTChanClusterRecorder {
	return _m.recorder
}

func (_m *MockTChanCluster) Fetch(_param0 thrift.Context, _param1 *rpc.FetchRequest) (*rpc.FetchResult_, error) {
	ret := _m.ctrl.Call(_m, "Fetch", _param0, _param1)
	ret0, _ := ret[0].(*rpc.FetchResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTChanClusterRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1)
}

func (_m *MockTChanCluster) Health(_param0 thrift.Context) (*rpc.HealthResult_, error) {
	ret := _m.ctrl.Call(_m, "Health", _param0)
	ret0, _ := ret[0].(*rpc.HealthResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTChanClusterRecorder) Health(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Health", arg0)
}

func (_m *MockTChanCluster) Write(_param0 thrift.Context, _param1 *rpc.WriteRequest) error {
	ret := _m.ctrl.Call(_m, "Write", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTChanClusterRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1)
}

// Mock of TChanNode interface
type MockTChanNode struct {
	ctrl     *gomock.Controller
	recorder *_MockTChanNodeRecorder
}

// Recorder for MockTChanNode (not exported)
type _MockTChanNodeRecorder struct {
	mock *MockTChanNode
}

func NewMockTChanNode(ctrl *gomock.Controller) *MockTChanNode {
	mock := &MockTChanNode{ctrl: ctrl}
	mock.recorder = &_MockTChanNodeRecorder{mock}
	return mock
}

func (_m *MockTChanNode) EXPECT() *_MockTChanNodeRecorder {
	return _m.recorder
}

func (_m *MockTChanNode) Fetch(_param0 thrift.Context, _param1 *rpc.FetchRequest) (*rpc.FetchResult_, error) {
	ret := _m.ctrl.Call(_m, "Fetch", _param0, _param1)
	ret0, _ := ret[0].(*rpc.FetchResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTChanNodeRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1)
}

func (_m *MockTChanNode) FetchRawBatch(_param0 thrift.Context, _param1 *rpc.FetchRawBatchRequest) (*rpc.FetchRawBatchResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchRawBatch", _param0, _param1)
	ret0, _ := ret[0].(*rpc.FetchRawBatchResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTChanNodeRecorder) FetchRawBatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRawBatch", arg0, arg1)
}

func (_m *MockTChanNode) Health(_param0 thrift.Context) (*rpc.HealthResult_, error) {
	ret := _m.ctrl.Call(_m, "Health", _param0)
	ret0, _ := ret[0].(*rpc.HealthResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTChanNodeRecorder) Health(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Health", arg0)
}

func (_m *MockTChanNode) Write(_param0 thrift.Context, _param1 *rpc.WriteRequest) error {
	ret := _m.ctrl.Call(_m, "Write", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTChanNodeRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1)
}

func (_m *MockTChanNode) WriteBatch(_param0 thrift.Context, _param1 *rpc.WriteBatchRequest) error {
	ret := _m.ctrl.Call(_m, "WriteBatch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTChanNodeRecorder) WriteBatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBatch", arg0, arg1)
}
