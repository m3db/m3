// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/generated/thrift/rpc/tchan-go

package rpc

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/uber/tchannel-go/thrift"
)

// MockTChanCluster is a mock of TChanCluster interface
type MockTChanCluster struct {
	ctrl     *gomock.Controller
	recorder *MockTChanClusterMockRecorder
}

// MockTChanClusterMockRecorder is the mock recorder for MockTChanCluster
type MockTChanClusterMockRecorder struct {
	mock *MockTChanCluster
}

// NewMockTChanCluster creates a new mock instance
func NewMockTChanCluster(ctrl *gomock.Controller) *MockTChanCluster {
	mock := &MockTChanCluster{ctrl: ctrl}
	mock.recorder = &MockTChanClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTChanCluster) EXPECT() *MockTChanClusterMockRecorder {
	return _m.recorder
}

// Fetch mocks base method
func (_m *MockTChanCluster) Fetch(ctx thrift.Context, req *FetchRequest) (*FetchResult_, error) {
	ret := _m.ctrl.Call(_m, "Fetch", ctx, req)
	ret0, _ := ret[0].(*FetchResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (_mr *MockTChanClusterMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Fetch", reflect.TypeOf((*MockTChanCluster)(nil).Fetch), arg0, arg1)
}

// FetchTagged mocks base method
func (_m *MockTChanCluster) FetchTagged(ctx thrift.Context, req *FetchTaggedRequest) (*FetchTaggedResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchTagged", ctx, req)
	ret0, _ := ret[0].(*FetchTaggedResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTagged indicates an expected call of FetchTagged
func (_mr *MockTChanClusterMockRecorder) FetchTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchTagged", reflect.TypeOf((*MockTChanCluster)(nil).FetchTagged), arg0, arg1)
}

// Health mocks base method
func (_m *MockTChanCluster) Health(ctx thrift.Context) (*HealthResult_, error) {
	ret := _m.ctrl.Call(_m, "Health", ctx)
	ret0, _ := ret[0].(*HealthResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (_mr *MockTChanClusterMockRecorder) Health(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Health", reflect.TypeOf((*MockTChanCluster)(nil).Health), arg0)
}

// Truncate mocks base method
func (_m *MockTChanCluster) Truncate(ctx thrift.Context, req *TruncateRequest) (*TruncateResult_, error) {
	ret := _m.ctrl.Call(_m, "Truncate", ctx, req)
	ret0, _ := ret[0].(*TruncateResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate
func (_mr *MockTChanClusterMockRecorder) Truncate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Truncate", reflect.TypeOf((*MockTChanCluster)(nil).Truncate), arg0, arg1)
}

// Write mocks base method
func (_m *MockTChanCluster) Write(ctx thrift.Context, req *WriteRequest) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockTChanClusterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockTChanCluster)(nil).Write), arg0, arg1)
}

// WriteTagged mocks base method
func (_m *MockTChanCluster) WriteTagged(ctx thrift.Context, req *WriteTaggedRequest) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockTChanClusterMockRecorder) WriteTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*MockTChanCluster)(nil).WriteTagged), arg0, arg1)
}

// MockTChanNode is a mock of TChanNode interface
type MockTChanNode struct {
	ctrl     *gomock.Controller
	recorder *MockTChanNodeMockRecorder
}

// MockTChanNodeMockRecorder is the mock recorder for MockTChanNode
type MockTChanNodeMockRecorder struct {
	mock *MockTChanNode
}

// NewMockTChanNode creates a new mock instance
func NewMockTChanNode(ctrl *gomock.Controller) *MockTChanNode {
	mock := &MockTChanNode{ctrl: ctrl}
	mock.recorder = &MockTChanNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTChanNode) EXPECT() *MockTChanNodeMockRecorder {
	return _m.recorder
}

// Fetch mocks base method
func (_m *MockTChanNode) Fetch(ctx thrift.Context, req *FetchRequest) (*FetchResult_, error) {
	ret := _m.ctrl.Call(_m, "Fetch", ctx, req)
	ret0, _ := ret[0].(*FetchResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (_mr *MockTChanNodeMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Fetch", reflect.TypeOf((*MockTChanNode)(nil).Fetch), arg0, arg1)
}

// FetchBatchRaw mocks base method
func (_m *MockTChanNode) FetchBatchRaw(ctx thrift.Context, req *FetchBatchRawRequest) (*FetchBatchRawResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchBatchRaw", ctx, req)
	ret0, _ := ret[0].(*FetchBatchRawResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBatchRaw indicates an expected call of FetchBatchRaw
func (_mr *MockTChanNodeMockRecorder) FetchBatchRaw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBatchRaw", reflect.TypeOf((*MockTChanNode)(nil).FetchBatchRaw), arg0, arg1)
}

// FetchBlocksMetadataRaw mocks base method
func (_m *MockTChanNode) FetchBlocksMetadataRaw(ctx thrift.Context, req *FetchBlocksMetadataRawRequest) (*FetchBlocksMetadataRawResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataRaw", ctx, req)
	ret0, _ := ret[0].(*FetchBlocksMetadataRawResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocksMetadataRaw indicates an expected call of FetchBlocksMetadataRaw
func (_mr *MockTChanNodeMockRecorder) FetchBlocksMetadataRaw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataRaw", reflect.TypeOf((*MockTChanNode)(nil).FetchBlocksMetadataRaw), arg0, arg1)
}

// FetchBlocksMetadataRawV2 mocks base method
func (_m *MockTChanNode) FetchBlocksMetadataRawV2(ctx thrift.Context, req *FetchBlocksMetadataRawV2Request) (*FetchBlocksMetadataRawV2Result_, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataRawV2", ctx, req)
	ret0, _ := ret[0].(*FetchBlocksMetadataRawV2Result_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocksMetadataRawV2 indicates an expected call of FetchBlocksMetadataRawV2
func (_mr *MockTChanNodeMockRecorder) FetchBlocksMetadataRawV2(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataRawV2", reflect.TypeOf((*MockTChanNode)(nil).FetchBlocksMetadataRawV2), arg0, arg1)
}

// FetchBlocksRaw mocks base method
func (_m *MockTChanNode) FetchBlocksRaw(ctx thrift.Context, req *FetchBlocksRawRequest) (*FetchBlocksRawResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksRaw", ctx, req)
	ret0, _ := ret[0].(*FetchBlocksRawResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocksRaw indicates an expected call of FetchBlocksRaw
func (_mr *MockTChanNodeMockRecorder) FetchBlocksRaw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksRaw", reflect.TypeOf((*MockTChanNode)(nil).FetchBlocksRaw), arg0, arg1)
}

// FetchTagged mocks base method
func (_m *MockTChanNode) FetchTagged(ctx thrift.Context, req *FetchTaggedRequest) (*FetchTaggedResult_, error) {
	ret := _m.ctrl.Call(_m, "FetchTagged", ctx, req)
	ret0, _ := ret[0].(*FetchTaggedResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTagged indicates an expected call of FetchTagged
func (_mr *MockTChanNodeMockRecorder) FetchTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchTagged", reflect.TypeOf((*MockTChanNode)(nil).FetchTagged), arg0, arg1)
}

// GetPersistRateLimit mocks base method
func (_m *MockTChanNode) GetPersistRateLimit(ctx thrift.Context) (*NodePersistRateLimitResult_, error) {
	ret := _m.ctrl.Call(_m, "GetPersistRateLimit", ctx)
	ret0, _ := ret[0].(*NodePersistRateLimitResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistRateLimit indicates an expected call of GetPersistRateLimit
func (_mr *MockTChanNodeMockRecorder) GetPersistRateLimit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPersistRateLimit", reflect.TypeOf((*MockTChanNode)(nil).GetPersistRateLimit), arg0)
}

// GetWriteNewSeriesAsync mocks base method
func (_m *MockTChanNode) GetWriteNewSeriesAsync(ctx thrift.Context) (*NodeWriteNewSeriesAsyncResult_, error) {
	ret := _m.ctrl.Call(_m, "GetWriteNewSeriesAsync", ctx)
	ret0, _ := ret[0].(*NodeWriteNewSeriesAsyncResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteNewSeriesAsync indicates an expected call of GetWriteNewSeriesAsync
func (_mr *MockTChanNodeMockRecorder) GetWriteNewSeriesAsync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetWriteNewSeriesAsync", reflect.TypeOf((*MockTChanNode)(nil).GetWriteNewSeriesAsync), arg0)
}

// GetWriteNewSeriesBackoffDuration mocks base method
func (_m *MockTChanNode) GetWriteNewSeriesBackoffDuration(ctx thrift.Context) (*NodeWriteNewSeriesBackoffDurationResult_, error) {
	ret := _m.ctrl.Call(_m, "GetWriteNewSeriesBackoffDuration", ctx)
	ret0, _ := ret[0].(*NodeWriteNewSeriesBackoffDurationResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteNewSeriesBackoffDuration indicates an expected call of GetWriteNewSeriesBackoffDuration
func (_mr *MockTChanNodeMockRecorder) GetWriteNewSeriesBackoffDuration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetWriteNewSeriesBackoffDuration", reflect.TypeOf((*MockTChanNode)(nil).GetWriteNewSeriesBackoffDuration), arg0)
}

// GetWriteNewSeriesLimitPerShardPerSecond mocks base method
func (_m *MockTChanNode) GetWriteNewSeriesLimitPerShardPerSecond(ctx thrift.Context) (*NodeWriteNewSeriesLimitPerShardPerSecondResult_, error) {
	ret := _m.ctrl.Call(_m, "GetWriteNewSeriesLimitPerShardPerSecond", ctx)
	ret0, _ := ret[0].(*NodeWriteNewSeriesLimitPerShardPerSecondResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteNewSeriesLimitPerShardPerSecond indicates an expected call of GetWriteNewSeriesLimitPerShardPerSecond
func (_mr *MockTChanNodeMockRecorder) GetWriteNewSeriesLimitPerShardPerSecond(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetWriteNewSeriesLimitPerShardPerSecond", reflect.TypeOf((*MockTChanNode)(nil).GetWriteNewSeriesLimitPerShardPerSecond), arg0)
}

// Health mocks base method
func (_m *MockTChanNode) Health(ctx thrift.Context) (*NodeHealthResult_, error) {
	ret := _m.ctrl.Call(_m, "Health", ctx)
	ret0, _ := ret[0].(*NodeHealthResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (_mr *MockTChanNodeMockRecorder) Health(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Health", reflect.TypeOf((*MockTChanNode)(nil).Health), arg0)
}

// Repair mocks base method
func (_m *MockTChanNode) Repair(ctx thrift.Context) error {
	ret := _m.ctrl.Call(_m, "Repair", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockTChanNodeMockRecorder) Repair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockTChanNode)(nil).Repair), arg0)
}

// SetPersistRateLimit mocks base method
func (_m *MockTChanNode) SetPersistRateLimit(ctx thrift.Context, req *NodeSetPersistRateLimitRequest) (*NodePersistRateLimitResult_, error) {
	ret := _m.ctrl.Call(_m, "SetPersistRateLimit", ctx, req)
	ret0, _ := ret[0].(*NodePersistRateLimitResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPersistRateLimit indicates an expected call of SetPersistRateLimit
func (_mr *MockTChanNodeMockRecorder) SetPersistRateLimit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPersistRateLimit", reflect.TypeOf((*MockTChanNode)(nil).SetPersistRateLimit), arg0, arg1)
}

// SetWriteNewSeriesAsync mocks base method
func (_m *MockTChanNode) SetWriteNewSeriesAsync(ctx thrift.Context, req *NodeSetWriteNewSeriesAsyncRequest) (*NodeWriteNewSeriesAsyncResult_, error) {
	ret := _m.ctrl.Call(_m, "SetWriteNewSeriesAsync", ctx, req)
	ret0, _ := ret[0].(*NodeWriteNewSeriesAsyncResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWriteNewSeriesAsync indicates an expected call of SetWriteNewSeriesAsync
func (_mr *MockTChanNodeMockRecorder) SetWriteNewSeriesAsync(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWriteNewSeriesAsync", reflect.TypeOf((*MockTChanNode)(nil).SetWriteNewSeriesAsync), arg0, arg1)
}

// SetWriteNewSeriesBackoffDuration mocks base method
func (_m *MockTChanNode) SetWriteNewSeriesBackoffDuration(ctx thrift.Context, req *NodeSetWriteNewSeriesBackoffDurationRequest) (*NodeWriteNewSeriesBackoffDurationResult_, error) {
	ret := _m.ctrl.Call(_m, "SetWriteNewSeriesBackoffDuration", ctx, req)
	ret0, _ := ret[0].(*NodeWriteNewSeriesBackoffDurationResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWriteNewSeriesBackoffDuration indicates an expected call of SetWriteNewSeriesBackoffDuration
func (_mr *MockTChanNodeMockRecorder) SetWriteNewSeriesBackoffDuration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWriteNewSeriesBackoffDuration", reflect.TypeOf((*MockTChanNode)(nil).SetWriteNewSeriesBackoffDuration), arg0, arg1)
}

// SetWriteNewSeriesLimitPerShardPerSecond mocks base method
func (_m *MockTChanNode) SetWriteNewSeriesLimitPerShardPerSecond(ctx thrift.Context, req *NodeSetWriteNewSeriesLimitPerShardPerSecondRequest) (*NodeWriteNewSeriesLimitPerShardPerSecondResult_, error) {
	ret := _m.ctrl.Call(_m, "SetWriteNewSeriesLimitPerShardPerSecond", ctx, req)
	ret0, _ := ret[0].(*NodeWriteNewSeriesLimitPerShardPerSecondResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWriteNewSeriesLimitPerShardPerSecond indicates an expected call of SetWriteNewSeriesLimitPerShardPerSecond
func (_mr *MockTChanNodeMockRecorder) SetWriteNewSeriesLimitPerShardPerSecond(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWriteNewSeriesLimitPerShardPerSecond", reflect.TypeOf((*MockTChanNode)(nil).SetWriteNewSeriesLimitPerShardPerSecond), arg0, arg1)
}

// Truncate mocks base method
func (_m *MockTChanNode) Truncate(ctx thrift.Context, req *TruncateRequest) (*TruncateResult_, error) {
	ret := _m.ctrl.Call(_m, "Truncate", ctx, req)
	ret0, _ := ret[0].(*TruncateResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate
func (_mr *MockTChanNodeMockRecorder) Truncate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Truncate", reflect.TypeOf((*MockTChanNode)(nil).Truncate), arg0, arg1)
}

// Write mocks base method
func (_m *MockTChanNode) Write(ctx thrift.Context, req *WriteRequest) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockTChanNodeMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockTChanNode)(nil).Write), arg0, arg1)
}

// WriteBatchRaw mocks base method
func (_m *MockTChanNode) WriteBatchRaw(ctx thrift.Context, req *WriteBatchRawRequest) error {
	ret := _m.ctrl.Call(_m, "WriteBatchRaw", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBatchRaw indicates an expected call of WriteBatchRaw
func (_mr *MockTChanNodeMockRecorder) WriteBatchRaw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteBatchRaw", reflect.TypeOf((*MockTChanNode)(nil).WriteBatchRaw), arg0, arg1)
}

// WriteTagged mocks base method
func (_m *MockTChanNode) WriteTagged(ctx thrift.Context, req *WriteTaggedRequest) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockTChanNodeMockRecorder) WriteTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*MockTChanNode)(nil).WriteTagged), arg0, arg1)
}

// WriteTaggedBatchRaw mocks base method
func (_m *MockTChanNode) WriteTaggedBatchRaw(ctx thrift.Context, req *WriteTaggedBatchRawRequest) error {
	ret := _m.ctrl.Call(_m, "WriteTaggedBatchRaw", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTaggedBatchRaw indicates an expected call of WriteTaggedBatchRaw
func (_mr *MockTChanNodeMockRecorder) WriteTaggedBatchRaw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTaggedBatchRaw", reflect.TypeOf((*MockTChanNode)(nil).WriteTaggedBatchRaw), arg0, arg1)
}
