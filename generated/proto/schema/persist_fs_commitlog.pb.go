// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: persist_fs_commitlog.proto
// DO NOT EDIT!

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommitLogInfo struct {
	Start    int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Duration int64 `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Index    int64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *CommitLogInfo) Reset()                    { *m = CommitLogInfo{} }
func (m *CommitLogInfo) String() string            { return proto.CompactTextString(m) }
func (*CommitLogInfo) ProtoMessage()               {}
func (*CommitLogInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CommitLog struct {
	Created    int64   `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Idx        uint64  `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Metadata   []byte  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Timestamp  int64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Value      float64 `protobuf:"fixed64,5,opt,name=value" json:"value,omitempty"`
	Unit       uint32  `protobuf:"varint,6,opt,name=unit" json:"unit,omitempty"`
	Annotation []byte  `protobuf:"bytes,7,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (m *CommitLog) Reset()                    { *m = CommitLog{} }
func (m *CommitLog) String() string            { return proto.CompactTextString(m) }
func (*CommitLog) ProtoMessage()               {}
func (*CommitLog) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type CommitLogMetadata struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Shard uint32 `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *CommitLogMetadata) Reset()                    { *m = CommitLogMetadata{} }
func (m *CommitLogMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommitLogMetadata) ProtoMessage()               {}
func (*CommitLogMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*CommitLogInfo)(nil), "schema.CommitLogInfo")
	proto.RegisterType((*CommitLog)(nil), "schema.CommitLog")
	proto.RegisterType((*CommitLogMetadata)(nil), "schema.CommitLogMetadata")
}

var fileDescriptor1 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0x26, 0x4d, 0xc9, 0x89, 0x20, 0xb0, 0x18, 0xac, 0x0a, 0x21, 0x94, 0x89, 0x89,
	0x85, 0x89, 0x99, 0x09, 0x09, 0x16, 0x2f, 0x8c, 0xd5, 0x11, 0xbb, 0xad, 0xa5, 0xda, 0x8e, 0x9c,
	0x0b, 0xea, 0x7f, 0xe3, 0xcf, 0x91, 0x9c, 0x69, 0xe8, 0x76, 0xdf, 0x3d, 0xf9, 0xbd, 0xe7, 0x83,
	0x75, 0x67, 0x62, 0x6f, 0x7b, 0xda, 0x6c, 0xfb, 0x4d, 0x1b, 0x9c, 0xb3, 0x74, 0x08, 0xbb, 0xa7,
	0x2e, 0x06, 0x0a, 0xa2, 0xec, 0xdb, 0xbd, 0x71, 0xd8, 0x7c, 0x42, 0xfd, 0xca, 0xd2, 0x7b, 0xd8,
	0xbd, 0xf9, 0x6d, 0x10, 0xb7, 0xb0, 0xec, 0x09, 0x23, 0xc9, 0xec, 0x21, 0x7b, 0xcc, 0x55, 0x02,
	0xb1, 0x86, 0x0b, 0x3d, 0x44, 0x24, 0x1b, 0xbc, 0x5c, 0xb0, 0x30, 0xf3, 0xf4, 0xc2, 0x7a, 0x6d,
	0x8e, 0x32, 0x4f, 0x2f, 0x18, 0x9a, 0x9f, 0x0c, 0xaa, 0xd9, 0x59, 0x48, 0x58, 0xb5, 0xd1, 0x20,
	0x19, 0xfd, 0xe7, 0x7b, 0x42, 0x71, 0x0d, 0xb9, 0xd5, 0x47, 0x36, 0x2d, 0xd4, 0x34, 0x4e, 0x59,
	0xce, 0x10, 0x6a, 0x24, 0x64, 0xcb, 0x4b, 0x35, 0xb3, 0xb8, 0x83, 0x8a, 0xac, 0x33, 0x63, 0x29,
	0xd7, 0xc9, 0x82, 0x9d, 0xfe, 0x17, 0x53, 0x93, 0x6f, 0x3c, 0x0c, 0x46, 0x2e, 0x47, 0x25, 0x53,
	0x09, 0x84, 0x80, 0x62, 0xf0, 0x96, 0x64, 0x39, 0x2e, 0x6b, 0xc5, 0xb3, 0xb8, 0x07, 0x40, 0xef,
	0x03, 0xa5, 0x1f, 0xad, 0x38, 0xe5, 0x6c, 0xd3, 0xbc, 0xc0, 0xcd, 0x5c, 0xfe, 0xe3, 0x14, 0x7e,
	0x05, 0x0b, 0x9b, 0xfa, 0x57, 0x6a, 0x9c, 0xf8, 0x54, 0x7b, 0x8c, 0x9a, 0xcb, 0xd7, 0x2a, 0xc1,
	0x57, 0xc9, 0x07, 0x7e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x95, 0xe7, 0xbc, 0x7e, 0x01,
	0x00, 0x00,
}
