// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: index.proto

/*
	Package index is a generated protocol buffer package.

	It is generated from these files:
		index.proto

	It has these top-level messages:
		IndexInfo
		IndexDigests
*/
package index

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IndexInfo struct {
	MajorVersion int64                    `protobuf:"varint,1,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	BlockStart   int64                    `protobuf:"varint,2,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockSize    int64                    `protobuf:"varint,3,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
	SnapshotTime int64                    `protobuf:"varint,4,opt,name=snapshotTime,proto3" json:"snapshotTime,omitempty"`
	FileType     int64                    `protobuf:"varint,5,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Segments     []*IndexInfo_SegmentInfo `protobuf:"bytes,6,rep,name=segments" json:"segments,omitempty"`
}

func (m *IndexInfo) Reset()                    { *m = IndexInfo{} }
func (m *IndexInfo) String() string            { return proto.CompactTextString(m) }
func (*IndexInfo) ProtoMessage()               {}
func (*IndexInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{0} }

func (m *IndexInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *IndexInfo) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *IndexInfo) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IndexInfo) GetSnapshotTime() int64 {
	if m != nil {
		return m.SnapshotTime
	}
	return 0
}

func (m *IndexInfo) GetFileType() int64 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *IndexInfo) GetSegments() []*IndexInfo_SegmentInfo {
	if m != nil {
		return m.Segments
	}
	return nil
}

type IndexInfo_SegmentFileInfo struct {
	FileType string `protobuf:"bytes,1,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (m *IndexInfo_SegmentFileInfo) Reset()         { *m = IndexInfo_SegmentFileInfo{} }
func (m *IndexInfo_SegmentFileInfo) String() string { return proto.CompactTextString(m) }
func (*IndexInfo_SegmentFileInfo) ProtoMessage()    {}
func (*IndexInfo_SegmentFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorIndex, []int{0, 0}
}

func (m *IndexInfo_SegmentFileInfo) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

type IndexInfo_SegmentInfo struct {
	Type         string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	MajorVersion int64                        `protobuf:"varint,2,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	MinorVersion int64                        `protobuf:"varint,3,opt,name=minorVersion,proto3" json:"minorVersion,omitempty"`
	Metadata     []byte                       `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Files        []*IndexInfo_SegmentFileInfo `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"`
}

func (m *IndexInfo_SegmentInfo) Reset()                    { *m = IndexInfo_SegmentInfo{} }
func (m *IndexInfo_SegmentInfo) String() string            { return proto.CompactTextString(m) }
func (*IndexInfo_SegmentInfo) ProtoMessage()               {}
func (*IndexInfo_SegmentInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{0, 1} }

func (m *IndexInfo_SegmentInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IndexInfo_SegmentInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *IndexInfo_SegmentInfo) GetMinorVersion() int64 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *IndexInfo_SegmentInfo) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *IndexInfo_SegmentInfo) GetFiles() []*IndexInfo_SegmentFileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type IndexDigests struct {
	InfoDigest     uint32                        `protobuf:"varint,1,opt,name=infoDigest,proto3" json:"infoDigest,omitempty"`
	SegmentDigests []*IndexDigests_SegmentDigest `protobuf:"bytes,2,rep,name=segmentDigests" json:"segmentDigests,omitempty"`
}

func (m *IndexDigests) Reset()                    { *m = IndexDigests{} }
func (m *IndexDigests) String() string            { return proto.CompactTextString(m) }
func (*IndexDigests) ProtoMessage()               {}
func (*IndexDigests) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{1} }

func (m *IndexDigests) GetInfoDigest() uint32 {
	if m != nil {
		return m.InfoDigest
	}
	return 0
}

func (m *IndexDigests) GetSegmentDigests() []*IndexDigests_SegmentDigest {
	if m != nil {
		return m.SegmentDigests
	}
	return nil
}

type IndexDigests_SegmentFileDigest struct {
	FileType string `protobuf:"bytes,1,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Digest   uint32 `protobuf:"varint,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *IndexDigests_SegmentFileDigest) Reset()         { *m = IndexDigests_SegmentFileDigest{} }
func (m *IndexDigests_SegmentFileDigest) String() string { return proto.CompactTextString(m) }
func (*IndexDigests_SegmentFileDigest) ProtoMessage()    {}
func (*IndexDigests_SegmentFileDigest) Descriptor() ([]byte, []int) {
	return fileDescriptorIndex, []int{1, 0}
}

func (m *IndexDigests_SegmentFileDigest) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *IndexDigests_SegmentFileDigest) GetDigest() uint32 {
	if m != nil {
		return m.Digest
	}
	return 0
}

type IndexDigests_SegmentDigest struct {
	Type  string                            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Files []*IndexDigests_SegmentFileDigest `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *IndexDigests_SegmentDigest) Reset()         { *m = IndexDigests_SegmentDigest{} }
func (m *IndexDigests_SegmentDigest) String() string { return proto.CompactTextString(m) }
func (*IndexDigests_SegmentDigest) ProtoMessage()    {}
func (*IndexDigests_SegmentDigest) Descriptor() ([]byte, []int) {
	return fileDescriptorIndex, []int{1, 1}
}

func (m *IndexDigests_SegmentDigest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IndexDigests_SegmentDigest) GetFiles() []*IndexDigests_SegmentFileDigest {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexInfo)(nil), "index.IndexInfo")
	proto.RegisterType((*IndexInfo_SegmentFileInfo)(nil), "index.IndexInfo.SegmentFileInfo")
	proto.RegisterType((*IndexInfo_SegmentInfo)(nil), "index.IndexInfo.SegmentInfo")
	proto.RegisterType((*IndexDigests)(nil), "index.IndexDigests")
	proto.RegisterType((*IndexDigests_SegmentFileDigest)(nil), "index.IndexDigests.SegmentFileDigest")
	proto.RegisterType((*IndexDigests_SegmentDigest)(nil), "index.IndexDigests.SegmentDigest")
}
func (m *IndexInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MajorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
	}
	if m.BlockStart != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockStart))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockSize))
	}
	if m.SnapshotTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.SnapshotTime))
	}
	if m.FileType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.FileType))
	}
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IndexInfo_SegmentFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexInfo_SegmentFileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.FileType)))
		i += copy(dAtA[i:], m.FileType)
	}
	return i, nil
}

func (m *IndexInfo_SegmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexInfo_SegmentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.MajorVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
	}
	if m.MinorVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MinorVersion))
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IndexDigests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDigests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InfoDigest != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.InfoDigest))
	}
	if len(m.SegmentDigests) > 0 {
		for _, msg := range m.SegmentDigests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IndexDigests_SegmentFileDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDigests_SegmentFileDigest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.FileType)))
		i += copy(dAtA[i:], m.FileType)
	}
	if m.Digest != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Digest))
	}
	return i, nil
}

func (m *IndexDigests_SegmentDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDigests_SegmentDigest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IndexInfo) Size() (n int) {
	var l int
	_ = l
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.BlockStart != 0 {
		n += 1 + sovIndex(uint64(m.BlockStart))
	}
	if m.BlockSize != 0 {
		n += 1 + sovIndex(uint64(m.BlockSize))
	}
	if m.SnapshotTime != 0 {
		n += 1 + sovIndex(uint64(m.SnapshotTime))
	}
	if m.FileType != 0 {
		n += 1 + sovIndex(uint64(m.FileType))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *IndexInfo_SegmentFileInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *IndexInfo_SegmentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.MinorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MinorVersion))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *IndexDigests) Size() (n int) {
	var l int
	_ = l
	if m.InfoDigest != 0 {
		n += 1 + sovIndex(uint64(m.InfoDigest))
	}
	if len(m.SegmentDigests) > 0 {
		for _, e := range m.SegmentDigests {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *IndexDigests_SegmentFileDigest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Digest != 0 {
		n += 1 + sovIndex(uint64(m.Digest))
	}
	return n
}

func (m *IndexDigests_SegmentDigest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func sovIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotTime", wireType)
			}
			m.SnapshotTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &IndexInfo_SegmentInfo{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexInfo_SegmentFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexInfo_SegmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &IndexInfo_SegmentFileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDigests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexDigests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexDigests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDigest", wireType)
			}
			m.InfoDigest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDigest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentDigests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentDigests = append(m.SegmentDigests, &IndexDigests_SegmentDigest{})
			if err := m.SegmentDigests[len(m.SegmentDigests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDigests_SegmentFileDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			m.Digest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDigests_SegmentDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &IndexDigests_SegmentFileDigest{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("index.proto", fileDescriptorIndex) }

var fileDescriptorIndex = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcb, 0x4e, 0xea, 0x40,
	0x18, 0x3e, 0x6d, 0x29, 0x81, 0x1f, 0x38, 0x97, 0x59, 0x9c, 0x4c, 0x1a, 0xd2, 0x20, 0x89, 0x09,
	0x1b, 0x59, 0x68, 0x62, 0x4c, 0xdc, 0x19, 0xa3, 0x61, 0x5b, 0x88, 0x6b, 0x8b, 0x0c, 0x38, 0x4a,
	0x67, 0x48, 0x67, 0x16, 0xea, 0x93, 0xf8, 0x00, 0xbe, 0x86, 0x7b, 0x97, 0xae, 0x5c, 0x1b, 0x7c,
	0x11, 0x33, 0x17, 0xda, 0x41, 0x91, 0xdd, 0x7c, 0xff, 0xff, 0x75, 0xbe, 0xcb, 0xa4, 0xd0, 0xa0,
	0x6c, 0x42, 0xee, 0xfa, 0x8b, 0x9c, 0x4b, 0x8e, 0x42, 0x0d, 0xba, 0x6f, 0x01, 0xd4, 0x07, 0xea,
	0x34, 0x60, 0x53, 0x8e, 0xba, 0xd0, 0xcc, 0xd2, 0x1b, 0x9e, 0x5f, 0x90, 0x5c, 0x50, 0xce, 0xb0,
	0xd7, 0xf1, 0x7a, 0x41, 0xb2, 0x36, 0x43, 0x31, 0xc0, 0x78, 0xce, 0xaf, 0x6e, 0x87, 0x32, 0xcd,
	0x25, 0xf6, 0x35, 0xc3, 0x99, 0xa0, 0x36, 0xd4, 0x0d, 0xa2, 0x0f, 0x04, 0x07, 0x7a, 0x5d, 0x0e,
	0x94, 0x82, 0x60, 0xe9, 0x42, 0x5c, 0x73, 0x39, 0xa2, 0x19, 0xc1, 0x15, 0xa3, 0xe0, 0xce, 0x50,
	0x04, 0xb5, 0x29, 0x9d, 0x93, 0xd1, 0xfd, 0x82, 0xe0, 0x50, 0xef, 0x0b, 0x8c, 0x8e, 0xa0, 0x26,
	0xc8, 0x2c, 0x23, 0x4c, 0x0a, 0x5c, 0xed, 0x04, 0xbd, 0xc6, 0x7e, 0xbb, 0x6f, 0x62, 0x15, 0x29,
	0xfa, 0x43, 0x43, 0x50, 0xe7, 0xa4, 0x60, 0x47, 0x7b, 0xf0, 0xc7, 0x2e, 0xce, 0xe8, 0x9c, 0xe8,
	0xb8, 0xae, 0x90, 0x8a, 0x5a, 0x2f, 0x85, 0xa2, 0x67, 0x0f, 0x1a, 0xce, 0x45, 0x08, 0x41, 0x45,
	0x96, 0x3c, 0x7d, 0xfe, 0x56, 0x97, 0xbf, 0xa1, 0x2e, 0xc5, 0xa1, 0xac, 0xe4, 0x04, 0x96, 0xe3,
	0xcc, 0x94, 0x8f, 0x8c, 0xc8, 0x74, 0x92, 0xca, 0x54, 0x17, 0xd2, 0x4c, 0x0a, 0x8c, 0x0e, 0x21,
	0x54, 0x9e, 0x04, 0x0e, 0x75, 0xda, 0xce, 0x4f, 0x69, 0x57, 0xa1, 0x12, 0x43, 0xef, 0x3e, 0xf9,
	0xd0, 0xd4, 0xa4, 0x53, 0x3a, 0x23, 0x42, 0x0a, 0xf5, 0x6e, 0x94, 0x4d, 0xb9, 0x81, 0x3a, 0x46,
	0x2b, 0x71, 0x26, 0x68, 0x00, 0xbf, 0x6d, 0x57, 0xf6, 0x0b, 0xec, 0x6b, 0xc5, 0x1d, 0x57, 0xd1,
	0xae, 0x56, 0xa2, 0x06, 0x26, 0x5f, 0x3e, 0x8c, 0xce, 0xe1, 0x9f, 0xe3, 0xca, 0xde, 0xbf, 0xa5,
	0x6c, 0xf4, 0x1f, 0xaa, 0x13, 0xe3, 0xcb, 0xd7, 0xbe, 0x2c, 0x8a, 0x2e, 0xa1, 0xb5, 0xa6, 0xb4,
	0xf1, 0x15, 0x8e, 0x57, 0x0d, 0x19, 0xbf, 0xbb, 0x5b, 0xfc, 0x96, 0x76, 0x6c, 0x4d, 0x27, 0x7f,
	0x5f, 0x96, 0xb1, 0xf7, 0xba, 0x8c, 0xbd, 0xf7, 0x65, 0xec, 0x3d, 0x7e, 0xc4, 0xbf, 0xc6, 0x55,
	0xfd, 0x7f, 0x1c, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xb7, 0x4a, 0x4c, 0x2e, 0x03, 0x00,
	0x00,
}
