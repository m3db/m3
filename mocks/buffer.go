// Automatically generated by MockGen. DO NOT EDIT!
// Source: buffer.go

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	io "io"
	time "time"

	m3db "github.com/m3db/m3db/interfaces/m3db"
	time0 "github.com/m3db/m3db/x/time"

	gomock "github.com/golang/mock/gomock"
)

// Mock of databaseBuffer interface
type MockdatabaseBuffer struct {
	ctrl     *gomock.Controller
	recorder *_MockdatabaseBufferRecorder
}

// Recorder for MockdatabaseBuffer (not exported)
type _MockdatabaseBufferRecorder struct {
	mock *MockdatabaseBuffer
}

func NewMockdatabaseBuffer(ctrl *gomock.Controller) *MockdatabaseBuffer {
	mock := &MockdatabaseBuffer{ctrl: ctrl}
	mock.recorder = &_MockdatabaseBufferRecorder{mock}
	return mock
}

func (_m *MockdatabaseBuffer) EXPECT() *_MockdatabaseBufferRecorder {
	return _m.recorder
}

func (_m *MockdatabaseBuffer) Write(ctx m3db.Context, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockdatabaseBufferRecorder) Write(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockdatabaseBuffer) ReadEncoded(ctx m3db.Context, start time.Time, end time.Time) []io.Reader {
	ret := _m.ctrl.Call(_m, "ReadEncoded", ctx, start, end)
	ret0, _ := ret[0].([]io.Reader)
	return ret0
}

func (_mr *_MockdatabaseBufferRecorder) ReadEncoded(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadEncoded", arg0, arg1, arg2)
}

func (_m *MockdatabaseBuffer) Empty() bool {
	ret := _m.ctrl.Call(_m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockdatabaseBufferRecorder) Empty() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Empty")
}

func (_m *MockdatabaseBuffer) NeedsDrain() bool {
	ret := _m.ctrl.Call(_m, "NeedsDrain")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockdatabaseBufferRecorder) NeedsDrain() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NeedsDrain")
}

func (_m *MockdatabaseBuffer) DrainAndReset(forced bool) {
	_m.ctrl.Call(_m, "DrainAndReset", forced)
}

func (_mr *_MockdatabaseBufferRecorder) DrainAndReset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DrainAndReset", arg0)
}
