// Automatically generated by MockGen. DO NOT EDIT!
// Source: fs.go

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	time0 "time"

	gomock "github.com/golang/mock/gomock"
	time "github.com/m3db/m3db/x/time"
)

// Mock of FileWriter interface
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockFileWriterRecorder
}

// Recorder for MockFileWriter (not exported)
type _MockFileWriterRecorder struct {
	mock *MockFileWriter
}

func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &_MockFileWriterRecorder{mock}
	return mock
}

func (_m *MockFileWriter) EXPECT() *_MockFileWriterRecorder {
	return _m.recorder
}

func (_m *MockFileWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFileWriter) Open(shard uint32, start time0.Time) error {
	ret := _m.ctrl.Call(_m, "Open", shard, start)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileWriterRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

func (_m *MockFileWriter) Write(key string, data []byte) error {
	ret := _m.ctrl.Call(_m, "Write", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileWriterRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1)
}

func (_m *MockFileWriter) WriteAll(key string, data [][]byte) error {
	ret := _m.ctrl.Call(_m, "WriteAll", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileWriterRecorder) WriteAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteAll", arg0, arg1)
}

// Mock of FileReader interface
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *_MockFileReaderRecorder
}

// Recorder for MockFileReader (not exported)
type _MockFileReaderRecorder struct {
	mock *MockFileReader
}

func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &_MockFileReaderRecorder{mock}
	return mock
}

func (_m *MockFileReader) EXPECT() *_MockFileReaderRecorder {
	return _m.recorder
}

func (_m *MockFileReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileReaderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFileReader) Open(shard uint32, start time0.Time) error {
	ret := _m.ctrl.Call(_m, "Open", shard, start)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileReaderRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

func (_m *MockFileReader) Read() (string, []byte, error) {
	ret := _m.ctrl.Call(_m, "Read")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockFileReaderRecorder) Read() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read")
}

func (_m *MockFileReader) Range() time.Range {
	ret := _m.ctrl.Call(_m, "Range")
	ret0, _ := ret[0].(time.Range)
	return ret0
}

func (_mr *_MockFileReaderRecorder) Range() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Range")
}

func (_m *MockFileReader) Entries() int {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockFileReaderRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Entries")
}

func (_m *MockFileReader) EntriesRead() int {
	ret := _m.ctrl.Call(_m, "EntriesRead")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockFileReaderRecorder) EntriesRead() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EntriesRead")
}
