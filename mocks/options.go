// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/interfaces/m3db (interfaces: DatabaseOptions)

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	m3db "github.com/m3db/m3db/interfaces/m3db"
	logging "github.com/m3db/m3db/x/logging"
	metrics "github.com/m3db/m3db/x/metrics"
	tchannel_go "github.com/uber/tchannel-go"
)

// Mock of DatabaseOptions interface
type MockDatabaseOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseOptionsRecorder
}

// Recorder for MockDatabaseOptions (not exported)
type _MockDatabaseOptionsRecorder struct {
	mock *MockDatabaseOptions
}

func NewMockDatabaseOptions(ctrl *gomock.Controller) *MockDatabaseOptions {
	mock := &MockDatabaseOptions{ctrl: ctrl}
	mock.recorder = &_MockDatabaseOptionsRecorder{mock}
	return mock
}

func (_m *MockDatabaseOptions) EXPECT() *_MockDatabaseOptionsRecorder {
	return _m.recorder
}

func (_m *MockDatabaseOptions) BlockSize(_param0 time.Duration) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BlockSize", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BlockSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSize", arg0)
}

func (_m *MockDatabaseOptions) BufferBucketAllocSize(_param0 int) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BufferBucketAllocSize", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BufferBucketAllocSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferBucketAllocSize", arg0)
}

func (_m *MockDatabaseOptions) BufferDrain(_param0 time.Duration) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BufferDrain", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BufferDrain(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferDrain", arg0)
}

func (_m *MockDatabaseOptions) BufferFuture(_param0 time.Duration) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BufferFuture", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BufferFuture(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferFuture", arg0)
}

func (_m *MockDatabaseOptions) BufferPast(_param0 time.Duration) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BufferPast", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BufferPast(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferPast", arg0)
}

func (_m *MockDatabaseOptions) BytesPool(_param0 m3db.BytesPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "BytesPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) BytesPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BytesPool", arg0)
}

func (_m *MockDatabaseOptions) ContextPool(_param0 m3db.ContextPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "ContextPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) ContextPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContextPool", arg0)
}

func (_m *MockDatabaseOptions) DatabaseBlockAllocSize(_param0 int) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "DatabaseBlockAllocSize", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) DatabaseBlockAllocSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseBlockAllocSize", arg0)
}

func (_m *MockDatabaseOptions) DatabaseBlockPool(_param0 m3db.DatabaseBlockPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "DatabaseBlockPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) DatabaseBlockPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseBlockPool", arg0)
}

func (_m *MockDatabaseOptions) EncoderPool(_param0 m3db.EncoderPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "EncoderPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) EncoderPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncoderPool", arg0)
}

func (_m *MockDatabaseOptions) EncodingTsz() m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "EncodingTsz")
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) EncodingTsz() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncodingTsz")
}

func (_m *MockDatabaseOptions) EncodingTszPooled(_param0 int, _param1 int) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "EncodingTszPooled", _param0, _param1)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) EncodingTszPooled(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncodingTszPooled", arg0, arg1)
}

func (_m *MockDatabaseOptions) FilePathPrefix(_param0 string) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "FilePathPrefix", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) FilePathPrefix(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FilePathPrefix", arg0)
}

func (_m *MockDatabaseOptions) GetBlockSize() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBlockSize")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBlockSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockSize")
}

func (_m *MockDatabaseOptions) GetBootstrapFn() m3db.NewBootstrapFn {
	ret := _m.ctrl.Call(_m, "GetBootstrapFn")
	ret0, _ := ret[0].(m3db.NewBootstrapFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBootstrapFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBootstrapFn")
}

func (_m *MockDatabaseOptions) GetBufferBucketAllocSize() int {
	ret := _m.ctrl.Call(_m, "GetBufferBucketAllocSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBufferBucketAllocSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBufferBucketAllocSize")
}

func (_m *MockDatabaseOptions) GetBufferDrain() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBufferDrain")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBufferDrain() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBufferDrain")
}

func (_m *MockDatabaseOptions) GetBufferFuture() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBufferFuture")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBufferFuture() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBufferFuture")
}

func (_m *MockDatabaseOptions) GetBufferPast() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBufferPast")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBufferPast() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBufferPast")
}

func (_m *MockDatabaseOptions) GetBytesPool() m3db.BytesPool {
	ret := _m.ctrl.Call(_m, "GetBytesPool")
	ret0, _ := ret[0].(m3db.BytesPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetBytesPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBytesPool")
}

func (_m *MockDatabaseOptions) GetContextPool() m3db.ContextPool {
	ret := _m.ctrl.Call(_m, "GetContextPool")
	ret0, _ := ret[0].(m3db.ContextPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetContextPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContextPool")
}

func (_m *MockDatabaseOptions) GetDatabaseBlockAllocSize() int {
	ret := _m.ctrl.Call(_m, "GetDatabaseBlockAllocSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetDatabaseBlockAllocSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDatabaseBlockAllocSize")
}

func (_m *MockDatabaseOptions) GetDatabaseBlockPool() m3db.DatabaseBlockPool {
	ret := _m.ctrl.Call(_m, "GetDatabaseBlockPool")
	ret0, _ := ret[0].(m3db.DatabaseBlockPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetDatabaseBlockPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDatabaseBlockPool")
}

func (_m *MockDatabaseOptions) GetEncoderPool() m3db.EncoderPool {
	ret := _m.ctrl.Call(_m, "GetEncoderPool")
	ret0, _ := ret[0].(m3db.EncoderPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetEncoderPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncoderPool")
}

func (_m *MockDatabaseOptions) GetFilePathPrefix() string {
	ret := _m.ctrl.Call(_m, "GetFilePathPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetFilePathPrefix() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFilePathPrefix")
}

func (_m *MockDatabaseOptions) GetLogger() logging.Logger {
	ret := _m.ctrl.Call(_m, "GetLogger")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetLogger() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLogger")
}

func (_m *MockDatabaseOptions) GetMaxFlushRetries() int {
	ret := _m.ctrl.Call(_m, "GetMaxFlushRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetMaxFlushRetries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxFlushRetries")
}

func (_m *MockDatabaseOptions) GetMetricsScope() metrics.Scope {
	ret := _m.ctrl.Call(_m, "GetMetricsScope")
	ret0, _ := ret[0].(metrics.Scope)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetMetricsScope() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMetricsScope")
}

func (_m *MockDatabaseOptions) GetMultiReaderIteratorPool() m3db.MultiReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "GetMultiReaderIteratorPool")
	ret0, _ := ret[0].(m3db.MultiReaderIteratorPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetMultiReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMultiReaderIteratorPool")
}

func (_m *MockDatabaseOptions) GetNewDecoderFn() m3db.NewDecoderFn {
	ret := _m.ctrl.Call(_m, "GetNewDecoderFn")
	ret0, _ := ret[0].(m3db.NewDecoderFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetNewDecoderFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNewDecoderFn")
}

func (_m *MockDatabaseOptions) GetNewEncoderFn() m3db.NewEncoderFn {
	ret := _m.ctrl.Call(_m, "GetNewEncoderFn")
	ret0, _ := ret[0].(m3db.NewEncoderFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetNewEncoderFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNewEncoderFn")
}

func (_m *MockDatabaseOptions) GetNewFileSetReaderFn() m3db.NewFileSetReaderFn {
	ret := _m.ctrl.Call(_m, "GetNewFileSetReaderFn")
	ret0, _ := ret[0].(m3db.NewFileSetReaderFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetNewFileSetReaderFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNewFileSetReaderFn")
}

func (_m *MockDatabaseOptions) GetNewFileSetWriterFn() m3db.NewFileSetWriterFn {
	ret := _m.ctrl.Call(_m, "GetNewFileSetWriterFn")
	ret0, _ := ret[0].(m3db.NewFileSetWriterFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetNewFileSetWriterFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNewFileSetWriterFn")
}

func (_m *MockDatabaseOptions) GetNowFn() m3db.NowFn {
	ret := _m.ctrl.Call(_m, "GetNowFn")
	ret0, _ := ret[0].(m3db.NowFn)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetNowFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNowFn")
}

func (_m *MockDatabaseOptions) GetRetentionPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "GetRetentionPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetRetentionPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRetentionPeriod")
}

func (_m *MockDatabaseOptions) GetReaderIteratorPool() m3db.ReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "GetReaderIteratorPool")
	ret0, _ := ret[0].(m3db.ReaderIteratorPool)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) GetReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReaderIteratorPool")
}

func (_m *MockDatabaseOptions) Logger(_param0 logging.Logger) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "Logger", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) Logger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logger", arg0)
}

func (_m *MockDatabaseOptions) MaxFlushRetries(_param0 int) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "MaxFlushRetries", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) MaxFlushRetries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxFlushRetries", arg0)
}

func (_m *MockDatabaseOptions) MetricsScope(_param0 metrics.Scope) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "MetricsScope", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) MetricsScope(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetricsScope", arg0)
}

func (_m *MockDatabaseOptions) MultiReaderIteratorPool(_param0 m3db.MultiReaderIteratorPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "MultiReaderIteratorPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) MultiReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MultiReaderIteratorPool", arg0)
}

func (_m *MockDatabaseOptions) NewBootstrapFn(_param0 m3db.NewBootstrapFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NewBootstrapFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NewBootstrapFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewBootstrapFn", arg0)
}

func (_m *MockDatabaseOptions) NewDecoderFn(_param0 m3db.NewDecoderFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NewDecoderFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NewDecoderFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewDecoderFn", arg0)
}

func (_m *MockDatabaseOptions) NewEncoderFn(_param0 m3db.NewEncoderFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NewEncoderFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NewEncoderFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewEncoderFn", arg0)
}

func (_m *MockDatabaseOptions) NewFileSetReaderFn(_param0 m3db.NewFileSetReaderFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NewFileSetReaderFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NewFileSetReaderFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewFileSetReaderFn", arg0)
}

func (_m *MockDatabaseOptions) NewFileSetWriterFn(_param0 m3db.NewFileSetWriterFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NewFileSetWriterFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NewFileSetWriterFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewFileSetWriterFn", arg0)
}

func (_m *MockDatabaseOptions) NowFn(_param0 m3db.NowFn) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "NowFn", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) NowFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NowFn", arg0)
}

func (_m *MockDatabaseOptions) RetentionPeriod(_param0 time.Duration) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "RetentionPeriod", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) RetentionPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetentionPeriod", arg0)
}

func (_m *MockDatabaseOptions) ReaderIteratorPool(_param0 m3db.ReaderIteratorPool) m3db.DatabaseOptions {
	ret := _m.ctrl.Call(_m, "ReaderIteratorPool", _param0)
	ret0, _ := ret[0].(m3db.DatabaseOptions)
	return ret0
}

func (_mr *_MockDatabaseOptionsRecorder) ReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReaderIteratorPool", arg0)
}

// Mock of ClientOptions interface
type MockClientOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockClientOptionsRecorder
}

// Recorder for MockClientOptions (not exported)
type _MockClientOptionsRecorder struct {
	mock *MockClientOptions
}

func NewMockClientOptions(ctrl *gomock.Controller) *MockClientOptions {
	mock := &MockClientOptions{ctrl: ctrl}
	mock.recorder = &_MockClientOptionsRecorder{mock}
	return mock
}

func (_m *MockClientOptions) EXPECT() *_MockClientOptionsRecorder {
	return _m.recorder
}

func (_m *MockClientOptions) BackgroundConnectInterval(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "BackgroundConnectInterval", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) BackgroundConnectInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectInterval", arg0)
}

func (_m *MockClientOptions) BackgroundConnectStutter(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "BackgroundConnectStutter", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) BackgroundConnectStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectStutter", arg0)
}

func (_m *MockClientOptions) BackgroundHealthCheckInterval(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckInterval", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) BackgroundHealthCheckInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckInterval", arg0)
}

func (_m *MockClientOptions) BackgroundHealthCheckStutter(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckStutter", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) BackgroundHealthCheckStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckStutter", arg0)
}

func (_m *MockClientOptions) ChannelOptions(_param0 *tchannel_go.ChannelOptions) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "ChannelOptions", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) ChannelOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelOptions", arg0)
}

func (_m *MockClientOptions) ClusterConnectTimeout(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "ClusterConnectTimeout", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) ClusterConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterConnectTimeout", arg0)
}

func (_m *MockClientOptions) ConsistencyLevel(_param0 m3db.ConsistencyLevel) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "ConsistencyLevel", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) ConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConsistencyLevel", arg0)
}

func (_m *MockClientOptions) EncodingTsz() m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "EncodingTsz")
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) EncodingTsz() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncodingTsz")
}

func (_m *MockClientOptions) FetchBatchOpPoolSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "FetchBatchOpPoolSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) FetchBatchOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchOpPoolSize", arg0)
}

func (_m *MockClientOptions) FetchBatchSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "FetchBatchSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) FetchBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchSize", arg0)
}

func (_m *MockClientOptions) FetchRequestTimeout(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "FetchRequestTimeout", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) FetchRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRequestTimeout", arg0)
}

func (_m *MockClientOptions) GetBackgroundConnectInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBackgroundConnectInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetBackgroundConnectInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBackgroundConnectInterval")
}

func (_m *MockClientOptions) GetBackgroundConnectStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBackgroundConnectStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetBackgroundConnectStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBackgroundConnectStutter")
}

func (_m *MockClientOptions) GetBackgroundHealthCheckInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBackgroundHealthCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetBackgroundHealthCheckInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBackgroundHealthCheckInterval")
}

func (_m *MockClientOptions) GetBackgroundHealthCheckStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "GetBackgroundHealthCheckStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetBackgroundHealthCheckStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBackgroundHealthCheckStutter")
}

func (_m *MockClientOptions) GetChannelOptions() *tchannel_go.ChannelOptions {
	ret := _m.ctrl.Call(_m, "GetChannelOptions")
	ret0, _ := ret[0].(*tchannel_go.ChannelOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetChannelOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetChannelOptions")
}

func (_m *MockClientOptions) GetClusterConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "GetClusterConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetClusterConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClusterConnectTimeout")
}

func (_m *MockClientOptions) GetConsistencyLevel() m3db.ConsistencyLevel {
	ret := _m.ctrl.Call(_m, "GetConsistencyLevel")
	ret0, _ := ret[0].(m3db.ConsistencyLevel)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConsistencyLevel")
}

func (_m *MockClientOptions) GetFetchBatchOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "GetFetchBatchOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetFetchBatchOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFetchBatchOpPoolSize")
}

func (_m *MockClientOptions) GetFetchBatchSize() int {
	ret := _m.ctrl.Call(_m, "GetFetchBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetFetchBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFetchBatchSize")
}

func (_m *MockClientOptions) GetFetchRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "GetFetchRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetFetchRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFetchRequestTimeout")
}

func (_m *MockClientOptions) GetHostConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "GetHostConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetHostConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostConnectTimeout")
}

func (_m *MockClientOptions) GetHostQueueOpsArrayPoolSize() int {
	ret := _m.ctrl.Call(_m, "GetHostQueueOpsArrayPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetHostQueueOpsArrayPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostQueueOpsArrayPoolSize")
}

func (_m *MockClientOptions) GetHostQueueOpsFlushInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "GetHostQueueOpsFlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetHostQueueOpsFlushInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostQueueOpsFlushInterval")
}

func (_m *MockClientOptions) GetHostQueueOpsFlushSize() int {
	ret := _m.ctrl.Call(_m, "GetHostQueueOpsFlushSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetHostQueueOpsFlushSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostQueueOpsFlushSize")
}

func (_m *MockClientOptions) GetLogger() logging.Logger {
	ret := _m.ctrl.Call(_m, "GetLogger")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetLogger() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLogger")
}

func (_m *MockClientOptions) GetMaxConnectionCount() int {
	ret := _m.ctrl.Call(_m, "GetMaxConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetMaxConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxConnectionCount")
}

func (_m *MockClientOptions) GetMetricsScope() metrics.Scope {
	ret := _m.ctrl.Call(_m, "GetMetricsScope")
	ret0, _ := ret[0].(metrics.Scope)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetMetricsScope() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMetricsScope")
}

func (_m *MockClientOptions) GetMinConnectionCount() int {
	ret := _m.ctrl.Call(_m, "GetMinConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetMinConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMinConnectionCount")
}

func (_m *MockClientOptions) GetNowFn() m3db.NowFn {
	ret := _m.ctrl.Call(_m, "GetNowFn")
	ret0, _ := ret[0].(m3db.NowFn)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetNowFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNowFn")
}

func (_m *MockClientOptions) GetReaderIteratorAllocate() m3db.ReaderIteratorAllocate {
	ret := _m.ctrl.Call(_m, "GetReaderIteratorAllocate")
	ret0, _ := ret[0].(m3db.ReaderIteratorAllocate)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetReaderIteratorAllocate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReaderIteratorAllocate")
}

func (_m *MockClientOptions) GetSeriesIteratorArrayPoolBuckets() []m3db.PoolBucket {
	ret := _m.ctrl.Call(_m, "GetSeriesIteratorArrayPoolBuckets")
	ret0, _ := ret[0].([]m3db.PoolBucket)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetSeriesIteratorArrayPoolBuckets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSeriesIteratorArrayPoolBuckets")
}

func (_m *MockClientOptions) GetSeriesIteratorPoolSize() int {
	ret := _m.ctrl.Call(_m, "GetSeriesIteratorPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetSeriesIteratorPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSeriesIteratorPoolSize")
}

func (_m *MockClientOptions) GetTopologyType() m3db.TopologyType {
	ret := _m.ctrl.Call(_m, "GetTopologyType")
	ret0, _ := ret[0].(m3db.TopologyType)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetTopologyType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTopologyType")
}

func (_m *MockClientOptions) GetWriteBatchSize() int {
	ret := _m.ctrl.Call(_m, "GetWriteBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetWriteBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriteBatchSize")
}

func (_m *MockClientOptions) GetWriteOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "GetWriteOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetWriteOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriteOpPoolSize")
}

func (_m *MockClientOptions) GetWriteRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "GetWriteRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) GetWriteRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriteRequestTimeout")
}

func (_m *MockClientOptions) HostConnectTimeout(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "HostConnectTimeout", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) HostConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostConnectTimeout", arg0)
}

func (_m *MockClientOptions) HostQueueOpsArrayPoolSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "HostQueueOpsArrayPoolSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) HostQueueOpsArrayPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsArrayPoolSize", arg0)
}

func (_m *MockClientOptions) HostQueueOpsFlushInterval(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushInterval", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) HostQueueOpsFlushInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushInterval", arg0)
}

func (_m *MockClientOptions) HostQueueOpsFlushSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) HostQueueOpsFlushSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushSize", arg0)
}

func (_m *MockClientOptions) Logger(_param0 logging.Logger) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "Logger", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) Logger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logger", arg0)
}

func (_m *MockClientOptions) MaxConnectionCount(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "MaxConnectionCount", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) MaxConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxConnectionCount", arg0)
}

func (_m *MockClientOptions) MetricsScope(_param0 metrics.Scope) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "MetricsScope", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) MetricsScope(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetricsScope", arg0)
}

func (_m *MockClientOptions) MinConnectionCount(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "MinConnectionCount", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) MinConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinConnectionCount", arg0)
}

func (_m *MockClientOptions) NowFn(_param0 m3db.NowFn) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "NowFn", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) NowFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NowFn", arg0)
}

func (_m *MockClientOptions) ReaderIteratorAllocate(_param0 m3db.ReaderIteratorAllocate) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "ReaderIteratorAllocate", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) ReaderIteratorAllocate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReaderIteratorAllocate", arg0)
}

func (_m *MockClientOptions) SeriesIteratorArrayPoolBuckets(_param0 []m3db.PoolBucket) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "SeriesIteratorArrayPoolBuckets", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) SeriesIteratorArrayPoolBuckets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorArrayPoolBuckets", arg0)
}

func (_m *MockClientOptions) SeriesIteratorPoolSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "SeriesIteratorPoolSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) SeriesIteratorPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorPoolSize", arg0)
}

func (_m *MockClientOptions) TopologyType(_param0 m3db.TopologyType) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "TopologyType", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) TopologyType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TopologyType", arg0)
}

func (_m *MockClientOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockClientOptions) WriteBatchSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "WriteBatchSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) WriteBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBatchSize", arg0)
}

func (_m *MockClientOptions) WriteOpPoolSize(_param0 int) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "WriteOpPoolSize", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) WriteOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteOpPoolSize", arg0)
}

func (_m *MockClientOptions) WriteRequestTimeout(_param0 time.Duration) m3db.ClientOptions {
	ret := _m.ctrl.Call(_m, "WriteRequestTimeout", _param0)
	ret0, _ := ret[0].(m3db.ClientOptions)
	return ret0
}

func (_mr *_MockClientOptionsRecorder) WriteRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRequestTimeout", arg0)
}
