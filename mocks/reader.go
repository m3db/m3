// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../reader.go

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	io "io"

	"github.com/m3db/m3db/interfaces/m3db"

	gomock "github.com/golang/mock/gomock"
)

// Mock of ReaderSliceReader interface
type MockReaderSliceReader struct {
	ctrl     *gomock.Controller
	recorder *_MockReaderSliceReaderRecorder
}

// Recorder for MockReaderSliceReader (not exported)
type _MockReaderSliceReaderRecorder struct {
	mock *MockReaderSliceReader
}

func NewMockReaderSliceReader(ctrl *gomock.Controller) *MockReaderSliceReader {
	mock := &MockReaderSliceReader{ctrl: ctrl}
	mock.recorder = &_MockReaderSliceReaderRecorder{mock}
	return mock
}

func (_m *MockReaderSliceReader) EXPECT() *_MockReaderSliceReaderRecorder {
	return _m.recorder
}

func (_m *MockReaderSliceReader) Read(p []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReaderSliceReaderRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockReaderSliceReader) Readers() []io.Reader {
	ret := _m.ctrl.Call(_m, "Readers")
	ret0, _ := ret[0].([]io.Reader)
	return ret0
}

func (_mr *_MockReaderSliceReaderRecorder) Readers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Readers")
}

// Mock of SegmentReader interface
type MockSegmentReader struct {
	ctrl     *gomock.Controller
	recorder *_MockSegmentReaderRecorder
}

// Recorder for MockSegmentReader (not exported)
type _MockSegmentReaderRecorder struct {
	mock *MockSegmentReader
}

func NewMockSegmentReader(ctrl *gomock.Controller) *MockSegmentReader {
	mock := &MockSegmentReader{ctrl: ctrl}
	mock.recorder = &_MockSegmentReaderRecorder{mock}
	return mock
}

func (_m *MockSegmentReader) EXPECT() *_MockSegmentReaderRecorder {
	return _m.recorder
}

func (_m *MockSegmentReader) Read(p []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSegmentReaderRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockSegmentReader) Segment() m3db.Segment {
	ret := _m.ctrl.Call(_m, "Segment")
	ret0, _ := ret[0].(m3db.Segment)
	return ret0
}

func (_mr *_MockSegmentReaderRecorder) Segment() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Segment")
}

func (_m *MockSegmentReader) Reset(segment m3db.Segment) {
	_m.ctrl.Call(_m, "Reset", segment)
}

func (_mr *_MockSegmentReaderRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

func (_m *MockSegmentReader) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSegmentReaderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
