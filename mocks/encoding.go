// Automatically generated by MockGen. DO NOT EDIT!
// Source: encoding.go

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	io "io"
	time0 "time"

	"github.com/m3db/m3db/interfaces/m3db"
	time "github.com/m3db/m3x/time"

	gomock "github.com/golang/mock/gomock"
)

// Mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *_MockEncoderRecorder
}

// Recorder for MockEncoder (not exported)
type _MockEncoderRecorder struct {
	mock *MockEncoder
}

func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &_MockEncoderRecorder{mock}
	return mock
}

func (_m *MockEncoder) EXPECT() *_MockEncoderRecorder {
	return _m.recorder
}

func (_m *MockEncoder) Encode(dp m3db.Datapoint, timeUnit time.Unit, annotation m3db.Annotation) error {
	ret := _m.ctrl.Call(_m, "Encode", dp, timeUnit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEncoderRecorder) Encode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0, arg1, arg2)
}

func (_m *MockEncoder) Stream() m3db.SegmentReader {
	ret := _m.ctrl.Call(_m, "Stream")
	ret0, _ := ret[0].(m3db.SegmentReader)
	return ret0
}

func (_mr *_MockEncoderRecorder) Stream() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stream")
}

func (_m *MockEncoder) Seal() {
	_m.ctrl.Call(_m, "Seal")
}

func (_mr *_MockEncoderRecorder) Seal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seal")
}

func (_m *MockEncoder) Reset(t time0.Time, capacity int) {
	_m.ctrl.Call(_m, "Reset", t, capacity)
}

func (_mr *_MockEncoderRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1)
}

func (_m *MockEncoder) ResetSetData(t time0.Time, data []byte, writable bool) {
	_m.ctrl.Call(_m, "ResetSetData", t, data, writable)
}

func (_mr *_MockEncoderRecorder) ResetSetData(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetSetData", arg0, arg1, arg2)
}

func (_m *MockEncoder) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockEncoderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Iterator interface
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockIteratorRecorder
}

// Recorder for MockIterator (not exported)
type _MockIteratorRecorder struct {
	mock *MockIterator
}

func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &_MockIteratorRecorder{mock}
	return mock
}

func (_m *MockIterator) EXPECT() *_MockIteratorRecorder {
	return _m.recorder
}

func (_m *MockIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockIterator) Current() (m3db.Datapoint, time.Unit, m3db.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(m3db.Datapoint)
	ret1, _ := ret[1].(time.Unit)
	ret2, _ := ret[2].(m3db.Annotation)
	return ret0, ret1, ret2
}

func (_mr *_MockIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of ReaderIterator interface
type MockReaderIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockReaderIteratorRecorder
}

// Recorder for MockReaderIterator (not exported)
type _MockReaderIteratorRecorder struct {
	mock *MockReaderIterator
}

func NewMockReaderIterator(ctrl *gomock.Controller) *MockReaderIterator {
	mock := &MockReaderIterator{ctrl: ctrl}
	mock.recorder = &_MockReaderIteratorRecorder{mock}
	return mock
}

func (_m *MockReaderIterator) EXPECT() *_MockReaderIteratorRecorder {
	return _m.recorder
}

func (_m *MockReaderIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockReaderIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockReaderIterator) Current() (m3db.Datapoint, time.Unit, m3db.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(m3db.Datapoint)
	ret1, _ := ret[1].(time.Unit)
	ret2, _ := ret[2].(m3db.Annotation)
	return ret0, ret1, ret2
}

func (_mr *_MockReaderIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockReaderIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReaderIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockReaderIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockReaderIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockReaderIterator) Reset(reader io.Reader) {
	_m.ctrl.Call(_m, "Reset", reader)
}

func (_mr *_MockReaderIteratorRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

// Mock of MultiReaderIterator interface
type MockMultiReaderIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockMultiReaderIteratorRecorder
}

// Recorder for MockMultiReaderIterator (not exported)
type _MockMultiReaderIteratorRecorder struct {
	mock *MockMultiReaderIterator
}

func NewMockMultiReaderIterator(ctrl *gomock.Controller) *MockMultiReaderIterator {
	mock := &MockMultiReaderIterator{ctrl: ctrl}
	mock.recorder = &_MockMultiReaderIteratorRecorder{mock}
	return mock
}

func (_m *MockMultiReaderIterator) EXPECT() *_MockMultiReaderIteratorRecorder {
	return _m.recorder
}

func (_m *MockMultiReaderIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMultiReaderIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockMultiReaderIterator) Current() (m3db.Datapoint, time.Unit, m3db.Annotation) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(m3db.Datapoint)
	ret1, _ := ret[1].(time.Unit)
	ret2, _ := ret[2].(m3db.Annotation)
	return ret0, ret1, ret2
}

func (_mr *_MockMultiReaderIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockMultiReaderIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMultiReaderIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockMultiReaderIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockMultiReaderIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockMultiReaderIterator) Reset(readers []io.Reader) {
	_m.ctrl.Call(_m, "Reset", readers)
}

func (_mr *_MockMultiReaderIteratorRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

// Mock of Decoder interface
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderRecorder
}

// Recorder for MockDecoder (not exported)
type _MockDecoderRecorder struct {
	mock *MockDecoder
}

func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &_MockDecoderRecorder{mock}
	return mock
}

func (_m *MockDecoder) EXPECT() *_MockDecoderRecorder {
	return _m.recorder
}

func (_m *MockDecoder) Decode(reader io.Reader) m3db.ReaderIterator {
	ret := _m.ctrl.Call(_m, "Decode", reader)
	ret0, _ := ret[0].(m3db.ReaderIterator)
	return ret0
}

func (_mr *_MockDecoderRecorder) Decode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0)
}

func (_m *MockDecoder) DecodeAll(readers []io.Reader) m3db.MultiReaderIterator {
	ret := _m.ctrl.Call(_m, "DecodeAll", readers)
	ret0, _ := ret[0].(m3db.MultiReaderIterator)
	return ret0
}

func (_mr *_MockDecoderRecorder) DecodeAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecodeAll", arg0)
}
