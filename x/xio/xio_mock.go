// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/x/xio (interfaces: ReaderSliceReader,SegmentReader)

// Package xio is a generated GoMock package.
package xio

import (
	"io"
	"reflect"

	"github.com/m3db/m3db/ts"

	"github.com/golang/mock/gomock"
)

// MockReaderSliceReader is a mock of ReaderSliceReader interface
type MockReaderSliceReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderSliceReaderMockRecorder
}

// MockReaderSliceReaderMockRecorder is the mock recorder for MockReaderSliceReader
type MockReaderSliceReaderMockRecorder struct {
	mock *MockReaderSliceReader
}

// NewMockReaderSliceReader creates a new mock instance
func NewMockReaderSliceReader(ctrl *gomock.Controller) *MockReaderSliceReader {
	mock := &MockReaderSliceReader{ctrl: ctrl}
	mock.recorder = &MockReaderSliceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderSliceReader) EXPECT() *MockReaderSliceReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReaderSliceReader) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReaderSliceReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReaderSliceReader)(nil).Read), arg0)
}

// Readers mocks base method
func (m *MockReaderSliceReader) Readers() []io.Reader {
	ret := m.ctrl.Call(m, "Readers")
	ret0, _ := ret[0].([]io.Reader)
	return ret0
}

// Readers indicates an expected call of Readers
func (mr *MockReaderSliceReaderMockRecorder) Readers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readers", reflect.TypeOf((*MockReaderSliceReader)(nil).Readers))
}

// MockSegmentReader is a mock of SegmentReader interface
type MockSegmentReader struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentReaderMockRecorder
}

// MockSegmentReaderMockRecorder is the mock recorder for MockSegmentReader
type MockSegmentReaderMockRecorder struct {
	mock *MockSegmentReader
}

// NewMockSegmentReader creates a new mock instance
func NewMockSegmentReader(ctrl *gomock.Controller) *MockSegmentReader {
	mock := &MockSegmentReader{ctrl: ctrl}
	mock.recorder = &MockSegmentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSegmentReader) EXPECT() *MockSegmentReaderMockRecorder {
	return m.recorder
}

// Finalize mocks base method
func (m *MockSegmentReader) Finalize() {
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize
func (mr *MockSegmentReaderMockRecorder) Finalize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockSegmentReader)(nil).Finalize))
}

// Read mocks base method
func (m *MockSegmentReader) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSegmentReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSegmentReader)(nil).Read), arg0)
}

// Reset mocks base method
func (m *MockSegmentReader) Reset(arg0 ts.Segment) {
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset
func (mr *MockSegmentReaderMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSegmentReader)(nil).Reset), arg0)
}

// Segment mocks base method
func (m *MockSegmentReader) Segment() (ts.Segment, error) {
	ret := m.ctrl.Call(m, "Segment")
	ret0, _ := ret[0].(ts.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segment indicates an expected call of Segment
func (mr *MockSegmentReaderMockRecorder) Segment() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segment", reflect.TypeOf((*MockSegmentReader)(nil).Segment))
}
