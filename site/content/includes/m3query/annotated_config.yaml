# The server listen address
listenAddress: <url>

# Metrics configuration
# TODO: Which is what?
metrics:
  # Scope of metrics root
  # TODO: Again, which is?
  scope:
    # Prefix prepended to metrics collected
    prefix: <string>
    # Reporting frequendy of metrics collected
    reportingInterval: <duration>
    # Tags shared by metrics collected
    tags: <map of strings>
  # Configuration for a Prometheus reporter (if used)
  prometheus:
    # Metrics collection endpoint for application
    # Default = "/metrics"
    handlerPath: <string>
    # Listen address for metrics
    # Default = "0.0.0.0:7203"
    listenAddress: <url>
    # Metric sanitization type, valid options: [none, m3, prometheus]
    # Default = "none"
    sanitization: <string>
  # Sampling rate for metrics. min=0.0, max=1.0
  # TODO: What does this mean exactly?
  samplingRate: <float>
  # Enable Go runtime metrics, valid options: [none, simple, moderate, detailed]
  # See https://github.com/m3db/m3/blob/master/src/x/instrument/extended.go#L39:L64 for more details
  extended: <string>

# Logging configuration
# TODO: More detail than this 
# https://github.com/m3db/m3/blob/9f129cf9f16430cc5a399f60aa5684fb72b55bb5/src/cmd/services/m3query/config/config.go#L116
logging:
  level: info

# Enables tracing, if nothing configured, tracing is disabled
tracing:
  # Name for tracing service
  serviceName: <string>
  # Tracing backen to use, valid options: [jaeger, lightstep]
  backend: <string>
  # If using Jaeger, options to send to tracing backend
  jaeger:
  # If using Lightstep, options to send to tracing backend
  lightstep:

clusters:
  - namespaces:
      - namespace: default
        type: unaggregated
        retention: 48h
    client:
      config:
        service:
          # TODO: ?
          env: default_env
          # Availability zone, valid options: [user-defined, embedded]
          zone: <string>
          # TODO: ??
          service: m3db
          # Directory to store cached etcd data
          cacheDir: <string>
          # Identify the etcd hosts this node should connect to
          etcdClusters:
            # TODO: Confusing, if you use embedded, why do you still need endpoints?
            # TODO: Embedded vs seed nodes embedded??
            # Availability zone, valid options: [user-defined, embedded]
            - zone: <string>
              # Member nodes of the etcd cluster, in form url:port
              endpoints:
                - <url>
        seedNodes:
          initialCluster:
            - hostID: m3db_local
              endpoint: http://127.0.0.1:2380
      # The consistency level for writing to a cluster, valid options: [none, one, majority, all]
      writeConsistencyLevel: <string>
      # The consistency level for reading from a cluster, valid options: [none, one, unstrict_majority, majority, unstrict_all, all]
      readConsistencyLevel: <string>
      # The timeout for writing data
      # TODO: Defaults?
      writeTimeout: <duration>
      # The fetch timeout for any given query
      # Range =  30s to 5m
      fetchTimeout: <duration>
      # The cluster connect timeout    
      connectTimeout: <duration>
      # Configuration for retrying write operations
      writeRetry:
        initialBackoff: <duration>
        # Factor for exponential backoff
        backoffFactor: <float>
        # Maximum backoff time
        maxBackoff: <duration>
        # Maximum retry attempts
        maxRetries: <int>
        # Add randomness to wait intervals
        jitter: <bool>
      # Configuration for retrying fetch operations
      # TODO: Query?
      fetchRetry:
        initialBackoff: <duration>
        # Factor for exponential backoff
        backoffFactor: <float>
        # Maximum backoff time
        maxBackoff: <duration>
        # Maximum retry attempts
        maxRetries: <int>
        # Add randomness to wait intervals
        jitter: <bool>
      # The amount of times a background check fails before a connection is taken out of consideration
      backgroundHealthCheckFailLimit: <int>
      # The factor of the host connect time when sleeping between a failed health check and the next check
      backgroundHealthCheckFailThrottleFactor: <float>

# TODO:
local:

# Configuration for the placemement, namespaces and database management endpoints.
clusterManagement:
  # etcd client configuration
  etcd:
    # TODO: ?
    env: default_env
    # Availability zone, valid options: [user-defined, embedded]
    zone: <string>
    # TODO: ??
    service: m3db
    # Directory to store cached etcd data
    cacheDir: <string>
    # Identify the etcd hosts this node should connect to
    etcdClusters:
    m3sd:
    # The revision that watch requests start from
    watchWithRevision: <int>
    newDirectoryNode:
    retry:
    # The timeout for etcd requests
    requestTimeout: <duration>
    # The timeout for a watchChan initialization
    watchChanInitTimeout: <duration>
    # Frequency to check if a watch chan is no longer subscribed and should be closed
    watchChanCheckInterval: <duration>
    # The delay before resetting the etcd watch chan
    watchChanResetInterval: <duration>

# TODO:
filter:

# TODO:
rpc:

# TODO:
backend:

# The worker pool policy for read requests
readWorkerPoolPolicy:
  # Worker pool automatically grows to capacity
  grow: <bool>
  # Static pool size, or initial size for dynamically growing pools
  size: <int>

# The worker pool policy for write requests
writeWorkerPoolPolicy:
  # Worker pool automatically grows to capacity
  grow: <bool>
  # Static pool size, or initial size for dynamically growing pools
  size: <int>

# TODO:
writeForwarding:

# TODO:
downsample:

# TODO:
ingest:

# Configuration for the carbon server
# TODO: Which is?
carbon:
  ingester:
  aggregateNamespacesAllData:
  # A constant time to shift start by
  shiftTimeStart: <duration>
  # A constant time to shift end by
  shiftTimeEnd: <duration>
  # A constant set of steps to shift start by
  shiftStepsStart: <int>
  # A constant set of steps to shift end by
  shiftStepsEnd: <int>
  # A constant set of steps to shift start by, if and only if, the end is an exact match to the resolution boundary of a query, and the start is an exact match to the resolution boundary
  shiftStepsStartWhenAtResolutionBoundary: <int>
  # A constant set of steps to shift end by, if and only if, the start is an exact match to the resolution boundary of a query, and the end is an exact match to the resolution boundary
  shiftStepsEndWhenAtResolutionBoundary: <int>
  # A constant set of steps to shift start by, if and only if, the start is an exact match to the resolution boundary of a query, and the end is NOT an exact match to the resolution boundary
  shiftStepsEndWhenStartAtResolutionBoundary: <int>
  # A constant set of steps to shift end by, if and only if, the end is an exact match to the resolution boundary of a query, and the start is NOT an exact match to the resolution boundary
  shiftStepsStartWhenEndAtResolutionBoundary: <int>
  # Render partial datapoints when the start time is between a datapoint's resolution step size
  renderPartialStart: <bool>
  # Render partial datapoints when the end time is between a datapoint's resolution step size
  renderPartialEnd: <bool>
  # Render series that have only NaNs for entire output instead of returning an empty array of datapoints
  renderSeriesAllNaNs: <bool>
  # escape all characters using a backslash in a quoted string instead of only escaping quotes
  compileEscapeAllNotOnlyQuotes: <bool>

# TODO:
query:

# TODO:
limits:

# Additional configuration for metrics tags
# Read https://m3db.io/docs/how_to/query/#id-generation for more details
tagOptions:
  # TODO: To doâ€¦
  idScheme: <id_scheme>

# Sets the lookback duration for queries
# TODO: Which means what?
# Default = 5m
lookbackDuration: <duration>

# The result options for a query
resultOptions:
  # Keeps NaNs before returning query results.
  # Default = false
  keepNans: <bool>

# TODO:
experimental:

# TODO:
storeMetricsType:

# TODO:
multiProcess:

# TODO:
debug: