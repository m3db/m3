// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/client/types.go

package client

import (
	"time"

	"github.com/m3db/m3db/clock"
	"github.com/m3db/m3db/encoding"
	"github.com/m3db/m3db/generated/thrift/rpc"
	"github.com/m3db/m3db/storage/block"
	"github.com/m3db/m3db/storage/bootstrap/result"
	"github.com/m3db/m3db/storage/index"
	"github.com/m3db/m3db/storage/namespace"
	"github.com/m3db/m3db/topology"
	"github.com/m3db/m3x/context"
	"github.com/m3db/m3x/ident"
	"github.com/m3db/m3x/instrument"
	"github.com/m3db/m3x/pool"
	"github.com/m3db/m3x/retry"
	time0 "github.com/m3db/m3x/time"

	"github.com/golang/mock/gomock"
	tchannel_go "github.com/uber/tchannel-go"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Options() Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockClientRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Options")
}

func (_m *MockClient) NewSession() (Session, error) {
	ret := _m.ctrl.Call(_m, "NewSession")
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) NewSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSession")
}

func (_m *MockClient) DefaultSession() (Session, error) {
	ret := _m.ctrl.Call(_m, "DefaultSession")
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) DefaultSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultSession")
}

func (_m *MockClient) DefaultSessionActive() bool {
	ret := _m.ctrl.Call(_m, "DefaultSessionActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockClientRecorder) DefaultSessionActive() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultSessionActive")
}

// Mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionRecorder
}

// Recorder for MockSession (not exported)
type _MockSessionRecorder struct {
	mock *MockSession
}

func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &_MockSessionRecorder{mock}
	return mock
}

func (_m *MockSession) EXPECT() *_MockSessionRecorder {
	return _m.recorder
}

func (_m *MockSession) Write(namespace ident.ID, id ident.ID, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", namespace, id, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockSession) WriteTagged(namespace ident.ID, id ident.ID, tags ident.TagIterator, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", namespace, id, tags, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteTagged", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockSession) Fetch(namespace ident.ID, id ident.ID, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterator, error) {
	ret := _m.ctrl.Call(_m, "Fetch", namespace, id, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRecorder) Fetch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1, arg2, arg3)
}

func (_m *MockSession) FetchIDs(namespace ident.ID, ids ident.Iterator, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchIDs", namespace, ids, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRecorder) FetchIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchIDs", arg0, arg1, arg2, arg3)
}

func (_m *MockSession) FetchTagged(_param0 index.Query, _param1 index.QueryOptions) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchTagged", _param0, _param1)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRecorder) FetchTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTagged", arg0, arg1)
}

func (_m *MockSession) FetchTaggedIDs(_param0 index.Query, _param1 index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "FetchTaggedIDs", _param0, _param1)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRecorder) FetchTaggedIDs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTaggedIDs", arg0, arg1)
}

func (_m *MockSession) ShardID(id ident.ID) (uint32, error) {
	ret := _m.ctrl.Call(_m, "ShardID", id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRecorder) ShardID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardID", arg0)
}

func (_m *MockSession) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of AdminClient interface
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAdminClientRecorder
}

// Recorder for MockAdminClient (not exported)
type _MockAdminClientRecorder struct {
	mock *MockAdminClient
}

func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &_MockAdminClientRecorder{mock}
	return mock
}

func (_m *MockAdminClient) EXPECT() *_MockAdminClientRecorder {
	return _m.recorder
}

func (_m *MockAdminClient) Options() Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminClientRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Options")
}

func (_m *MockAdminClient) NewSession() (Session, error) {
	ret := _m.ctrl.Call(_m, "NewSession")
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminClientRecorder) NewSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSession")
}

func (_m *MockAdminClient) DefaultSession() (Session, error) {
	ret := _m.ctrl.Call(_m, "DefaultSession")
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminClientRecorder) DefaultSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultSession")
}

func (_m *MockAdminClient) DefaultSessionActive() bool {
	ret := _m.ctrl.Call(_m, "DefaultSessionActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockAdminClientRecorder) DefaultSessionActive() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultSessionActive")
}

func (_m *MockAdminClient) NewAdminSession() (AdminSession, error) {
	ret := _m.ctrl.Call(_m, "NewAdminSession")
	ret0, _ := ret[0].(AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminClientRecorder) NewAdminSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewAdminSession")
}

func (_m *MockAdminClient) DefaultAdminSession() (AdminSession, error) {
	ret := _m.ctrl.Call(_m, "DefaultAdminSession")
	ret0, _ := ret[0].(AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminClientRecorder) DefaultAdminSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultAdminSession")
}

// Mock of PeerBlocksMetadataIter interface
type MockPeerBlocksMetadataIter struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerBlocksMetadataIterRecorder
}

// Recorder for MockPeerBlocksMetadataIter (not exported)
type _MockPeerBlocksMetadataIterRecorder struct {
	mock *MockPeerBlocksMetadataIter
}

func NewMockPeerBlocksMetadataIter(ctrl *gomock.Controller) *MockPeerBlocksMetadataIter {
	mock := &MockPeerBlocksMetadataIter{ctrl: ctrl}
	mock.recorder = &_MockPeerBlocksMetadataIterRecorder{mock}
	return mock
}

func (_m *MockPeerBlocksMetadataIter) EXPECT() *_MockPeerBlocksMetadataIterRecorder {
	return _m.recorder
}

func (_m *MockPeerBlocksMetadataIter) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPeerBlocksMetadataIterRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockPeerBlocksMetadataIter) Current() (topology.Host, block.BlocksMetadata) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(topology.Host)
	ret1, _ := ret[1].(block.BlocksMetadata)
	return ret0, ret1
}

func (_mr *_MockPeerBlocksMetadataIterRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockPeerBlocksMetadataIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerBlocksMetadataIterRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

// Mock of PeerBlocksIter interface
type MockPeerBlocksIter struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerBlocksIterRecorder
}

// Recorder for MockPeerBlocksIter (not exported)
type _MockPeerBlocksIterRecorder struct {
	mock *MockPeerBlocksIter
}

func NewMockPeerBlocksIter(ctrl *gomock.Controller) *MockPeerBlocksIter {
	mock := &MockPeerBlocksIter{ctrl: ctrl}
	mock.recorder = &_MockPeerBlocksIterRecorder{mock}
	return mock
}

func (_m *MockPeerBlocksIter) EXPECT() *_MockPeerBlocksIterRecorder {
	return _m.recorder
}

func (_m *MockPeerBlocksIter) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPeerBlocksIterRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockPeerBlocksIter) Current() (topology.Host, ident.ID, block.DatabaseBlock) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(topology.Host)
	ret1, _ := ret[1].(ident.ID)
	ret2, _ := ret[2].(block.DatabaseBlock)
	return ret0, ret1, ret2
}

func (_mr *_MockPeerBlocksIterRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockPeerBlocksIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerBlocksIterRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

// Mock of AdminSession interface
type MockAdminSession struct {
	ctrl     *gomock.Controller
	recorder *_MockAdminSessionRecorder
}

// Recorder for MockAdminSession (not exported)
type _MockAdminSessionRecorder struct {
	mock *MockAdminSession
}

func NewMockAdminSession(ctrl *gomock.Controller) *MockAdminSession {
	mock := &MockAdminSession{ctrl: ctrl}
	mock.recorder = &_MockAdminSessionRecorder{mock}
	return mock
}

func (_m *MockAdminSession) EXPECT() *_MockAdminSessionRecorder {
	return _m.recorder
}

func (_m *MockAdminSession) Write(namespace ident.ID, id ident.ID, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", namespace, id, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminSessionRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockAdminSession) WriteTagged(namespace ident.ID, id ident.ID, tags ident.TagIterator, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", namespace, id, tags, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminSessionRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteTagged", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockAdminSession) Fetch(namespace ident.ID, id ident.ID, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterator, error) {
	ret := _m.ctrl.Call(_m, "Fetch", namespace, id, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) Fetch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1, arg2, arg3)
}

func (_m *MockAdminSession) FetchIDs(namespace ident.ID, ids ident.Iterator, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchIDs", namespace, ids, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchIDs", arg0, arg1, arg2, arg3)
}

func (_m *MockAdminSession) FetchTagged(_param0 index.Query, _param1 index.QueryOptions) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchTagged", _param0, _param1)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTagged", arg0, arg1)
}

func (_m *MockAdminSession) FetchTaggedIDs(_param0 index.Query, _param1 index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "FetchTaggedIDs", _param0, _param1)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchTaggedIDs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTaggedIDs", arg0, arg1)
}

func (_m *MockAdminSession) ShardID(id ident.ID) (uint32, error) {
	ret := _m.ctrl.Call(_m, "ShardID", id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) ShardID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardID", arg0)
}

func (_m *MockAdminSession) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminSessionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockAdminSession) Origin() topology.Host {
	ret := _m.ctrl.Call(_m, "Origin")
	ret0, _ := ret[0].(topology.Host)
	return ret0
}

func (_mr *_MockAdminSessionRecorder) Origin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Origin")
}

func (_m *MockAdminSession) Replicas() int {
	ret := _m.ctrl.Call(_m, "Replicas")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminSessionRecorder) Replicas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replicas")
}

func (_m *MockAdminSession) Truncate(namespace ident.ID) (int64, error) {
	ret := _m.ctrl.Call(_m, "Truncate", namespace)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0)
}

func (_m *MockAdminSession) FetchBlocksMetadataFromPeers(namespace ident.ID, shard uint32, start time.Time, end time.Time, version FetchBlocksMetadataEndpointVersion) (PeerBlocksMetadataIter, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataFromPeers", namespace, shard, start, end, version)
	ret0, _ := ret[0].(PeerBlocksMetadataIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchBlocksMetadataFromPeers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBlocksMetadataFromPeers", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAdminSession) FetchBootstrapBlocksFromPeers(namespace namespace.Metadata, shard uint32, start time.Time, end time.Time, opts result.Options, version FetchBlocksMetadataEndpointVersion) (result.ShardResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBootstrapBlocksFromPeers", namespace, shard, start, end, opts, version)
	ret0, _ := ret[0].(result.ShardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchBootstrapBlocksFromPeers(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBootstrapBlocksFromPeers", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockAdminSession) FetchBlocksFromPeers(namespace namespace.Metadata, shard uint32, metadatas []block.ReplicaMetadata, opts result.Options) (PeerBlocksIter, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksFromPeers", namespace, shard, metadatas, opts)
	ret0, _ := ret[0].(PeerBlocksIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAdminSessionRecorder) FetchBlocksFromPeers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBlocksFromPeers", arg0, arg1, arg2, arg3)
}

// Mock of clientSession interface
type MockclientSession struct {
	ctrl     *gomock.Controller
	recorder *_MockclientSessionRecorder
}

// Recorder for MockclientSession (not exported)
type _MockclientSessionRecorder struct {
	mock *MockclientSession
}

func NewMockclientSession(ctrl *gomock.Controller) *MockclientSession {
	mock := &MockclientSession{ctrl: ctrl}
	mock.recorder = &_MockclientSessionRecorder{mock}
	return mock
}

func (_m *MockclientSession) EXPECT() *_MockclientSessionRecorder {
	return _m.recorder
}

func (_m *MockclientSession) Write(namespace ident.ID, id ident.ID, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", namespace, id, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockclientSessionRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockclientSession) WriteTagged(namespace ident.ID, id ident.ID, tags ident.TagIterator, t time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", namespace, id, tags, t, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockclientSessionRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteTagged", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockclientSession) Fetch(namespace ident.ID, id ident.ID, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterator, error) {
	ret := _m.ctrl.Call(_m, "Fetch", namespace, id, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) Fetch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1, arg2, arg3)
}

func (_m *MockclientSession) FetchIDs(namespace ident.ID, ids ident.Iterator, startInclusive time.Time, endExclusive time.Time) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchIDs", namespace, ids, startInclusive, endExclusive)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchIDs", arg0, arg1, arg2, arg3)
}

func (_m *MockclientSession) FetchTagged(_param0 index.Query, _param1 index.QueryOptions) (encoding.SeriesIterators, error) {
	ret := _m.ctrl.Call(_m, "FetchTagged", _param0, _param1)
	ret0, _ := ret[0].(encoding.SeriesIterators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchTagged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTagged", arg0, arg1)
}

func (_m *MockclientSession) FetchTaggedIDs(_param0 index.Query, _param1 index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "FetchTaggedIDs", _param0, _param1)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchTaggedIDs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchTaggedIDs", arg0, arg1)
}

func (_m *MockclientSession) ShardID(id ident.ID) (uint32, error) {
	ret := _m.ctrl.Call(_m, "ShardID", id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) ShardID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardID", arg0)
}

func (_m *MockclientSession) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockclientSessionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockclientSession) Origin() topology.Host {
	ret := _m.ctrl.Call(_m, "Origin")
	ret0, _ := ret[0].(topology.Host)
	return ret0
}

func (_mr *_MockclientSessionRecorder) Origin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Origin")
}

func (_m *MockclientSession) Replicas() int {
	ret := _m.ctrl.Call(_m, "Replicas")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockclientSessionRecorder) Replicas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replicas")
}

func (_m *MockclientSession) Truncate(namespace ident.ID) (int64, error) {
	ret := _m.ctrl.Call(_m, "Truncate", namespace)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0)
}

func (_m *MockclientSession) FetchBlocksMetadataFromPeers(namespace ident.ID, shard uint32, start time.Time, end time.Time, version FetchBlocksMetadataEndpointVersion) (PeerBlocksMetadataIter, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataFromPeers", namespace, shard, start, end, version)
	ret0, _ := ret[0].(PeerBlocksMetadataIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchBlocksMetadataFromPeers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBlocksMetadataFromPeers", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockclientSession) FetchBootstrapBlocksFromPeers(namespace namespace.Metadata, shard uint32, start time.Time, end time.Time, opts result.Options, version FetchBlocksMetadataEndpointVersion) (result.ShardResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBootstrapBlocksFromPeers", namespace, shard, start, end, opts, version)
	ret0, _ := ret[0].(result.ShardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchBootstrapBlocksFromPeers(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBootstrapBlocksFromPeers", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockclientSession) FetchBlocksFromPeers(namespace namespace.Metadata, shard uint32, metadatas []block.ReplicaMetadata, opts result.Options) (PeerBlocksIter, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksFromPeers", namespace, shard, metadatas, opts)
	ret0, _ := ret[0].(PeerBlocksIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockclientSessionRecorder) FetchBlocksFromPeers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBlocksFromPeers", arg0, arg1, arg2, arg3)
}

func (_m *MockclientSession) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockclientSessionRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

// Mock of hostQueue interface
type MockhostQueue struct {
	ctrl     *gomock.Controller
	recorder *_MockhostQueueRecorder
}

// Recorder for MockhostQueue (not exported)
type _MockhostQueueRecorder struct {
	mock *MockhostQueue
}

func NewMockhostQueue(ctrl *gomock.Controller) *MockhostQueue {
	mock := &MockhostQueue{ctrl: ctrl}
	mock.recorder = &_MockhostQueueRecorder{mock}
	return mock
}

func (_m *MockhostQueue) EXPECT() *_MockhostQueueRecorder {
	return _m.recorder
}

func (_m *MockhostQueue) Open() {
	_m.ctrl.Call(_m, "Open")
}

func (_mr *_MockhostQueueRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockhostQueue) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockhostQueueRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Len")
}

func (_m *MockhostQueue) Enqueue(op op) error {
	ret := _m.ctrl.Call(_m, "Enqueue", op)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockhostQueueRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Enqueue", arg0)
}

func (_m *MockhostQueue) Host() topology.Host {
	ret := _m.ctrl.Call(_m, "Host")
	ret0, _ := ret[0].(topology.Host)
	return ret0
}

func (_mr *_MockhostQueueRecorder) Host() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Host")
}

func (_m *MockhostQueue) ConnectionCount() int {
	ret := _m.ctrl.Call(_m, "ConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockhostQueueRecorder) ConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConnectionCount")
}

func (_m *MockhostQueue) ConnectionPool() connectionPool {
	ret := _m.ctrl.Call(_m, "ConnectionPool")
	ret0, _ := ret[0].(connectionPool)
	return ret0
}

func (_mr *_MockhostQueueRecorder) ConnectionPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConnectionPool")
}

func (_m *MockhostQueue) BorrowConnection(fn withConnectionFn) error {
	ret := _m.ctrl.Call(_m, "BorrowConnection", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockhostQueueRecorder) BorrowConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BorrowConnection", arg0)
}

func (_m *MockhostQueue) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockhostQueueRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of connectionPool interface
type MockconnectionPool struct {
	ctrl     *gomock.Controller
	recorder *_MockconnectionPoolRecorder
}

// Recorder for MockconnectionPool (not exported)
type _MockconnectionPoolRecorder struct {
	mock *MockconnectionPool
}

func NewMockconnectionPool(ctrl *gomock.Controller) *MockconnectionPool {
	mock := &MockconnectionPool{ctrl: ctrl}
	mock.recorder = &_MockconnectionPoolRecorder{mock}
	return mock
}

func (_m *MockconnectionPool) EXPECT() *_MockconnectionPoolRecorder {
	return _m.recorder
}

func (_m *MockconnectionPool) Open() {
	_m.ctrl.Call(_m, "Open")
}

func (_mr *_MockconnectionPoolRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockconnectionPool) ConnectionCount() int {
	ret := _m.ctrl.Call(_m, "ConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockconnectionPoolRecorder) ConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConnectionCount")
}

func (_m *MockconnectionPool) NextClient() (rpc.TChanNode, error) {
	ret := _m.ctrl.Call(_m, "NextClient")
	ret0, _ := ret[0].(rpc.TChanNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockconnectionPoolRecorder) NextClient() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NextClient")
}

func (_m *MockconnectionPool) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockconnectionPoolRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of peerSource interface
type MockpeerSource struct {
	ctrl     *gomock.Controller
	recorder *_MockpeerSourceRecorder
}

// Recorder for MockpeerSource (not exported)
type _MockpeerSourceRecorder struct {
	mock *MockpeerSource
}

func NewMockpeerSource(ctrl *gomock.Controller) *MockpeerSource {
	mock := &MockpeerSource{ctrl: ctrl}
	mock.recorder = &_MockpeerSourceRecorder{mock}
	return mock
}

func (_m *MockpeerSource) EXPECT() *_MockpeerSourceRecorder {
	return _m.recorder
}

func (_m *MockpeerSource) BorrowConnection(hostID string, fn withConnectionFn) error {
	ret := _m.ctrl.Call(_m, "BorrowConnection", hostID, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockpeerSourceRecorder) BorrowConnection(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BorrowConnection", arg0, arg1)
}

// Mock of peer interface
type Mockpeer struct {
	ctrl     *gomock.Controller
	recorder *_MockpeerRecorder
}

// Recorder for Mockpeer (not exported)
type _MockpeerRecorder struct {
	mock *Mockpeer
}

func NewMockpeer(ctrl *gomock.Controller) *Mockpeer {
	mock := &Mockpeer{ctrl: ctrl}
	mock.recorder = &_MockpeerRecorder{mock}
	return mock
}

func (_m *Mockpeer) EXPECT() *_MockpeerRecorder {
	return _m.recorder
}

func (_m *Mockpeer) Host() topology.Host {
	ret := _m.ctrl.Call(_m, "Host")
	ret0, _ := ret[0].(topology.Host)
	return ret0
}

func (_mr *_MockpeerRecorder) Host() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Host")
}

func (_m *Mockpeer) BorrowConnection(fn withConnectionFn) error {
	ret := _m.ctrl.Call(_m, "BorrowConnection", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockpeerRecorder) BorrowConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BorrowConnection", arg0)
}

// Mock of op interface
type Mockop struct {
	ctrl     *gomock.Controller
	recorder *_MockopRecorder
}

// Recorder for Mockop (not exported)
type _MockopRecorder struct {
	mock *Mockop
}

func NewMockop(ctrl *gomock.Controller) *Mockop {
	mock := &Mockop{ctrl: ctrl}
	mock.recorder = &_MockopRecorder{mock}
	return mock
}

func (_m *Mockop) EXPECT() *_MockopRecorder {
	return _m.recorder
}

func (_m *Mockop) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockopRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
}

func (_m *Mockop) CompletionFn() completionFn {
	ret := _m.ctrl.Call(_m, "CompletionFn")
	ret0, _ := ret[0].(completionFn)
	return ret0
}

func (_mr *_MockopRecorder) CompletionFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CompletionFn")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockOptions) SetEncodingM3TSZ() Options {
	ret := _m.ctrl.Call(_m, "SetEncodingM3TSZ")
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetEncodingM3TSZ() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEncodingM3TSZ")
}

func (_m *MockOptions) SetClockOptions(value clock.Options) Options {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockOptions) SetInstrumentOptions(value instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockOptions) SetTopologyInitializer(value topology.Initializer) Options {
	ret := _m.ctrl.Call(_m, "SetTopologyInitializer", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetTopologyInitializer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTopologyInitializer", arg0)
}

func (_m *MockOptions) TopologyInitializer() topology.Initializer {
	ret := _m.ctrl.Call(_m, "TopologyInitializer")
	ret0, _ := ret[0].(topology.Initializer)
	return ret0
}

func (_mr *_MockOptionsRecorder) TopologyInitializer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TopologyInitializer")
}

func (_m *MockOptions) SetWriteConsistencyLevel(value topology.ConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetWriteConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetWriteConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteConsistencyLevel", arg0)
}

func (_m *MockOptions) WriteConsistencyLevel() topology.ConsistencyLevel {
	ret := _m.ctrl.Call(_m, "WriteConsistencyLevel")
	ret0, _ := ret[0].(topology.ConsistencyLevel)
	return ret0
}

func (_mr *_MockOptionsRecorder) WriteConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteConsistencyLevel")
}

func (_m *MockOptions) SetReadConsistencyLevel(value ReadConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetReadConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetReadConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadConsistencyLevel", arg0)
}

func (_m *MockOptions) ReadConsistencyLevel() ReadConsistencyLevel {
	ret := _m.ctrl.Call(_m, "ReadConsistencyLevel")
	ret0, _ := ret[0].(ReadConsistencyLevel)
	return ret0
}

func (_mr *_MockOptionsRecorder) ReadConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadConsistencyLevel")
}

func (_m *MockOptions) SetChannelOptions(value *tchannel_go.ChannelOptions) Options {
	ret := _m.ctrl.Call(_m, "SetChannelOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetChannelOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetChannelOptions", arg0)
}

func (_m *MockOptions) ChannelOptions() *tchannel_go.ChannelOptions {
	ret := _m.ctrl.Call(_m, "ChannelOptions")
	ret0, _ := ret[0].(*tchannel_go.ChannelOptions)
	return ret0
}

func (_mr *_MockOptionsRecorder) ChannelOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelOptions")
}

func (_m *MockOptions) SetMaxConnectionCount(value int) Options {
	ret := _m.ctrl.Call(_m, "SetMaxConnectionCount", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetMaxConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxConnectionCount", arg0)
}

func (_m *MockOptions) MaxConnectionCount() int {
	ret := _m.ctrl.Call(_m, "MaxConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) MaxConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxConnectionCount")
}

func (_m *MockOptions) SetMinConnectionCount(value int) Options {
	ret := _m.ctrl.Call(_m, "SetMinConnectionCount", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetMinConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMinConnectionCount", arg0)
}

func (_m *MockOptions) MinConnectionCount() int {
	ret := _m.ctrl.Call(_m, "MinConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) MinConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinConnectionCount")
}

func (_m *MockOptions) SetHostConnectTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetHostConnectTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetHostConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostConnectTimeout", arg0)
}

func (_m *MockOptions) HostConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "HostConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) HostConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostConnectTimeout")
}

func (_m *MockOptions) SetClusterConnectTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetClusterConnectTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetClusterConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClusterConnectTimeout", arg0)
}

func (_m *MockOptions) ClusterConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "ClusterConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) ClusterConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterConnectTimeout")
}

func (_m *MockOptions) SetClusterConnectConsistencyLevel(value ConnectConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetClusterConnectConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetClusterConnectConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClusterConnectConsistencyLevel", arg0)
}

func (_m *MockOptions) ClusterConnectConsistencyLevel() ConnectConsistencyLevel {
	ret := _m.ctrl.Call(_m, "ClusterConnectConsistencyLevel")
	ret0, _ := ret[0].(ConnectConsistencyLevel)
	return ret0
}

func (_mr *_MockOptionsRecorder) ClusterConnectConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterConnectConsistencyLevel")
}

func (_m *MockOptions) SetWriteRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetWriteRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetWriteRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteRequestTimeout", arg0)
}

func (_m *MockOptions) WriteRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "WriteRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) WriteRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRequestTimeout")
}

func (_m *MockOptions) SetFetchRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetFetchRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetFetchRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchRequestTimeout", arg0)
}

func (_m *MockOptions) FetchRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "FetchRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) FetchRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRequestTimeout")
}

func (_m *MockOptions) SetTruncateRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetTruncateRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetTruncateRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTruncateRequestTimeout", arg0)
}

func (_m *MockOptions) TruncateRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "TruncateRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) TruncateRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateRequestTimeout")
}

func (_m *MockOptions) SetBackgroundConnectInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundConnectInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundConnectInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundConnectInterval", arg0)
}

func (_m *MockOptions) BackgroundConnectInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundConnectInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundConnectInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectInterval")
}

func (_m *MockOptions) SetBackgroundConnectStutter(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundConnectStutter", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundConnectStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundConnectStutter", arg0)
}

func (_m *MockOptions) BackgroundConnectStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundConnectStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundConnectStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectStutter")
}

func (_m *MockOptions) SetBackgroundHealthCheckInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundHealthCheckInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckInterval", arg0)
}

func (_m *MockOptions) BackgroundHealthCheckInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundHealthCheckInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckInterval")
}

func (_m *MockOptions) SetBackgroundHealthCheckStutter(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckStutter", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundHealthCheckStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckStutter", arg0)
}

func (_m *MockOptions) BackgroundHealthCheckStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundHealthCheckStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckStutter")
}

func (_m *MockOptions) SetBackgroundHealthCheckFailLimit(value int) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckFailLimit", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundHealthCheckFailLimit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckFailLimit", arg0)
}

func (_m *MockOptions) BackgroundHealthCheckFailLimit() int {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckFailLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundHealthCheckFailLimit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckFailLimit")
}

func (_m *MockOptions) SetBackgroundHealthCheckFailThrottleFactor(value float64) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckFailThrottleFactor", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBackgroundHealthCheckFailThrottleFactor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckFailThrottleFactor", arg0)
}

func (_m *MockOptions) BackgroundHealthCheckFailThrottleFactor() float64 {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckFailThrottleFactor")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockOptionsRecorder) BackgroundHealthCheckFailThrottleFactor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckFailThrottleFactor")
}

func (_m *MockOptions) SetWriteRetrier(value retry.Retrier) Options {
	ret := _m.ctrl.Call(_m, "SetWriteRetrier", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetWriteRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteRetrier", arg0)
}

func (_m *MockOptions) WriteRetrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "WriteRetrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockOptionsRecorder) WriteRetrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRetrier")
}

func (_m *MockOptions) SetFetchRetrier(value retry.Retrier) Options {
	ret := _m.ctrl.Call(_m, "SetFetchRetrier", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetFetchRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchRetrier", arg0)
}

func (_m *MockOptions) FetchRetrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "FetchRetrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockOptionsRecorder) FetchRetrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRetrier")
}

func (_m *MockOptions) SetWriteBatchSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetWriteBatchSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetWriteBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteBatchSize", arg0)
}

func (_m *MockOptions) WriteBatchSize() int {
	ret := _m.ctrl.Call(_m, "WriteBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) WriteBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBatchSize")
}

func (_m *MockOptions) SetFetchBatchSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBatchSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetFetchBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchBatchSize", arg0)
}

func (_m *MockOptions) FetchBatchSize() int {
	ret := _m.ctrl.Call(_m, "FetchBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) FetchBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchSize")
}

func (_m *MockOptions) SetWriteOpPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetWriteOpPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetWriteOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteOpPoolSize", arg0)
}

func (_m *MockOptions) WriteOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "WriteOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) WriteOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteOpPoolSize")
}

func (_m *MockOptions) SetFetchBatchOpPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBatchOpPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetFetchBatchOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchBatchOpPoolSize", arg0)
}

func (_m *MockOptions) FetchBatchOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "FetchBatchOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) FetchBatchOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchOpPoolSize")
}

func (_m *MockOptions) SetHostQueueOpsFlushSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsFlushSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetHostQueueOpsFlushSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsFlushSize", arg0)
}

func (_m *MockOptions) HostQueueOpsFlushSize() int {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) HostQueueOpsFlushSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushSize")
}

func (_m *MockOptions) SetHostQueueOpsFlushInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsFlushInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetHostQueueOpsFlushInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsFlushInterval", arg0)
}

func (_m *MockOptions) HostQueueOpsFlushInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) HostQueueOpsFlushInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushInterval")
}

func (_m *MockOptions) SetContextPool(value context.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetContextPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetContextPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetContextPool", arg0)
}

func (_m *MockOptions) ContextPool() context.Pool {
	ret := _m.ctrl.Call(_m, "ContextPool")
	ret0, _ := ret[0].(context.Pool)
	return ret0
}

func (_mr *_MockOptionsRecorder) ContextPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContextPool")
}

func (_m *MockOptions) SetIdentifierPool(value ident.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetIdentifierPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIdentifierPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIdentifierPool", arg0)
}

func (_m *MockOptions) IdentifierPool() ident.Pool {
	ret := _m.ctrl.Call(_m, "IdentifierPool")
	ret0, _ := ret[0].(ident.Pool)
	return ret0
}

func (_mr *_MockOptionsRecorder) IdentifierPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IdentifierPool")
}

func (_m *MockOptions) SetHostQueueOpsArrayPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsArrayPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetHostQueueOpsArrayPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsArrayPoolSize", arg0)
}

func (_m *MockOptions) HostQueueOpsArrayPoolSize() int {
	ret := _m.ctrl.Call(_m, "HostQueueOpsArrayPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) HostQueueOpsArrayPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsArrayPoolSize")
}

func (_m *MockOptions) SetSeriesIteratorPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesIteratorPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetSeriesIteratorPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSeriesIteratorPoolSize", arg0)
}

func (_m *MockOptions) SeriesIteratorPoolSize() int {
	ret := _m.ctrl.Call(_m, "SeriesIteratorPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) SeriesIteratorPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorPoolSize")
}

func (_m *MockOptions) SetSeriesIteratorArrayPoolBuckets(value []pool.Bucket) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesIteratorArrayPoolBuckets", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetSeriesIteratorArrayPoolBuckets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSeriesIteratorArrayPoolBuckets", arg0)
}

func (_m *MockOptions) SeriesIteratorArrayPoolBuckets() []pool.Bucket {
	ret := _m.ctrl.Call(_m, "SeriesIteratorArrayPoolBuckets")
	ret0, _ := ret[0].([]pool.Bucket)
	return ret0
}

func (_mr *_MockOptionsRecorder) SeriesIteratorArrayPoolBuckets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorArrayPoolBuckets")
}

func (_m *MockOptions) SetReaderIteratorAllocate(value encoding.ReaderIteratorAllocate) Options {
	ret := _m.ctrl.Call(_m, "SetReaderIteratorAllocate", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetReaderIteratorAllocate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReaderIteratorAllocate", arg0)
}

func (_m *MockOptions) ReaderIteratorAllocate() encoding.ReaderIteratorAllocate {
	ret := _m.ctrl.Call(_m, "ReaderIteratorAllocate")
	ret0, _ := ret[0].(encoding.ReaderIteratorAllocate)
	return ret0
}

func (_mr *_MockOptionsRecorder) ReaderIteratorAllocate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReaderIteratorAllocate")
}

// Mock of AdminOptions interface
type MockAdminOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockAdminOptionsRecorder
}

// Recorder for MockAdminOptions (not exported)
type _MockAdminOptionsRecorder struct {
	mock *MockAdminOptions
}

func NewMockAdminOptions(ctrl *gomock.Controller) *MockAdminOptions {
	mock := &MockAdminOptions{ctrl: ctrl}
	mock.recorder = &_MockAdminOptionsRecorder{mock}
	return mock
}

func (_m *MockAdminOptions) EXPECT() *_MockAdminOptionsRecorder {
	return _m.recorder
}

func (_m *MockAdminOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockAdminOptions) SetEncodingM3TSZ() Options {
	ret := _m.ctrl.Call(_m, "SetEncodingM3TSZ")
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetEncodingM3TSZ() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEncodingM3TSZ")
}

func (_m *MockAdminOptions) SetClockOptions(value clock.Options) Options {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockAdminOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockAdminOptions) SetInstrumentOptions(value instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockAdminOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockAdminOptions) SetTopologyInitializer(value topology.Initializer) Options {
	ret := _m.ctrl.Call(_m, "SetTopologyInitializer", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetTopologyInitializer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTopologyInitializer", arg0)
}

func (_m *MockAdminOptions) TopologyInitializer() topology.Initializer {
	ret := _m.ctrl.Call(_m, "TopologyInitializer")
	ret0, _ := ret[0].(topology.Initializer)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) TopologyInitializer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TopologyInitializer")
}

func (_m *MockAdminOptions) SetWriteConsistencyLevel(value topology.ConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetWriteConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetWriteConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteConsistencyLevel", arg0)
}

func (_m *MockAdminOptions) WriteConsistencyLevel() topology.ConsistencyLevel {
	ret := _m.ctrl.Call(_m, "WriteConsistencyLevel")
	ret0, _ := ret[0].(topology.ConsistencyLevel)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) WriteConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteConsistencyLevel")
}

func (_m *MockAdminOptions) SetReadConsistencyLevel(value ReadConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetReadConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetReadConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadConsistencyLevel", arg0)
}

func (_m *MockAdminOptions) ReadConsistencyLevel() ReadConsistencyLevel {
	ret := _m.ctrl.Call(_m, "ReadConsistencyLevel")
	ret0, _ := ret[0].(ReadConsistencyLevel)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ReadConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadConsistencyLevel")
}

func (_m *MockAdminOptions) SetChannelOptions(value *tchannel_go.ChannelOptions) Options {
	ret := _m.ctrl.Call(_m, "SetChannelOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetChannelOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetChannelOptions", arg0)
}

func (_m *MockAdminOptions) ChannelOptions() *tchannel_go.ChannelOptions {
	ret := _m.ctrl.Call(_m, "ChannelOptions")
	ret0, _ := ret[0].(*tchannel_go.ChannelOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ChannelOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelOptions")
}

func (_m *MockAdminOptions) SetMaxConnectionCount(value int) Options {
	ret := _m.ctrl.Call(_m, "SetMaxConnectionCount", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetMaxConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxConnectionCount", arg0)
}

func (_m *MockAdminOptions) MaxConnectionCount() int {
	ret := _m.ctrl.Call(_m, "MaxConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) MaxConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxConnectionCount")
}

func (_m *MockAdminOptions) SetMinConnectionCount(value int) Options {
	ret := _m.ctrl.Call(_m, "SetMinConnectionCount", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetMinConnectionCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMinConnectionCount", arg0)
}

func (_m *MockAdminOptions) MinConnectionCount() int {
	ret := _m.ctrl.Call(_m, "MinConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) MinConnectionCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinConnectionCount")
}

func (_m *MockAdminOptions) SetHostConnectTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetHostConnectTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetHostConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostConnectTimeout", arg0)
}

func (_m *MockAdminOptions) HostConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "HostConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) HostConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostConnectTimeout")
}

func (_m *MockAdminOptions) SetClusterConnectTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetClusterConnectTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetClusterConnectTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClusterConnectTimeout", arg0)
}

func (_m *MockAdminOptions) ClusterConnectTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "ClusterConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ClusterConnectTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterConnectTimeout")
}

func (_m *MockAdminOptions) SetClusterConnectConsistencyLevel(value ConnectConsistencyLevel) Options {
	ret := _m.ctrl.Call(_m, "SetClusterConnectConsistencyLevel", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetClusterConnectConsistencyLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClusterConnectConsistencyLevel", arg0)
}

func (_m *MockAdminOptions) ClusterConnectConsistencyLevel() ConnectConsistencyLevel {
	ret := _m.ctrl.Call(_m, "ClusterConnectConsistencyLevel")
	ret0, _ := ret[0].(ConnectConsistencyLevel)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ClusterConnectConsistencyLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterConnectConsistencyLevel")
}

func (_m *MockAdminOptions) SetWriteRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetWriteRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetWriteRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteRequestTimeout", arg0)
}

func (_m *MockAdminOptions) WriteRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "WriteRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) WriteRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRequestTimeout")
}

func (_m *MockAdminOptions) SetFetchRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetFetchRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchRequestTimeout", arg0)
}

func (_m *MockAdminOptions) FetchRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "FetchRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRequestTimeout")
}

func (_m *MockAdminOptions) SetTruncateRequestTimeout(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetTruncateRequestTimeout", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetTruncateRequestTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTruncateRequestTimeout", arg0)
}

func (_m *MockAdminOptions) TruncateRequestTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "TruncateRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) TruncateRequestTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateRequestTimeout")
}

func (_m *MockAdminOptions) SetBackgroundConnectInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundConnectInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundConnectInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundConnectInterval", arg0)
}

func (_m *MockAdminOptions) BackgroundConnectInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundConnectInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundConnectInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectInterval")
}

func (_m *MockAdminOptions) SetBackgroundConnectStutter(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundConnectStutter", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundConnectStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundConnectStutter", arg0)
}

func (_m *MockAdminOptions) BackgroundConnectStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundConnectStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundConnectStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundConnectStutter")
}

func (_m *MockAdminOptions) SetBackgroundHealthCheckInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundHealthCheckInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckInterval", arg0)
}

func (_m *MockAdminOptions) BackgroundHealthCheckInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundHealthCheckInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckInterval")
}

func (_m *MockAdminOptions) SetBackgroundHealthCheckStutter(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckStutter", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundHealthCheckStutter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckStutter", arg0)
}

func (_m *MockAdminOptions) BackgroundHealthCheckStutter() time.Duration {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckStutter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundHealthCheckStutter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckStutter")
}

func (_m *MockAdminOptions) SetBackgroundHealthCheckFailLimit(value int) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckFailLimit", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundHealthCheckFailLimit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckFailLimit", arg0)
}

func (_m *MockAdminOptions) BackgroundHealthCheckFailLimit() int {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckFailLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundHealthCheckFailLimit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckFailLimit")
}

func (_m *MockAdminOptions) SetBackgroundHealthCheckFailThrottleFactor(value float64) Options {
	ret := _m.ctrl.Call(_m, "SetBackgroundHealthCheckFailThrottleFactor", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetBackgroundHealthCheckFailThrottleFactor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBackgroundHealthCheckFailThrottleFactor", arg0)
}

func (_m *MockAdminOptions) BackgroundHealthCheckFailThrottleFactor() float64 {
	ret := _m.ctrl.Call(_m, "BackgroundHealthCheckFailThrottleFactor")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) BackgroundHealthCheckFailThrottleFactor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackgroundHealthCheckFailThrottleFactor")
}

func (_m *MockAdminOptions) SetWriteRetrier(value retry.Retrier) Options {
	ret := _m.ctrl.Call(_m, "SetWriteRetrier", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetWriteRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteRetrier", arg0)
}

func (_m *MockAdminOptions) WriteRetrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "WriteRetrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) WriteRetrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRetrier")
}

func (_m *MockAdminOptions) SetFetchRetrier(value retry.Retrier) Options {
	ret := _m.ctrl.Call(_m, "SetFetchRetrier", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchRetrier", arg0)
}

func (_m *MockAdminOptions) FetchRetrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "FetchRetrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchRetrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRetrier")
}

func (_m *MockAdminOptions) SetWriteBatchSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetWriteBatchSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetWriteBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteBatchSize", arg0)
}

func (_m *MockAdminOptions) WriteBatchSize() int {
	ret := _m.ctrl.Call(_m, "WriteBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) WriteBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBatchSize")
}

func (_m *MockAdminOptions) SetFetchBatchSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBatchSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchBatchSize", arg0)
}

func (_m *MockAdminOptions) FetchBatchSize() int {
	ret := _m.ctrl.Call(_m, "FetchBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchSize")
}

func (_m *MockAdminOptions) SetWriteOpPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetWriteOpPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetWriteOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteOpPoolSize", arg0)
}

func (_m *MockAdminOptions) WriteOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "WriteOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) WriteOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteOpPoolSize")
}

func (_m *MockAdminOptions) SetFetchBatchOpPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBatchOpPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchBatchOpPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchBatchOpPoolSize", arg0)
}

func (_m *MockAdminOptions) FetchBatchOpPoolSize() int {
	ret := _m.ctrl.Call(_m, "FetchBatchOpPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchBatchOpPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchBatchOpPoolSize")
}

func (_m *MockAdminOptions) SetHostQueueOpsFlushSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsFlushSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetHostQueueOpsFlushSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsFlushSize", arg0)
}

func (_m *MockAdminOptions) HostQueueOpsFlushSize() int {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) HostQueueOpsFlushSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushSize")
}

func (_m *MockAdminOptions) SetHostQueueOpsFlushInterval(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsFlushInterval", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetHostQueueOpsFlushInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsFlushInterval", arg0)
}

func (_m *MockAdminOptions) HostQueueOpsFlushInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "HostQueueOpsFlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) HostQueueOpsFlushInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsFlushInterval")
}

func (_m *MockAdminOptions) SetContextPool(value context.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetContextPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetContextPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetContextPool", arg0)
}

func (_m *MockAdminOptions) ContextPool() context.Pool {
	ret := _m.ctrl.Call(_m, "ContextPool")
	ret0, _ := ret[0].(context.Pool)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ContextPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContextPool")
}

func (_m *MockAdminOptions) SetIdentifierPool(value ident.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetIdentifierPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetIdentifierPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIdentifierPool", arg0)
}

func (_m *MockAdminOptions) IdentifierPool() ident.Pool {
	ret := _m.ctrl.Call(_m, "IdentifierPool")
	ret0, _ := ret[0].(ident.Pool)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) IdentifierPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IdentifierPool")
}

func (_m *MockAdminOptions) SetHostQueueOpsArrayPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetHostQueueOpsArrayPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetHostQueueOpsArrayPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostQueueOpsArrayPoolSize", arg0)
}

func (_m *MockAdminOptions) HostQueueOpsArrayPoolSize() int {
	ret := _m.ctrl.Call(_m, "HostQueueOpsArrayPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) HostQueueOpsArrayPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HostQueueOpsArrayPoolSize")
}

func (_m *MockAdminOptions) SetSeriesIteratorPoolSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesIteratorPoolSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetSeriesIteratorPoolSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSeriesIteratorPoolSize", arg0)
}

func (_m *MockAdminOptions) SeriesIteratorPoolSize() int {
	ret := _m.ctrl.Call(_m, "SeriesIteratorPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SeriesIteratorPoolSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorPoolSize")
}

func (_m *MockAdminOptions) SetSeriesIteratorArrayPoolBuckets(value []pool.Bucket) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesIteratorArrayPoolBuckets", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetSeriesIteratorArrayPoolBuckets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSeriesIteratorArrayPoolBuckets", arg0)
}

func (_m *MockAdminOptions) SeriesIteratorArrayPoolBuckets() []pool.Bucket {
	ret := _m.ctrl.Call(_m, "SeriesIteratorArrayPoolBuckets")
	ret0, _ := ret[0].([]pool.Bucket)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SeriesIteratorArrayPoolBuckets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeriesIteratorArrayPoolBuckets")
}

func (_m *MockAdminOptions) SetReaderIteratorAllocate(value encoding.ReaderIteratorAllocate) Options {
	ret := _m.ctrl.Call(_m, "SetReaderIteratorAllocate", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetReaderIteratorAllocate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReaderIteratorAllocate", arg0)
}

func (_m *MockAdminOptions) ReaderIteratorAllocate() encoding.ReaderIteratorAllocate {
	ret := _m.ctrl.Call(_m, "ReaderIteratorAllocate")
	ret0, _ := ret[0].(encoding.ReaderIteratorAllocate)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) ReaderIteratorAllocate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReaderIteratorAllocate")
}

func (_m *MockAdminOptions) SetOrigin(value topology.Host) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetOrigin", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetOrigin(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOrigin", arg0)
}

func (_m *MockAdminOptions) Origin() topology.Host {
	ret := _m.ctrl.Call(_m, "Origin")
	ret0, _ := ret[0].(topology.Host)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) Origin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Origin")
}

func (_m *MockAdminOptions) SetFetchSeriesBlocksMaxBlockRetries(value int) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetFetchSeriesBlocksMaxBlockRetries", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchSeriesBlocksMaxBlockRetries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchSeriesBlocksMaxBlockRetries", arg0)
}

func (_m *MockAdminOptions) FetchSeriesBlocksMaxBlockRetries() int {
	ret := _m.ctrl.Call(_m, "FetchSeriesBlocksMaxBlockRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchSeriesBlocksMaxBlockRetries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSeriesBlocksMaxBlockRetries")
}

func (_m *MockAdminOptions) SetFetchSeriesBlocksBatchSize(value int) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetFetchSeriesBlocksBatchSize", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchSeriesBlocksBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchSeriesBlocksBatchSize", arg0)
}

func (_m *MockAdminOptions) FetchSeriesBlocksBatchSize() int {
	ret := _m.ctrl.Call(_m, "FetchSeriesBlocksBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchSeriesBlocksBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSeriesBlocksBatchSize")
}

func (_m *MockAdminOptions) SetFetchSeriesBlocksMetadataBatchTimeout(value time.Duration) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetFetchSeriesBlocksMetadataBatchTimeout", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchSeriesBlocksMetadataBatchTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchSeriesBlocksMetadataBatchTimeout", arg0)
}

func (_m *MockAdminOptions) FetchSeriesBlocksMetadataBatchTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "FetchSeriesBlocksMetadataBatchTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchSeriesBlocksMetadataBatchTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSeriesBlocksMetadataBatchTimeout")
}

func (_m *MockAdminOptions) SetFetchSeriesBlocksBatchTimeout(value time.Duration) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetFetchSeriesBlocksBatchTimeout", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchSeriesBlocksBatchTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchSeriesBlocksBatchTimeout", arg0)
}

func (_m *MockAdminOptions) FetchSeriesBlocksBatchTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "FetchSeriesBlocksBatchTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchSeriesBlocksBatchTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSeriesBlocksBatchTimeout")
}

func (_m *MockAdminOptions) SetFetchSeriesBlocksBatchConcurrency(value int) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetFetchSeriesBlocksBatchConcurrency", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetFetchSeriesBlocksBatchConcurrency(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFetchSeriesBlocksBatchConcurrency", arg0)
}

func (_m *MockAdminOptions) FetchSeriesBlocksBatchConcurrency() int {
	ret := _m.ctrl.Call(_m, "FetchSeriesBlocksBatchConcurrency")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) FetchSeriesBlocksBatchConcurrency() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSeriesBlocksBatchConcurrency")
}

func (_m *MockAdminOptions) SetStreamBlocksRetrier(value retry.Retrier) AdminOptions {
	ret := _m.ctrl.Call(_m, "SetStreamBlocksRetrier", value)
	ret0, _ := ret[0].(AdminOptions)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) SetStreamBlocksRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStreamBlocksRetrier", arg0)
}

func (_m *MockAdminOptions) StreamBlocksRetrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "StreamBlocksRetrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockAdminOptionsRecorder) StreamBlocksRetrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StreamBlocksRetrier")
}
