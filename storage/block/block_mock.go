// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/storage/block/types.go

package block

import (
	"reflect"
	"time"

	"github.com/m3db/m3db/encoding"
	"github.com/m3db/m3db/storage/namespace"
	"github.com/m3db/m3db/ts"
	"github.com/m3db/m3db/x/xio"
	"github.com/m3db/m3x/clock"
	"github.com/m3db/m3x/context"
	"github.com/m3db/m3x/ident"
	"github.com/m3db/m3x/pool"
	"github.com/m3db/m3x/sync"
	time0 "github.com/m3db/m3x/time"

	"github.com/golang/mock/gomock"
)

// MockFilteredBlocksMetadataIter is a mock of FilteredBlocksMetadataIter interface
type MockFilteredBlocksMetadataIter struct {
	ctrl     *gomock.Controller
	recorder *MockFilteredBlocksMetadataIterMockRecorder
}

// MockFilteredBlocksMetadataIterMockRecorder is the mock recorder for MockFilteredBlocksMetadataIter
type MockFilteredBlocksMetadataIterMockRecorder struct {
	mock *MockFilteredBlocksMetadataIter
}

// NewMockFilteredBlocksMetadataIter creates a new mock instance
func NewMockFilteredBlocksMetadataIter(ctrl *gomock.Controller) *MockFilteredBlocksMetadataIter {
	mock := &MockFilteredBlocksMetadataIter{ctrl: ctrl}
	mock.recorder = &MockFilteredBlocksMetadataIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFilteredBlocksMetadataIter) EXPECT() *MockFilteredBlocksMetadataIterMockRecorder {
	return _m.recorder
}

// Next mocks base method
func (_m *MockFilteredBlocksMetadataIter) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockFilteredBlocksMetadataIterMockRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Next", reflect.TypeOf((*MockFilteredBlocksMetadataIter)(nil).Next))
}

// Current mocks base method
func (_m *MockFilteredBlocksMetadataIter) Current() (ident.ID, Metadata) {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(ident.ID)
	ret1, _ := ret[1].(Metadata)
	return ret0, ret1
}

// Current indicates an expected call of Current
func (_mr *MockFilteredBlocksMetadataIterMockRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Current", reflect.TypeOf((*MockFilteredBlocksMetadataIter)(nil).Current))
}

// MockFetchBlockMetadataResults is a mock of FetchBlockMetadataResults interface
type MockFetchBlockMetadataResults struct {
	ctrl     *gomock.Controller
	recorder *MockFetchBlockMetadataResultsMockRecorder
}

// MockFetchBlockMetadataResultsMockRecorder is the mock recorder for MockFetchBlockMetadataResults
type MockFetchBlockMetadataResultsMockRecorder struct {
	mock *MockFetchBlockMetadataResults
}

// NewMockFetchBlockMetadataResults creates a new mock instance
func NewMockFetchBlockMetadataResults(ctrl *gomock.Controller) *MockFetchBlockMetadataResults {
	mock := &MockFetchBlockMetadataResults{ctrl: ctrl}
	mock.recorder = &MockFetchBlockMetadataResultsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFetchBlockMetadataResults) EXPECT() *MockFetchBlockMetadataResultsMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockFetchBlockMetadataResults) Add(res FetchBlockMetadataResult) {
	_m.ctrl.Call(_m, "Add", res)
}

// Add indicates an expected call of Add
func (_mr *MockFetchBlockMetadataResultsMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockFetchBlockMetadataResults)(nil).Add), arg0)
}

// Results mocks base method
func (_m *MockFetchBlockMetadataResults) Results() []FetchBlockMetadataResult {
	ret := _m.ctrl.Call(_m, "Results")
	ret0, _ := ret[0].([]FetchBlockMetadataResult)
	return ret0
}

// Results indicates an expected call of Results
func (_mr *MockFetchBlockMetadataResultsMockRecorder) Results() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Results", reflect.TypeOf((*MockFetchBlockMetadataResults)(nil).Results))
}

// Sort mocks base method
func (_m *MockFetchBlockMetadataResults) Sort() {
	_m.ctrl.Call(_m, "Sort")
}

// Sort indicates an expected call of Sort
func (_mr *MockFetchBlockMetadataResultsMockRecorder) Sort() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Sort", reflect.TypeOf((*MockFetchBlockMetadataResults)(nil).Sort))
}

// Reset mocks base method
func (_m *MockFetchBlockMetadataResults) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockFetchBlockMetadataResultsMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockFetchBlockMetadataResults)(nil).Reset))
}

// Close mocks base method
func (_m *MockFetchBlockMetadataResults) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockFetchBlockMetadataResultsMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockFetchBlockMetadataResults)(nil).Close))
}

// MockFetchBlocksMetadataResults is a mock of FetchBlocksMetadataResults interface
type MockFetchBlocksMetadataResults struct {
	ctrl     *gomock.Controller
	recorder *MockFetchBlocksMetadataResultsMockRecorder
}

// MockFetchBlocksMetadataResultsMockRecorder is the mock recorder for MockFetchBlocksMetadataResults
type MockFetchBlocksMetadataResultsMockRecorder struct {
	mock *MockFetchBlocksMetadataResults
}

// NewMockFetchBlocksMetadataResults creates a new mock instance
func NewMockFetchBlocksMetadataResults(ctrl *gomock.Controller) *MockFetchBlocksMetadataResults {
	mock := &MockFetchBlocksMetadataResults{ctrl: ctrl}
	mock.recorder = &MockFetchBlocksMetadataResultsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFetchBlocksMetadataResults) EXPECT() *MockFetchBlocksMetadataResultsMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockFetchBlocksMetadataResults) Add(res FetchBlocksMetadataResult) {
	_m.ctrl.Call(_m, "Add", res)
}

// Add indicates an expected call of Add
func (_mr *MockFetchBlocksMetadataResultsMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockFetchBlocksMetadataResults)(nil).Add), arg0)
}

// Results mocks base method
func (_m *MockFetchBlocksMetadataResults) Results() []FetchBlocksMetadataResult {
	ret := _m.ctrl.Call(_m, "Results")
	ret0, _ := ret[0].([]FetchBlocksMetadataResult)
	return ret0
}

// Results indicates an expected call of Results
func (_mr *MockFetchBlocksMetadataResultsMockRecorder) Results() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Results", reflect.TypeOf((*MockFetchBlocksMetadataResults)(nil).Results))
}

// Reset mocks base method
func (_m *MockFetchBlocksMetadataResults) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockFetchBlocksMetadataResultsMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockFetchBlocksMetadataResults)(nil).Reset))
}

// Close mocks base method
func (_m *MockFetchBlocksMetadataResults) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockFetchBlocksMetadataResultsMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockFetchBlocksMetadataResults)(nil).Close))
}

// MockDatabaseBlock is a mock of DatabaseBlock interface
type MockDatabaseBlock struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBlockMockRecorder
}

// MockDatabaseBlockMockRecorder is the mock recorder for MockDatabaseBlock
type MockDatabaseBlockMockRecorder struct {
	mock *MockDatabaseBlock
}

// NewMockDatabaseBlock creates a new mock instance
func NewMockDatabaseBlock(ctrl *gomock.Controller) *MockDatabaseBlock {
	mock := &MockDatabaseBlock{ctrl: ctrl}
	mock.recorder = &MockDatabaseBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseBlock) EXPECT() *MockDatabaseBlockMockRecorder {
	return _m.recorder
}

// OnRetrieveBlock mocks base method
func (_m *MockDatabaseBlock) OnRetrieveBlock(id ident.ID, startTime time.Time, segment ts.Segment) {
	_m.ctrl.Call(_m, "OnRetrieveBlock", id, startTime, segment)
}

// OnRetrieveBlock indicates an expected call of OnRetrieveBlock
func (_mr *MockDatabaseBlockMockRecorder) OnRetrieveBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnRetrieveBlock", reflect.TypeOf((*MockDatabaseBlock)(nil).OnRetrieveBlock), arg0, arg1, arg2)
}

// StartTime mocks base method
func (_m *MockDatabaseBlock) StartTime() time.Time {
	ret := _m.ctrl.Call(_m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartTime indicates an expected call of StartTime
func (_mr *MockDatabaseBlockMockRecorder) StartTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartTime", reflect.TypeOf((*MockDatabaseBlock)(nil).StartTime))
}

// SetLastReadTime mocks base method
func (_m *MockDatabaseBlock) SetLastReadTime(value time.Time) {
	_m.ctrl.Call(_m, "SetLastReadTime", value)
}

// SetLastReadTime indicates an expected call of SetLastReadTime
func (_mr *MockDatabaseBlockMockRecorder) SetLastReadTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLastReadTime", reflect.TypeOf((*MockDatabaseBlock)(nil).SetLastReadTime), arg0)
}

// LastReadTime mocks base method
func (_m *MockDatabaseBlock) LastReadTime() time.Time {
	ret := _m.ctrl.Call(_m, "LastReadTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastReadTime indicates an expected call of LastReadTime
func (_mr *MockDatabaseBlockMockRecorder) LastReadTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LastReadTime", reflect.TypeOf((*MockDatabaseBlock)(nil).LastReadTime))
}

// Len mocks base method
func (_m *MockDatabaseBlock) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (_mr *MockDatabaseBlockMockRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Len", reflect.TypeOf((*MockDatabaseBlock)(nil).Len))
}

// Checksum mocks base method
func (_m *MockDatabaseBlock) Checksum() uint32 {
	ret := _m.ctrl.Call(_m, "Checksum")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Checksum indicates an expected call of Checksum
func (_mr *MockDatabaseBlockMockRecorder) Checksum() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Checksum", reflect.TypeOf((*MockDatabaseBlock)(nil).Checksum))
}

// Stream mocks base method
func (_m *MockDatabaseBlock) Stream(blocker context.Context) (xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "Stream", blocker)
	ret0, _ := ret[0].(xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream
func (_mr *MockDatabaseBlockMockRecorder) Stream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stream", reflect.TypeOf((*MockDatabaseBlock)(nil).Stream), arg0)
}

// Merge mocks base method
func (_m *MockDatabaseBlock) Merge(other DatabaseBlock) {
	_m.ctrl.Call(_m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (_mr *MockDatabaseBlockMockRecorder) Merge(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Merge", reflect.TypeOf((*MockDatabaseBlock)(nil).Merge), arg0)
}

// IsRetrieved mocks base method
func (_m *MockDatabaseBlock) IsRetrieved() bool {
	ret := _m.ctrl.Call(_m, "IsRetrieved")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetrieved indicates an expected call of IsRetrieved
func (_mr *MockDatabaseBlockMockRecorder) IsRetrieved() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsRetrieved", reflect.TypeOf((*MockDatabaseBlock)(nil).IsRetrieved))
}

// WasRetrievedFromDisk mocks base method
func (_m *MockDatabaseBlock) WasRetrievedFromDisk() bool {
	ret := _m.ctrl.Call(_m, "WasRetrievedFromDisk")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasRetrievedFromDisk indicates an expected call of WasRetrievedFromDisk
func (_mr *MockDatabaseBlockMockRecorder) WasRetrievedFromDisk() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WasRetrievedFromDisk", reflect.TypeOf((*MockDatabaseBlock)(nil).WasRetrievedFromDisk))
}

// IsCachedBlock mocks base method
func (_m *MockDatabaseBlock) IsCachedBlock() bool {
	ret := _m.ctrl.Call(_m, "IsCachedBlock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCachedBlock indicates an expected call of IsCachedBlock
func (_mr *MockDatabaseBlockMockRecorder) IsCachedBlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsCachedBlock", reflect.TypeOf((*MockDatabaseBlock)(nil).IsCachedBlock))
}

// Reset mocks base method
func (_m *MockDatabaseBlock) Reset(startTime time.Time, segment ts.Segment) {
	_m.ctrl.Call(_m, "Reset", startTime, segment)
}

// Reset indicates an expected call of Reset
func (_mr *MockDatabaseBlockMockRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockDatabaseBlock)(nil).Reset), arg0, arg1)
}

// ResetRetrievable mocks base method
func (_m *MockDatabaseBlock) ResetRetrievable(startTime time.Time, retriever DatabaseShardBlockRetriever, metadata RetrievableBlockMetadata) {
	_m.ctrl.Call(_m, "ResetRetrievable", startTime, retriever, metadata)
}

// ResetRetrievable indicates an expected call of ResetRetrievable
func (_mr *MockDatabaseBlockMockRecorder) ResetRetrievable(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ResetRetrievable", reflect.TypeOf((*MockDatabaseBlock)(nil).ResetRetrievable), arg0, arg1, arg2)
}

// Close mocks base method
func (_m *MockDatabaseBlock) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockDatabaseBlockMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDatabaseBlock)(nil).Close))
}

// SetOnEvictedFromWiredList mocks base method
func (_m *MockDatabaseBlock) SetOnEvictedFromWiredList(_param0 OnEvictedFromWiredList) {
	_m.ctrl.Call(_m, "SetOnEvictedFromWiredList", _param0)
}

// SetOnEvictedFromWiredList indicates an expected call of SetOnEvictedFromWiredList
func (_mr *MockDatabaseBlockMockRecorder) SetOnEvictedFromWiredList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetOnEvictedFromWiredList", reflect.TypeOf((*MockDatabaseBlock)(nil).SetOnEvictedFromWiredList), arg0)
}

// OnEvictedFromWiredList mocks base method
func (_m *MockDatabaseBlock) OnEvictedFromWiredList() OnEvictedFromWiredList {
	ret := _m.ctrl.Call(_m, "OnEvictedFromWiredList")
	ret0, _ := ret[0].(OnEvictedFromWiredList)
	return ret0
}

// OnEvictedFromWiredList indicates an expected call of OnEvictedFromWiredList
func (_mr *MockDatabaseBlockMockRecorder) OnEvictedFromWiredList() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvictedFromWiredList", reflect.TypeOf((*MockDatabaseBlock)(nil).OnEvictedFromWiredList))
}

// next mocks base method
func (_m *MockDatabaseBlock) next() DatabaseBlock {
	ret := _m.ctrl.Call(_m, "next")
	ret0, _ := ret[0].(DatabaseBlock)
	return ret0
}

// next indicates an expected call of next
func (_mr *MockDatabaseBlockMockRecorder) next() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "next", reflect.TypeOf((*MockDatabaseBlock)(nil).next))
}

// setNext mocks base method
func (_m *MockDatabaseBlock) setNext(block DatabaseBlock) {
	_m.ctrl.Call(_m, "setNext", block)
}

// setNext indicates an expected call of setNext
func (_mr *MockDatabaseBlockMockRecorder) setNext(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setNext", reflect.TypeOf((*MockDatabaseBlock)(nil).setNext), arg0)
}

// prev mocks base method
func (_m *MockDatabaseBlock) prev() DatabaseBlock {
	ret := _m.ctrl.Call(_m, "prev")
	ret0, _ := ret[0].(DatabaseBlock)
	return ret0
}

// prev indicates an expected call of prev
func (_mr *MockDatabaseBlockMockRecorder) prev() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "prev", reflect.TypeOf((*MockDatabaseBlock)(nil).prev))
}

// setPrev mocks base method
func (_m *MockDatabaseBlock) setPrev(block DatabaseBlock) {
	_m.ctrl.Call(_m, "setPrev", block)
}

// setPrev indicates an expected call of setPrev
func (_mr *MockDatabaseBlockMockRecorder) setPrev(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setPrev", reflect.TypeOf((*MockDatabaseBlock)(nil).setPrev), arg0)
}

// nextPrevUpdatedAtUnixNano mocks base method
func (_m *MockDatabaseBlock) nextPrevUpdatedAtUnixNano() int64 {
	ret := _m.ctrl.Call(_m, "nextPrevUpdatedAtUnixNano")
	ret0, _ := ret[0].(int64)
	return ret0
}

// nextPrevUpdatedAtUnixNano indicates an expected call of nextPrevUpdatedAtUnixNano
func (_mr *MockDatabaseBlockMockRecorder) nextPrevUpdatedAtUnixNano() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "nextPrevUpdatedAtUnixNano", reflect.TypeOf((*MockDatabaseBlock)(nil).nextPrevUpdatedAtUnixNano))
}

// setNextPrevUpdatedAtUnixNano mocks base method
func (_m *MockDatabaseBlock) setNextPrevUpdatedAtUnixNano(value int64) {
	_m.ctrl.Call(_m, "setNextPrevUpdatedAtUnixNano", value)
}

// setNextPrevUpdatedAtUnixNano indicates an expected call of setNextPrevUpdatedAtUnixNano
func (_mr *MockDatabaseBlockMockRecorder) setNextPrevUpdatedAtUnixNano(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setNextPrevUpdatedAtUnixNano", reflect.TypeOf((*MockDatabaseBlock)(nil).setNextPrevUpdatedAtUnixNano), arg0)
}

// wiredListEntry mocks base method
func (_m *MockDatabaseBlock) wiredListEntry() wiredListEntry {
	ret := _m.ctrl.Call(_m, "wiredListEntry")
	ret0, _ := ret[0].(wiredListEntry)
	return ret0
}

// wiredListEntry indicates an expected call of wiredListEntry
func (_mr *MockDatabaseBlockMockRecorder) wiredListEntry() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "wiredListEntry", reflect.TypeOf((*MockDatabaseBlock)(nil).wiredListEntry))
}

// MockdatabaseBlock is a mock of databaseBlock interface
type MockdatabaseBlock struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseBlockMockRecorder
}

// MockdatabaseBlockMockRecorder is the mock recorder for MockdatabaseBlock
type MockdatabaseBlockMockRecorder struct {
	mock *MockdatabaseBlock
}

// NewMockdatabaseBlock creates a new mock instance
func NewMockdatabaseBlock(ctrl *gomock.Controller) *MockdatabaseBlock {
	mock := &MockdatabaseBlock{ctrl: ctrl}
	mock.recorder = &MockdatabaseBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseBlock) EXPECT() *MockdatabaseBlockMockRecorder {
	return _m.recorder
}

// next mocks base method
func (_m *MockdatabaseBlock) next() DatabaseBlock {
	ret := _m.ctrl.Call(_m, "next")
	ret0, _ := ret[0].(DatabaseBlock)
	return ret0
}

// next indicates an expected call of next
func (_mr *MockdatabaseBlockMockRecorder) next() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "next", reflect.TypeOf((*MockdatabaseBlock)(nil).next))
}

// setNext mocks base method
func (_m *MockdatabaseBlock) setNext(block DatabaseBlock) {
	_m.ctrl.Call(_m, "setNext", block)
}

// setNext indicates an expected call of setNext
func (_mr *MockdatabaseBlockMockRecorder) setNext(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setNext", reflect.TypeOf((*MockdatabaseBlock)(nil).setNext), arg0)
}

// prev mocks base method
func (_m *MockdatabaseBlock) prev() DatabaseBlock {
	ret := _m.ctrl.Call(_m, "prev")
	ret0, _ := ret[0].(DatabaseBlock)
	return ret0
}

// prev indicates an expected call of prev
func (_mr *MockdatabaseBlockMockRecorder) prev() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "prev", reflect.TypeOf((*MockdatabaseBlock)(nil).prev))
}

// setPrev mocks base method
func (_m *MockdatabaseBlock) setPrev(block DatabaseBlock) {
	_m.ctrl.Call(_m, "setPrev", block)
}

// setPrev indicates an expected call of setPrev
func (_mr *MockdatabaseBlockMockRecorder) setPrev(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setPrev", reflect.TypeOf((*MockdatabaseBlock)(nil).setPrev), arg0)
}

// nextPrevUpdatedAtUnixNano mocks base method
func (_m *MockdatabaseBlock) nextPrevUpdatedAtUnixNano() int64 {
	ret := _m.ctrl.Call(_m, "nextPrevUpdatedAtUnixNano")
	ret0, _ := ret[0].(int64)
	return ret0
}

// nextPrevUpdatedAtUnixNano indicates an expected call of nextPrevUpdatedAtUnixNano
func (_mr *MockdatabaseBlockMockRecorder) nextPrevUpdatedAtUnixNano() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "nextPrevUpdatedAtUnixNano", reflect.TypeOf((*MockdatabaseBlock)(nil).nextPrevUpdatedAtUnixNano))
}

// setNextPrevUpdatedAtUnixNano mocks base method
func (_m *MockdatabaseBlock) setNextPrevUpdatedAtUnixNano(value int64) {
	_m.ctrl.Call(_m, "setNextPrevUpdatedAtUnixNano", value)
}

// setNextPrevUpdatedAtUnixNano indicates an expected call of setNextPrevUpdatedAtUnixNano
func (_mr *MockdatabaseBlockMockRecorder) setNextPrevUpdatedAtUnixNano(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setNextPrevUpdatedAtUnixNano", reflect.TypeOf((*MockdatabaseBlock)(nil).setNextPrevUpdatedAtUnixNano), arg0)
}

// wiredListEntry mocks base method
func (_m *MockdatabaseBlock) wiredListEntry() wiredListEntry {
	ret := _m.ctrl.Call(_m, "wiredListEntry")
	ret0, _ := ret[0].(wiredListEntry)
	return ret0
}

// wiredListEntry indicates an expected call of wiredListEntry
func (_mr *MockdatabaseBlockMockRecorder) wiredListEntry() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "wiredListEntry", reflect.TypeOf((*MockdatabaseBlock)(nil).wiredListEntry))
}

// MockOnEvictedFromWiredList is a mock of OnEvictedFromWiredList interface
type MockOnEvictedFromWiredList struct {
	ctrl     *gomock.Controller
	recorder *MockOnEvictedFromWiredListMockRecorder
}

// MockOnEvictedFromWiredListMockRecorder is the mock recorder for MockOnEvictedFromWiredList
type MockOnEvictedFromWiredListMockRecorder struct {
	mock *MockOnEvictedFromWiredList
}

// NewMockOnEvictedFromWiredList creates a new mock instance
func NewMockOnEvictedFromWiredList(ctrl *gomock.Controller) *MockOnEvictedFromWiredList {
	mock := &MockOnEvictedFromWiredList{ctrl: ctrl}
	mock.recorder = &MockOnEvictedFromWiredListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOnEvictedFromWiredList) EXPECT() *MockOnEvictedFromWiredListMockRecorder {
	return _m.recorder
}

// OnEvictedFromWiredList mocks base method
func (_m *MockOnEvictedFromWiredList) OnEvictedFromWiredList(id ident.ID, blockStart time.Time) {
	_m.ctrl.Call(_m, "OnEvictedFromWiredList", id, blockStart)
}

// OnEvictedFromWiredList indicates an expected call of OnEvictedFromWiredList
func (_mr *MockOnEvictedFromWiredListMockRecorder) OnEvictedFromWiredList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvictedFromWiredList", reflect.TypeOf((*MockOnEvictedFromWiredList)(nil).OnEvictedFromWiredList), arg0, arg1)
}

// MockOnRetrieveBlock is a mock of OnRetrieveBlock interface
type MockOnRetrieveBlock struct {
	ctrl     *gomock.Controller
	recorder *MockOnRetrieveBlockMockRecorder
}

// MockOnRetrieveBlockMockRecorder is the mock recorder for MockOnRetrieveBlock
type MockOnRetrieveBlockMockRecorder struct {
	mock *MockOnRetrieveBlock
}

// NewMockOnRetrieveBlock creates a new mock instance
func NewMockOnRetrieveBlock(ctrl *gomock.Controller) *MockOnRetrieveBlock {
	mock := &MockOnRetrieveBlock{ctrl: ctrl}
	mock.recorder = &MockOnRetrieveBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOnRetrieveBlock) EXPECT() *MockOnRetrieveBlockMockRecorder {
	return _m.recorder
}

// OnRetrieveBlock mocks base method
func (_m *MockOnRetrieveBlock) OnRetrieveBlock(id ident.ID, startTime time.Time, segment ts.Segment) {
	_m.ctrl.Call(_m, "OnRetrieveBlock", id, startTime, segment)
}

// OnRetrieveBlock indicates an expected call of OnRetrieveBlock
func (_mr *MockOnRetrieveBlockMockRecorder) OnRetrieveBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnRetrieveBlock", reflect.TypeOf((*MockOnRetrieveBlock)(nil).OnRetrieveBlock), arg0, arg1, arg2)
}

// MockOnReadBlock is a mock of OnReadBlock interface
type MockOnReadBlock struct {
	ctrl     *gomock.Controller
	recorder *MockOnReadBlockMockRecorder
}

// MockOnReadBlockMockRecorder is the mock recorder for MockOnReadBlock
type MockOnReadBlockMockRecorder struct {
	mock *MockOnReadBlock
}

// NewMockOnReadBlock creates a new mock instance
func NewMockOnReadBlock(ctrl *gomock.Controller) *MockOnReadBlock {
	mock := &MockOnReadBlock{ctrl: ctrl}
	mock.recorder = &MockOnReadBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOnReadBlock) EXPECT() *MockOnReadBlockMockRecorder {
	return _m.recorder
}

// OnReadBlock mocks base method
func (_m *MockOnReadBlock) OnReadBlock(b DatabaseBlock) {
	_m.ctrl.Call(_m, "OnReadBlock", b)
}

// OnReadBlock indicates an expected call of OnReadBlock
func (_mr *MockOnReadBlockMockRecorder) OnReadBlock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnReadBlock", reflect.TypeOf((*MockOnReadBlock)(nil).OnReadBlock), arg0)
}

// MockDatabaseBlockRetriever is a mock of DatabaseBlockRetriever interface
type MockDatabaseBlockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBlockRetrieverMockRecorder
}

// MockDatabaseBlockRetrieverMockRecorder is the mock recorder for MockDatabaseBlockRetriever
type MockDatabaseBlockRetrieverMockRecorder struct {
	mock *MockDatabaseBlockRetriever
}

// NewMockDatabaseBlockRetriever creates a new mock instance
func NewMockDatabaseBlockRetriever(ctrl *gomock.Controller) *MockDatabaseBlockRetriever {
	mock := &MockDatabaseBlockRetriever{ctrl: ctrl}
	mock.recorder = &MockDatabaseBlockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseBlockRetriever) EXPECT() *MockDatabaseBlockRetrieverMockRecorder {
	return _m.recorder
}

// CacheShardIndices mocks base method
func (_m *MockDatabaseBlockRetriever) CacheShardIndices(shards []uint32) error {
	ret := _m.ctrl.Call(_m, "CacheShardIndices", shards)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheShardIndices indicates an expected call of CacheShardIndices
func (_mr *MockDatabaseBlockRetrieverMockRecorder) CacheShardIndices(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CacheShardIndices", reflect.TypeOf((*MockDatabaseBlockRetriever)(nil).CacheShardIndices), arg0)
}

// Stream mocks base method
func (_m *MockDatabaseBlockRetriever) Stream(ctx context.Context, shard uint32, id ident.ID, blockStart time.Time, onRetrieve OnRetrieveBlock) (xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "Stream", ctx, shard, id, blockStart, onRetrieve)
	ret0, _ := ret[0].(xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream
func (_mr *MockDatabaseBlockRetrieverMockRecorder) Stream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stream", reflect.TypeOf((*MockDatabaseBlockRetriever)(nil).Stream), arg0, arg1, arg2, arg3, arg4)
}

// MockDatabaseShardBlockRetriever is a mock of DatabaseShardBlockRetriever interface
type MockDatabaseShardBlockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseShardBlockRetrieverMockRecorder
}

// MockDatabaseShardBlockRetrieverMockRecorder is the mock recorder for MockDatabaseShardBlockRetriever
type MockDatabaseShardBlockRetrieverMockRecorder struct {
	mock *MockDatabaseShardBlockRetriever
}

// NewMockDatabaseShardBlockRetriever creates a new mock instance
func NewMockDatabaseShardBlockRetriever(ctrl *gomock.Controller) *MockDatabaseShardBlockRetriever {
	mock := &MockDatabaseShardBlockRetriever{ctrl: ctrl}
	mock.recorder = &MockDatabaseShardBlockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseShardBlockRetriever) EXPECT() *MockDatabaseShardBlockRetrieverMockRecorder {
	return _m.recorder
}

// Stream mocks base method
func (_m *MockDatabaseShardBlockRetriever) Stream(ctx context.Context, id ident.ID, blockStart time.Time, onRetrieve OnRetrieveBlock) (xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "Stream", ctx, id, blockStart, onRetrieve)
	ret0, _ := ret[0].(xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream
func (_mr *MockDatabaseShardBlockRetrieverMockRecorder) Stream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stream", reflect.TypeOf((*MockDatabaseShardBlockRetriever)(nil).Stream), arg0, arg1, arg2, arg3)
}

// MockDatabaseBlockRetrieverManager is a mock of DatabaseBlockRetrieverManager interface
type MockDatabaseBlockRetrieverManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBlockRetrieverManagerMockRecorder
}

// MockDatabaseBlockRetrieverManagerMockRecorder is the mock recorder for MockDatabaseBlockRetrieverManager
type MockDatabaseBlockRetrieverManagerMockRecorder struct {
	mock *MockDatabaseBlockRetrieverManager
}

// NewMockDatabaseBlockRetrieverManager creates a new mock instance
func NewMockDatabaseBlockRetrieverManager(ctrl *gomock.Controller) *MockDatabaseBlockRetrieverManager {
	mock := &MockDatabaseBlockRetrieverManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseBlockRetrieverManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseBlockRetrieverManager) EXPECT() *MockDatabaseBlockRetrieverManagerMockRecorder {
	return _m.recorder
}

// Retriever mocks base method
func (_m *MockDatabaseBlockRetrieverManager) Retriever(nsMetadata namespace.Metadata) (DatabaseBlockRetriever, error) {
	ret := _m.ctrl.Call(_m, "Retriever", nsMetadata)
	ret0, _ := ret[0].(DatabaseBlockRetriever)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retriever indicates an expected call of Retriever
func (_mr *MockDatabaseBlockRetrieverManagerMockRecorder) Retriever(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Retriever", reflect.TypeOf((*MockDatabaseBlockRetrieverManager)(nil).Retriever), arg0)
}

// MockDatabaseShardBlockRetrieverManager is a mock of DatabaseShardBlockRetrieverManager interface
type MockDatabaseShardBlockRetrieverManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseShardBlockRetrieverManagerMockRecorder
}

// MockDatabaseShardBlockRetrieverManagerMockRecorder is the mock recorder for MockDatabaseShardBlockRetrieverManager
type MockDatabaseShardBlockRetrieverManagerMockRecorder struct {
	mock *MockDatabaseShardBlockRetrieverManager
}

// NewMockDatabaseShardBlockRetrieverManager creates a new mock instance
func NewMockDatabaseShardBlockRetrieverManager(ctrl *gomock.Controller) *MockDatabaseShardBlockRetrieverManager {
	mock := &MockDatabaseShardBlockRetrieverManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseShardBlockRetrieverManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseShardBlockRetrieverManager) EXPECT() *MockDatabaseShardBlockRetrieverManagerMockRecorder {
	return _m.recorder
}

// ShardRetriever mocks base method
func (_m *MockDatabaseShardBlockRetrieverManager) ShardRetriever(shard uint32) DatabaseShardBlockRetriever {
	ret := _m.ctrl.Call(_m, "ShardRetriever", shard)
	ret0, _ := ret[0].(DatabaseShardBlockRetriever)
	return ret0
}

// ShardRetriever indicates an expected call of ShardRetriever
func (_mr *MockDatabaseShardBlockRetrieverManagerMockRecorder) ShardRetriever(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardRetriever", reflect.TypeOf((*MockDatabaseShardBlockRetrieverManager)(nil).ShardRetriever), arg0)
}

// MockDatabaseSeriesBlocks is a mock of DatabaseSeriesBlocks interface
type MockDatabaseSeriesBlocks struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseSeriesBlocksMockRecorder
}

// MockDatabaseSeriesBlocksMockRecorder is the mock recorder for MockDatabaseSeriesBlocks
type MockDatabaseSeriesBlocksMockRecorder struct {
	mock *MockDatabaseSeriesBlocks
}

// NewMockDatabaseSeriesBlocks creates a new mock instance
func NewMockDatabaseSeriesBlocks(ctrl *gomock.Controller) *MockDatabaseSeriesBlocks {
	mock := &MockDatabaseSeriesBlocks{ctrl: ctrl}
	mock.recorder = &MockDatabaseSeriesBlocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseSeriesBlocks) EXPECT() *MockDatabaseSeriesBlocksMockRecorder {
	return _m.recorder
}

// Len mocks base method
func (_m *MockDatabaseSeriesBlocks) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (_mr *MockDatabaseSeriesBlocksMockRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Len", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).Len))
}

// AddBlock mocks base method
func (_m *MockDatabaseSeriesBlocks) AddBlock(block DatabaseBlock) {
	_m.ctrl.Call(_m, "AddBlock", block)
}

// AddBlock indicates an expected call of AddBlock
func (_mr *MockDatabaseSeriesBlocksMockRecorder) AddBlock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddBlock", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).AddBlock), arg0)
}

// AddSeries mocks base method
func (_m *MockDatabaseSeriesBlocks) AddSeries(other DatabaseSeriesBlocks) {
	_m.ctrl.Call(_m, "AddSeries", other)
}

// AddSeries indicates an expected call of AddSeries
func (_mr *MockDatabaseSeriesBlocksMockRecorder) AddSeries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddSeries", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).AddSeries), arg0)
}

// MinTime mocks base method
func (_m *MockDatabaseSeriesBlocks) MinTime() time.Time {
	ret := _m.ctrl.Call(_m, "MinTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// MinTime indicates an expected call of MinTime
func (_mr *MockDatabaseSeriesBlocksMockRecorder) MinTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MinTime", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).MinTime))
}

// MaxTime mocks base method
func (_m *MockDatabaseSeriesBlocks) MaxTime() time.Time {
	ret := _m.ctrl.Call(_m, "MaxTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// MaxTime indicates an expected call of MaxTime
func (_mr *MockDatabaseSeriesBlocksMockRecorder) MaxTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MaxTime", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).MaxTime))
}

// BlockAt mocks base method
func (_m *MockDatabaseSeriesBlocks) BlockAt(t time.Time) (DatabaseBlock, bool) {
	ret := _m.ctrl.Call(_m, "BlockAt", t)
	ret0, _ := ret[0].(DatabaseBlock)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// BlockAt indicates an expected call of BlockAt
func (_mr *MockDatabaseSeriesBlocksMockRecorder) BlockAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BlockAt", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).BlockAt), arg0)
}

// AllBlocks mocks base method
func (_m *MockDatabaseSeriesBlocks) AllBlocks() map[time0.UnixNano]DatabaseBlock {
	ret := _m.ctrl.Call(_m, "AllBlocks")
	ret0, _ := ret[0].(map[time0.UnixNano]DatabaseBlock)
	return ret0
}

// AllBlocks indicates an expected call of AllBlocks
func (_mr *MockDatabaseSeriesBlocksMockRecorder) AllBlocks() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllBlocks", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).AllBlocks))
}

// RemoveBlockAt mocks base method
func (_m *MockDatabaseSeriesBlocks) RemoveBlockAt(t time.Time) {
	_m.ctrl.Call(_m, "RemoveBlockAt", t)
}

// RemoveBlockAt indicates an expected call of RemoveBlockAt
func (_mr *MockDatabaseSeriesBlocksMockRecorder) RemoveBlockAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveBlockAt", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).RemoveBlockAt), arg0)
}

// RemoveAll mocks base method
func (_m *MockDatabaseSeriesBlocks) RemoveAll() {
	_m.ctrl.Call(_m, "RemoveAll")
}

// RemoveAll indicates an expected call of RemoveAll
func (_mr *MockDatabaseSeriesBlocksMockRecorder) RemoveAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveAll", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).RemoveAll))
}

// Reset mocks base method
func (_m *MockDatabaseSeriesBlocks) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockDatabaseSeriesBlocksMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).Reset))
}

// Close mocks base method
func (_m *MockDatabaseSeriesBlocks) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockDatabaseSeriesBlocksMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDatabaseSeriesBlocks)(nil).Close))
}

// MockDatabaseBlockPool is a mock of DatabaseBlockPool interface
type MockDatabaseBlockPool struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBlockPoolMockRecorder
}

// MockDatabaseBlockPoolMockRecorder is the mock recorder for MockDatabaseBlockPool
type MockDatabaseBlockPoolMockRecorder struct {
	mock *MockDatabaseBlockPool
}

// NewMockDatabaseBlockPool creates a new mock instance
func NewMockDatabaseBlockPool(ctrl *gomock.Controller) *MockDatabaseBlockPool {
	mock := &MockDatabaseBlockPool{ctrl: ctrl}
	mock.recorder = &MockDatabaseBlockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabaseBlockPool) EXPECT() *MockDatabaseBlockPoolMockRecorder {
	return _m.recorder
}

// Init mocks base method
func (_m *MockDatabaseBlockPool) Init(alloc DatabaseBlockAllocate) {
	_m.ctrl.Call(_m, "Init", alloc)
}

// Init indicates an expected call of Init
func (_mr *MockDatabaseBlockPoolMockRecorder) Init(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Init", reflect.TypeOf((*MockDatabaseBlockPool)(nil).Init), arg0)
}

// Get mocks base method
func (_m *MockDatabaseBlockPool) Get() DatabaseBlock {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(DatabaseBlock)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockDatabaseBlockPoolMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockDatabaseBlockPool)(nil).Get))
}

// Put mocks base method
func (_m *MockDatabaseBlockPool) Put(block DatabaseBlock) {
	_m.ctrl.Call(_m, "Put", block)
}

// Put indicates an expected call of Put
func (_mr *MockDatabaseBlockPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockDatabaseBlockPool)(nil).Put), arg0)
}

// MockFetchBlockMetadataResultsPool is a mock of FetchBlockMetadataResultsPool interface
type MockFetchBlockMetadataResultsPool struct {
	ctrl     *gomock.Controller
	recorder *MockFetchBlockMetadataResultsPoolMockRecorder
}

// MockFetchBlockMetadataResultsPoolMockRecorder is the mock recorder for MockFetchBlockMetadataResultsPool
type MockFetchBlockMetadataResultsPoolMockRecorder struct {
	mock *MockFetchBlockMetadataResultsPool
}

// NewMockFetchBlockMetadataResultsPool creates a new mock instance
func NewMockFetchBlockMetadataResultsPool(ctrl *gomock.Controller) *MockFetchBlockMetadataResultsPool {
	mock := &MockFetchBlockMetadataResultsPool{ctrl: ctrl}
	mock.recorder = &MockFetchBlockMetadataResultsPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFetchBlockMetadataResultsPool) EXPECT() *MockFetchBlockMetadataResultsPoolMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockFetchBlockMetadataResultsPool) Get() FetchBlockMetadataResults {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(FetchBlockMetadataResults)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockFetchBlockMetadataResultsPoolMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFetchBlockMetadataResultsPool)(nil).Get))
}

// Put mocks base method
func (_m *MockFetchBlockMetadataResultsPool) Put(res FetchBlockMetadataResults) {
	_m.ctrl.Call(_m, "Put", res)
}

// Put indicates an expected call of Put
func (_mr *MockFetchBlockMetadataResultsPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockFetchBlockMetadataResultsPool)(nil).Put), arg0)
}

// MockFetchBlocksMetadataResultsPool is a mock of FetchBlocksMetadataResultsPool interface
type MockFetchBlocksMetadataResultsPool struct {
	ctrl     *gomock.Controller
	recorder *MockFetchBlocksMetadataResultsPoolMockRecorder
}

// MockFetchBlocksMetadataResultsPoolMockRecorder is the mock recorder for MockFetchBlocksMetadataResultsPool
type MockFetchBlocksMetadataResultsPoolMockRecorder struct {
	mock *MockFetchBlocksMetadataResultsPool
}

// NewMockFetchBlocksMetadataResultsPool creates a new mock instance
func NewMockFetchBlocksMetadataResultsPool(ctrl *gomock.Controller) *MockFetchBlocksMetadataResultsPool {
	mock := &MockFetchBlocksMetadataResultsPool{ctrl: ctrl}
	mock.recorder = &MockFetchBlocksMetadataResultsPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFetchBlocksMetadataResultsPool) EXPECT() *MockFetchBlocksMetadataResultsPoolMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockFetchBlocksMetadataResultsPool) Get() FetchBlocksMetadataResults {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(FetchBlocksMetadataResults)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockFetchBlocksMetadataResultsPoolMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFetchBlocksMetadataResultsPool)(nil).Get))
}

// Put mocks base method
func (_m *MockFetchBlocksMetadataResultsPool) Put(res FetchBlocksMetadataResults) {
	_m.ctrl.Call(_m, "Put", res)
}

// Put indicates an expected call of Put
func (_mr *MockFetchBlocksMetadataResultsPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockFetchBlocksMetadataResultsPool)(nil).Put), arg0)
}

// MockOptions is a mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return _m.recorder
}

// SetClockOptions mocks base method
func (_m *MockOptions) SetClockOptions(value clock.Options) Options {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetClockOptions indicates an expected call of SetClockOptions
func (_mr *MockOptionsMockRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetClockOptions", reflect.TypeOf((*MockOptions)(nil).SetClockOptions), arg0)
}

// ClockOptions mocks base method
func (_m *MockOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

// ClockOptions indicates an expected call of ClockOptions
func (_mr *MockOptionsMockRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClockOptions", reflect.TypeOf((*MockOptions)(nil).ClockOptions))
}

// SetDatabaseBlockAllocSize mocks base method
func (_m *MockOptions) SetDatabaseBlockAllocSize(value int) Options {
	ret := _m.ctrl.Call(_m, "SetDatabaseBlockAllocSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDatabaseBlockAllocSize indicates an expected call of SetDatabaseBlockAllocSize
func (_mr *MockOptionsMockRecorder) SetDatabaseBlockAllocSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDatabaseBlockAllocSize", reflect.TypeOf((*MockOptions)(nil).SetDatabaseBlockAllocSize), arg0)
}

// DatabaseBlockAllocSize mocks base method
func (_m *MockOptions) DatabaseBlockAllocSize() int {
	ret := _m.ctrl.Call(_m, "DatabaseBlockAllocSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// DatabaseBlockAllocSize indicates an expected call of DatabaseBlockAllocSize
func (_mr *MockOptionsMockRecorder) DatabaseBlockAllocSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DatabaseBlockAllocSize", reflect.TypeOf((*MockOptions)(nil).DatabaseBlockAllocSize))
}

// SetCloseContextWorkers mocks base method
func (_m *MockOptions) SetCloseContextWorkers(value sync.WorkerPool) Options {
	ret := _m.ctrl.Call(_m, "SetCloseContextWorkers", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetCloseContextWorkers indicates an expected call of SetCloseContextWorkers
func (_mr *MockOptionsMockRecorder) SetCloseContextWorkers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCloseContextWorkers", reflect.TypeOf((*MockOptions)(nil).SetCloseContextWorkers), arg0)
}

// CloseContextWorkers mocks base method
func (_m *MockOptions) CloseContextWorkers() sync.WorkerPool {
	ret := _m.ctrl.Call(_m, "CloseContextWorkers")
	ret0, _ := ret[0].(sync.WorkerPool)
	return ret0
}

// CloseContextWorkers indicates an expected call of CloseContextWorkers
func (_mr *MockOptionsMockRecorder) CloseContextWorkers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseContextWorkers", reflect.TypeOf((*MockOptions)(nil).CloseContextWorkers))
}

// SetDatabaseBlockPool mocks base method
func (_m *MockOptions) SetDatabaseBlockPool(value DatabaseBlockPool) Options {
	ret := _m.ctrl.Call(_m, "SetDatabaseBlockPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDatabaseBlockPool indicates an expected call of SetDatabaseBlockPool
func (_mr *MockOptionsMockRecorder) SetDatabaseBlockPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDatabaseBlockPool", reflect.TypeOf((*MockOptions)(nil).SetDatabaseBlockPool), arg0)
}

// DatabaseBlockPool mocks base method
func (_m *MockOptions) DatabaseBlockPool() DatabaseBlockPool {
	ret := _m.ctrl.Call(_m, "DatabaseBlockPool")
	ret0, _ := ret[0].(DatabaseBlockPool)
	return ret0
}

// DatabaseBlockPool indicates an expected call of DatabaseBlockPool
func (_mr *MockOptionsMockRecorder) DatabaseBlockPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DatabaseBlockPool", reflect.TypeOf((*MockOptions)(nil).DatabaseBlockPool))
}

// SetContextPool mocks base method
func (_m *MockOptions) SetContextPool(value context.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetContextPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetContextPool indicates an expected call of SetContextPool
func (_mr *MockOptionsMockRecorder) SetContextPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetContextPool", reflect.TypeOf((*MockOptions)(nil).SetContextPool), arg0)
}

// ContextPool mocks base method
func (_m *MockOptions) ContextPool() context.Pool {
	ret := _m.ctrl.Call(_m, "ContextPool")
	ret0, _ := ret[0].(context.Pool)
	return ret0
}

// ContextPool indicates an expected call of ContextPool
func (_mr *MockOptionsMockRecorder) ContextPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ContextPool", reflect.TypeOf((*MockOptions)(nil).ContextPool))
}

// SetEncoderPool mocks base method
func (_m *MockOptions) SetEncoderPool(value encoding.EncoderPool) Options {
	ret := _m.ctrl.Call(_m, "SetEncoderPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetEncoderPool indicates an expected call of SetEncoderPool
func (_mr *MockOptionsMockRecorder) SetEncoderPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEncoderPool", reflect.TypeOf((*MockOptions)(nil).SetEncoderPool), arg0)
}

// EncoderPool mocks base method
func (_m *MockOptions) EncoderPool() encoding.EncoderPool {
	ret := _m.ctrl.Call(_m, "EncoderPool")
	ret0, _ := ret[0].(encoding.EncoderPool)
	return ret0
}

// EncoderPool indicates an expected call of EncoderPool
func (_mr *MockOptionsMockRecorder) EncoderPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EncoderPool", reflect.TypeOf((*MockOptions)(nil).EncoderPool))
}

// SetReaderIteratorPool mocks base method
func (_m *MockOptions) SetReaderIteratorPool(value encoding.ReaderIteratorPool) Options {
	ret := _m.ctrl.Call(_m, "SetReaderIteratorPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetReaderIteratorPool indicates an expected call of SetReaderIteratorPool
func (_mr *MockOptionsMockRecorder) SetReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).SetReaderIteratorPool), arg0)
}

// ReaderIteratorPool mocks base method
func (_m *MockOptions) ReaderIteratorPool() encoding.ReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "ReaderIteratorPool")
	ret0, _ := ret[0].(encoding.ReaderIteratorPool)
	return ret0
}

// ReaderIteratorPool indicates an expected call of ReaderIteratorPool
func (_mr *MockOptionsMockRecorder) ReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).ReaderIteratorPool))
}

// SetMultiReaderIteratorPool mocks base method
func (_m *MockOptions) SetMultiReaderIteratorPool(value encoding.MultiReaderIteratorPool) Options {
	ret := _m.ctrl.Call(_m, "SetMultiReaderIteratorPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetMultiReaderIteratorPool indicates an expected call of SetMultiReaderIteratorPool
func (_mr *MockOptionsMockRecorder) SetMultiReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMultiReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).SetMultiReaderIteratorPool), arg0)
}

// MultiReaderIteratorPool mocks base method
func (_m *MockOptions) MultiReaderIteratorPool() encoding.MultiReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "MultiReaderIteratorPool")
	ret0, _ := ret[0].(encoding.MultiReaderIteratorPool)
	return ret0
}

// MultiReaderIteratorPool indicates an expected call of MultiReaderIteratorPool
func (_mr *MockOptionsMockRecorder) MultiReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MultiReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).MultiReaderIteratorPool))
}

// SetSegmentReaderPool mocks base method
func (_m *MockOptions) SetSegmentReaderPool(value xio.SegmentReaderPool) Options {
	ret := _m.ctrl.Call(_m, "SetSegmentReaderPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetSegmentReaderPool indicates an expected call of SetSegmentReaderPool
func (_mr *MockOptionsMockRecorder) SetSegmentReaderPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetSegmentReaderPool", reflect.TypeOf((*MockOptions)(nil).SetSegmentReaderPool), arg0)
}

// SegmentReaderPool mocks base method
func (_m *MockOptions) SegmentReaderPool() xio.SegmentReaderPool {
	ret := _m.ctrl.Call(_m, "SegmentReaderPool")
	ret0, _ := ret[0].(xio.SegmentReaderPool)
	return ret0
}

// SegmentReaderPool indicates an expected call of SegmentReaderPool
func (_mr *MockOptionsMockRecorder) SegmentReaderPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentReaderPool", reflect.TypeOf((*MockOptions)(nil).SegmentReaderPool))
}

// SetBytesPool mocks base method
func (_m *MockOptions) SetBytesPool(value pool.CheckedBytesPool) Options {
	ret := _m.ctrl.Call(_m, "SetBytesPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetBytesPool indicates an expected call of SetBytesPool
func (_mr *MockOptionsMockRecorder) SetBytesPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetBytesPool", reflect.TypeOf((*MockOptions)(nil).SetBytesPool), arg0)
}

// BytesPool mocks base method
func (_m *MockOptions) BytesPool() pool.CheckedBytesPool {
	ret := _m.ctrl.Call(_m, "BytesPool")
	ret0, _ := ret[0].(pool.CheckedBytesPool)
	return ret0
}

// BytesPool indicates an expected call of BytesPool
func (_mr *MockOptionsMockRecorder) BytesPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BytesPool", reflect.TypeOf((*MockOptions)(nil).BytesPool))
}

// SetWiredList mocks base method
func (_m *MockOptions) SetWiredList(value *WiredList) Options {
	ret := _m.ctrl.Call(_m, "SetWiredList", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetWiredList indicates an expected call of SetWiredList
func (_mr *MockOptionsMockRecorder) SetWiredList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWiredList", reflect.TypeOf((*MockOptions)(nil).SetWiredList), arg0)
}

// WiredList mocks base method
func (_m *MockOptions) WiredList() *WiredList {
	ret := _m.ctrl.Call(_m, "WiredList")
	ret0, _ := ret[0].(*WiredList)
	return ret0
}

// WiredList indicates an expected call of WiredList
func (_mr *MockOptionsMockRecorder) WiredList() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WiredList", reflect.TypeOf((*MockOptions)(nil).WiredList))
}
