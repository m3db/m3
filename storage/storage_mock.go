// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/storage/types.go

package storage

import (
	"reflect"
	"time"

	"github.com/m3db/m3db/clock"
	"github.com/m3db/m3db/encoding"
	"github.com/m3db/m3db/persist"
	"github.com/m3db/m3db/persist/fs/commitlog"
	"github.com/m3db/m3db/runtime"
	"github.com/m3db/m3db/sharding"
	"github.com/m3db/m3db/storage/block"
	"github.com/m3db/m3db/storage/bootstrap"
	"github.com/m3db/m3db/storage/bootstrap/result"
	"github.com/m3db/m3db/storage/index"
	"github.com/m3db/m3db/storage/namespace"
	"github.com/m3db/m3db/storage/repair"
	"github.com/m3db/m3db/storage/series"
	"github.com/m3db/m3db/x/xcounter"
	"github.com/m3db/m3db/x/xio"
	"github.com/m3db/m3x/context"
	"github.com/m3db/m3x/ident"
	"github.com/m3db/m3x/instrument"
	"github.com/m3db/m3x/pool"
	time0 "github.com/m3db/m3x/time"

	"github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return _m.recorder
}

// Options mocks base method
func (_m *MockDatabase) Options() Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(Options)
	return ret0
}

// Options indicates an expected call of Options
func (_mr *MockDatabaseMockRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Options", reflect.TypeOf((*MockDatabase)(nil).Options))
}

// AssignShardSet mocks base method
func (_m *MockDatabase) AssignShardSet(shardSet sharding.ShardSet) {
	_m.ctrl.Call(_m, "AssignShardSet", shardSet)
}

// AssignShardSet indicates an expected call of AssignShardSet
func (_mr *MockDatabaseMockRecorder) AssignShardSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssignShardSet", reflect.TypeOf((*MockDatabase)(nil).AssignShardSet), arg0)
}

// Namespaces mocks base method
func (_m *MockDatabase) Namespaces() []Namespace {
	ret := _m.ctrl.Call(_m, "Namespaces")
	ret0, _ := ret[0].([]Namespace)
	return ret0
}

// Namespaces indicates an expected call of Namespaces
func (_mr *MockDatabaseMockRecorder) Namespaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Namespaces", reflect.TypeOf((*MockDatabase)(nil).Namespaces))
}

// Namespace mocks base method
func (_m *MockDatabase) Namespace(ns ident.ID) (Namespace, bool) {
	ret := _m.ctrl.Call(_m, "Namespace", ns)
	ret0, _ := ret[0].(Namespace)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace
func (_mr *MockDatabaseMockRecorder) Namespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Namespace", reflect.TypeOf((*MockDatabase)(nil).Namespace), arg0)
}

// Open mocks base method
func (_m *MockDatabase) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockDatabaseMockRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDatabase)(nil).Open))
}

// Close mocks base method
func (_m *MockDatabase) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// ShardSet mocks base method
func (_m *MockDatabase) ShardSet() sharding.ShardSet {
	ret := _m.ctrl.Call(_m, "ShardSet")
	ret0, _ := ret[0].(sharding.ShardSet)
	return ret0
}

// ShardSet indicates an expected call of ShardSet
func (_mr *MockDatabaseMockRecorder) ShardSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardSet", reflect.TypeOf((*MockDatabase)(nil).ShardSet))
}

// Terminate mocks base method
func (_m *MockDatabase) Terminate() error {
	ret := _m.ctrl.Call(_m, "Terminate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate
func (_mr *MockDatabaseMockRecorder) Terminate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Terminate", reflect.TypeOf((*MockDatabase)(nil).Terminate))
}

// Write mocks base method
func (_m *MockDatabase) Write(ctx context.Context, namespace ident.ID, id ident.ID, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, namespace, id, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockDatabaseMockRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockDatabase)(nil).Write), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// WriteTagged mocks base method
func (_m *MockDatabase) WriteTagged(ctx context.Context, namespace ident.ID, id ident.ID, tags ident.TagIterator, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, namespace, id, tags, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockDatabaseMockRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*MockDatabase)(nil).WriteTagged), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// QueryIDs mocks base method
func (_m *MockDatabase) QueryIDs(ctx context.Context, query index.Query, opts index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "QueryIDs", ctx, query, opts)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIDs indicates an expected call of QueryIDs
func (_mr *MockDatabaseMockRecorder) QueryIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryIDs", reflect.TypeOf((*MockDatabase)(nil).QueryIDs), arg0, arg1, arg2)
}

// ReadEncoded mocks base method
func (_m *MockDatabase) ReadEncoded(ctx context.Context, namespace ident.ID, id ident.ID, start time.Time, end time.Time) ([][]xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "ReadEncoded", ctx, namespace, id, start, end)
	ret0, _ := ret[0].([][]xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEncoded indicates an expected call of ReadEncoded
func (_mr *MockDatabaseMockRecorder) ReadEncoded(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadEncoded", reflect.TypeOf((*MockDatabase)(nil).ReadEncoded), arg0, arg1, arg2, arg3, arg4)
}

// FetchBlocks mocks base method
func (_m *MockDatabase) FetchBlocks(ctx context.Context, namespace ident.ID, shard uint32, id ident.ID, starts []time.Time) ([]block.FetchBlockResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocks", ctx, namespace, shard, id, starts)
	ret0, _ := ret[0].([]block.FetchBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks
func (_mr *MockDatabaseMockRecorder) FetchBlocks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocks", reflect.TypeOf((*MockDatabase)(nil).FetchBlocks), arg0, arg1, arg2, arg3, arg4)
}

// FetchBlocksMetadata mocks base method
func (_m *MockDatabase) FetchBlocksMetadata(ctx context.Context, namespace ident.ID, shard uint32, start time.Time, end time.Time, limit int64, pageToken int64, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, *int64, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadata", ctx, namespace, shard, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadata indicates an expected call of FetchBlocksMetadata
func (_mr *MockDatabaseMockRecorder) FetchBlocksMetadata(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadata", reflect.TypeOf((*MockDatabase)(nil).FetchBlocksMetadata), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// FetchBlocksMetadataV2 mocks base method
func (_m *MockDatabase) FetchBlocksMetadataV2(ctx context.Context, namespace ident.ID, shard uint32, start time.Time, end time.Time, limit int64, pageToken PageToken, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, PageToken, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataV2", ctx, namespace, shard, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadataV2 indicates an expected call of FetchBlocksMetadataV2
func (_mr *MockDatabaseMockRecorder) FetchBlocksMetadataV2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataV2", reflect.TypeOf((*MockDatabase)(nil).FetchBlocksMetadataV2), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Bootstrap mocks base method
func (_m *MockDatabase) Bootstrap() error {
	ret := _m.ctrl.Call(_m, "Bootstrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockDatabaseMockRecorder) Bootstrap() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*MockDatabase)(nil).Bootstrap))
}

// IsBootstrapped mocks base method
func (_m *MockDatabase) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockDatabaseMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*MockDatabase)(nil).IsBootstrapped))
}

// IsOverloaded mocks base method
func (_m *MockDatabase) IsOverloaded() bool {
	ret := _m.ctrl.Call(_m, "IsOverloaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOverloaded indicates an expected call of IsOverloaded
func (_mr *MockDatabaseMockRecorder) IsOverloaded() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsOverloaded", reflect.TypeOf((*MockDatabase)(nil).IsOverloaded))
}

// Repair mocks base method
func (_m *MockDatabase) Repair() error {
	ret := _m.ctrl.Call(_m, "Repair")
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockDatabaseMockRecorder) Repair() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockDatabase)(nil).Repair))
}

// Truncate mocks base method
func (_m *MockDatabase) Truncate(namespace ident.ID) (int64, error) {
	ret := _m.ctrl.Call(_m, "Truncate", namespace)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate
func (_mr *MockDatabaseMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Truncate", reflect.TypeOf((*MockDatabase)(nil).Truncate), arg0)
}

// Mockdatabase is a mock of database interface
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return _m.recorder
}

// Options mocks base method
func (_m *Mockdatabase) Options() Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(Options)
	return ret0
}

// Options indicates an expected call of Options
func (_mr *MockdatabaseMockRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Options", reflect.TypeOf((*Mockdatabase)(nil).Options))
}

// AssignShardSet mocks base method
func (_m *Mockdatabase) AssignShardSet(shardSet sharding.ShardSet) {
	_m.ctrl.Call(_m, "AssignShardSet", shardSet)
}

// AssignShardSet indicates an expected call of AssignShardSet
func (_mr *MockdatabaseMockRecorder) AssignShardSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssignShardSet", reflect.TypeOf((*Mockdatabase)(nil).AssignShardSet), arg0)
}

// Namespaces mocks base method
func (_m *Mockdatabase) Namespaces() []Namespace {
	ret := _m.ctrl.Call(_m, "Namespaces")
	ret0, _ := ret[0].([]Namespace)
	return ret0
}

// Namespaces indicates an expected call of Namespaces
func (_mr *MockdatabaseMockRecorder) Namespaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Namespaces", reflect.TypeOf((*Mockdatabase)(nil).Namespaces))
}

// Namespace mocks base method
func (_m *Mockdatabase) Namespace(ns ident.ID) (Namespace, bool) {
	ret := _m.ctrl.Call(_m, "Namespace", ns)
	ret0, _ := ret[0].(Namespace)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace
func (_mr *MockdatabaseMockRecorder) Namespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Namespace", reflect.TypeOf((*Mockdatabase)(nil).Namespace), arg0)
}

// Open mocks base method
func (_m *Mockdatabase) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockdatabaseMockRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*Mockdatabase)(nil).Open))
}

// Close mocks base method
func (_m *Mockdatabase) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockdatabaseMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*Mockdatabase)(nil).Close))
}

// ShardSet mocks base method
func (_m *Mockdatabase) ShardSet() sharding.ShardSet {
	ret := _m.ctrl.Call(_m, "ShardSet")
	ret0, _ := ret[0].(sharding.ShardSet)
	return ret0
}

// ShardSet indicates an expected call of ShardSet
func (_mr *MockdatabaseMockRecorder) ShardSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardSet", reflect.TypeOf((*Mockdatabase)(nil).ShardSet))
}

// Terminate mocks base method
func (_m *Mockdatabase) Terminate() error {
	ret := _m.ctrl.Call(_m, "Terminate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate
func (_mr *MockdatabaseMockRecorder) Terminate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Terminate", reflect.TypeOf((*Mockdatabase)(nil).Terminate))
}

// Write mocks base method
func (_m *Mockdatabase) Write(ctx context.Context, namespace ident.ID, id ident.ID, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, namespace, id, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockdatabaseMockRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*Mockdatabase)(nil).Write), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// WriteTagged mocks base method
func (_m *Mockdatabase) WriteTagged(ctx context.Context, namespace ident.ID, id ident.ID, tags ident.TagIterator, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, namespace, id, tags, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockdatabaseMockRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*Mockdatabase)(nil).WriteTagged), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// QueryIDs mocks base method
func (_m *Mockdatabase) QueryIDs(ctx context.Context, query index.Query, opts index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "QueryIDs", ctx, query, opts)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIDs indicates an expected call of QueryIDs
func (_mr *MockdatabaseMockRecorder) QueryIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryIDs", reflect.TypeOf((*Mockdatabase)(nil).QueryIDs), arg0, arg1, arg2)
}

// ReadEncoded mocks base method
func (_m *Mockdatabase) ReadEncoded(ctx context.Context, namespace ident.ID, id ident.ID, start time.Time, end time.Time) ([][]xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "ReadEncoded", ctx, namespace, id, start, end)
	ret0, _ := ret[0].([][]xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEncoded indicates an expected call of ReadEncoded
func (_mr *MockdatabaseMockRecorder) ReadEncoded(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadEncoded", reflect.TypeOf((*Mockdatabase)(nil).ReadEncoded), arg0, arg1, arg2, arg3, arg4)
}

// FetchBlocks mocks base method
func (_m *Mockdatabase) FetchBlocks(ctx context.Context, namespace ident.ID, shard uint32, id ident.ID, starts []time.Time) ([]block.FetchBlockResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocks", ctx, namespace, shard, id, starts)
	ret0, _ := ret[0].([]block.FetchBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks
func (_mr *MockdatabaseMockRecorder) FetchBlocks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocks", reflect.TypeOf((*Mockdatabase)(nil).FetchBlocks), arg0, arg1, arg2, arg3, arg4)
}

// FetchBlocksMetadata mocks base method
func (_m *Mockdatabase) FetchBlocksMetadata(ctx context.Context, namespace ident.ID, shard uint32, start time.Time, end time.Time, limit int64, pageToken int64, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, *int64, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadata", ctx, namespace, shard, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadata indicates an expected call of FetchBlocksMetadata
func (_mr *MockdatabaseMockRecorder) FetchBlocksMetadata(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadata", reflect.TypeOf((*Mockdatabase)(nil).FetchBlocksMetadata), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// FetchBlocksMetadataV2 mocks base method
func (_m *Mockdatabase) FetchBlocksMetadataV2(ctx context.Context, namespace ident.ID, shard uint32, start time.Time, end time.Time, limit int64, pageToken PageToken, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, PageToken, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataV2", ctx, namespace, shard, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadataV2 indicates an expected call of FetchBlocksMetadataV2
func (_mr *MockdatabaseMockRecorder) FetchBlocksMetadataV2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataV2", reflect.TypeOf((*Mockdatabase)(nil).FetchBlocksMetadataV2), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Bootstrap mocks base method
func (_m *Mockdatabase) Bootstrap() error {
	ret := _m.ctrl.Call(_m, "Bootstrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockdatabaseMockRecorder) Bootstrap() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*Mockdatabase)(nil).Bootstrap))
}

// IsBootstrapped mocks base method
func (_m *Mockdatabase) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockdatabaseMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*Mockdatabase)(nil).IsBootstrapped))
}

// IsOverloaded mocks base method
func (_m *Mockdatabase) IsOverloaded() bool {
	ret := _m.ctrl.Call(_m, "IsOverloaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOverloaded indicates an expected call of IsOverloaded
func (_mr *MockdatabaseMockRecorder) IsOverloaded() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsOverloaded", reflect.TypeOf((*Mockdatabase)(nil).IsOverloaded))
}

// Repair mocks base method
func (_m *Mockdatabase) Repair() error {
	ret := _m.ctrl.Call(_m, "Repair")
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseMockRecorder) Repair() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*Mockdatabase)(nil).Repair))
}

// Truncate mocks base method
func (_m *Mockdatabase) Truncate(namespace ident.ID) (int64, error) {
	ret := _m.ctrl.Call(_m, "Truncate", namespace)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate
func (_mr *MockdatabaseMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Truncate", reflect.TypeOf((*Mockdatabase)(nil).Truncate), arg0)
}

// GetOwnedNamespaces mocks base method
func (_m *Mockdatabase) GetOwnedNamespaces() ([]databaseNamespace, error) {
	ret := _m.ctrl.Call(_m, "GetOwnedNamespaces")
	ret0, _ := ret[0].([]databaseNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedNamespaces indicates an expected call of GetOwnedNamespaces
func (_mr *MockdatabaseMockRecorder) GetOwnedNamespaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetOwnedNamespaces", reflect.TypeOf((*Mockdatabase)(nil).GetOwnedNamespaces))
}

// UpdateOwnedNamespaces mocks base method
func (_m *Mockdatabase) UpdateOwnedNamespaces(namespaces namespace.Map) error {
	ret := _m.ctrl.Call(_m, "UpdateOwnedNamespaces", namespaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwnedNamespaces indicates an expected call of UpdateOwnedNamespaces
func (_mr *MockdatabaseMockRecorder) UpdateOwnedNamespaces(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateOwnedNamespaces", reflect.TypeOf((*Mockdatabase)(nil).UpdateOwnedNamespaces), arg0)
}

// MockNamespace is a mock of Namespace interface
type MockNamespace struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceMockRecorder
}

// MockNamespaceMockRecorder is the mock recorder for MockNamespace
type MockNamespaceMockRecorder struct {
	mock *MockNamespace
}

// NewMockNamespace creates a new mock instance
func NewMockNamespace(ctrl *gomock.Controller) *MockNamespace {
	mock := &MockNamespace{ctrl: ctrl}
	mock.recorder = &MockNamespaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNamespace) EXPECT() *MockNamespaceMockRecorder {
	return _m.recorder
}

// Options mocks base method
func (_m *MockNamespace) Options() namespace.Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(namespace.Options)
	return ret0
}

// Options indicates an expected call of Options
func (_mr *MockNamespaceMockRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Options", reflect.TypeOf((*MockNamespace)(nil).Options))
}

// ID mocks base method
func (_m *MockNamespace) ID() ident.ID {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(ident.ID)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockNamespaceMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockNamespace)(nil).ID))
}

// NumSeries mocks base method
func (_m *MockNamespace) NumSeries() int64 {
	ret := _m.ctrl.Call(_m, "NumSeries")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NumSeries indicates an expected call of NumSeries
func (_mr *MockNamespaceMockRecorder) NumSeries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumSeries", reflect.TypeOf((*MockNamespace)(nil).NumSeries))
}

// Shards mocks base method
func (_m *MockNamespace) Shards() []Shard {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].([]Shard)
	return ret0
}

// Shards indicates an expected call of Shards
func (_mr *MockNamespaceMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockNamespace)(nil).Shards))
}

// MockdatabaseNamespace is a mock of databaseNamespace interface
type MockdatabaseNamespace struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseNamespaceMockRecorder
}

// MockdatabaseNamespaceMockRecorder is the mock recorder for MockdatabaseNamespace
type MockdatabaseNamespaceMockRecorder struct {
	mock *MockdatabaseNamespace
}

// NewMockdatabaseNamespace creates a new mock instance
func NewMockdatabaseNamespace(ctrl *gomock.Controller) *MockdatabaseNamespace {
	mock := &MockdatabaseNamespace{ctrl: ctrl}
	mock.recorder = &MockdatabaseNamespaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseNamespace) EXPECT() *MockdatabaseNamespaceMockRecorder {
	return _m.recorder
}

// Options mocks base method
func (_m *MockdatabaseNamespace) Options() namespace.Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(namespace.Options)
	return ret0
}

// Options indicates an expected call of Options
func (_mr *MockdatabaseNamespaceMockRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Options", reflect.TypeOf((*MockdatabaseNamespace)(nil).Options))
}

// ID mocks base method
func (_m *MockdatabaseNamespace) ID() ident.ID {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(ident.ID)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockdatabaseNamespaceMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockdatabaseNamespace)(nil).ID))
}

// NumSeries mocks base method
func (_m *MockdatabaseNamespace) NumSeries() int64 {
	ret := _m.ctrl.Call(_m, "NumSeries")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NumSeries indicates an expected call of NumSeries
func (_mr *MockdatabaseNamespaceMockRecorder) NumSeries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumSeries", reflect.TypeOf((*MockdatabaseNamespace)(nil).NumSeries))
}

// Shards mocks base method
func (_m *MockdatabaseNamespace) Shards() []Shard {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].([]Shard)
	return ret0
}

// Shards indicates an expected call of Shards
func (_mr *MockdatabaseNamespaceMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockdatabaseNamespace)(nil).Shards))
}

// Close mocks base method
func (_m *MockdatabaseNamespace) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockdatabaseNamespaceMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockdatabaseNamespace)(nil).Close))
}

// AssignShardSet mocks base method
func (_m *MockdatabaseNamespace) AssignShardSet(shardSet sharding.ShardSet) {
	_m.ctrl.Call(_m, "AssignShardSet", shardSet)
}

// AssignShardSet indicates an expected call of AssignShardSet
func (_mr *MockdatabaseNamespaceMockRecorder) AssignShardSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssignShardSet", reflect.TypeOf((*MockdatabaseNamespace)(nil).AssignShardSet), arg0)
}

// GetOwnedShards mocks base method
func (_m *MockdatabaseNamespace) GetOwnedShards() []databaseShard {
	ret := _m.ctrl.Call(_m, "GetOwnedShards")
	ret0, _ := ret[0].([]databaseShard)
	return ret0
}

// GetOwnedShards indicates an expected call of GetOwnedShards
func (_mr *MockdatabaseNamespaceMockRecorder) GetOwnedShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetOwnedShards", reflect.TypeOf((*MockdatabaseNamespace)(nil).GetOwnedShards))
}

// Tick mocks base method
func (_m *MockdatabaseNamespace) Tick(c context.Cancellable) error {
	ret := _m.ctrl.Call(_m, "Tick", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tick indicates an expected call of Tick
func (_mr *MockdatabaseNamespaceMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tick", reflect.TypeOf((*MockdatabaseNamespace)(nil).Tick), arg0)
}

// Write mocks base method
func (_m *MockdatabaseNamespace) Write(ctx context.Context, id ident.ID, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, id, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockdatabaseNamespaceMockRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockdatabaseNamespace)(nil).Write), arg0, arg1, arg2, arg3, arg4, arg5)
}

// WriteTagged mocks base method
func (_m *MockdatabaseNamespace) WriteTagged(ctx context.Context, id ident.ID, tags ident.TagIterator, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, id, tags, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockdatabaseNamespaceMockRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*MockdatabaseNamespace)(nil).WriteTagged), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ReadEncoded mocks base method
func (_m *MockdatabaseNamespace) ReadEncoded(ctx context.Context, id ident.ID, start time.Time, end time.Time) ([][]xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "ReadEncoded", ctx, id, start, end)
	ret0, _ := ret[0].([][]xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEncoded indicates an expected call of ReadEncoded
func (_mr *MockdatabaseNamespaceMockRecorder) ReadEncoded(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadEncoded", reflect.TypeOf((*MockdatabaseNamespace)(nil).ReadEncoded), arg0, arg1, arg2, arg3)
}

// FetchBlocks mocks base method
func (_m *MockdatabaseNamespace) FetchBlocks(ctx context.Context, shardID uint32, id ident.ID, starts []time.Time) ([]block.FetchBlockResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocks", ctx, shardID, id, starts)
	ret0, _ := ret[0].([]block.FetchBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks
func (_mr *MockdatabaseNamespaceMockRecorder) FetchBlocks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocks", reflect.TypeOf((*MockdatabaseNamespace)(nil).FetchBlocks), arg0, arg1, arg2, arg3)
}

// FetchBlocksMetadata mocks base method
func (_m *MockdatabaseNamespace) FetchBlocksMetadata(ctx context.Context, shardID uint32, start time.Time, end time.Time, limit int64, pageToken int64, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, *int64, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadata", ctx, shardID, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadata indicates an expected call of FetchBlocksMetadata
func (_mr *MockdatabaseNamespaceMockRecorder) FetchBlocksMetadata(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadata", reflect.TypeOf((*MockdatabaseNamespace)(nil).FetchBlocksMetadata), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// FetchBlocksMetadataV2 mocks base method
func (_m *MockdatabaseNamespace) FetchBlocksMetadataV2(ctx context.Context, shardID uint32, start time.Time, end time.Time, limit int64, pageToken PageToken, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, PageToken, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataV2", ctx, shardID, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadataV2 indicates an expected call of FetchBlocksMetadataV2
func (_mr *MockdatabaseNamespaceMockRecorder) FetchBlocksMetadataV2(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataV2", reflect.TypeOf((*MockdatabaseNamespace)(nil).FetchBlocksMetadataV2), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Bootstrap mocks base method
func (_m *MockdatabaseNamespace) Bootstrap(process bootstrap.Process, targetRanges []bootstrap.TargetRange) error {
	ret := _m.ctrl.Call(_m, "Bootstrap", process, targetRanges)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockdatabaseNamespaceMockRecorder) Bootstrap(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*MockdatabaseNamespace)(nil).Bootstrap), arg0, arg1)
}

// Flush mocks base method
func (_m *MockdatabaseNamespace) Flush(blockStart time.Time, flush persist.Flush) error {
	ret := _m.ctrl.Call(_m, "Flush", blockStart, flush)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (_mr *MockdatabaseNamespaceMockRecorder) Flush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockdatabaseNamespace)(nil).Flush), arg0, arg1)
}

// NeedsFlush mocks base method
func (_m *MockdatabaseNamespace) NeedsFlush(alignedInclusiveStart time.Time, alignedInclusiveEnd time.Time) bool {
	ret := _m.ctrl.Call(_m, "NeedsFlush", alignedInclusiveStart, alignedInclusiveEnd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsFlush indicates an expected call of NeedsFlush
func (_mr *MockdatabaseNamespaceMockRecorder) NeedsFlush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NeedsFlush", reflect.TypeOf((*MockdatabaseNamespace)(nil).NeedsFlush), arg0, arg1)
}

// Truncate mocks base method
func (_m *MockdatabaseNamespace) Truncate() (int64, error) {
	ret := _m.ctrl.Call(_m, "Truncate")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate
func (_mr *MockdatabaseNamespaceMockRecorder) Truncate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Truncate", reflect.TypeOf((*MockdatabaseNamespace)(nil).Truncate))
}

// Repair mocks base method
func (_m *MockdatabaseNamespace) Repair(repairer databaseShardRepairer, tr time0.Range) error {
	ret := _m.ctrl.Call(_m, "Repair", repairer, tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseNamespaceMockRecorder) Repair(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockdatabaseNamespace)(nil).Repair), arg0, arg1)
}

// MockShard is a mock of Shard interface
type MockShard struct {
	ctrl     *gomock.Controller
	recorder *MockShardMockRecorder
}

// MockShardMockRecorder is the mock recorder for MockShard
type MockShardMockRecorder struct {
	mock *MockShard
}

// NewMockShard creates a new mock instance
func NewMockShard(ctrl *gomock.Controller) *MockShard {
	mock := &MockShard{ctrl: ctrl}
	mock.recorder = &MockShardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockShard) EXPECT() *MockShardMockRecorder {
	return _m.recorder
}

// ID mocks base method
func (_m *MockShard) ID() uint32 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockShardMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockShard)(nil).ID))
}

// NumSeries mocks base method
func (_m *MockShard) NumSeries() int64 {
	ret := _m.ctrl.Call(_m, "NumSeries")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NumSeries indicates an expected call of NumSeries
func (_mr *MockShardMockRecorder) NumSeries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumSeries", reflect.TypeOf((*MockShard)(nil).NumSeries))
}

// IsBootstrapped mocks base method
func (_m *MockShard) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockShardMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*MockShard)(nil).IsBootstrapped))
}

// MockdatabaseShard is a mock of databaseShard interface
type MockdatabaseShard struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseShardMockRecorder
}

// MockdatabaseShardMockRecorder is the mock recorder for MockdatabaseShard
type MockdatabaseShardMockRecorder struct {
	mock *MockdatabaseShard
}

// NewMockdatabaseShard creates a new mock instance
func NewMockdatabaseShard(ctrl *gomock.Controller) *MockdatabaseShard {
	mock := &MockdatabaseShard{ctrl: ctrl}
	mock.recorder = &MockdatabaseShardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseShard) EXPECT() *MockdatabaseShardMockRecorder {
	return _m.recorder
}

// ID mocks base method
func (_m *MockdatabaseShard) ID() uint32 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockdatabaseShardMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockdatabaseShard)(nil).ID))
}

// NumSeries mocks base method
func (_m *MockdatabaseShard) NumSeries() int64 {
	ret := _m.ctrl.Call(_m, "NumSeries")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NumSeries indicates an expected call of NumSeries
func (_mr *MockdatabaseShardMockRecorder) NumSeries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumSeries", reflect.TypeOf((*MockdatabaseShard)(nil).NumSeries))
}

// IsBootstrapped mocks base method
func (_m *MockdatabaseShard) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockdatabaseShardMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*MockdatabaseShard)(nil).IsBootstrapped))
}

// Close mocks base method
func (_m *MockdatabaseShard) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockdatabaseShardMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockdatabaseShard)(nil).Close))
}

// Tick mocks base method
func (_m *MockdatabaseShard) Tick(c context.Cancellable) (tickResult, error) {
	ret := _m.ctrl.Call(_m, "Tick", c)
	ret0, _ := ret[0].(tickResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tick indicates an expected call of Tick
func (_mr *MockdatabaseShardMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tick", reflect.TypeOf((*MockdatabaseShard)(nil).Tick), arg0)
}

// Write mocks base method
func (_m *MockdatabaseShard) Write(ctx context.Context, id ident.ID, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, id, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockdatabaseShardMockRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockdatabaseShard)(nil).Write), arg0, arg1, arg2, arg3, arg4, arg5)
}

// WriteTagged mocks base method
func (_m *MockdatabaseShard) WriteTagged(ctx context.Context, id ident.ID, tags ident.TagIterator, timestamp time.Time, value float64, unit time0.Unit, annotation []byte) error {
	ret := _m.ctrl.Call(_m, "WriteTagged", ctx, id, tags, timestamp, value, unit, annotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTagged indicates an expected call of WriteTagged
func (_mr *MockdatabaseShardMockRecorder) WriteTagged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteTagged", reflect.TypeOf((*MockdatabaseShard)(nil).WriteTagged), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ReadEncoded mocks base method
func (_m *MockdatabaseShard) ReadEncoded(ctx context.Context, id ident.ID, start time.Time, end time.Time) ([][]xio.SegmentReader, error) {
	ret := _m.ctrl.Call(_m, "ReadEncoded", ctx, id, start, end)
	ret0, _ := ret[0].([][]xio.SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEncoded indicates an expected call of ReadEncoded
func (_mr *MockdatabaseShardMockRecorder) ReadEncoded(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadEncoded", reflect.TypeOf((*MockdatabaseShard)(nil).ReadEncoded), arg0, arg1, arg2, arg3)
}

// FetchBlocks mocks base method
func (_m *MockdatabaseShard) FetchBlocks(ctx context.Context, id ident.ID, starts []time.Time) ([]block.FetchBlockResult, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocks", ctx, id, starts)
	ret0, _ := ret[0].([]block.FetchBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks
func (_mr *MockdatabaseShardMockRecorder) FetchBlocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocks", reflect.TypeOf((*MockdatabaseShard)(nil).FetchBlocks), arg0, arg1, arg2)
}

// FetchBlocksMetadata mocks base method
func (_m *MockdatabaseShard) FetchBlocksMetadata(ctx context.Context, start time.Time, end time.Time, limit int64, pageToken int64, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, *int64, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadata", ctx, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadata indicates an expected call of FetchBlocksMetadata
func (_mr *MockdatabaseShardMockRecorder) FetchBlocksMetadata(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadata", reflect.TypeOf((*MockdatabaseShard)(nil).FetchBlocksMetadata), arg0, arg1, arg2, arg3, arg4, arg5)
}

// FetchBlocksMetadataV2 mocks base method
func (_m *MockdatabaseShard) FetchBlocksMetadataV2(ctx context.Context, start time.Time, end time.Time, limit int64, pageToken PageToken, opts block.FetchBlocksMetadataOptions) (block.FetchBlocksMetadataResults, PageToken, error) {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataV2", ctx, start, end, limit, pageToken, opts)
	ret0, _ := ret[0].(block.FetchBlocksMetadataResults)
	ret1, _ := ret[1].(PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchBlocksMetadataV2 indicates an expected call of FetchBlocksMetadataV2
func (_mr *MockdatabaseShardMockRecorder) FetchBlocksMetadataV2(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataV2", reflect.TypeOf((*MockdatabaseShard)(nil).FetchBlocksMetadataV2), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Bootstrap mocks base method
func (_m *MockdatabaseShard) Bootstrap(bootstrappedSeries map[ident.Hash]result.DatabaseSeriesBlocks) error {
	ret := _m.ctrl.Call(_m, "Bootstrap", bootstrappedSeries)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockdatabaseShardMockRecorder) Bootstrap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*MockdatabaseShard)(nil).Bootstrap), arg0)
}

// Flush mocks base method
func (_m *MockdatabaseShard) Flush(blockStart time.Time, flush persist.Flush) error {
	ret := _m.ctrl.Call(_m, "Flush", blockStart, flush)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (_mr *MockdatabaseShardMockRecorder) Flush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockdatabaseShard)(nil).Flush), arg0, arg1)
}

// FlushState mocks base method
func (_m *MockdatabaseShard) FlushState(blockStart time.Time) fileOpState {
	ret := _m.ctrl.Call(_m, "FlushState", blockStart)
	ret0, _ := ret[0].(fileOpState)
	return ret0
}

// FlushState indicates an expected call of FlushState
func (_mr *MockdatabaseShardMockRecorder) FlushState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlushState", reflect.TypeOf((*MockdatabaseShard)(nil).FlushState), arg0)
}

// CleanupFileset mocks base method
func (_m *MockdatabaseShard) CleanupFileset(earliestToRetain time.Time) error {
	ret := _m.ctrl.Call(_m, "CleanupFileset", earliestToRetain)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupFileset indicates an expected call of CleanupFileset
func (_mr *MockdatabaseShardMockRecorder) CleanupFileset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CleanupFileset", reflect.TypeOf((*MockdatabaseShard)(nil).CleanupFileset), arg0)
}

// Repair mocks base method
func (_m *MockdatabaseShard) Repair(ctx context.Context, tr time0.Range, repairer databaseShardRepairer) (repair.MetadataComparisonResult, error) {
	ret := _m.ctrl.Call(_m, "Repair", ctx, tr, repairer)
	ret0, _ := ret[0].(repair.MetadataComparisonResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseShardMockRecorder) Repair(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockdatabaseShard)(nil).Repair), arg0, arg1, arg2)
}

// MockdatabaseIndex is a mock of databaseIndex interface
type MockdatabaseIndex struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseIndexMockRecorder
}

// MockdatabaseIndexMockRecorder is the mock recorder for MockdatabaseIndex
type MockdatabaseIndexMockRecorder struct {
	mock *MockdatabaseIndex
}

// NewMockdatabaseIndex creates a new mock instance
func NewMockdatabaseIndex(ctrl *gomock.Controller) *MockdatabaseIndex {
	mock := &MockdatabaseIndex{ctrl: ctrl}
	mock.recorder = &MockdatabaseIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseIndex) EXPECT() *MockdatabaseIndexMockRecorder {
	return _m.recorder
}

// Write mocks base method
func (_m *MockdatabaseIndex) Write(ctx context.Context, namespace ident.ID, id ident.ID, tags ident.TagIterator) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, namespace, id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockdatabaseIndexMockRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockdatabaseIndex)(nil).Write), arg0, arg1, arg2, arg3)
}

// Query mocks base method
func (_m *MockdatabaseIndex) Query(ctx context.Context, query index.Query, opts index.QueryOptions) (index.QueryResults, error) {
	ret := _m.ctrl.Call(_m, "Query", ctx, query, opts)
	ret0, _ := ret[0].(index.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockdatabaseIndexMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Query", reflect.TypeOf((*MockdatabaseIndex)(nil).Query), arg0, arg1, arg2)
}

// MockdatabaseBootstrapManager is a mock of databaseBootstrapManager interface
type MockdatabaseBootstrapManager struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseBootstrapManagerMockRecorder
}

// MockdatabaseBootstrapManagerMockRecorder is the mock recorder for MockdatabaseBootstrapManager
type MockdatabaseBootstrapManagerMockRecorder struct {
	mock *MockdatabaseBootstrapManager
}

// NewMockdatabaseBootstrapManager creates a new mock instance
func NewMockdatabaseBootstrapManager(ctrl *gomock.Controller) *MockdatabaseBootstrapManager {
	mock := &MockdatabaseBootstrapManager{ctrl: ctrl}
	mock.recorder = &MockdatabaseBootstrapManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseBootstrapManager) EXPECT() *MockdatabaseBootstrapManagerMockRecorder {
	return _m.recorder
}

// IsBootstrapped mocks base method
func (_m *MockdatabaseBootstrapManager) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockdatabaseBootstrapManagerMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*MockdatabaseBootstrapManager)(nil).IsBootstrapped))
}

// Bootstrap mocks base method
func (_m *MockdatabaseBootstrapManager) Bootstrap() error {
	ret := _m.ctrl.Call(_m, "Bootstrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockdatabaseBootstrapManagerMockRecorder) Bootstrap() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*MockdatabaseBootstrapManager)(nil).Bootstrap))
}

// Report mocks base method
func (_m *MockdatabaseBootstrapManager) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseBootstrapManagerMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseBootstrapManager)(nil).Report))
}

// MockdatabaseFlushManager is a mock of databaseFlushManager interface
type MockdatabaseFlushManager struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseFlushManagerMockRecorder
}

// MockdatabaseFlushManagerMockRecorder is the mock recorder for MockdatabaseFlushManager
type MockdatabaseFlushManagerMockRecorder struct {
	mock *MockdatabaseFlushManager
}

// NewMockdatabaseFlushManager creates a new mock instance
func NewMockdatabaseFlushManager(ctrl *gomock.Controller) *MockdatabaseFlushManager {
	mock := &MockdatabaseFlushManager{ctrl: ctrl}
	mock.recorder = &MockdatabaseFlushManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseFlushManager) EXPECT() *MockdatabaseFlushManagerMockRecorder {
	return _m.recorder
}

// Flush mocks base method
func (_m *MockdatabaseFlushManager) Flush(t time.Time) error {
	ret := _m.ctrl.Call(_m, "Flush", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (_mr *MockdatabaseFlushManagerMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockdatabaseFlushManager)(nil).Flush), arg0)
}

// Report mocks base method
func (_m *MockdatabaseFlushManager) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseFlushManagerMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseFlushManager)(nil).Report))
}

// MockdatabaseCleanupManager is a mock of databaseCleanupManager interface
type MockdatabaseCleanupManager struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseCleanupManagerMockRecorder
}

// MockdatabaseCleanupManagerMockRecorder is the mock recorder for MockdatabaseCleanupManager
type MockdatabaseCleanupManagerMockRecorder struct {
	mock *MockdatabaseCleanupManager
}

// NewMockdatabaseCleanupManager creates a new mock instance
func NewMockdatabaseCleanupManager(ctrl *gomock.Controller) *MockdatabaseCleanupManager {
	mock := &MockdatabaseCleanupManager{ctrl: ctrl}
	mock.recorder = &MockdatabaseCleanupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseCleanupManager) EXPECT() *MockdatabaseCleanupManagerMockRecorder {
	return _m.recorder
}

// Cleanup mocks base method
func (_m *MockdatabaseCleanupManager) Cleanup(t time.Time) error {
	ret := _m.ctrl.Call(_m, "Cleanup", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (_mr *MockdatabaseCleanupManagerMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Cleanup", reflect.TypeOf((*MockdatabaseCleanupManager)(nil).Cleanup), arg0)
}

// Report mocks base method
func (_m *MockdatabaseCleanupManager) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseCleanupManagerMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseCleanupManager)(nil).Report))
}

// MockdatabaseFileSystemManager is a mock of databaseFileSystemManager interface
type MockdatabaseFileSystemManager struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseFileSystemManagerMockRecorder
}

// MockdatabaseFileSystemManagerMockRecorder is the mock recorder for MockdatabaseFileSystemManager
type MockdatabaseFileSystemManagerMockRecorder struct {
	mock *MockdatabaseFileSystemManager
}

// NewMockdatabaseFileSystemManager creates a new mock instance
func NewMockdatabaseFileSystemManager(ctrl *gomock.Controller) *MockdatabaseFileSystemManager {
	mock := &MockdatabaseFileSystemManager{ctrl: ctrl}
	mock.recorder = &MockdatabaseFileSystemManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseFileSystemManager) EXPECT() *MockdatabaseFileSystemManagerMockRecorder {
	return _m.recorder
}

// Cleanup mocks base method
func (_m *MockdatabaseFileSystemManager) Cleanup(t time.Time) error {
	ret := _m.ctrl.Call(_m, "Cleanup", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Cleanup", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Cleanup), arg0)
}

// Flush mocks base method
func (_m *MockdatabaseFileSystemManager) Flush(t time.Time) error {
	ret := _m.ctrl.Call(_m, "Flush", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Flush), arg0)
}

// Disable mocks base method
func (_m *MockdatabaseFileSystemManager) Disable() fileOpStatus {
	ret := _m.ctrl.Call(_m, "Disable")
	ret0, _ := ret[0].(fileOpStatus)
	return ret0
}

// Disable indicates an expected call of Disable
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Disable() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Disable", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Disable))
}

// Enable mocks base method
func (_m *MockdatabaseFileSystemManager) Enable() fileOpStatus {
	ret := _m.ctrl.Call(_m, "Enable")
	ret0, _ := ret[0].(fileOpStatus)
	return ret0
}

// Enable indicates an expected call of Enable
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Enable() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enable", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Enable))
}

// Status mocks base method
func (_m *MockdatabaseFileSystemManager) Status() fileOpStatus {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(fileOpStatus)
	return ret0
}

// Status indicates an expected call of Status
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Status", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Status))
}

// Run mocks base method
func (_m *MockdatabaseFileSystemManager) Run(t time.Time, runType runType, forceType forceType) bool {
	ret := _m.ctrl.Call(_m, "Run", t, runType, forceType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Run indicates an expected call of Run
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Run), arg0, arg1, arg2)
}

// Report mocks base method
func (_m *MockdatabaseFileSystemManager) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseFileSystemManagerMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseFileSystemManager)(nil).Report))
}

// MockdatabaseShardRepairer is a mock of databaseShardRepairer interface
type MockdatabaseShardRepairer struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseShardRepairerMockRecorder
}

// MockdatabaseShardRepairerMockRecorder is the mock recorder for MockdatabaseShardRepairer
type MockdatabaseShardRepairerMockRecorder struct {
	mock *MockdatabaseShardRepairer
}

// NewMockdatabaseShardRepairer creates a new mock instance
func NewMockdatabaseShardRepairer(ctrl *gomock.Controller) *MockdatabaseShardRepairer {
	mock := &MockdatabaseShardRepairer{ctrl: ctrl}
	mock.recorder = &MockdatabaseShardRepairerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseShardRepairer) EXPECT() *MockdatabaseShardRepairerMockRecorder {
	return _m.recorder
}

// Options mocks base method
func (_m *MockdatabaseShardRepairer) Options() repair.Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(repair.Options)
	return ret0
}

// Options indicates an expected call of Options
func (_mr *MockdatabaseShardRepairerMockRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Options", reflect.TypeOf((*MockdatabaseShardRepairer)(nil).Options))
}

// Repair mocks base method
func (_m *MockdatabaseShardRepairer) Repair(ctx context.Context, namespace ident.ID, tr time0.Range, shard databaseShard) (repair.MetadataComparisonResult, error) {
	ret := _m.ctrl.Call(_m, "Repair", ctx, namespace, tr, shard)
	ret0, _ := ret[0].(repair.MetadataComparisonResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseShardRepairerMockRecorder) Repair(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockdatabaseShardRepairer)(nil).Repair), arg0, arg1, arg2, arg3)
}

// MockdatabaseRepairer is a mock of databaseRepairer interface
type MockdatabaseRepairer struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseRepairerMockRecorder
}

// MockdatabaseRepairerMockRecorder is the mock recorder for MockdatabaseRepairer
type MockdatabaseRepairerMockRecorder struct {
	mock *MockdatabaseRepairer
}

// NewMockdatabaseRepairer creates a new mock instance
func NewMockdatabaseRepairer(ctrl *gomock.Controller) *MockdatabaseRepairer {
	mock := &MockdatabaseRepairer{ctrl: ctrl}
	mock.recorder = &MockdatabaseRepairerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseRepairer) EXPECT() *MockdatabaseRepairerMockRecorder {
	return _m.recorder
}

// Start mocks base method
func (_m *MockdatabaseRepairer) Start() {
	_m.ctrl.Call(_m, "Start")
}

// Start indicates an expected call of Start
func (_mr *MockdatabaseRepairerMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockdatabaseRepairer)(nil).Start))
}

// Stop mocks base method
func (_m *MockdatabaseRepairer) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockdatabaseRepairerMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockdatabaseRepairer)(nil).Stop))
}

// Repair mocks base method
func (_m *MockdatabaseRepairer) Repair() error {
	ret := _m.ctrl.Call(_m, "Repair")
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseRepairerMockRecorder) Repair() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockdatabaseRepairer)(nil).Repair))
}

// Report mocks base method
func (_m *MockdatabaseRepairer) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseRepairerMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseRepairer)(nil).Report))
}

// MockdatabaseTickManager is a mock of databaseTickManager interface
type MockdatabaseTickManager struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseTickManagerMockRecorder
}

// MockdatabaseTickManagerMockRecorder is the mock recorder for MockdatabaseTickManager
type MockdatabaseTickManagerMockRecorder struct {
	mock *MockdatabaseTickManager
}

// NewMockdatabaseTickManager creates a new mock instance
func NewMockdatabaseTickManager(ctrl *gomock.Controller) *MockdatabaseTickManager {
	mock := &MockdatabaseTickManager{ctrl: ctrl}
	mock.recorder = &MockdatabaseTickManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseTickManager) EXPECT() *MockdatabaseTickManagerMockRecorder {
	return _m.recorder
}

// Tick mocks base method
func (_m *MockdatabaseTickManager) Tick(forceType forceType) error {
	ret := _m.ctrl.Call(_m, "Tick", forceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tick indicates an expected call of Tick
func (_mr *MockdatabaseTickManagerMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tick", reflect.TypeOf((*MockdatabaseTickManager)(nil).Tick), arg0)
}

// MockdatabaseMediator is a mock of databaseMediator interface
type MockdatabaseMediator struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMediatorMockRecorder
}

// MockdatabaseMediatorMockRecorder is the mock recorder for MockdatabaseMediator
type MockdatabaseMediatorMockRecorder struct {
	mock *MockdatabaseMediator
}

// NewMockdatabaseMediator creates a new mock instance
func NewMockdatabaseMediator(ctrl *gomock.Controller) *MockdatabaseMediator {
	mock := &MockdatabaseMediator{ctrl: ctrl}
	mock.recorder = &MockdatabaseMediatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseMediator) EXPECT() *MockdatabaseMediatorMockRecorder {
	return _m.recorder
}

// Open mocks base method
func (_m *MockdatabaseMediator) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockdatabaseMediatorMockRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockdatabaseMediator)(nil).Open))
}

// IsBootstrapped mocks base method
func (_m *MockdatabaseMediator) IsBootstrapped() bool {
	ret := _m.ctrl.Call(_m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped
func (_mr *MockdatabaseMediatorMockRecorder) IsBootstrapped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsBootstrapped", reflect.TypeOf((*MockdatabaseMediator)(nil).IsBootstrapped))
}

// Bootstrap mocks base method
func (_m *MockdatabaseMediator) Bootstrap() error {
	ret := _m.ctrl.Call(_m, "Bootstrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap
func (_mr *MockdatabaseMediatorMockRecorder) Bootstrap() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bootstrap", reflect.TypeOf((*MockdatabaseMediator)(nil).Bootstrap))
}

// DisableFileOps mocks base method
func (_m *MockdatabaseMediator) DisableFileOps() {
	_m.ctrl.Call(_m, "DisableFileOps")
}

// DisableFileOps indicates an expected call of DisableFileOps
func (_mr *MockdatabaseMediatorMockRecorder) DisableFileOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DisableFileOps", reflect.TypeOf((*MockdatabaseMediator)(nil).DisableFileOps))
}

// EnableFileOps mocks base method
func (_m *MockdatabaseMediator) EnableFileOps() {
	_m.ctrl.Call(_m, "EnableFileOps")
}

// EnableFileOps indicates an expected call of EnableFileOps
func (_mr *MockdatabaseMediatorMockRecorder) EnableFileOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnableFileOps", reflect.TypeOf((*MockdatabaseMediator)(nil).EnableFileOps))
}

// Tick mocks base method
func (_m *MockdatabaseMediator) Tick(runType runType, forceType forceType) error {
	ret := _m.ctrl.Call(_m, "Tick", runType, forceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tick indicates an expected call of Tick
func (_mr *MockdatabaseMediatorMockRecorder) Tick(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tick", reflect.TypeOf((*MockdatabaseMediator)(nil).Tick), arg0, arg1)
}

// Repair mocks base method
func (_m *MockdatabaseMediator) Repair() error {
	ret := _m.ctrl.Call(_m, "Repair")
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (_mr *MockdatabaseMediatorMockRecorder) Repair() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repair", reflect.TypeOf((*MockdatabaseMediator)(nil).Repair))
}

// Close mocks base method
func (_m *MockdatabaseMediator) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockdatabaseMediatorMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockdatabaseMediator)(nil).Close))
}

// Report mocks base method
func (_m *MockdatabaseMediator) Report() {
	_m.ctrl.Call(_m, "Report")
}

// Report indicates an expected call of Report
func (_mr *MockdatabaseMediatorMockRecorder) Report() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Report", reflect.TypeOf((*MockdatabaseMediator)(nil).Report))
}

// MockdatabaseNamespaceWatch is a mock of databaseNamespaceWatch interface
type MockdatabaseNamespaceWatch struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseNamespaceWatchMockRecorder
}

// MockdatabaseNamespaceWatchMockRecorder is the mock recorder for MockdatabaseNamespaceWatch
type MockdatabaseNamespaceWatchMockRecorder struct {
	mock *MockdatabaseNamespaceWatch
}

// NewMockdatabaseNamespaceWatch creates a new mock instance
func NewMockdatabaseNamespaceWatch(ctrl *gomock.Controller) *MockdatabaseNamespaceWatch {
	mock := &MockdatabaseNamespaceWatch{ctrl: ctrl}
	mock.recorder = &MockdatabaseNamespaceWatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockdatabaseNamespaceWatch) EXPECT() *MockdatabaseNamespaceWatchMockRecorder {
	return _m.recorder
}

// Start mocks base method
func (_m *MockdatabaseNamespaceWatch) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockdatabaseNamespaceWatchMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockdatabaseNamespaceWatch)(nil).Start))
}

// Stop mocks base method
func (_m *MockdatabaseNamespaceWatch) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockdatabaseNamespaceWatchMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockdatabaseNamespaceWatch)(nil).Stop))
}

// Close mocks base method
func (_m *MockdatabaseNamespaceWatch) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockdatabaseNamespaceWatchMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockdatabaseNamespaceWatch)(nil).Close))
}

// MockOptions is a mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return _m.recorder
}

// Validate mocks base method
func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (_mr *MockOptionsMockRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Validate", reflect.TypeOf((*MockOptions)(nil).Validate))
}

// SetEncodingM3TSZPooled mocks base method
func (_m *MockOptions) SetEncodingM3TSZPooled() Options {
	ret := _m.ctrl.Call(_m, "SetEncodingM3TSZPooled")
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetEncodingM3TSZPooled indicates an expected call of SetEncodingM3TSZPooled
func (_mr *MockOptionsMockRecorder) SetEncodingM3TSZPooled() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEncodingM3TSZPooled", reflect.TypeOf((*MockOptions)(nil).SetEncodingM3TSZPooled))
}

// SetClockOptions mocks base method
func (_m *MockOptions) SetClockOptions(value clock.Options) Options {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetClockOptions indicates an expected call of SetClockOptions
func (_mr *MockOptionsMockRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetClockOptions", reflect.TypeOf((*MockOptions)(nil).SetClockOptions), arg0)
}

// ClockOptions mocks base method
func (_m *MockOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

// ClockOptions indicates an expected call of ClockOptions
func (_mr *MockOptionsMockRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClockOptions", reflect.TypeOf((*MockOptions)(nil).ClockOptions))
}

// SetInstrumentOptions mocks base method
func (_m *MockOptions) SetInstrumentOptions(value instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetInstrumentOptions indicates an expected call of SetInstrumentOptions
func (_mr *MockOptionsMockRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstrumentOptions", reflect.TypeOf((*MockOptions)(nil).SetInstrumentOptions), arg0)
}

// InstrumentOptions mocks base method
func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

// InstrumentOptions indicates an expected call of InstrumentOptions
func (_mr *MockOptionsMockRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstrumentOptions", reflect.TypeOf((*MockOptions)(nil).InstrumentOptions))
}

// SetNamespaceInitializer mocks base method
func (_m *MockOptions) SetNamespaceInitializer(value namespace.Initializer) Options {
	ret := _m.ctrl.Call(_m, "SetNamespaceInitializer", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetNamespaceInitializer indicates an expected call of SetNamespaceInitializer
func (_mr *MockOptionsMockRecorder) SetNamespaceInitializer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNamespaceInitializer", reflect.TypeOf((*MockOptions)(nil).SetNamespaceInitializer), arg0)
}

// NamespaceInitializer mocks base method
func (_m *MockOptions) NamespaceInitializer() namespace.Initializer {
	ret := _m.ctrl.Call(_m, "NamespaceInitializer")
	ret0, _ := ret[0].(namespace.Initializer)
	return ret0
}

// NamespaceInitializer indicates an expected call of NamespaceInitializer
func (_mr *MockOptionsMockRecorder) NamespaceInitializer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NamespaceInitializer", reflect.TypeOf((*MockOptions)(nil).NamespaceInitializer))
}

// SetDatabaseBlockOptions mocks base method
func (_m *MockOptions) SetDatabaseBlockOptions(value block.Options) Options {
	ret := _m.ctrl.Call(_m, "SetDatabaseBlockOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDatabaseBlockOptions indicates an expected call of SetDatabaseBlockOptions
func (_mr *MockOptionsMockRecorder) SetDatabaseBlockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDatabaseBlockOptions", reflect.TypeOf((*MockOptions)(nil).SetDatabaseBlockOptions), arg0)
}

// DatabaseBlockOptions mocks base method
func (_m *MockOptions) DatabaseBlockOptions() block.Options {
	ret := _m.ctrl.Call(_m, "DatabaseBlockOptions")
	ret0, _ := ret[0].(block.Options)
	return ret0
}

// DatabaseBlockOptions indicates an expected call of DatabaseBlockOptions
func (_mr *MockOptionsMockRecorder) DatabaseBlockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DatabaseBlockOptions", reflect.TypeOf((*MockOptions)(nil).DatabaseBlockOptions))
}

// SetCommitLogOptions mocks base method
func (_m *MockOptions) SetCommitLogOptions(value commitlog.Options) Options {
	ret := _m.ctrl.Call(_m, "SetCommitLogOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetCommitLogOptions indicates an expected call of SetCommitLogOptions
func (_mr *MockOptionsMockRecorder) SetCommitLogOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCommitLogOptions", reflect.TypeOf((*MockOptions)(nil).SetCommitLogOptions), arg0)
}

// CommitLogOptions mocks base method
func (_m *MockOptions) CommitLogOptions() commitlog.Options {
	ret := _m.ctrl.Call(_m, "CommitLogOptions")
	ret0, _ := ret[0].(commitlog.Options)
	return ret0
}

// CommitLogOptions indicates an expected call of CommitLogOptions
func (_mr *MockOptionsMockRecorder) CommitLogOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CommitLogOptions", reflect.TypeOf((*MockOptions)(nil).CommitLogOptions))
}

// SetRuntimeOptionsManager mocks base method
func (_m *MockOptions) SetRuntimeOptionsManager(value runtime.OptionsManager) Options {
	ret := _m.ctrl.Call(_m, "SetRuntimeOptionsManager", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetRuntimeOptionsManager indicates an expected call of SetRuntimeOptionsManager
func (_mr *MockOptionsMockRecorder) SetRuntimeOptionsManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRuntimeOptionsManager", reflect.TypeOf((*MockOptions)(nil).SetRuntimeOptionsManager), arg0)
}

// RuntimeOptionsManager mocks base method
func (_m *MockOptions) RuntimeOptionsManager() runtime.OptionsManager {
	ret := _m.ctrl.Call(_m, "RuntimeOptionsManager")
	ret0, _ := ret[0].(runtime.OptionsManager)
	return ret0
}

// RuntimeOptionsManager indicates an expected call of RuntimeOptionsManager
func (_mr *MockOptionsMockRecorder) RuntimeOptionsManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RuntimeOptionsManager", reflect.TypeOf((*MockOptions)(nil).RuntimeOptionsManager))
}

// SetErrorCounterOptions mocks base method
func (_m *MockOptions) SetErrorCounterOptions(value xcounter.Options) Options {
	ret := _m.ctrl.Call(_m, "SetErrorCounterOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetErrorCounterOptions indicates an expected call of SetErrorCounterOptions
func (_mr *MockOptionsMockRecorder) SetErrorCounterOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetErrorCounterOptions", reflect.TypeOf((*MockOptions)(nil).SetErrorCounterOptions), arg0)
}

// ErrorCounterOptions mocks base method
func (_m *MockOptions) ErrorCounterOptions() xcounter.Options {
	ret := _m.ctrl.Call(_m, "ErrorCounterOptions")
	ret0, _ := ret[0].(xcounter.Options)
	return ret0
}

// ErrorCounterOptions indicates an expected call of ErrorCounterOptions
func (_mr *MockOptionsMockRecorder) ErrorCounterOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ErrorCounterOptions", reflect.TypeOf((*MockOptions)(nil).ErrorCounterOptions))
}

// SetErrorWindowForLoad mocks base method
func (_m *MockOptions) SetErrorWindowForLoad(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetErrorWindowForLoad", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetErrorWindowForLoad indicates an expected call of SetErrorWindowForLoad
func (_mr *MockOptionsMockRecorder) SetErrorWindowForLoad(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetErrorWindowForLoad", reflect.TypeOf((*MockOptions)(nil).SetErrorWindowForLoad), arg0)
}

// ErrorWindowForLoad mocks base method
func (_m *MockOptions) ErrorWindowForLoad() time.Duration {
	ret := _m.ctrl.Call(_m, "ErrorWindowForLoad")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ErrorWindowForLoad indicates an expected call of ErrorWindowForLoad
func (_mr *MockOptionsMockRecorder) ErrorWindowForLoad() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ErrorWindowForLoad", reflect.TypeOf((*MockOptions)(nil).ErrorWindowForLoad))
}

// SetErrorThresholdForLoad mocks base method
func (_m *MockOptions) SetErrorThresholdForLoad(value int64) Options {
	ret := _m.ctrl.Call(_m, "SetErrorThresholdForLoad", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetErrorThresholdForLoad indicates an expected call of SetErrorThresholdForLoad
func (_mr *MockOptionsMockRecorder) SetErrorThresholdForLoad(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetErrorThresholdForLoad", reflect.TypeOf((*MockOptions)(nil).SetErrorThresholdForLoad), arg0)
}

// ErrorThresholdForLoad mocks base method
func (_m *MockOptions) ErrorThresholdForLoad() int64 {
	ret := _m.ctrl.Call(_m, "ErrorThresholdForLoad")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ErrorThresholdForLoad indicates an expected call of ErrorThresholdForLoad
func (_mr *MockOptionsMockRecorder) ErrorThresholdForLoad() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ErrorThresholdForLoad", reflect.TypeOf((*MockOptions)(nil).ErrorThresholdForLoad))
}

// SetIndexingEnabled mocks base method
func (_m *MockOptions) SetIndexingEnabled(b bool) Options {
	ret := _m.ctrl.Call(_m, "SetIndexingEnabled", b)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIndexingEnabled indicates an expected call of SetIndexingEnabled
func (_mr *MockOptionsMockRecorder) SetIndexingEnabled(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIndexingEnabled", reflect.TypeOf((*MockOptions)(nil).SetIndexingEnabled), arg0)
}

// IndexingEnabled mocks base method
func (_m *MockOptions) IndexingEnabled() bool {
	ret := _m.ctrl.Call(_m, "IndexingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IndexingEnabled indicates an expected call of IndexingEnabled
func (_mr *MockOptionsMockRecorder) IndexingEnabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IndexingEnabled", reflect.TypeOf((*MockOptions)(nil).IndexingEnabled))
}

// SetRepairEnabled mocks base method
func (_m *MockOptions) SetRepairEnabled(b bool) Options {
	ret := _m.ctrl.Call(_m, "SetRepairEnabled", b)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetRepairEnabled indicates an expected call of SetRepairEnabled
func (_mr *MockOptionsMockRecorder) SetRepairEnabled(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRepairEnabled", reflect.TypeOf((*MockOptions)(nil).SetRepairEnabled), arg0)
}

// RepairEnabled mocks base method
func (_m *MockOptions) RepairEnabled() bool {
	ret := _m.ctrl.Call(_m, "RepairEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RepairEnabled indicates an expected call of RepairEnabled
func (_mr *MockOptionsMockRecorder) RepairEnabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RepairEnabled", reflect.TypeOf((*MockOptions)(nil).RepairEnabled))
}

// SetRepairOptions mocks base method
func (_m *MockOptions) SetRepairOptions(value repair.Options) Options {
	ret := _m.ctrl.Call(_m, "SetRepairOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetRepairOptions indicates an expected call of SetRepairOptions
func (_mr *MockOptionsMockRecorder) SetRepairOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRepairOptions", reflect.TypeOf((*MockOptions)(nil).SetRepairOptions), arg0)
}

// RepairOptions mocks base method
func (_m *MockOptions) RepairOptions() repair.Options {
	ret := _m.ctrl.Call(_m, "RepairOptions")
	ret0, _ := ret[0].(repair.Options)
	return ret0
}

// RepairOptions indicates an expected call of RepairOptions
func (_mr *MockOptionsMockRecorder) RepairOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RepairOptions", reflect.TypeOf((*MockOptions)(nil).RepairOptions))
}

// SetBootstrapProcess mocks base method
func (_m *MockOptions) SetBootstrapProcess(value bootstrap.Process) Options {
	ret := _m.ctrl.Call(_m, "SetBootstrapProcess", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetBootstrapProcess indicates an expected call of SetBootstrapProcess
func (_mr *MockOptionsMockRecorder) SetBootstrapProcess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetBootstrapProcess", reflect.TypeOf((*MockOptions)(nil).SetBootstrapProcess), arg0)
}

// BootstrapProcess mocks base method
func (_m *MockOptions) BootstrapProcess() bootstrap.Process {
	ret := _m.ctrl.Call(_m, "BootstrapProcess")
	ret0, _ := ret[0].(bootstrap.Process)
	return ret0
}

// BootstrapProcess indicates an expected call of BootstrapProcess
func (_mr *MockOptionsMockRecorder) BootstrapProcess() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BootstrapProcess", reflect.TypeOf((*MockOptions)(nil).BootstrapProcess))
}

// SetPersistManager mocks base method
func (_m *MockOptions) SetPersistManager(value persist.Manager) Options {
	ret := _m.ctrl.Call(_m, "SetPersistManager", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetPersistManager indicates an expected call of SetPersistManager
func (_mr *MockOptionsMockRecorder) SetPersistManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPersistManager", reflect.TypeOf((*MockOptions)(nil).SetPersistManager), arg0)
}

// PersistManager mocks base method
func (_m *MockOptions) PersistManager() persist.Manager {
	ret := _m.ctrl.Call(_m, "PersistManager")
	ret0, _ := ret[0].(persist.Manager)
	return ret0
}

// PersistManager indicates an expected call of PersistManager
func (_mr *MockOptionsMockRecorder) PersistManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PersistManager", reflect.TypeOf((*MockOptions)(nil).PersistManager))
}

// SetMaxFlushRetries mocks base method
func (_m *MockOptions) SetMaxFlushRetries(value int) Options {
	ret := _m.ctrl.Call(_m, "SetMaxFlushRetries", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetMaxFlushRetries indicates an expected call of SetMaxFlushRetries
func (_mr *MockOptionsMockRecorder) SetMaxFlushRetries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMaxFlushRetries", reflect.TypeOf((*MockOptions)(nil).SetMaxFlushRetries), arg0)
}

// MaxFlushRetries mocks base method
func (_m *MockOptions) MaxFlushRetries() int {
	ret := _m.ctrl.Call(_m, "MaxFlushRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxFlushRetries indicates an expected call of MaxFlushRetries
func (_mr *MockOptionsMockRecorder) MaxFlushRetries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MaxFlushRetries", reflect.TypeOf((*MockOptions)(nil).MaxFlushRetries))
}

// SetDatabaseBlockRetrieverManager mocks base method
func (_m *MockOptions) SetDatabaseBlockRetrieverManager(value block.DatabaseBlockRetrieverManager) Options {
	ret := _m.ctrl.Call(_m, "SetDatabaseBlockRetrieverManager", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDatabaseBlockRetrieverManager indicates an expected call of SetDatabaseBlockRetrieverManager
func (_mr *MockOptionsMockRecorder) SetDatabaseBlockRetrieverManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDatabaseBlockRetrieverManager", reflect.TypeOf((*MockOptions)(nil).SetDatabaseBlockRetrieverManager), arg0)
}

// DatabaseBlockRetrieverManager mocks base method
func (_m *MockOptions) DatabaseBlockRetrieverManager() block.DatabaseBlockRetrieverManager {
	ret := _m.ctrl.Call(_m, "DatabaseBlockRetrieverManager")
	ret0, _ := ret[0].(block.DatabaseBlockRetrieverManager)
	return ret0
}

// DatabaseBlockRetrieverManager indicates an expected call of DatabaseBlockRetrieverManager
func (_mr *MockOptionsMockRecorder) DatabaseBlockRetrieverManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DatabaseBlockRetrieverManager", reflect.TypeOf((*MockOptions)(nil).DatabaseBlockRetrieverManager))
}

// SetContextPool mocks base method
func (_m *MockOptions) SetContextPool(value context.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetContextPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetContextPool indicates an expected call of SetContextPool
func (_mr *MockOptionsMockRecorder) SetContextPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetContextPool", reflect.TypeOf((*MockOptions)(nil).SetContextPool), arg0)
}

// ContextPool mocks base method
func (_m *MockOptions) ContextPool() context.Pool {
	ret := _m.ctrl.Call(_m, "ContextPool")
	ret0, _ := ret[0].(context.Pool)
	return ret0
}

// ContextPool indicates an expected call of ContextPool
func (_mr *MockOptionsMockRecorder) ContextPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ContextPool", reflect.TypeOf((*MockOptions)(nil).ContextPool))
}

// SetSeriesCachePolicy mocks base method
func (_m *MockOptions) SetSeriesCachePolicy(value series.CachePolicy) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesCachePolicy", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetSeriesCachePolicy indicates an expected call of SetSeriesCachePolicy
func (_mr *MockOptionsMockRecorder) SetSeriesCachePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetSeriesCachePolicy", reflect.TypeOf((*MockOptions)(nil).SetSeriesCachePolicy), arg0)
}

// SeriesCachePolicy mocks base method
func (_m *MockOptions) SeriesCachePolicy() series.CachePolicy {
	ret := _m.ctrl.Call(_m, "SeriesCachePolicy")
	ret0, _ := ret[0].(series.CachePolicy)
	return ret0
}

// SeriesCachePolicy indicates an expected call of SeriesCachePolicy
func (_mr *MockOptionsMockRecorder) SeriesCachePolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SeriesCachePolicy", reflect.TypeOf((*MockOptions)(nil).SeriesCachePolicy))
}

// SetSeriesOptions mocks base method
func (_m *MockOptions) SetSeriesOptions(value series.Options) Options {
	ret := _m.ctrl.Call(_m, "SetSeriesOptions", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetSeriesOptions indicates an expected call of SetSeriesOptions
func (_mr *MockOptionsMockRecorder) SetSeriesOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetSeriesOptions", reflect.TypeOf((*MockOptions)(nil).SetSeriesOptions), arg0)
}

// SeriesOptions mocks base method
func (_m *MockOptions) SeriesOptions() series.Options {
	ret := _m.ctrl.Call(_m, "SeriesOptions")
	ret0, _ := ret[0].(series.Options)
	return ret0
}

// SeriesOptions indicates an expected call of SeriesOptions
func (_mr *MockOptionsMockRecorder) SeriesOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SeriesOptions", reflect.TypeOf((*MockOptions)(nil).SeriesOptions))
}

// SetDatabaseSeriesPool mocks base method
func (_m *MockOptions) SetDatabaseSeriesPool(value series.DatabaseSeriesPool) Options {
	ret := _m.ctrl.Call(_m, "SetDatabaseSeriesPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDatabaseSeriesPool indicates an expected call of SetDatabaseSeriesPool
func (_mr *MockOptionsMockRecorder) SetDatabaseSeriesPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDatabaseSeriesPool", reflect.TypeOf((*MockOptions)(nil).SetDatabaseSeriesPool), arg0)
}

// DatabaseSeriesPool mocks base method
func (_m *MockOptions) DatabaseSeriesPool() series.DatabaseSeriesPool {
	ret := _m.ctrl.Call(_m, "DatabaseSeriesPool")
	ret0, _ := ret[0].(series.DatabaseSeriesPool)
	return ret0
}

// DatabaseSeriesPool indicates an expected call of DatabaseSeriesPool
func (_mr *MockOptionsMockRecorder) DatabaseSeriesPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DatabaseSeriesPool", reflect.TypeOf((*MockOptions)(nil).DatabaseSeriesPool))
}

// SetBytesPool mocks base method
func (_m *MockOptions) SetBytesPool(value pool.CheckedBytesPool) Options {
	ret := _m.ctrl.Call(_m, "SetBytesPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetBytesPool indicates an expected call of SetBytesPool
func (_mr *MockOptionsMockRecorder) SetBytesPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetBytesPool", reflect.TypeOf((*MockOptions)(nil).SetBytesPool), arg0)
}

// BytesPool mocks base method
func (_m *MockOptions) BytesPool() pool.CheckedBytesPool {
	ret := _m.ctrl.Call(_m, "BytesPool")
	ret0, _ := ret[0].(pool.CheckedBytesPool)
	return ret0
}

// BytesPool indicates an expected call of BytesPool
func (_mr *MockOptionsMockRecorder) BytesPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BytesPool", reflect.TypeOf((*MockOptions)(nil).BytesPool))
}

// SetEncoderPool mocks base method
func (_m *MockOptions) SetEncoderPool(value encoding.EncoderPool) Options {
	ret := _m.ctrl.Call(_m, "SetEncoderPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetEncoderPool indicates an expected call of SetEncoderPool
func (_mr *MockOptionsMockRecorder) SetEncoderPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEncoderPool", reflect.TypeOf((*MockOptions)(nil).SetEncoderPool), arg0)
}

// EncoderPool mocks base method
func (_m *MockOptions) EncoderPool() encoding.EncoderPool {
	ret := _m.ctrl.Call(_m, "EncoderPool")
	ret0, _ := ret[0].(encoding.EncoderPool)
	return ret0
}

// EncoderPool indicates an expected call of EncoderPool
func (_mr *MockOptionsMockRecorder) EncoderPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EncoderPool", reflect.TypeOf((*MockOptions)(nil).EncoderPool))
}

// SetSegmentReaderPool mocks base method
func (_m *MockOptions) SetSegmentReaderPool(value xio.SegmentReaderPool) Options {
	ret := _m.ctrl.Call(_m, "SetSegmentReaderPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetSegmentReaderPool indicates an expected call of SetSegmentReaderPool
func (_mr *MockOptionsMockRecorder) SetSegmentReaderPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetSegmentReaderPool", reflect.TypeOf((*MockOptions)(nil).SetSegmentReaderPool), arg0)
}

// SegmentReaderPool mocks base method
func (_m *MockOptions) SegmentReaderPool() xio.SegmentReaderPool {
	ret := _m.ctrl.Call(_m, "SegmentReaderPool")
	ret0, _ := ret[0].(xio.SegmentReaderPool)
	return ret0
}

// SegmentReaderPool indicates an expected call of SegmentReaderPool
func (_mr *MockOptionsMockRecorder) SegmentReaderPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SegmentReaderPool", reflect.TypeOf((*MockOptions)(nil).SegmentReaderPool))
}

// SetReaderIteratorPool mocks base method
func (_m *MockOptions) SetReaderIteratorPool(value encoding.ReaderIteratorPool) Options {
	ret := _m.ctrl.Call(_m, "SetReaderIteratorPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetReaderIteratorPool indicates an expected call of SetReaderIteratorPool
func (_mr *MockOptionsMockRecorder) SetReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).SetReaderIteratorPool), arg0)
}

// ReaderIteratorPool mocks base method
func (_m *MockOptions) ReaderIteratorPool() encoding.ReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "ReaderIteratorPool")
	ret0, _ := ret[0].(encoding.ReaderIteratorPool)
	return ret0
}

// ReaderIteratorPool indicates an expected call of ReaderIteratorPool
func (_mr *MockOptionsMockRecorder) ReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).ReaderIteratorPool))
}

// SetMultiReaderIteratorPool mocks base method
func (_m *MockOptions) SetMultiReaderIteratorPool(value encoding.MultiReaderIteratorPool) Options {
	ret := _m.ctrl.Call(_m, "SetMultiReaderIteratorPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetMultiReaderIteratorPool indicates an expected call of SetMultiReaderIteratorPool
func (_mr *MockOptionsMockRecorder) SetMultiReaderIteratorPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMultiReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).SetMultiReaderIteratorPool), arg0)
}

// MultiReaderIteratorPool mocks base method
func (_m *MockOptions) MultiReaderIteratorPool() encoding.MultiReaderIteratorPool {
	ret := _m.ctrl.Call(_m, "MultiReaderIteratorPool")
	ret0, _ := ret[0].(encoding.MultiReaderIteratorPool)
	return ret0
}

// MultiReaderIteratorPool indicates an expected call of MultiReaderIteratorPool
func (_mr *MockOptionsMockRecorder) MultiReaderIteratorPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MultiReaderIteratorPool", reflect.TypeOf((*MockOptions)(nil).MultiReaderIteratorPool))
}

// SetIdentifierPool mocks base method
func (_m *MockOptions) SetIdentifierPool(value ident.Pool) Options {
	ret := _m.ctrl.Call(_m, "SetIdentifierPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIdentifierPool indicates an expected call of SetIdentifierPool
func (_mr *MockOptionsMockRecorder) SetIdentifierPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIdentifierPool", reflect.TypeOf((*MockOptions)(nil).SetIdentifierPool), arg0)
}

// IdentifierPool mocks base method
func (_m *MockOptions) IdentifierPool() ident.Pool {
	ret := _m.ctrl.Call(_m, "IdentifierPool")
	ret0, _ := ret[0].(ident.Pool)
	return ret0
}

// IdentifierPool indicates an expected call of IdentifierPool
func (_mr *MockOptionsMockRecorder) IdentifierPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IdentifierPool", reflect.TypeOf((*MockOptions)(nil).IdentifierPool))
}

// SetFetchBlockMetadataResultsPool mocks base method
func (_m *MockOptions) SetFetchBlockMetadataResultsPool(value block.FetchBlockMetadataResultsPool) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBlockMetadataResultsPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetFetchBlockMetadataResultsPool indicates an expected call of SetFetchBlockMetadataResultsPool
func (_mr *MockOptionsMockRecorder) SetFetchBlockMetadataResultsPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetFetchBlockMetadataResultsPool", reflect.TypeOf((*MockOptions)(nil).SetFetchBlockMetadataResultsPool), arg0)
}

// FetchBlockMetadataResultsPool mocks base method
func (_m *MockOptions) FetchBlockMetadataResultsPool() block.FetchBlockMetadataResultsPool {
	ret := _m.ctrl.Call(_m, "FetchBlockMetadataResultsPool")
	ret0, _ := ret[0].(block.FetchBlockMetadataResultsPool)
	return ret0
}

// FetchBlockMetadataResultsPool indicates an expected call of FetchBlockMetadataResultsPool
func (_mr *MockOptionsMockRecorder) FetchBlockMetadataResultsPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlockMetadataResultsPool", reflect.TypeOf((*MockOptions)(nil).FetchBlockMetadataResultsPool))
}

// SetFetchBlocksMetadataResultsPool mocks base method
func (_m *MockOptions) SetFetchBlocksMetadataResultsPool(value block.FetchBlocksMetadataResultsPool) Options {
	ret := _m.ctrl.Call(_m, "SetFetchBlocksMetadataResultsPool", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetFetchBlocksMetadataResultsPool indicates an expected call of SetFetchBlocksMetadataResultsPool
func (_mr *MockOptionsMockRecorder) SetFetchBlocksMetadataResultsPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetFetchBlocksMetadataResultsPool", reflect.TypeOf((*MockOptions)(nil).SetFetchBlocksMetadataResultsPool), arg0)
}

// FetchBlocksMetadataResultsPool mocks base method
func (_m *MockOptions) FetchBlocksMetadataResultsPool() block.FetchBlocksMetadataResultsPool {
	ret := _m.ctrl.Call(_m, "FetchBlocksMetadataResultsPool")
	ret0, _ := ret[0].(block.FetchBlocksMetadataResultsPool)
	return ret0
}

// FetchBlocksMetadataResultsPool indicates an expected call of FetchBlocksMetadataResultsPool
func (_mr *MockOptionsMockRecorder) FetchBlocksMetadataResultsPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBlocksMetadataResultsPool", reflect.TypeOf((*MockOptions)(nil).FetchBlocksMetadataResultsPool))
}
