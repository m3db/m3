// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package storage

import (
	"container/list"

	"github.com/cespare/xxhash"
	"github.com/m3db/m3x/ident"
)

type shardMap struct {
	mapOptions

	// lookup uses hash of the identifier for the key and the shardMapEntry value
	// wraps the value type and the key (used to ensure lookup is correct
	// when dealing with collisions), we use uint64 for the hash partially
	// because lookups of maps with uint64 keys has a fast path for Go.
	lookup map[mapHash]shardMapEntry
}

// shardMapEntry is an entry in the map, this is public to support iterating
// over the map using a native Go for loop.
type shardMapEntry struct {
	// key is used to check equality on lookups to resolve collisions
	key shardMapKey
	// value type stored
	value *list.Element
}

type shardMapKey struct {
	key      ident.ID
	finalize bool
}

// Key returns the map entry key.
func (e shardMapEntry) Key() ident.ID {
	return e.key.key
}

// Element returns the map entry value.
func (e shardMapEntry) Element() *list.Element {
	return e.value
}

func newShardMap() *shardMap {
	m := &shardMap{mapOptions: mapOptions{
		hash: func(id ident.ID) mapHash {
			return mapHash(xxhash.Sum64(id.Bytes()))
		},
		equals: func(x, y ident.ID) bool {
			return x.Equal(y)
		},
		copy: func(k ident.ID) ident.ID {
			return id(append([]byte(nil), k.Bytes()...))
		},
	}}
	m.Reallocate()
	return m
}

func (m *shardMap) newshardMapKey(k ident.ID, opts mapKeyOptions) shardMapKey {
	key := shardMapKey{key: k, finalize: opts.finalizeKey}
	if !opts.copyKey {
		return key
	}

	key.key = m.copy(k)
	return key
}

func (m *shardMap) removeshardMapKey(hash mapHash, key shardMapKey) {
	delete(m.lookup, hash)
	if key.finalize {
		m.finalize(key.key)
	}
}

// Get returns a value in the map for an identifier if found.
func (m *shardMap) Get(k ident.ID) (*list.Element, bool) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			return entry.value, true
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}
	var empty *list.Element
	return empty, false
}

// Set will set the value for an identifier.
func (m *shardMap) Set(k ident.ID, v *list.Element) {
	m.set(k, v, mapKeyOptions{
		copyKey:     true,
		finalizeKey: m.finalize != nil,
	})
}

// SetUnsafeOptions is a set of options to use when setting a value with
// the SetUnsafe method.
type SetUnsafeOptions struct {
	NoCopyKey     bool
	NoFinalizeKey bool
}

// SetUnsafe will set the value for an identifier with unsafe options for how
// the map treats the key.
func (m *shardMap) SetUnsafe(k ident.ID, v *list.Element, opts SetUnsafeOptions) {
	m.set(k, v, mapKeyOptions{
		copyKey:     !opts.NoCopyKey,
		finalizeKey: !opts.NoFinalizeKey,
	})
}

func (m *shardMap) set(k ident.ID, v *list.Element, opts mapKeyOptions) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			m.lookup[hash] = shardMapEntry{
				key:   entry.key,
				value: v,
			}
			return
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}

	m.lookup[hash] = shardMapEntry{
		key:   m.newshardMapKey(k, opts),
		value: v,
	}
}

// Iter provides the underlying map to allow for using a native Go for loop
// to iterate the map, however callers should only ever read and not write
// the map.
func (m *shardMap) Iter() map[mapHash]shardMapEntry {
	return m.lookup
}

// Len returns the number of map entries in the map.
func (m *shardMap) Len() int {
	return len(m.lookup)
}

// Contains returns true if value exists for key, false otherwise, it is
// shorthand for a call to Get that doesn't return the value.
func (m *shardMap) Contains(k ident.ID) bool {
	_, ok := m.Get(k)
	return ok
}

// Delete will remove a value set in the map for the specified key.
func (m *shardMap) Delete(k ident.ID) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			m.removeshardMapKey(hash, entry.key)
			return
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}
}

// Reset will reset the map by simply deleting all keys to avoid
// allocating a new map.
func (m *shardMap) Reset() {
	for hash, entry := range m.lookup {
		m.removeshardMapKey(hash, entry.key)
	}
}

// Reallocate will avoid deleting all keys and reallocate a new
// map, this is useful if you believe you have a large map and
// will not need to grow back to a similar size.
func (m *shardMap) Reallocate() {
	if m.initialSize > 0 {
		m.lookup = make(map[mapHash]shardMapEntry, m.initialSize)
	} else {
		m.lookup = make(map[mapHash]shardMapEntry)
	}
}
