// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3db/storage/bootstrap/types.go

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	"reflect"

	"github.com/m3db/m3db/storage/bootstrap/result"
	"github.com/m3db/m3db/storage/namespace"

	"github.com/golang/mock/gomock"
)

// MockProcess is a mock of Process interface
type MockProcess struct {
	ctrl     *gomock.Controller
	recorder *MockProcessMockRecorder
}

// MockProcessMockRecorder is the mock recorder for MockProcess
type MockProcessMockRecorder struct {
	mock *MockProcess
}

// NewMockProcess creates a new mock instance
func NewMockProcess(ctrl *gomock.Controller) *MockProcess {
	mock := &MockProcess{ctrl: ctrl}
	mock.recorder = &MockProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcess) EXPECT() *MockProcessMockRecorder {
	return m.recorder
}

// SetBootstrapper mocks base method
func (m *MockProcess) SetBootstrapper(bootstrapper Bootstrapper) {
	m.ctrl.Call(m, "SetBootstrapper", bootstrapper)
}

// SetBootstrapper indicates an expected call of SetBootstrapper
func (mr *MockProcessMockRecorder) SetBootstrapper(bootstrapper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootstrapper", reflect.TypeOf((*MockProcess)(nil).SetBootstrapper), bootstrapper)
}

// Bootstrapper mocks base method
func (m *MockProcess) Bootstrapper() Bootstrapper {
	ret := m.ctrl.Call(m, "Bootstrapper")
	ret0, _ := ret[0].(Bootstrapper)
	return ret0
}

// Bootstrapper indicates an expected call of Bootstrapper
func (mr *MockProcessMockRecorder) Bootstrapper() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrapper", reflect.TypeOf((*MockProcess)(nil).Bootstrapper))
}

// Run mocks base method
func (m *MockProcess) Run(ns namespace.Metadata, shards []uint32, targetRanges []TargetRange) (result.BootstrapResult, error) {
	ret := m.ctrl.Call(m, "Run", ns, shards, targetRanges)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockProcessMockRecorder) Run(ns, shards, targetRanges interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProcess)(nil).Run), ns, shards, targetRanges)
}

// MockRunOptions is a mock of RunOptions interface
type MockRunOptions struct {
	ctrl     *gomock.Controller
	recorder *MockRunOptionsMockRecorder
}

// MockRunOptionsMockRecorder is the mock recorder for MockRunOptions
type MockRunOptionsMockRecorder struct {
	mock *MockRunOptions
}

// NewMockRunOptions creates a new mock instance
func NewMockRunOptions(ctrl *gomock.Controller) *MockRunOptions {
	mock := &MockRunOptions{ctrl: ctrl}
	mock.recorder = &MockRunOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunOptions) EXPECT() *MockRunOptionsMockRecorder {
	return m.recorder
}

// SetIncremental mocks base method
func (m *MockRunOptions) SetIncremental(value bool) RunOptions {
	ret := m.ctrl.Call(m, "SetIncremental", value)
	ret0, _ := ret[0].(RunOptions)
	return ret0
}

// SetIncremental indicates an expected call of SetIncremental
func (mr *MockRunOptionsMockRecorder) SetIncremental(value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIncremental", reflect.TypeOf((*MockRunOptions)(nil).SetIncremental), value)
}

// Incremental mocks base method
func (m *MockRunOptions) Incremental() bool {
	ret := m.ctrl.Call(m, "Incremental")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Incremental indicates an expected call of Incremental
func (mr *MockRunOptionsMockRecorder) Incremental() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incremental", reflect.TypeOf((*MockRunOptions)(nil).Incremental))
}

// MockBootstrapper is a mock of Bootstrapper interface
type MockBootstrapper struct {
	ctrl     *gomock.Controller
	recorder *MockBootstrapperMockRecorder
}

// MockBootstrapperMockRecorder is the mock recorder for MockBootstrapper
type MockBootstrapperMockRecorder struct {
	mock *MockBootstrapper
}

// NewMockBootstrapper creates a new mock instance
func NewMockBootstrapper(ctrl *gomock.Controller) *MockBootstrapper {
	mock := &MockBootstrapper{ctrl: ctrl}
	mock.recorder = &MockBootstrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBootstrapper) EXPECT() *MockBootstrapperMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockBootstrapper) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockBootstrapperMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockBootstrapper)(nil).String))
}

// Can mocks base method
func (m *MockBootstrapper) Can(strategy Strategy) bool {
	ret := m.ctrl.Call(m, "Can", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Can indicates an expected call of Can
func (mr *MockBootstrapperMockRecorder) Can(strategy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Can", reflect.TypeOf((*MockBootstrapper)(nil).Can), strategy)
}

// Bootstrap mocks base method
func (m *MockBootstrapper) Bootstrap(ns namespace.Metadata, shardsTimeRanges result.ShardTimeRanges, opts RunOptions) (result.BootstrapResult, error) {
	ret := m.ctrl.Call(m, "Bootstrap", ns, shardsTimeRanges, opts)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap
func (mr *MockBootstrapperMockRecorder) Bootstrap(ns, shardsTimeRanges, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockBootstrapper)(nil).Bootstrap), ns, shardsTimeRanges, opts)
}

// MockSource is a mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Can mocks base method
func (m *MockSource) Can(strategy Strategy) bool {
	ret := m.ctrl.Call(m, "Can", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Can indicates an expected call of Can
func (mr *MockSourceMockRecorder) Can(strategy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Can", reflect.TypeOf((*MockSource)(nil).Can), strategy)
}

// Available mocks base method
func (m *MockSource) Available(ns namespace.Metadata, shardsTimeRanges result.ShardTimeRanges) result.ShardTimeRanges {
	ret := m.ctrl.Call(m, "Available", ns, shardsTimeRanges)
	ret0, _ := ret[0].(result.ShardTimeRanges)
	return ret0
}

// Available indicates an expected call of Available
func (mr *MockSourceMockRecorder) Available(ns, shardsTimeRanges interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockSource)(nil).Available), ns, shardsTimeRanges)
}

// Read mocks base method
func (m *MockSource) Read(ns namespace.Metadata, shardsTimeRanges result.ShardTimeRanges, opts RunOptions) (result.BootstrapResult, error) {
	ret := m.ctrl.Call(m, "Read", ns, shardsTimeRanges, opts)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSourceMockRecorder) Read(ns, shardsTimeRanges, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSource)(nil).Read), ns, shardsTimeRanges, opts)
}
