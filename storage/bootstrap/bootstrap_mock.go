// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/storage/bootstrap/types.go

package bootstrap

import (
	result "github.com/m3db/m3db/storage/bootstrap/result"
	ts "github.com/m3db/m3db/ts"

	gomock "github.com/golang/mock/gomock"
)

// Mock of Process interface
type MockProcess struct {
	ctrl     *gomock.Controller
	recorder *_MockProcessRecorder
}

// Recorder for MockProcess (not exported)
type _MockProcessRecorder struct {
	mock *MockProcess
}

func NewMockProcess(ctrl *gomock.Controller) *MockProcess {
	mock := &MockProcess{ctrl: ctrl}
	mock.recorder = &_MockProcessRecorder{mock}
	return mock
}

func (_m *MockProcess) EXPECT() *_MockProcessRecorder {
	return _m.recorder
}

func (_m *MockProcess) SetBootstrapper(bootstrapper Bootstrapper) {
	_m.ctrl.Call(_m, "SetBootstrapper", bootstrapper)
}

func (_mr *_MockProcessRecorder) SetBootstrapper(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBootstrapper", arg0)
}

func (_m *MockProcess) Bootstrapper() Bootstrapper {
	ret := _m.ctrl.Call(_m, "Bootstrapper")
	ret0, _ := ret[0].(Bootstrapper)
	return ret0
}

func (_mr *_MockProcessRecorder) Bootstrapper() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bootstrapper")
}

func (_m *MockProcess) Run(namespace ts.ID, shards []uint32, targetRanges []TargetRange) (result.BootstrapResult, error) {
	ret := _m.ctrl.Call(_m, "Run", namespace, shards, targetRanges)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProcessRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", arg0, arg1, arg2)
}

// Mock of RunOptions interface
type MockRunOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockRunOptionsRecorder
}

// Recorder for MockRunOptions (not exported)
type _MockRunOptionsRecorder struct {
	mock *MockRunOptions
}

func NewMockRunOptions(ctrl *gomock.Controller) *MockRunOptions {
	mock := &MockRunOptions{ctrl: ctrl}
	mock.recorder = &_MockRunOptionsRecorder{mock}
	return mock
}

func (_m *MockRunOptions) EXPECT() *_MockRunOptionsRecorder {
	return _m.recorder
}

func (_m *MockRunOptions) SetIncremental(value bool) RunOptions {
	ret := _m.ctrl.Call(_m, "SetIncremental", value)
	ret0, _ := ret[0].(RunOptions)
	return ret0
}

func (_mr *_MockRunOptionsRecorder) SetIncremental(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIncremental", arg0)
}

func (_m *MockRunOptions) Incremental() bool {
	ret := _m.ctrl.Call(_m, "Incremental")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockRunOptionsRecorder) Incremental() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Incremental")
}

// Mock of Bootstrapper interface
type MockBootstrapper struct {
	ctrl     *gomock.Controller
	recorder *_MockBootstrapperRecorder
}

// Recorder for MockBootstrapper (not exported)
type _MockBootstrapperRecorder struct {
	mock *MockBootstrapper
}

func NewMockBootstrapper(ctrl *gomock.Controller) *MockBootstrapper {
	mock := &MockBootstrapper{ctrl: ctrl}
	mock.recorder = &_MockBootstrapperRecorder{mock}
	return mock
}

func (_m *MockBootstrapper) EXPECT() *_MockBootstrapperRecorder {
	return _m.recorder
}

func (_m *MockBootstrapper) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockBootstrapperRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockBootstrapper) Can(strategy Strategy) bool {
	ret := _m.ctrl.Call(_m, "Can", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBootstrapperRecorder) Can(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Can", arg0)
}

func (_m *MockBootstrapper) Bootstrap(namespace ts.ID, shardsTimeRanges result.ShardTimeRanges, opts RunOptions) (result.BootstrapResult, error) {
	ret := _m.ctrl.Call(_m, "Bootstrap", namespace, shardsTimeRanges, opts)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBootstrapperRecorder) Bootstrap(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bootstrap", arg0, arg1, arg2)
}

// Mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *_MockSourceRecorder
}

// Recorder for MockSource (not exported)
type _MockSourceRecorder struct {
	mock *MockSource
}

func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &_MockSourceRecorder{mock}
	return mock
}

func (_m *MockSource) EXPECT() *_MockSourceRecorder {
	return _m.recorder
}

func (_m *MockSource) Can(strategy Strategy) bool {
	ret := _m.ctrl.Call(_m, "Can", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSourceRecorder) Can(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Can", arg0)
}

func (_m *MockSource) Available(namespace ts.ID, shardsTimeRanges result.ShardTimeRanges) result.ShardTimeRanges {
	ret := _m.ctrl.Call(_m, "Available", namespace, shardsTimeRanges)
	ret0, _ := ret[0].(result.ShardTimeRanges)
	return ret0
}

func (_mr *_MockSourceRecorder) Available(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Available", arg0, arg1)
}

func (_m *MockSource) Read(namespace ts.ID, shardsTimeRanges result.ShardTimeRanges, opts RunOptions) (result.BootstrapResult, error) {
	ret := _m.ctrl.Call(_m, "Read", namespace, shardsTimeRanges, opts)
	ret0, _ := ret[0].(result.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0, arg1, arg2)
}
