// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/retention/types.go

package retention

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockOptions) Equal(value Options) bool {
	ret := _m.ctrl.Call(_m, "Equal", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) Equal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Equal", arg0)
}

func (_m *MockOptions) SetRetentionPeriod(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetRetentionPeriod", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetRetentionPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRetentionPeriod", arg0)
}

func (_m *MockOptions) RetentionPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "RetentionPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) RetentionPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetentionPeriod")
}

func (_m *MockOptions) SetBlockSize(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBlockSize", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBlockSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockSize", arg0)
}

func (_m *MockOptions) BlockSize() time.Duration {
	ret := _m.ctrl.Call(_m, "BlockSize")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BlockSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSize")
}

func (_m *MockOptions) SetBufferFuture(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBufferFuture", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBufferFuture(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBufferFuture", arg0)
}

func (_m *MockOptions) BufferFuture() time.Duration {
	ret := _m.ctrl.Call(_m, "BufferFuture")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BufferFuture() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferFuture")
}

func (_m *MockOptions) SetBufferPast(value time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBufferPast", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBufferPast(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBufferPast", arg0)
}

func (_m *MockOptions) BufferPast() time.Duration {
	ret := _m.ctrl.Call(_m, "BufferPast")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BufferPast() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BufferPast")
}

func (_m *MockOptions) SetBlockDataExpiry(on bool) Options {
	ret := _m.ctrl.Call(_m, "SetBlockDataExpiry", on)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBlockDataExpiry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockDataExpiry", arg0)
}

func (_m *MockOptions) BlockDataExpiry() bool {
	ret := _m.ctrl.Call(_m, "BlockDataExpiry")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) BlockDataExpiry() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockDataExpiry")
}

func (_m *MockOptions) SetBlockDataExpiryAfterNotAccessedPeriod(period time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetBlockDataExpiryAfterNotAccessedPeriod", period)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetBlockDataExpiryAfterNotAccessedPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockDataExpiryAfterNotAccessedPeriod", arg0)
}

func (_m *MockOptions) BlockDataExpiryAfterNotAccessedPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "BlockDataExpiryAfterNotAccessedPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) BlockDataExpiryAfterNotAccessedPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockDataExpiryAfterNotAccessedPeriod")
}
