// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"rpc"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  QueryResult query(QueryRequest req)")
	fmt.Fprintln(os.Stderr, "  AggregateQueryResult aggregate(AggregateQueryRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchResult fetch(FetchRequest req)")
	fmt.Fprintln(os.Stderr, "  void write(WriteRequest req)")
	fmt.Fprintln(os.Stderr, "  void writeTagged(WriteTaggedRequest req)")
	fmt.Fprintln(os.Stderr, "  AggregateQueryRawResult aggregateRaw(AggregateQueryRawRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchBatchRawResult fetchBatchRaw(FetchBatchRawRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchBatchRawResult fetchBatchRawV2(FetchBatchRawV2Request req)")
	fmt.Fprintln(os.Stderr, "  FetchBlocksRawResult fetchBlocksRaw(FetchBlocksRawRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchTaggedResult fetchTagged(FetchTaggedRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchBlocksMetadataRawV2Result fetchBlocksMetadataRawV2(FetchBlocksMetadataRawV2Request req)")
	fmt.Fprintln(os.Stderr, "  void writeBatchRaw(WriteBatchRawRequest req)")
	fmt.Fprintln(os.Stderr, "  void writeBatchRawV2(WriteBatchRawV2Request req)")
	fmt.Fprintln(os.Stderr, "  void writeTaggedBatchRaw(WriteTaggedBatchRawRequest req)")
	fmt.Fprintln(os.Stderr, "  void writeTaggedBatchRawV2(WriteTaggedBatchRawV2Request req)")
	fmt.Fprintln(os.Stderr, "  void repair()")
	fmt.Fprintln(os.Stderr, "  TruncateResult truncate(TruncateRequest req)")
	fmt.Fprintln(os.Stderr, "  AggregateTilesResult aggregateTiles(AggregateTilesRequest req)")
	fmt.Fprintln(os.Stderr, "  NodeHealthResult health()")
	fmt.Fprintln(os.Stderr, "  NodeBootstrappedResult bootstrapped()")
	fmt.Fprintln(os.Stderr, "  NodeBootstrappedInPlacementOrNoPlacementResult bootstrappedInPlacementOrNoPlacement()")
	fmt.Fprintln(os.Stderr, "  NodePersistRateLimitResult getPersistRateLimit()")
	fmt.Fprintln(os.Stderr, "  NodePersistRateLimitResult setPersistRateLimit(NodeSetPersistRateLimitRequest req)")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesAsyncResult getWriteNewSeriesAsync()")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesAsyncResult setWriteNewSeriesAsync(NodeSetWriteNewSeriesAsyncRequest req)")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesBackoffDurationResult getWriteNewSeriesBackoffDuration()")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesBackoffDurationResult setWriteNewSeriesBackoffDuration(NodeSetWriteNewSeriesBackoffDurationRequest req)")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesLimitPerShardPerSecondResult getWriteNewSeriesLimitPerShardPerSecond()")
	fmt.Fprintln(os.Stderr, "  NodeWriteNewSeriesLimitPerShardPerSecondResult setWriteNewSeriesLimitPerShardPerSecond(NodeSetWriteNewSeriesLimitPerShardPerSecondRequest req)")
	fmt.Fprintln(os.Stderr, "  DebugProfileStartResult debugProfileStart(DebugProfileStartRequest req)")
	fmt.Fprintln(os.Stderr, "  DebugProfileStopResult debugProfileStop(DebugProfileStopRequest req)")
	fmt.Fprintln(os.Stderr, "  DebugIndexMemorySegmentsResult debugIndexMemorySegments(DebugIndexMemorySegmentsRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()
	
	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}
	
	cmd := flag.Arg(0)
	var err error
	var cfg *thrift.TConfiguration = nil
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransportConf(trans, cfg)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := rpc.NewNodeClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}
	
	switch cmd {
	case "query":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Query requires 1 args")
			flag.Usage()
		}
		arg231 := flag.Arg(1)
		mbTrans232 := thrift.NewTMemoryBufferLen(len(arg231))
		defer mbTrans232.Close()
		_, err233 := mbTrans232.WriteString(arg231)
		if err233 != nil {
			Usage()
			return
		}
		factory234 := thrift.NewTJSONProtocolFactory()
		jsProt235 := factory234.GetProtocol(mbTrans232)
		argvalue0 := rpc.NewQueryRequest()
		err236 := argvalue0.Read(context.Background(), jsProt235)
		if err236 != nil {
			Usage()
			return
		}
		value0 := rpc.QueryRequest(argvalue0)
		fmt.Print(client.Query(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aggregate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Aggregate requires 1 args")
			flag.Usage()
		}
		arg237 := flag.Arg(1)
		mbTrans238 := thrift.NewTMemoryBufferLen(len(arg237))
		defer mbTrans238.Close()
		_, err239 := mbTrans238.WriteString(arg237)
		if err239 != nil {
			Usage()
			return
		}
		factory240 := thrift.NewTJSONProtocolFactory()
		jsProt241 := factory240.GetProtocol(mbTrans238)
		argvalue0 := rpc.NewAggregateQueryRequest()
		err242 := argvalue0.Read(context.Background(), jsProt241)
		if err242 != nil {
			Usage()
			return
		}
		value0 := rpc.AggregateQueryRequest(argvalue0)
		fmt.Print(client.Aggregate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetch":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Fetch requires 1 args")
			flag.Usage()
		}
		arg243 := flag.Arg(1)
		mbTrans244 := thrift.NewTMemoryBufferLen(len(arg243))
		defer mbTrans244.Close()
		_, err245 := mbTrans244.WriteString(arg243)
		if err245 != nil {
			Usage()
			return
		}
		factory246 := thrift.NewTJSONProtocolFactory()
		jsProt247 := factory246.GetProtocol(mbTrans244)
		argvalue0 := rpc.NewFetchRequest()
		err248 := argvalue0.Read(context.Background(), jsProt247)
		if err248 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchRequest(argvalue0)
		fmt.Print(client.Fetch(context.Background(), value0))
		fmt.Print("\n")
		break
	case "write":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Write requires 1 args")
			flag.Usage()
		}
		arg249 := flag.Arg(1)
		mbTrans250 := thrift.NewTMemoryBufferLen(len(arg249))
		defer mbTrans250.Close()
		_, err251 := mbTrans250.WriteString(arg249)
		if err251 != nil {
			Usage()
			return
		}
		factory252 := thrift.NewTJSONProtocolFactory()
		jsProt253 := factory252.GetProtocol(mbTrans250)
		argvalue0 := rpc.NewWriteRequest()
		err254 := argvalue0.Read(context.Background(), jsProt253)
		if err254 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteRequest(argvalue0)
		fmt.Print(client.Write(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeTagged":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteTagged requires 1 args")
			flag.Usage()
		}
		arg255 := flag.Arg(1)
		mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
		defer mbTrans256.Close()
		_, err257 := mbTrans256.WriteString(arg255)
		if err257 != nil {
			Usage()
			return
		}
		factory258 := thrift.NewTJSONProtocolFactory()
		jsProt259 := factory258.GetProtocol(mbTrans256)
		argvalue0 := rpc.NewWriteTaggedRequest()
		err260 := argvalue0.Read(context.Background(), jsProt259)
		if err260 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteTaggedRequest(argvalue0)
		fmt.Print(client.WriteTagged(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aggregateRaw":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "AggregateRaw requires 1 args")
			flag.Usage()
		}
		arg261 := flag.Arg(1)
		mbTrans262 := thrift.NewTMemoryBufferLen(len(arg261))
		defer mbTrans262.Close()
		_, err263 := mbTrans262.WriteString(arg261)
		if err263 != nil {
			Usage()
			return
		}
		factory264 := thrift.NewTJSONProtocolFactory()
		jsProt265 := factory264.GetProtocol(mbTrans262)
		argvalue0 := rpc.NewAggregateQueryRawRequest()
		err266 := argvalue0.Read(context.Background(), jsProt265)
		if err266 != nil {
			Usage()
			return
		}
		value0 := rpc.AggregateQueryRawRequest(argvalue0)
		fmt.Print(client.AggregateRaw(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchBatchRaw":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchBatchRaw requires 1 args")
			flag.Usage()
		}
		arg267 := flag.Arg(1)
		mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
		defer mbTrans268.Close()
		_, err269 := mbTrans268.WriteString(arg267)
		if err269 != nil {
			Usage()
			return
		}
		factory270 := thrift.NewTJSONProtocolFactory()
		jsProt271 := factory270.GetProtocol(mbTrans268)
		argvalue0 := rpc.NewFetchBatchRawRequest()
		err272 := argvalue0.Read(context.Background(), jsProt271)
		if err272 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchBatchRawRequest(argvalue0)
		fmt.Print(client.FetchBatchRaw(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchBatchRawV2":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchBatchRawV2 requires 1 args")
			flag.Usage()
		}
		arg273 := flag.Arg(1)
		mbTrans274 := thrift.NewTMemoryBufferLen(len(arg273))
		defer mbTrans274.Close()
		_, err275 := mbTrans274.WriteString(arg273)
		if err275 != nil {
			Usage()
			return
		}
		factory276 := thrift.NewTJSONProtocolFactory()
		jsProt277 := factory276.GetProtocol(mbTrans274)
		argvalue0 := rpc.NewFetchBatchRawV2Request()
		err278 := argvalue0.Read(context.Background(), jsProt277)
		if err278 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchBatchRawV2Request(argvalue0)
		fmt.Print(client.FetchBatchRawV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchBlocksRaw":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchBlocksRaw requires 1 args")
			flag.Usage()
		}
		arg279 := flag.Arg(1)
		mbTrans280 := thrift.NewTMemoryBufferLen(len(arg279))
		defer mbTrans280.Close()
		_, err281 := mbTrans280.WriteString(arg279)
		if err281 != nil {
			Usage()
			return
		}
		factory282 := thrift.NewTJSONProtocolFactory()
		jsProt283 := factory282.GetProtocol(mbTrans280)
		argvalue0 := rpc.NewFetchBlocksRawRequest()
		err284 := argvalue0.Read(context.Background(), jsProt283)
		if err284 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchBlocksRawRequest(argvalue0)
		fmt.Print(client.FetchBlocksRaw(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchTagged":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchTagged requires 1 args")
			flag.Usage()
		}
		arg285 := flag.Arg(1)
		mbTrans286 := thrift.NewTMemoryBufferLen(len(arg285))
		defer mbTrans286.Close()
		_, err287 := mbTrans286.WriteString(arg285)
		if err287 != nil {
			Usage()
			return
		}
		factory288 := thrift.NewTJSONProtocolFactory()
		jsProt289 := factory288.GetProtocol(mbTrans286)
		argvalue0 := rpc.NewFetchTaggedRequest()
		err290 := argvalue0.Read(context.Background(), jsProt289)
		if err290 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchTaggedRequest(argvalue0)
		fmt.Print(client.FetchTagged(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchBlocksMetadataRawV2":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchBlocksMetadataRawV2 requires 1 args")
			flag.Usage()
		}
		arg291 := flag.Arg(1)
		mbTrans292 := thrift.NewTMemoryBufferLen(len(arg291))
		defer mbTrans292.Close()
		_, err293 := mbTrans292.WriteString(arg291)
		if err293 != nil {
			Usage()
			return
		}
		factory294 := thrift.NewTJSONProtocolFactory()
		jsProt295 := factory294.GetProtocol(mbTrans292)
		argvalue0 := rpc.NewFetchBlocksMetadataRawV2Request()
		err296 := argvalue0.Read(context.Background(), jsProt295)
		if err296 != nil {
			Usage()
			return
		}
		value0 := rpc.FetchBlocksMetadataRawV2Request(argvalue0)
		fmt.Print(client.FetchBlocksMetadataRawV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeBatchRaw":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteBatchRaw requires 1 args")
			flag.Usage()
		}
		arg297 := flag.Arg(1)
		mbTrans298 := thrift.NewTMemoryBufferLen(len(arg297))
		defer mbTrans298.Close()
		_, err299 := mbTrans298.WriteString(arg297)
		if err299 != nil {
			Usage()
			return
		}
		factory300 := thrift.NewTJSONProtocolFactory()
		jsProt301 := factory300.GetProtocol(mbTrans298)
		argvalue0 := rpc.NewWriteBatchRawRequest()
		err302 := argvalue0.Read(context.Background(), jsProt301)
		if err302 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteBatchRawRequest(argvalue0)
		fmt.Print(client.WriteBatchRaw(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeBatchRawV2":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteBatchRawV2 requires 1 args")
			flag.Usage()
		}
		arg303 := flag.Arg(1)
		mbTrans304 := thrift.NewTMemoryBufferLen(len(arg303))
		defer mbTrans304.Close()
		_, err305 := mbTrans304.WriteString(arg303)
		if err305 != nil {
			Usage()
			return
		}
		factory306 := thrift.NewTJSONProtocolFactory()
		jsProt307 := factory306.GetProtocol(mbTrans304)
		argvalue0 := rpc.NewWriteBatchRawV2Request()
		err308 := argvalue0.Read(context.Background(), jsProt307)
		if err308 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteBatchRawV2Request(argvalue0)
		fmt.Print(client.WriteBatchRawV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeTaggedBatchRaw":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteTaggedBatchRaw requires 1 args")
			flag.Usage()
		}
		arg309 := flag.Arg(1)
		mbTrans310 := thrift.NewTMemoryBufferLen(len(arg309))
		defer mbTrans310.Close()
		_, err311 := mbTrans310.WriteString(arg309)
		if err311 != nil {
			Usage()
			return
		}
		factory312 := thrift.NewTJSONProtocolFactory()
		jsProt313 := factory312.GetProtocol(mbTrans310)
		argvalue0 := rpc.NewWriteTaggedBatchRawRequest()
		err314 := argvalue0.Read(context.Background(), jsProt313)
		if err314 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteTaggedBatchRawRequest(argvalue0)
		fmt.Print(client.WriteTaggedBatchRaw(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeTaggedBatchRawV2":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteTaggedBatchRawV2 requires 1 args")
			flag.Usage()
		}
		arg315 := flag.Arg(1)
		mbTrans316 := thrift.NewTMemoryBufferLen(len(arg315))
		defer mbTrans316.Close()
		_, err317 := mbTrans316.WriteString(arg315)
		if err317 != nil {
			Usage()
			return
		}
		factory318 := thrift.NewTJSONProtocolFactory()
		jsProt319 := factory318.GetProtocol(mbTrans316)
		argvalue0 := rpc.NewWriteTaggedBatchRawV2Request()
		err320 := argvalue0.Read(context.Background(), jsProt319)
		if err320 != nil {
			Usage()
			return
		}
		value0 := rpc.WriteTaggedBatchRawV2Request(argvalue0)
		fmt.Print(client.WriteTaggedBatchRawV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "repair":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "Repair requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Repair(context.Background()))
		fmt.Print("\n")
		break
	case "truncate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Truncate requires 1 args")
			flag.Usage()
		}
		arg321 := flag.Arg(1)
		mbTrans322 := thrift.NewTMemoryBufferLen(len(arg321))
		defer mbTrans322.Close()
		_, err323 := mbTrans322.WriteString(arg321)
		if err323 != nil {
			Usage()
			return
		}
		factory324 := thrift.NewTJSONProtocolFactory()
		jsProt325 := factory324.GetProtocol(mbTrans322)
		argvalue0 := rpc.NewTruncateRequest()
		err326 := argvalue0.Read(context.Background(), jsProt325)
		if err326 != nil {
			Usage()
			return
		}
		value0 := rpc.TruncateRequest(argvalue0)
		fmt.Print(client.Truncate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aggregateTiles":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "AggregateTiles requires 1 args")
			flag.Usage()
		}
		arg327 := flag.Arg(1)
		mbTrans328 := thrift.NewTMemoryBufferLen(len(arg327))
		defer mbTrans328.Close()
		_, err329 := mbTrans328.WriteString(arg327)
		if err329 != nil {
			Usage()
			return
		}
		factory330 := thrift.NewTJSONProtocolFactory()
		jsProt331 := factory330.GetProtocol(mbTrans328)
		argvalue0 := rpc.NewAggregateTilesRequest()
		err332 := argvalue0.Read(context.Background(), jsProt331)
		if err332 != nil {
			Usage()
			return
		}
		value0 := rpc.AggregateTilesRequest(argvalue0)
		fmt.Print(client.AggregateTiles(context.Background(), value0))
		fmt.Print("\n")
		break
	case "health":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "Health requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Health(context.Background()))
		fmt.Print("\n")
		break
	case "bootstrapped":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "Bootstrapped requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Bootstrapped(context.Background()))
		fmt.Print("\n")
		break
	case "bootstrappedInPlacementOrNoPlacement":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "BootstrappedInPlacementOrNoPlacement requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.BootstrappedInPlacementOrNoPlacement(context.Background()))
		fmt.Print("\n")
		break
	case "getPersistRateLimit":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetPersistRateLimit requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetPersistRateLimit(context.Background()))
		fmt.Print("\n")
		break
	case "setPersistRateLimit":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SetPersistRateLimit requires 1 args")
			flag.Usage()
		}
		arg333 := flag.Arg(1)
		mbTrans334 := thrift.NewTMemoryBufferLen(len(arg333))
		defer mbTrans334.Close()
		_, err335 := mbTrans334.WriteString(arg333)
		if err335 != nil {
			Usage()
			return
		}
		factory336 := thrift.NewTJSONProtocolFactory()
		jsProt337 := factory336.GetProtocol(mbTrans334)
		argvalue0 := rpc.NewNodeSetPersistRateLimitRequest()
		err338 := argvalue0.Read(context.Background(), jsProt337)
		if err338 != nil {
			Usage()
			return
		}
		value0 := rpc.NodeSetPersistRateLimitRequest(argvalue0)
		fmt.Print(client.SetPersistRateLimit(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getWriteNewSeriesAsync":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetWriteNewSeriesAsync requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetWriteNewSeriesAsync(context.Background()))
		fmt.Print("\n")
		break
	case "setWriteNewSeriesAsync":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SetWriteNewSeriesAsync requires 1 args")
			flag.Usage()
		}
		arg339 := flag.Arg(1)
		mbTrans340 := thrift.NewTMemoryBufferLen(len(arg339))
		defer mbTrans340.Close()
		_, err341 := mbTrans340.WriteString(arg339)
		if err341 != nil {
			Usage()
			return
		}
		factory342 := thrift.NewTJSONProtocolFactory()
		jsProt343 := factory342.GetProtocol(mbTrans340)
		argvalue0 := rpc.NewNodeSetWriteNewSeriesAsyncRequest()
		err344 := argvalue0.Read(context.Background(), jsProt343)
		if err344 != nil {
			Usage()
			return
		}
		value0 := rpc.NodeSetWriteNewSeriesAsyncRequest(argvalue0)
		fmt.Print(client.SetWriteNewSeriesAsync(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getWriteNewSeriesBackoffDuration":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetWriteNewSeriesBackoffDuration requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetWriteNewSeriesBackoffDuration(context.Background()))
		fmt.Print("\n")
		break
	case "setWriteNewSeriesBackoffDuration":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SetWriteNewSeriesBackoffDuration requires 1 args")
			flag.Usage()
		}
		arg345 := flag.Arg(1)
		mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
		defer mbTrans346.Close()
		_, err347 := mbTrans346.WriteString(arg345)
		if err347 != nil {
			Usage()
			return
		}
		factory348 := thrift.NewTJSONProtocolFactory()
		jsProt349 := factory348.GetProtocol(mbTrans346)
		argvalue0 := rpc.NewNodeSetWriteNewSeriesBackoffDurationRequest()
		err350 := argvalue0.Read(context.Background(), jsProt349)
		if err350 != nil {
			Usage()
			return
		}
		value0 := rpc.NodeSetWriteNewSeriesBackoffDurationRequest(argvalue0)
		fmt.Print(client.SetWriteNewSeriesBackoffDuration(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getWriteNewSeriesLimitPerShardPerSecond":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetWriteNewSeriesLimitPerShardPerSecond requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetWriteNewSeriesLimitPerShardPerSecond(context.Background()))
		fmt.Print("\n")
		break
	case "setWriteNewSeriesLimitPerShardPerSecond":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SetWriteNewSeriesLimitPerShardPerSecond requires 1 args")
			flag.Usage()
		}
		arg351 := flag.Arg(1)
		mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
		defer mbTrans352.Close()
		_, err353 := mbTrans352.WriteString(arg351)
		if err353 != nil {
			Usage()
			return
		}
		factory354 := thrift.NewTJSONProtocolFactory()
		jsProt355 := factory354.GetProtocol(mbTrans352)
		argvalue0 := rpc.NewNodeSetWriteNewSeriesLimitPerShardPerSecondRequest()
		err356 := argvalue0.Read(context.Background(), jsProt355)
		if err356 != nil {
			Usage()
			return
		}
		value0 := rpc.NodeSetWriteNewSeriesLimitPerShardPerSecondRequest(argvalue0)
		fmt.Print(client.SetWriteNewSeriesLimitPerShardPerSecond(context.Background(), value0))
		fmt.Print("\n")
		break
	case "debugProfileStart":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DebugProfileStart requires 1 args")
			flag.Usage()
		}
		arg357 := flag.Arg(1)
		mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
		defer mbTrans358.Close()
		_, err359 := mbTrans358.WriteString(arg357)
		if err359 != nil {
			Usage()
			return
		}
		factory360 := thrift.NewTJSONProtocolFactory()
		jsProt361 := factory360.GetProtocol(mbTrans358)
		argvalue0 := rpc.NewDebugProfileStartRequest()
		err362 := argvalue0.Read(context.Background(), jsProt361)
		if err362 != nil {
			Usage()
			return
		}
		value0 := rpc.DebugProfileStartRequest(argvalue0)
		fmt.Print(client.DebugProfileStart(context.Background(), value0))
		fmt.Print("\n")
		break
	case "debugProfileStop":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DebugProfileStop requires 1 args")
			flag.Usage()
		}
		arg363 := flag.Arg(1)
		mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
		defer mbTrans364.Close()
		_, err365 := mbTrans364.WriteString(arg363)
		if err365 != nil {
			Usage()
			return
		}
		factory366 := thrift.NewTJSONProtocolFactory()
		jsProt367 := factory366.GetProtocol(mbTrans364)
		argvalue0 := rpc.NewDebugProfileStopRequest()
		err368 := argvalue0.Read(context.Background(), jsProt367)
		if err368 != nil {
			Usage()
			return
		}
		value0 := rpc.DebugProfileStopRequest(argvalue0)
		fmt.Print(client.DebugProfileStop(context.Background(), value0))
		fmt.Print("\n")
		break
	case "debugIndexMemorySegments":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DebugIndexMemorySegments requires 1 args")
			flag.Usage()
		}
		arg369 := flag.Arg(1)
		mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
		defer mbTrans370.Close()
		_, err371 := mbTrans370.WriteString(arg369)
		if err371 != nil {
			Usage()
			return
		}
		factory372 := thrift.NewTJSONProtocolFactory()
		jsProt373 := factory372.GetProtocol(mbTrans370)
		argvalue0 := rpc.NewDebugIndexMemorySegmentsRequest()
		err374 := argvalue0.Read(context.Background(), jsProt373)
		if err374 != nil {
			Usage()
			return
		}
		value0 := rpc.DebugIndexMemorySegmentsRequest(argvalue0)
		fmt.Print(client.DebugIndexMemorySegments(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
