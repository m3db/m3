// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"rpc"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  HealthResult health()")
	fmt.Fprintln(os.Stderr, "  void write(WriteRequest req)")
	fmt.Fprintln(os.Stderr, "  void writeTagged(WriteTaggedRequest req)")
	fmt.Fprintln(os.Stderr, "  QueryResult query(QueryRequest req)")
	fmt.Fprintln(os.Stderr, "  AggregateQueryResult aggregate(AggregateQueryRequest req)")
	fmt.Fprintln(os.Stderr, "  FetchResult fetch(FetchRequest req)")
	fmt.Fprintln(os.Stderr, "  TruncateResult truncate(TruncateRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()
	
	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}
	
	cmd := flag.Arg(0)
	var err error
	var cfg *thrift.TConfiguration = nil
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransportConf(trans, cfg)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := rpc.NewClusterClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}
	
	switch cmd {
	case "health":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "Health requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Health(context.Background()))
		fmt.Print("\n")
		break
	case "write":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Write requires 1 args")
			flag.Usage()
		}
		arg414 := flag.Arg(1)
		mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
		defer mbTrans415.Close()
		_, err416 := mbTrans415.WriteString(arg414)
		if err416 != nil {
			Usage()
			return
		}
		factory417 := thrift.NewTJSONProtocolFactory()
		jsProt418 := factory417.GetProtocol(mbTrans415)
		argvalue0 := rpc.NewWriteRequest()
		err419 := argvalue0.Read(context.Background(), jsProt418)
		if err419 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Write(context.Background(), value0))
		fmt.Print("\n")
		break
	case "writeTagged":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "WriteTagged requires 1 args")
			flag.Usage()
		}
		arg420 := flag.Arg(1)
		mbTrans421 := thrift.NewTMemoryBufferLen(len(arg420))
		defer mbTrans421.Close()
		_, err422 := mbTrans421.WriteString(arg420)
		if err422 != nil {
			Usage()
			return
		}
		factory423 := thrift.NewTJSONProtocolFactory()
		jsProt424 := factory423.GetProtocol(mbTrans421)
		argvalue0 := rpc.NewWriteTaggedRequest()
		err425 := argvalue0.Read(context.Background(), jsProt424)
		if err425 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.WriteTagged(context.Background(), value0))
		fmt.Print("\n")
		break
	case "query":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Query requires 1 args")
			flag.Usage()
		}
		arg426 := flag.Arg(1)
		mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
		defer mbTrans427.Close()
		_, err428 := mbTrans427.WriteString(arg426)
		if err428 != nil {
			Usage()
			return
		}
		factory429 := thrift.NewTJSONProtocolFactory()
		jsProt430 := factory429.GetProtocol(mbTrans427)
		argvalue0 := rpc.NewQueryRequest()
		err431 := argvalue0.Read(context.Background(), jsProt430)
		if err431 != nil {
			Usage()
			return
		}
		value0 := rpc.QueryRequest(argvalue0)
		fmt.Print(client.Query(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aggregate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Aggregate requires 1 args")
			flag.Usage()
		}
		arg432 := flag.Arg(1)
		mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
		defer mbTrans433.Close()
		_, err434 := mbTrans433.WriteString(arg432)
		if err434 != nil {
			Usage()
			return
		}
		factory435 := thrift.NewTJSONProtocolFactory()
		jsProt436 := factory435.GetProtocol(mbTrans433)
		argvalue0 := rpc.NewAggregateQueryRequest()
		err437 := argvalue0.Read(context.Background(), jsProt436)
		if err437 != nil {
			Usage()
			return
		}
		value0 := rpc.AggregateQueryRequest(argvalue0)
		fmt.Print(client.Aggregate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetch":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Fetch requires 1 args")
			flag.Usage()
		}
		arg438 := flag.Arg(1)
		mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
		defer mbTrans439.Close()
		_, err440 := mbTrans439.WriteString(arg438)
		if err440 != nil {
			Usage()
			return
		}
		factory441 := thrift.NewTJSONProtocolFactory()
		jsProt442 := factory441.GetProtocol(mbTrans439)
		argvalue0 := rpc.NewFetchRequest()
		err443 := argvalue0.Read(context.Background(), jsProt442)
		if err443 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Fetch(context.Background(), value0))
		fmt.Print("\n")
		break
	case "truncate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Truncate requires 1 args")
			flag.Usage()
		}
		arg444 := flag.Arg(1)
		mbTrans445 := thrift.NewTMemoryBufferLen(len(arg444))
		defer mbTrans445.Close()
		_, err446 := mbTrans445.WriteString(arg444)
		if err446 != nil {
			Usage()
			return
		}
		factory447 := thrift.NewTJSONProtocolFactory()
		jsProt448 := factory447.GetProtocol(mbTrans445)
		argvalue0 := rpc.NewTruncateRequest()
		err449 := argvalue0.Read(context.Background(), jsProt448)
		if err449 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Truncate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
