// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/namespace/namespace.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package namespace

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StagingStatus represents the current status of the namespace.
type StagingStatus int32

const (
	// Namespace has an unknown staging status.
	StagingStatus_UNKNOWN StagingStatus = 0
	// Namespace is being initialized and is not ready to receive traffic.
	StagingStatus_INITIALIZING StagingStatus = 1
	// Namespace is ready to receive traffic.
	StagingStatus_READY StagingStatus = 2
)

var StagingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "INITIALIZING",
	2: "READY",
}

var StagingStatus_value = map[string]int32{
	"UNKNOWN":      0,
	"INITIALIZING": 1,
	"READY":        2,
}

func (x StagingStatus) String() string {
	return proto.EnumName(StagingStatus_name, int32(x))
}

func (StagingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{0}
}

type RetentionOptions struct {
	RetentionPeriodNanos                     int64 `protobuf:"varint,1,opt,name=retentionPeriodNanos,proto3" json:"retentionPeriodNanos,omitempty"`
	BlockSizeNanos                           int64 `protobuf:"varint,2,opt,name=blockSizeNanos,proto3" json:"blockSizeNanos,omitempty"`
	BufferFutureNanos                        int64 `protobuf:"varint,3,opt,name=bufferFutureNanos,proto3" json:"bufferFutureNanos,omitempty"`
	BufferPastNanos                          int64 `protobuf:"varint,4,opt,name=bufferPastNanos,proto3" json:"bufferPastNanos,omitempty"`
	BlockDataExpiry                          bool  `protobuf:"varint,5,opt,name=blockDataExpiry,proto3" json:"blockDataExpiry,omitempty"`
	BlockDataExpiryAfterNotAccessPeriodNanos int64 `protobuf:"varint,6,opt,name=blockDataExpiryAfterNotAccessPeriodNanos,proto3" json:"blockDataExpiryAfterNotAccessPeriodNanos,omitempty"`
	FutureRetentionPeriodNanos               int64 `protobuf:"varint,7,opt,name=futureRetentionPeriodNanos,proto3" json:"futureRetentionPeriodNanos,omitempty"`
}

func (m *RetentionOptions) Reset()         { *m = RetentionOptions{} }
func (m *RetentionOptions) String() string { return proto.CompactTextString(m) }
func (*RetentionOptions) ProtoMessage()    {}
func (*RetentionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{0}
}
func (m *RetentionOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetentionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetentionOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetentionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetentionOptions.Merge(m, src)
}
func (m *RetentionOptions) XXX_Size() int {
	return m.Size()
}
func (m *RetentionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RetentionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RetentionOptions proto.InternalMessageInfo

func (m *RetentionOptions) GetRetentionPeriodNanos() int64 {
	if m != nil {
		return m.RetentionPeriodNanos
	}
	return 0
}

func (m *RetentionOptions) GetBlockSizeNanos() int64 {
	if m != nil {
		return m.BlockSizeNanos
	}
	return 0
}

func (m *RetentionOptions) GetBufferFutureNanos() int64 {
	if m != nil {
		return m.BufferFutureNanos
	}
	return 0
}

func (m *RetentionOptions) GetBufferPastNanos() int64 {
	if m != nil {
		return m.BufferPastNanos
	}
	return 0
}

func (m *RetentionOptions) GetBlockDataExpiry() bool {
	if m != nil {
		return m.BlockDataExpiry
	}
	return false
}

func (m *RetentionOptions) GetBlockDataExpiryAfterNotAccessPeriodNanos() int64 {
	if m != nil {
		return m.BlockDataExpiryAfterNotAccessPeriodNanos
	}
	return 0
}

func (m *RetentionOptions) GetFutureRetentionPeriodNanos() int64 {
	if m != nil {
		return m.FutureRetentionPeriodNanos
	}
	return 0
}

type IndexOptions struct {
	Enabled        bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BlockSizeNanos int64 `protobuf:"varint,2,opt,name=blockSizeNanos,proto3" json:"blockSizeNanos,omitempty"`
}

func (m *IndexOptions) Reset()         { *m = IndexOptions{} }
func (m *IndexOptions) String() string { return proto.CompactTextString(m) }
func (*IndexOptions) ProtoMessage()    {}
func (*IndexOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{1}
}
func (m *IndexOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexOptions.Merge(m, src)
}
func (m *IndexOptions) XXX_Size() int {
	return m.Size()
}
func (m *IndexOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexOptions.DiscardUnknown(m)
}

var xxx_messageInfo_IndexOptions proto.InternalMessageInfo

func (m *IndexOptions) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IndexOptions) GetBlockSizeNanos() int64 {
	if m != nil {
		return m.BlockSizeNanos
	}
	return 0
}

type NamespaceOptions struct {
	BootstrapEnabled      bool                     `protobuf:"varint,1,opt,name=bootstrapEnabled,proto3" json:"bootstrapEnabled,omitempty"`
	FlushEnabled          bool                     `protobuf:"varint,2,opt,name=flushEnabled,proto3" json:"flushEnabled,omitempty"`
	WritesToCommitLog     bool                     `protobuf:"varint,3,opt,name=writesToCommitLog,proto3" json:"writesToCommitLog,omitempty"`
	CleanupEnabled        bool                     `protobuf:"varint,4,opt,name=cleanupEnabled,proto3" json:"cleanupEnabled,omitempty"`
	RepairEnabled         bool                     `protobuf:"varint,5,opt,name=repairEnabled,proto3" json:"repairEnabled,omitempty"`
	RetentionOptions      *RetentionOptions        `protobuf:"bytes,6,opt,name=retentionOptions,proto3" json:"retentionOptions,omitempty"`
	SnapshotEnabled       bool                     `protobuf:"varint,7,opt,name=snapshotEnabled,proto3" json:"snapshotEnabled,omitempty"`
	IndexOptions          *IndexOptions            `protobuf:"bytes,8,opt,name=indexOptions,proto3" json:"indexOptions,omitempty"`
	SchemaOptions         *SchemaOptions           `protobuf:"bytes,9,opt,name=schemaOptions,proto3" json:"schemaOptions,omitempty"`
	ColdWritesEnabled     bool                     `protobuf:"varint,10,opt,name=coldWritesEnabled,proto3" json:"coldWritesEnabled,omitempty"`
	RuntimeOptions        *NamespaceRuntimeOptions `protobuf:"bytes,11,opt,name=runtimeOptions,proto3" json:"runtimeOptions,omitempty"`
	CacheBlocksOnRetrieve *types.BoolValue         `protobuf:"bytes,12,opt,name=cacheBlocksOnRetrieve,proto3" json:"cacheBlocksOnRetrieve,omitempty"`
	AggregationOptions    *AggregationOptions      `protobuf:"bytes,13,opt,name=aggregationOptions,proto3" json:"aggregationOptions,omitempty"`
	StagingState          *StagingState            `protobuf:"bytes,14,opt,name=stagingState,proto3" json:"stagingState,omitempty"`
	// Use larger field ID to ensure new fields are always added before extended options.
	ExtendedOptions *ExtendedOptions `protobuf:"bytes,1000,opt,name=extendedOptions,proto3" json:"extendedOptions,omitempty"`
}

func (m *NamespaceOptions) Reset()         { *m = NamespaceOptions{} }
func (m *NamespaceOptions) String() string { return proto.CompactTextString(m) }
func (*NamespaceOptions) ProtoMessage()    {}
func (*NamespaceOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{2}
}
func (m *NamespaceOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceOptions.Merge(m, src)
}
func (m *NamespaceOptions) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceOptions.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceOptions proto.InternalMessageInfo

func (m *NamespaceOptions) GetBootstrapEnabled() bool {
	if m != nil {
		return m.BootstrapEnabled
	}
	return false
}

func (m *NamespaceOptions) GetFlushEnabled() bool {
	if m != nil {
		return m.FlushEnabled
	}
	return false
}

func (m *NamespaceOptions) GetWritesToCommitLog() bool {
	if m != nil {
		return m.WritesToCommitLog
	}
	return false
}

func (m *NamespaceOptions) GetCleanupEnabled() bool {
	if m != nil {
		return m.CleanupEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRepairEnabled() bool {
	if m != nil {
		return m.RepairEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRetentionOptions() *RetentionOptions {
	if m != nil {
		return m.RetentionOptions
	}
	return nil
}

func (m *NamespaceOptions) GetSnapshotEnabled() bool {
	if m != nil {
		return m.SnapshotEnabled
	}
	return false
}

func (m *NamespaceOptions) GetIndexOptions() *IndexOptions {
	if m != nil {
		return m.IndexOptions
	}
	return nil
}

func (m *NamespaceOptions) GetSchemaOptions() *SchemaOptions {
	if m != nil {
		return m.SchemaOptions
	}
	return nil
}

func (m *NamespaceOptions) GetColdWritesEnabled() bool {
	if m != nil {
		return m.ColdWritesEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRuntimeOptions() *NamespaceRuntimeOptions {
	if m != nil {
		return m.RuntimeOptions
	}
	return nil
}

func (m *NamespaceOptions) GetCacheBlocksOnRetrieve() *types.BoolValue {
	if m != nil {
		return m.CacheBlocksOnRetrieve
	}
	return nil
}

func (m *NamespaceOptions) GetAggregationOptions() *AggregationOptions {
	if m != nil {
		return m.AggregationOptions
	}
	return nil
}

func (m *NamespaceOptions) GetStagingState() *StagingState {
	if m != nil {
		return m.StagingState
	}
	return nil
}

func (m *NamespaceOptions) GetExtendedOptions() *ExtendedOptions {
	if m != nil {
		return m.ExtendedOptions
	}
	return nil
}

// AggregationOptions is a set of options for aggregating data
// within the namespace.
type AggregationOptions struct {
	// aggregations is a repeated field to support the ability to send aggregated data
	// to a namespace also receiving unaggregated data. In this case, the namespace will
	// have one Aggregation with aggregated set to false and another with aggregated set to true.
	Aggregations []*Aggregation `protobuf:"bytes,1,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (m *AggregationOptions) Reset()         { *m = AggregationOptions{} }
func (m *AggregationOptions) String() string { return proto.CompactTextString(m) }
func (*AggregationOptions) ProtoMessage()    {}
func (*AggregationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{3}
}
func (m *AggregationOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregationOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationOptions.Merge(m, src)
}
func (m *AggregationOptions) XXX_Size() int {
	return m.Size()
}
func (m *AggregationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationOptions proto.InternalMessageInfo

func (m *AggregationOptions) GetAggregations() []*Aggregation {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

// Aggregation describes data points within the namespace.
type Aggregation struct {
	// aggregated is true if data points are aggregated, false otherwise.
	Aggregated bool `protobuf:"varint,1,opt,name=aggregated,proto3" json:"aggregated,omitempty"`
	// attributes specifies how to aggregate data when aggregated is set to true.
	// This field is ignored when aggregated is false and required when aggregated
	// is true.
	Attributes *AggregatedAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *Aggregation) Reset()         { *m = Aggregation{} }
func (m *Aggregation) String() string { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()    {}
func (*Aggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{4}
}
func (m *Aggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Aggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Aggregation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Aggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregation.Merge(m, src)
}
func (m *Aggregation) XXX_Size() int {
	return m.Size()
}
func (m *Aggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregation.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregation proto.InternalMessageInfo

func (m *Aggregation) GetAggregated() bool {
	if m != nil {
		return m.Aggregated
	}
	return false
}

func (m *Aggregation) GetAttributes() *AggregatedAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AggregatedAttributes describe how to aggregate data.
type AggregatedAttributes struct {
	// resolutionNanos is the time range to aggregate data across.
	ResolutionNanos   int64              `protobuf:"varint,1,opt,name=resolutionNanos,proto3" json:"resolutionNanos,omitempty"`
	DownsampleOptions *DownsampleOptions `protobuf:"bytes,2,opt,name=downsampleOptions,proto3" json:"downsampleOptions,omitempty"`
}

func (m *AggregatedAttributes) Reset()         { *m = AggregatedAttributes{} }
func (m *AggregatedAttributes) String() string { return proto.CompactTextString(m) }
func (*AggregatedAttributes) ProtoMessage()    {}
func (*AggregatedAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{5}
}
func (m *AggregatedAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedAttributes.Merge(m, src)
}
func (m *AggregatedAttributes) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedAttributes proto.InternalMessageInfo

func (m *AggregatedAttributes) GetResolutionNanos() int64 {
	if m != nil {
		return m.ResolutionNanos
	}
	return 0
}

func (m *AggregatedAttributes) GetDownsampleOptions() *DownsampleOptions {
	if m != nil {
		return m.DownsampleOptions
	}
	return nil
}

// DownsampleOptions is a set of options related to downsampling data.
type DownsampleOptions struct {
	// all indicates whether to send data points to this namespace. If false,
	// data points must be sent via rollup/recording rules. Defaults to true.
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *DownsampleOptions) Reset()         { *m = DownsampleOptions{} }
func (m *DownsampleOptions) String() string { return proto.CompactTextString(m) }
func (*DownsampleOptions) ProtoMessage()    {}
func (*DownsampleOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{6}
}
func (m *DownsampleOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownsampleOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownsampleOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownsampleOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownsampleOptions.Merge(m, src)
}
func (m *DownsampleOptions) XXX_Size() int {
	return m.Size()
}
func (m *DownsampleOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DownsampleOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DownsampleOptions proto.InternalMessageInfo

func (m *DownsampleOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

// StagingState is state related to the namespace's availability for
// reads and writes.
type StagingState struct {
	Status StagingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=namespace.StagingStatus" json:"status,omitempty"`
}

func (m *StagingState) Reset()         { *m = StagingState{} }
func (m *StagingState) String() string { return proto.CompactTextString(m) }
func (*StagingState) ProtoMessage()    {}
func (*StagingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{7}
}
func (m *StagingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StagingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StagingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StagingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StagingState.Merge(m, src)
}
func (m *StagingState) XXX_Size() int {
	return m.Size()
}
func (m *StagingState) XXX_DiscardUnknown() {
	xxx_messageInfo_StagingState.DiscardUnknown(m)
}

var xxx_messageInfo_StagingState proto.InternalMessageInfo

func (m *StagingState) GetStatus() StagingStatus {
	if m != nil {
		return m.Status
	}
	return StagingStatus_UNKNOWN
}

type Registry struct {
	Namespaces map[string]*NamespaceOptions `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Registry) Reset()         { *m = Registry{} }
func (m *Registry) String() string { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()    {}
func (*Registry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{8}
}
func (m *Registry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Registry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Registry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Registry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registry.Merge(m, src)
}
func (m *Registry) XXX_Size() int {
	return m.Size()
}
func (m *Registry) XXX_DiscardUnknown() {
	xxx_messageInfo_Registry.DiscardUnknown(m)
}

var xxx_messageInfo_Registry proto.InternalMessageInfo

func (m *Registry) GetNamespaces() map[string]*NamespaceOptions {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type NamespaceRuntimeOptions struct {
	WriteIndexingPerCPUConcurrency *types.DoubleValue `protobuf:"bytes,1,opt,name=writeIndexingPerCPUConcurrency,proto3" json:"writeIndexingPerCPUConcurrency,omitempty"`
	FlushIndexingPerCPUConcurrency *types.DoubleValue `protobuf:"bytes,2,opt,name=flushIndexingPerCPUConcurrency,proto3" json:"flushIndexingPerCPUConcurrency,omitempty"`
}

func (m *NamespaceRuntimeOptions) Reset()         { *m = NamespaceRuntimeOptions{} }
func (m *NamespaceRuntimeOptions) String() string { return proto.CompactTextString(m) }
func (*NamespaceRuntimeOptions) ProtoMessage()    {}
func (*NamespaceRuntimeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{9}
}
func (m *NamespaceRuntimeOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceRuntimeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceRuntimeOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceRuntimeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceRuntimeOptions.Merge(m, src)
}
func (m *NamespaceRuntimeOptions) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceRuntimeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceRuntimeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceRuntimeOptions proto.InternalMessageInfo

func (m *NamespaceRuntimeOptions) GetWriteIndexingPerCPUConcurrency() *types.DoubleValue {
	if m != nil {
		return m.WriteIndexingPerCPUConcurrency
	}
	return nil
}

func (m *NamespaceRuntimeOptions) GetFlushIndexingPerCPUConcurrency() *types.DoubleValue {
	if m != nil {
		return m.FlushIndexingPerCPUConcurrency
	}
	return nil
}

type ExtendedOptions struct {
	Type    string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Options *types.Struct `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *ExtendedOptions) Reset()         { *m = ExtendedOptions{} }
func (m *ExtendedOptions) String() string { return proto.CompactTextString(m) }
func (*ExtendedOptions) ProtoMessage()    {}
func (*ExtendedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7614f6b10dee3d7, []int{10}
}
func (m *ExtendedOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedOptions.Merge(m, src)
}
func (m *ExtendedOptions) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedOptions proto.InternalMessageInfo

func (m *ExtendedOptions) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExtendedOptions) GetOptions() *types.Struct {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterEnum("namespace.StagingStatus", StagingStatus_name, StagingStatus_value)
	proto.RegisterType((*RetentionOptions)(nil), "namespace.RetentionOptions")
	proto.RegisterType((*IndexOptions)(nil), "namespace.IndexOptions")
	proto.RegisterType((*NamespaceOptions)(nil), "namespace.NamespaceOptions")
	proto.RegisterType((*AggregationOptions)(nil), "namespace.AggregationOptions")
	proto.RegisterType((*Aggregation)(nil), "namespace.Aggregation")
	proto.RegisterType((*AggregatedAttributes)(nil), "namespace.AggregatedAttributes")
	proto.RegisterType((*DownsampleOptions)(nil), "namespace.DownsampleOptions")
	proto.RegisterType((*StagingState)(nil), "namespace.StagingState")
	proto.RegisterType((*Registry)(nil), "namespace.Registry")
	proto.RegisterMapType((map[string]*NamespaceOptions)(nil), "namespace.Registry.NamespacesEntry")
	proto.RegisterType((*NamespaceRuntimeOptions)(nil), "namespace.NamespaceRuntimeOptions")
	proto.RegisterType((*ExtendedOptions)(nil), "namespace.ExtendedOptions")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/namespace/namespace.proto", fileDescriptor_f7614f6b10dee3d7)
}

var fileDescriptor_f7614f6b10dee3d7 = []byte{
	// 1010 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x80, 0x4d, 0xbf, 0x64, 0x8f, 0x64, 0x5b, 0x5e, 0xa4, 0xb5, 0xe0, 0xa4, 0x6a, 0xc0, 0x3e,
	0x60, 0x04, 0x85, 0xd4, 0xd8, 0x97, 0x36, 0x05, 0xd2, 0xca, 0xb6, 0x6a, 0x28, 0x4d, 0x65, 0x61,
	0x9d, 0x34, 0xad, 0x6f, 0x4b, 0x72, 0x44, 0x13, 0xa1, 0xb8, 0xc4, 0xee, 0x32, 0xb6, 0xfa, 0x1b,
	0x72, 0xe8, 0xff, 0xe8, 0x1f, 0xe9, 0x31, 0xc7, 0x1e, 0x0b, 0x1b, 0x05, 0x7a, 0xe9, 0x7f, 0x28,
	0xb8, 0x14, 0x25, 0x3e, 0x94, 0xd4, 0xc8, 0xc5, 0x58, 0xcf, 0x7c, 0xf3, 0xd8, 0x79, 0x2c, 0x05,
	0x27, 0xae, 0xa7, 0x2e, 0x22, 0xab, 0x65, 0xf3, 0x51, 0x7b, 0x74, 0xe0, 0x58, 0xed, 0xd1, 0x41,
	0x5b, 0x0a, 0xbb, 0xed, 0x58, 0x01, 0x77, 0xb0, 0xed, 0x62, 0x80, 0x82, 0x29, 0x74, 0xda, 0xa1,
	0xe0, 0x8a, 0xb7, 0x03, 0x36, 0x42, 0x19, 0x32, 0x1b, 0x67, 0xa7, 0x96, 0xd6, 0x90, 0xf5, 0xa9,
	0x60, 0xf7, 0x9e, 0xcb, 0xb9, 0xeb, 0x63, 0x62, 0x62, 0x45, 0xc3, 0xb6, 0x54, 0x22, 0xb2, 0x55,
	0x02, 0xee, 0x36, 0x8b, 0xda, 0x4b, 0xc1, 0xc2, 0x10, 0x85, 0x9c, 0xe8, 0x8f, 0xdf, 0x37, 0x23,
	0x69, 0x5f, 0xe0, 0x88, 0x25, 0x5e, 0xcc, 0xd7, 0x4b, 0x50, 0xa7, 0xa8, 0x30, 0x50, 0x1e, 0x0f,
	0x4e, 0xc3, 0xf8, 0xaf, 0x24, 0xfb, 0x70, 0x47, 0xa4, 0xb2, 0x01, 0x0a, 0x8f, 0x3b, 0x7d, 0x16,
	0x70, 0xd9, 0x30, 0xee, 0x1b, 0x7b, 0x4b, 0x74, 0xae, 0x8e, 0x7c, 0x0e, 0x9b, 0x96, 0xcf, 0xed,
	0x97, 0x67, 0xde, 0xaf, 0x98, 0xd0, 0x8b, 0x9a, 0x2e, 0x48, 0xc9, 0x17, 0xb0, 0x6d, 0x45, 0xc3,
	0x21, 0x8a, 0xef, 0x23, 0x15, 0x89, 0x09, 0xba, 0xa4, 0xd1, 0xb2, 0x82, 0xec, 0xc1, 0x56, 0x22,
	0x1c, 0x30, 0xa9, 0x12, 0x76, 0x59, 0xb3, 0x45, 0xb1, 0x26, 0xe3, 0x48, 0xc7, 0x4c, 0xb1, 0xee,
	0x55, 0xe8, 0x89, 0x71, 0x63, 0xe5, 0xbe, 0xb1, 0xb7, 0x46, 0x8b, 0x62, 0x72, 0x0e, 0x7b, 0x05,
	0x51, 0x67, 0xa8, 0x50, 0xf4, 0xb9, 0xea, 0xd8, 0x36, 0x4a, 0x99, 0xbd, 0xf1, 0xaa, 0x0e, 0x76,
	0x6b, 0x9e, 0x3c, 0x86, 0xdd, 0xa1, 0x4e, 0x9f, 0xce, 0xab, 0x5f, 0x45, 0x7b, 0x7b, 0x07, 0x61,
	0x0e, 0xa0, 0xd6, 0x0b, 0x1c, 0xbc, 0x4a, 0x3b, 0xd1, 0x80, 0x0a, 0x06, 0xcc, 0xf2, 0xd1, 0xd1,
	0xc5, 0x5f, 0xa3, 0xe9, 0xbf, 0xb7, 0xad, 0xb7, 0xf9, 0xef, 0x2a, 0xd4, 0xfb, 0x69, 0xef, 0x53,
	0xb7, 0x0f, 0xa0, 0x6e, 0x71, 0xae, 0xa4, 0x12, 0x2c, 0xec, 0xe6, 0xfc, 0x97, 0xe4, 0xc4, 0x84,
	0xda, 0xd0, 0x8f, 0xe4, 0x45, 0xca, 0x2d, 0x6a, 0x2e, 0x27, 0x8b, 0x9b, 0x7a, 0x29, 0x3c, 0x85,
	0xf2, 0x19, 0x3f, 0xe2, 0xa3, 0x91, 0xa7, 0x9e, 0x72, 0x57, 0x37, 0x75, 0x8d, 0x96, 0x15, 0x71,
	0xea, 0xb6, 0x8f, 0x2c, 0x88, 0xa6, 0xb1, 0x97, 0x35, 0x5a, 0x90, 0x92, 0x4f, 0x61, 0x43, 0x60,
	0xc8, 0x3c, 0x91, 0x62, 0x49, 0x43, 0xf3, 0x42, 0x72, 0x02, 0x75, 0x51, 0x18, 0x60, 0xdd, 0xb6,
	0xea, 0xfe, 0xdd, 0xd6, 0x6c, 0xf9, 0x8a, 0x33, 0x4e, 0x4b, 0x46, 0xf1, 0x04, 0xc9, 0x80, 0x85,
	0xf2, 0x82, 0xab, 0x34, 0x60, 0x25, 0x99, 0xa0, 0x82, 0x98, 0x7c, 0x03, 0x35, 0x2f, 0xd3, 0xa5,
	0xc6, 0x9a, 0x0e, 0xb7, 0x93, 0x09, 0x97, 0x6d, 0x22, 0xcd, 0xc1, 0xe4, 0x31, 0x6c, 0x24, 0x1b,
	0x98, 0x5a, 0xaf, 0x6b, 0xeb, 0x46, 0xc6, 0xfa, 0x2c, 0xab, 0xa7, 0x79, 0x3c, 0xae, 0xb5, 0xcd,
	0x7d, 0xe7, 0x85, 0x2e, 0x6b, 0x9a, 0x28, 0x24, 0xb5, 0x2e, 0x29, 0xc8, 0x13, 0xd8, 0x14, 0x51,
	0xa0, 0xbc, 0x51, 0xda, 0xfb, 0x46, 0x55, 0x87, 0x33, 0x33, 0xe1, 0xa6, 0xe3, 0x41, 0x73, 0x24,
	0x2d, 0x58, 0x92, 0x01, 0x7c, 0x60, 0x33, 0xfb, 0x02, 0x0f, 0xe3, 0x09, 0x93, 0xa7, 0x01, 0x45,
	0x25, 0x3c, 0x7c, 0x85, 0x8d, 0x9a, 0x76, 0xb9, 0xdb, 0x4a, 0x5e, 0xac, 0x56, 0xfa, 0x62, 0xb5,
	0x0e, 0x39, 0xf7, 0x7f, 0x62, 0x7e, 0x84, 0x74, 0xbe, 0x21, 0xf9, 0x11, 0x08, 0x73, 0x5d, 0x81,
	0x2e, 0xcb, 0x76, 0x6f, 0x43, 0xbb, 0xfb, 0x28, 0x93, 0x61, 0xa7, 0x04, 0xd1, 0x39, 0x86, 0x71,
	0x5f, 0xa4, 0x62, 0xae, 0x17, 0xb8, 0x67, 0x8a, 0x29, 0x6c, 0x6c, 0x96, 0xfa, 0x72, 0x96, 0x51,
	0xd3, 0x1c, 0x4c, 0xba, 0xb0, 0x85, 0x57, 0x0a, 0x03, 0x07, 0x9d, 0x34, 0x91, 0x7f, 0x2a, 0x93,
	0x8b, 0xcd, 0x1c, 0x74, 0xf3, 0x08, 0x2d, 0xda, 0x98, 0x03, 0x20, 0xe5, 0x6c, 0xc9, 0x23, 0xa8,
	0x65, 0xf2, 0x8d, 0x5f, 0xd2, 0xa5, 0xbd, 0xea, 0xfe, 0x87, 0xf3, 0xaf, 0x48, 0x73, 0xac, 0x19,
	0x40, 0x35, 0xa3, 0x24, 0x4d, 0x80, 0x54, 0x3d, 0xdd, 0xda, 0x8c, 0x84, 0x7c, 0x0b, 0xc0, 0x94,
	0x12, 0x9e, 0x15, 0x29, 0x4c, 0x1e, 0x85, 0xea, 0xfe, 0xc7, 0x73, 0x02, 0xa1, 0xd3, 0x99, 0x62,
	0x34, 0x63, 0x62, 0xbe, 0x36, 0xe0, 0xce, 0x3c, 0x28, 0x5e, 0x10, 0x81, 0x92, 0xfb, 0x51, 0x9c,
	0x47, 0xf6, 0x8b, 0x50, 0x14, 0x93, 0x27, 0xb0, 0xed, 0xf0, 0xcb, 0x40, 0xb2, 0x51, 0xe8, 0x4f,
	0x07, 0x2f, 0x49, 0xe5, 0x5e, 0x26, 0x95, 0xe3, 0x22, 0x43, 0xcb, 0x66, 0xe6, 0x67, 0xb0, 0x5d,
	0xe2, 0x48, 0x1d, 0x96, 0x98, 0xef, 0x4f, 0x6e, 0x1f, 0x1f, 0xcd, 0xef, 0xa0, 0x96, 0x6d, 0x2e,
	0xf9, 0x12, 0x56, 0xa5, 0x62, 0x2a, 0x4a, 0x72, 0xdc, 0xcc, 0xef, 0xd7, 0x0c, 0x8c, 0x24, 0x9d,
	0x70, 0xe6, 0xef, 0x06, 0xac, 0x51, 0x74, 0x3d, 0xa9, 0xc4, 0x98, 0x1c, 0x01, 0x4c, 0xf9, 0xb4,
	0x5d, 0x9f, 0xe4, 0xde, 0x93, 0x04, 0x9c, 0x2d, 0x8f, 0xec, 0x06, 0x4a, 0x8c, 0x69, 0xc6, 0x6c,
	0xf7, 0x1c, 0xb6, 0x0a, 0xea, 0x38, 0xf1, 0x97, 0x38, 0xd6, 0x39, 0xad, 0xd3, 0xf8, 0x48, 0x1e,
	0xc2, 0xca, 0xab, 0x78, 0x47, 0x26, 0xf5, 0xb9, 0x3b, 0x6f, 0x31, 0xd3, 0xf2, 0x24, 0xe4, 0xa3,
	0xc5, 0xaf, 0x0c, 0xf3, 0x6f, 0x03, 0x76, 0xde, 0xb2, 0xb8, 0xc4, 0x81, 0xa6, 0x7e, 0x75, 0xf5,
	0x2b, 0xe4, 0x05, 0xee, 0x00, 0xc5, 0xd1, 0xe0, 0xf9, 0x11, 0x0f, 0xec, 0x48, 0x08, 0x0c, 0xec,
	0x24, 0x7e, 0xdc, 0x8b, 0xe2, 0xc6, 0x1e, 0xf3, 0xc8, 0xf2, 0x31, 0xd9, 0xd9, 0xff, 0xf1, 0x11,
	0x47, 0xd1, 0x1f, 0x81, 0xb7, 0x47, 0x59, 0xbc, 0x4d, 0x94, 0x77, 0xfb, 0x30, 0x7f, 0x86, 0xad,
	0xc2, 0xce, 0x11, 0x02, 0xcb, 0x6a, 0x1c, 0xe2, 0xa4, 0x88, 0xfa, 0x4c, 0x1e, 0x42, 0x85, 0xe7,
	0xe6, 0x6c, 0xa7, 0x14, 0xf5, 0x4c, 0xff, 0xba, 0xa2, 0x29, 0xf7, 0xe0, 0x6b, 0xd8, 0xc8, 0x0d,
	0x02, 0xa9, 0x42, 0xe5, 0x79, 0xff, 0x87, 0xfe, 0xe9, 0x8b, 0x7e, 0x7d, 0x81, 0xd4, 0xa1, 0xd6,
	0xeb, 0xf7, 0x9e, 0xf5, 0x3a, 0x4f, 0x7b, 0xe7, 0xbd, 0xfe, 0x49, 0xdd, 0x20, 0xeb, 0xb0, 0x42,
	0xbb, 0x9d, 0xe3, 0x5f, 0xea, 0x8b, 0x87, 0x8d, 0x3f, 0xae, 0x9b, 0xc6, 0x9b, 0xeb, 0xa6, 0xf1,
	0xd7, 0x75, 0xd3, 0xf8, 0xed, 0xa6, 0xb9, 0xf0, 0xe6, 0xa6, 0xb9, 0xf0, 0xe7, 0x4d, 0x73, 0xc1,
	0x5a, 0xd5, 0xe1, 0x0e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x8d, 0xb8, 0xd4, 0x30, 0x0a,
	0x00, 0x00,
}

func (m *RetentionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetentionOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FutureRetentionPeriodNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.FutureRetentionPeriodNanos))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockDataExpiryAfterNotAccessPeriodNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockDataExpiryAfterNotAccessPeriodNanos))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockDataExpiry {
		i--
		if m.BlockDataExpiry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BufferPastNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.BufferPastNanos))
		i--
		dAtA[i] = 0x20
	}
	if m.BufferFutureNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.BufferFutureNanos))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockSizeNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockSizeNanos))
		i--
		dAtA[i] = 0x10
	}
	if m.RetentionPeriodNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.RetentionPeriodNanos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockSizeNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockSizeNanos))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedOptions != nil {
		{
			size, err := m.ExtendedOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.StagingState != nil {
		{
			size, err := m.StagingState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.AggregationOptions != nil {
		{
			size, err := m.AggregationOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CacheBlocksOnRetrieve != nil {
		{
			size, err := m.CacheBlocksOnRetrieve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RuntimeOptions != nil {
		{
			size, err := m.RuntimeOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ColdWritesEnabled {
		i--
		if m.ColdWritesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.SchemaOptions != nil {
		{
			size, err := m.SchemaOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.IndexOptions != nil {
		{
			size, err := m.IndexOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.SnapshotEnabled {
		i--
		if m.SnapshotEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RetentionOptions != nil {
		{
			size, err := m.RetentionOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RepairEnabled {
		i--
		if m.RepairEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CleanupEnabled {
		i--
		if m.CleanupEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.WritesToCommitLog {
		i--
		if m.WritesToCommitLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FlushEnabled {
		i--
		if m.FlushEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BootstrapEnabled {
		i--
		if m.BootstrapEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AggregationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aggregations) > 0 {
		for iNdEx := len(m.Aggregations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Aggregations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNamespace(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Aggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Aggregated {
		i--
		if m.Aggregated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AggregatedAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownsampleOptions != nil {
		{
			size, err := m.DownsampleOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResolutionNanos != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.ResolutionNanos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownsampleOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownsampleOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownsampleOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StagingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StagingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StagingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNamespace(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Registry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Registry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Registry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k := range m.Namespaces {
			v := m.Namespaces[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNamespace(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNamespace(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNamespace(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceRuntimeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceRuntimeOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceRuntimeOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlushIndexingPerCPUConcurrency != nil {
		{
			size, err := m.FlushIndexingPerCPUConcurrency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WriteIndexingPerCPUConcurrency != nil {
		{
			size, err := m.WriteIndexingPerCPUConcurrency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	offset -= sovNamespace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RetentionOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetentionPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.RetentionPeriodNanos))
	}
	if m.BlockSizeNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockSizeNanos))
	}
	if m.BufferFutureNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferFutureNanos))
	}
	if m.BufferPastNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferPastNanos))
	}
	if m.BlockDataExpiry {
		n += 2
	}
	if m.BlockDataExpiryAfterNotAccessPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockDataExpiryAfterNotAccessPeriodNanos))
	}
	if m.FutureRetentionPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.FutureRetentionPeriodNanos))
	}
	return n
}

func (m *IndexOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.BlockSizeNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockSizeNanos))
	}
	return n
}

func (m *NamespaceOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BootstrapEnabled {
		n += 2
	}
	if m.FlushEnabled {
		n += 2
	}
	if m.WritesToCommitLog {
		n += 2
	}
	if m.CleanupEnabled {
		n += 2
	}
	if m.RepairEnabled {
		n += 2
	}
	if m.RetentionOptions != nil {
		l = m.RetentionOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.SnapshotEnabled {
		n += 2
	}
	if m.IndexOptions != nil {
		l = m.IndexOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.SchemaOptions != nil {
		l = m.SchemaOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.ColdWritesEnabled {
		n += 2
	}
	if m.RuntimeOptions != nil {
		l = m.RuntimeOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.CacheBlocksOnRetrieve != nil {
		l = m.CacheBlocksOnRetrieve.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.AggregationOptions != nil {
		l = m.AggregationOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.StagingState != nil {
		l = m.StagingState.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.ExtendedOptions != nil {
		l = m.ExtendedOptions.Size()
		n += 2 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *AggregationOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aggregations) > 0 {
		for _, e := range m.Aggregations {
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		}
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregated {
		n += 2
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *AggregatedAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolutionNanos != 0 {
		n += 1 + sovNamespace(uint64(m.ResolutionNanos))
	}
	if m.DownsampleOptions != nil {
		l = m.DownsampleOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *DownsampleOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.All {
		n += 2
	}
	return n
}

func (m *StagingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNamespace(uint64(m.Status))
	}
	return n
}

func (m *Registry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k, v := range m.Namespaces {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNamespace(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNamespace(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNamespace(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NamespaceRuntimeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WriteIndexingPerCPUConcurrency != nil {
		l = m.WriteIndexingPerCPUConcurrency.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.FlushIndexingPerCPUConcurrency != nil {
		l = m.FlushIndexingPerCPUConcurrency.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *ExtendedOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func sovNamespace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetentionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPeriodNanos", wireType)
			}
			m.RetentionPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionPeriodNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeNanos", wireType)
			}
			m.BlockSizeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferFutureNanos", wireType)
			}
			m.BufferFutureNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferFutureNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPastNanos", wireType)
			}
			m.BufferPastNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferPastNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockDataExpiry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiryAfterNotAccessPeriodNanos", wireType)
			}
			m.BlockDataExpiryAfterNotAccessPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDataExpiryAfterNotAccessPeriodNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureRetentionPeriodNanos", wireType)
			}
			m.FutureRetentionPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureRetentionPeriodNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeNanos", wireType)
			}
			m.BlockSizeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BootstrapEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesToCommitLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WritesToCommitLog = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanupEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CleanupEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepairEnabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionOptions == nil {
				m.RetentionOptions = &RetentionOptions{}
			}
			if err := m.RetentionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexOptions == nil {
				m.IndexOptions = &IndexOptions{}
			}
			if err := m.IndexOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchemaOptions == nil {
				m.SchemaOptions = &SchemaOptions{}
			}
			if err := m.SchemaOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColdWritesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColdWritesEnabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeOptions == nil {
				m.RuntimeOptions = &NamespaceRuntimeOptions{}
			}
			if err := m.RuntimeOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheBlocksOnRetrieve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheBlocksOnRetrieve == nil {
				m.CacheBlocksOnRetrieve = &types.BoolValue{}
			}
			if err := m.CacheBlocksOnRetrieve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregationOptions == nil {
				m.AggregationOptions = &AggregationOptions{}
			}
			if err := m.AggregationOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StagingState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StagingState == nil {
				m.StagingState = &StagingState{}
			}
			if err := m.StagingState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedOptions == nil {
				m.ExtendedOptions = &ExtendedOptions{}
			}
			if err := m.ExtendedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregations = append(m.Aggregations, &Aggregation{})
			if err := m.Aggregations[len(m.Aggregations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Aggregated = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &AggregatedAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNanos", wireType)
			}
			m.ResolutionNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownsampleOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownsampleOptions == nil {
				m.DownsampleOptions = &DownsampleOptions{}
			}
			if err := m.DownsampleOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownsampleOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownsampleOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownsampleOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StagingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StagingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StagingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StagingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Registry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespaces == nil {
				m.Namespaces = make(map[string]*NamespaceOptions)
			}
			var mapkey string
			var mapvalue *NamespaceOptions
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNamespace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNamespace
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNamespace
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNamespace
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NamespaceOptions{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNamespace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNamespace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Namespaces[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceRuntimeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceRuntimeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceRuntimeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteIndexingPerCPUConcurrency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteIndexingPerCPUConcurrency == nil {
				m.WriteIndexingPerCPUConcurrency = &types.DoubleValue{}
			}
			if err := m.WriteIndexingPerCPUConcurrency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushIndexingPerCPUConcurrency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushIndexingPerCPUConcurrency == nil {
				m.FlushIndexingPerCPUConcurrency = &types.DoubleValue{}
			}
			if err := m.FlushIndexingPerCPUConcurrency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &types.Struct{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNamespace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNamespace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNamespace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNamespace = fmt.Errorf("proto: unexpected end of group")
)
