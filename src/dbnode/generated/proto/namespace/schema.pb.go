// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/namespace/schema.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package namespace

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SchemaOptions contains schema information for a namespace.
type SchemaOptions struct {
	// history contains a history of deployed schema definitions.
	History *SchemaHistory `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	// defaultMessageName identifies the proto message that contains the default schema for the namespace.
	DefaultMessageName string `protobuf:"bytes,2,opt,name=defaultMessageName,proto3" json:"defaultMessageName,omitempty"`
}

func (m *SchemaOptions) Reset()         { *m = SchemaOptions{} }
func (m *SchemaOptions) String() string { return proto.CompactTextString(m) }
func (*SchemaOptions) ProtoMessage()    {}
func (*SchemaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_745828f361790dec, []int{0}
}
func (m *SchemaOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaOptions.Merge(m, src)
}
func (m *SchemaOptions) XXX_Size() int {
	return m.Size()
}
func (m *SchemaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaOptions proto.InternalMessageInfo

func (m *SchemaOptions) GetHistory() *SchemaHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *SchemaOptions) GetDefaultMessageName() string {
	if m != nil {
		return m.DefaultMessageName
	}
	return ""
}

// SchemaHistory is versioned FileDescriptorSet.
type SchemaHistory struct {
	// versions is a list of FileDescriptorSet sorted by version in ascending order.
	// the list is a linked list and we use FileDescriptorSet.prevId to ensure the order is ascending.
	Versions []*FileDescriptorSet `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (m *SchemaHistory) Reset()         { *m = SchemaHistory{} }
func (m *SchemaHistory) String() string { return proto.CompactTextString(m) }
func (*SchemaHistory) ProtoMessage()    {}
func (*SchemaHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_745828f361790dec, []int{1}
}
func (m *SchemaHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaHistory.Merge(m, src)
}
func (m *SchemaHistory) XXX_Size() int {
	return m.Size()
}
func (m *SchemaHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaHistory proto.InternalMessageInfo

func (m *SchemaHistory) GetVersions() []*FileDescriptorSet {
	if m != nil {
		return m.Versions
	}
	return nil
}

// FileDescriptorSet is a set of proto file descriptors.
type FileDescriptorSet struct {
	// id identifies a deployed version of FileDescriptorSet.
	DeployId string `protobuf:"bytes,1,opt,name=deployId,proto3" json:"deployId,omitempty"`
	// prevId identifies the previous deploy id of FileDescriptorSet.
	PrevId string `protobuf:"bytes,2,opt,name=prevId,proto3" json:"prevId,omitempty"`
	// descriptors is a list of proto file descriptors sorted by dependency in topological order.
	Descriptors [][]byte `protobuf:"bytes,3,rep,name=descriptors,proto3" json:"descriptors,omitempty"`
}

func (m *FileDescriptorSet) Reset()         { *m = FileDescriptorSet{} }
func (m *FileDescriptorSet) String() string { return proto.CompactTextString(m) }
func (*FileDescriptorSet) ProtoMessage()    {}
func (*FileDescriptorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_745828f361790dec, []int{2}
}
func (m *FileDescriptorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileDescriptorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileDescriptorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileDescriptorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDescriptorSet.Merge(m, src)
}
func (m *FileDescriptorSet) XXX_Size() int {
	return m.Size()
}
func (m *FileDescriptorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDescriptorSet.DiscardUnknown(m)
}

var xxx_messageInfo_FileDescriptorSet proto.InternalMessageInfo

func (m *FileDescriptorSet) GetDeployId() string {
	if m != nil {
		return m.DeployId
	}
	return ""
}

func (m *FileDescriptorSet) GetPrevId() string {
	if m != nil {
		return m.PrevId
	}
	return ""
}

func (m *FileDescriptorSet) GetDescriptors() [][]byte {
	if m != nil {
		return m.Descriptors
	}
	return nil
}

func init() {
	proto.RegisterType((*SchemaOptions)(nil), "namespace.SchemaOptions")
	proto.RegisterType((*SchemaHistory)(nil), "namespace.SchemaHistory")
	proto.RegisterType((*FileDescriptorSet)(nil), "namespace.FileDescriptorSet")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/namespace/schema.proto", fileDescriptor_745828f361790dec)
}

var fileDescriptor_745828f361790dec = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x17, 0x07, 0x73, 0xcb, 0xf4, 0x60, 0x0e, 0x12, 0x44, 0x42, 0xd9, 0xa9, 0xa7, 0x06,
	0xb6, 0x8b, 0x67, 0x19, 0xe2, 0x0e, 0x2a, 0x74, 0x4f, 0x90, 0x36, 0x9f, 0x6b, 0xa0, 0x69, 0x42,
	0x92, 0x0d, 0xf6, 0x16, 0x3e, 0x96, 0xc7, 0x1d, 0x3d, 0x4a, 0xfb, 0x22, 0x62, 0xd7, 0x95, 0x81,
	0x1e, 0xbf, 0xff, 0xef, 0xc7, 0xf7, 0xfd, 0x13, 0xbc, 0xdc, 0xa8, 0x50, 0x6c, 0xb3, 0x24, 0x37,
	0x9a, 0xeb, 0x85, 0xcc, 0xb8, 0x5e, 0x70, 0xef, 0x72, 0x2e, 0xb3, 0xca, 0x48, 0xe0, 0x1b, 0xa8,
	0xc0, 0x89, 0x00, 0x92, 0x5b, 0x67, 0x82, 0xe1, 0x95, 0xd0, 0xe0, 0xad, 0xc8, 0x81, 0xfb, 0xbc,
	0x00, 0x2d, 0x92, 0x36, 0x26, 0x93, 0x3e, 0x9f, 0x79, 0x7c, 0xbd, 0x6e, 0xd1, 0x9b, 0x0d, 0xca,
	0x54, 0x9e, 0xcc, 0xf1, 0x65, 0xa1, 0x7c, 0x30, 0x6e, 0x4f, 0x51, 0x84, 0xe2, 0xe9, 0x9c, 0x26,
	0xbd, 0x9d, 0x1c, 0xd5, 0xe7, 0x23, 0x4f, 0x4f, 0x22, 0x49, 0x30, 0x91, 0xf0, 0x2e, 0xb6, 0x65,
	0x78, 0x01, 0xef, 0xc5, 0x06, 0x5e, 0x85, 0x06, 0x7a, 0x11, 0xa1, 0x78, 0x92, 0xfe, 0x43, 0x66,
	0xab, 0xd3, 0xd1, 0x6e, 0x13, 0x79, 0xc0, 0xe3, 0x1d, 0x38, 0xff, 0x5b, 0x80, 0xa2, 0x68, 0x18,
	0x4f, 0xe7, 0xf7, 0x67, 0x57, 0x9f, 0x54, 0x09, 0x4b, 0xf0, 0xb9, 0x53, 0x36, 0x18, 0xb7, 0x86,
	0x90, 0xf6, 0xf6, 0x4c, 0xe1, 0x9b, 0x3f, 0x98, 0xdc, 0xe1, 0xb1, 0x04, 0x5b, 0x9a, 0xfd, 0x4a,
	0xb6, 0x8f, 0x98, 0xa4, 0xfd, 0x4c, 0x6e, 0xf1, 0xc8, 0x3a, 0xd8, 0xad, 0x64, 0xd7, 0xaf, 0x9b,
	0x48, 0x84, 0xa7, 0xb2, 0x5f, 0xe2, 0xe9, 0x30, 0x1a, 0xc6, 0x57, 0xe9, 0x79, 0xf4, 0x48, 0x3f,
	0x6b, 0x86, 0x0e, 0x35, 0x43, 0xdf, 0x35, 0x43, 0x1f, 0x0d, 0x1b, 0x1c, 0x1a, 0x36, 0xf8, 0x6a,
	0xd8, 0x20, 0x1b, 0xb5, 0xdf, 0xba, 0xf8, 0x09, 0x00, 0x00, 0xff, 0xff, 0x16, 0xb3, 0x97, 0x19,
	0x9e, 0x01, 0x00, 0x00,
}

func (m *SchemaOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultMessageName) > 0 {
		i -= len(m.DefaultMessageName)
		copy(dAtA[i:], m.DefaultMessageName)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.DefaultMessageName)))
		i--
		dAtA[i] = 0x12
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileDescriptorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDescriptorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileDescriptorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Descriptors) > 0 {
		for iNdEx := len(m.Descriptors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Descriptors[iNdEx])
			copy(dAtA[i:], m.Descriptors[iNdEx])
			i = encodeVarintSchema(dAtA, i, uint64(len(m.Descriptors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrevId) > 0 {
		i -= len(m.PrevId)
		copy(dAtA[i:], m.PrevId)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.PrevId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeployId) > 0 {
		i -= len(m.DeployId)
		copy(dAtA[i:], m.DeployId)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.DeployId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SchemaOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.DefaultMessageName)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func (m *SchemaHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *FileDescriptorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeployId)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.PrevId)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Descriptors) > 0 {
		for _, b := range m.Descriptors {
			l = len(b)
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func sovSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SchemaOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &SchemaHistory{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMessageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultMessageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &FileDescriptorSet{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDescriptorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDescriptorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDescriptorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptors", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptors = append(m.Descriptors, make([]byte, postIndex-iNdEx))
			copy(m.Descriptors[len(m.Descriptors)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchema = fmt.Errorf("proto: unexpected end of group")
)
