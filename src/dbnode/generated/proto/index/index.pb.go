// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/index/index.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package index

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IndexVolumeInfo struct {
	MajorVersion    int64              `protobuf:"varint,1,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	BlockStart      int64              `protobuf:"varint,2,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockSize       int64              `protobuf:"varint,3,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
	FileType        int64              `protobuf:"varint,4,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Shards          []uint32           `protobuf:"varint,5,rep,packed,name=shards,proto3" json:"shards,omitempty"`
	SnapshotTime    int64              `protobuf:"varint,6,opt,name=snapshotTime,proto3" json:"snapshotTime,omitempty"`
	Segments        []*SegmentInfo     `protobuf:"bytes,7,rep,name=segments,proto3" json:"segments,omitempty"`
	IndexVolumeType *types.StringValue `protobuf:"bytes,8,opt,name=indexVolumeType,proto3" json:"indexVolumeType,omitempty"`
}

func (m *IndexVolumeInfo) Reset()         { *m = IndexVolumeInfo{} }
func (m *IndexVolumeInfo) String() string { return proto.CompactTextString(m) }
func (*IndexVolumeInfo) ProtoMessage()    {}
func (*IndexVolumeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{0}
}
func (m *IndexVolumeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexVolumeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexVolumeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexVolumeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexVolumeInfo.Merge(m, src)
}
func (m *IndexVolumeInfo) XXX_Size() int {
	return m.Size()
}
func (m *IndexVolumeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexVolumeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IndexVolumeInfo proto.InternalMessageInfo

func (m *IndexVolumeInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *IndexVolumeInfo) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *IndexVolumeInfo) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IndexVolumeInfo) GetFileType() int64 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *IndexVolumeInfo) GetShards() []uint32 {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *IndexVolumeInfo) GetSnapshotTime() int64 {
	if m != nil {
		return m.SnapshotTime
	}
	return 0
}

func (m *IndexVolumeInfo) GetSegments() []*SegmentInfo {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *IndexVolumeInfo) GetIndexVolumeType() *types.StringValue {
	if m != nil {
		return m.IndexVolumeType
	}
	return nil
}

type SegmentInfo struct {
	SegmentType  string             `protobuf:"bytes,1,opt,name=segmentType,proto3" json:"segmentType,omitempty"`
	MajorVersion int64              `protobuf:"varint,2,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	MinorVersion int64              `protobuf:"varint,3,opt,name=minorVersion,proto3" json:"minorVersion,omitempty"`
	Metadata     []byte             `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Files        []*SegmentFileInfo `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *SegmentInfo) Reset()         { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()    {}
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{1}
}
func (m *SegmentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfo.Merge(m, src)
}
func (m *SegmentInfo) XXX_Size() int {
	return m.Size()
}
func (m *SegmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfo proto.InternalMessageInfo

func (m *SegmentInfo) GetSegmentType() string {
	if m != nil {
		return m.SegmentType
	}
	return ""
}

func (m *SegmentInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *SegmentInfo) GetMinorVersion() int64 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *SegmentInfo) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SegmentInfo) GetFiles() []*SegmentFileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type SegmentFileInfo struct {
	SegmentFileType string `protobuf:"bytes,1,opt,name=segmentFileType,proto3" json:"segmentFileType,omitempty"`
}

func (m *SegmentFileInfo) Reset()         { *m = SegmentFileInfo{} }
func (m *SegmentFileInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentFileInfo) ProtoMessage()    {}
func (*SegmentFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{2}
}
func (m *SegmentFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentFileInfo.Merge(m, src)
}
func (m *SegmentFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *SegmentFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentFileInfo proto.InternalMessageInfo

func (m *SegmentFileInfo) GetSegmentFileType() string {
	if m != nil {
		return m.SegmentFileType
	}
	return ""
}

type IndexDigests struct {
	InfoDigest     uint32           `protobuf:"varint,1,opt,name=infoDigest,proto3" json:"infoDigest,omitempty"`
	SegmentDigests []*SegmentDigest `protobuf:"bytes,2,rep,name=segmentDigests,proto3" json:"segmentDigests,omitempty"`
}

func (m *IndexDigests) Reset()         { *m = IndexDigests{} }
func (m *IndexDigests) String() string { return proto.CompactTextString(m) }
func (*IndexDigests) ProtoMessage()    {}
func (*IndexDigests) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{3}
}
func (m *IndexDigests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexDigests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexDigests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexDigests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexDigests.Merge(m, src)
}
func (m *IndexDigests) XXX_Size() int {
	return m.Size()
}
func (m *IndexDigests) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexDigests.DiscardUnknown(m)
}

var xxx_messageInfo_IndexDigests proto.InternalMessageInfo

func (m *IndexDigests) GetInfoDigest() uint32 {
	if m != nil {
		return m.InfoDigest
	}
	return 0
}

func (m *IndexDigests) GetSegmentDigests() []*SegmentDigest {
	if m != nil {
		return m.SegmentDigests
	}
	return nil
}

type SegmentDigest struct {
	SegmentType string               `protobuf:"bytes,1,opt,name=segmentType,proto3" json:"segmentType,omitempty"`
	Files       []*SegmentFileDigest `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *SegmentDigest) Reset()         { *m = SegmentDigest{} }
func (m *SegmentDigest) String() string { return proto.CompactTextString(m) }
func (*SegmentDigest) ProtoMessage()    {}
func (*SegmentDigest) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{4}
}
func (m *SegmentDigest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentDigest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentDigest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentDigest.Merge(m, src)
}
func (m *SegmentDigest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentDigest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentDigest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentDigest proto.InternalMessageInfo

func (m *SegmentDigest) GetSegmentType() string {
	if m != nil {
		return m.SegmentType
	}
	return ""
}

func (m *SegmentDigest) GetFiles() []*SegmentFileDigest {
	if m != nil {
		return m.Files
	}
	return nil
}

type SegmentFileDigest struct {
	SegmentFileType string `protobuf:"bytes,1,opt,name=segmentFileType,proto3" json:"segmentFileType,omitempty"`
	Digest          uint32 `protobuf:"varint,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *SegmentFileDigest) Reset()         { *m = SegmentFileDigest{} }
func (m *SegmentFileDigest) String() string { return proto.CompactTextString(m) }
func (*SegmentFileDigest) ProtoMessage()    {}
func (*SegmentFileDigest) Descriptor() ([]byte, []int) {
	return fileDescriptor_590ea2a5a4b4fbf6, []int{5}
}
func (m *SegmentFileDigest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentFileDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentFileDigest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentFileDigest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentFileDigest.Merge(m, src)
}
func (m *SegmentFileDigest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentFileDigest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentFileDigest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentFileDigest proto.InternalMessageInfo

func (m *SegmentFileDigest) GetSegmentFileType() string {
	if m != nil {
		return m.SegmentFileType
	}
	return ""
}

func (m *SegmentFileDigest) GetDigest() uint32 {
	if m != nil {
		return m.Digest
	}
	return 0
}

func init() {
	proto.RegisterType((*IndexVolumeInfo)(nil), "index.IndexVolumeInfo")
	proto.RegisterType((*SegmentInfo)(nil), "index.SegmentInfo")
	proto.RegisterType((*SegmentFileInfo)(nil), "index.SegmentFileInfo")
	proto.RegisterType((*IndexDigests)(nil), "index.IndexDigests")
	proto.RegisterType((*SegmentDigest)(nil), "index.SegmentDigest")
	proto.RegisterType((*SegmentFileDigest)(nil), "index.SegmentFileDigest")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/index/index.proto", fileDescriptor_590ea2a5a4b4fbf6)
}

var fileDescriptor_590ea2a5a4b4fbf6 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8a, 0xdb, 0x30,
	0x10, 0xc6, 0xd7, 0x71, 0x93, 0x66, 0xc7, 0x49, 0x43, 0x45, 0x59, 0xc4, 0xb2, 0x18, 0xe3, 0x93,
	0x0f, 0xc5, 0x86, 0xe4, 0xd8, 0x42, 0xa1, 0x94, 0x85, 0xbd, 0x3a, 0xdb, 0xdc, 0xe5, 0x58, 0x71,
	0xd4, 0xda, 0x92, 0x91, 0x14, 0xfa, 0xe7, 0x29, 0xfa, 0x4a, 0xa5, 0x97, 0x1e, 0xf7, 0xd8, 0x63,
	0x49, 0x5e, 0xa4, 0x58, 0xf2, 0x26, 0x4e, 0xd2, 0xc3, 0x5e, 0x02, 0xdf, 0x37, 0x9f, 0x3c, 0x33,
	0xbf, 0x0c, 0xbc, 0x2b, 0x98, 0x5e, 0x6f, 0xb2, 0x78, 0x29, 0xaa, 0xa4, 0x9a, 0xe5, 0x59, 0x52,
	0xcd, 0x12, 0x25, 0x97, 0x49, 0x9e, 0x71, 0x91, 0xd3, 0xa4, 0xa0, 0x9c, 0x4a, 0xa2, 0x69, 0x9e,
	0xd4, 0x52, 0x68, 0x91, 0x30, 0x9e, 0xd3, 0xaf, 0xf6, 0x37, 0x36, 0x0e, 0xea, 0x1b, 0x71, 0xed,
	0x17, 0x42, 0x14, 0x25, 0xb5, 0xb1, 0x6c, 0xb3, 0x4a, 0xbe, 0x48, 0x52, 0xd7, 0x54, 0x2a, 0x1b,
	0x0b, 0x7f, 0xf5, 0x60, 0x72, 0xd7, 0x24, 0x17, 0xa2, 0xdc, 0x54, 0xf4, 0x8e, 0xaf, 0x04, 0x0a,
	0x61, 0x54, 0x91, 0x4f, 0x42, 0x2e, 0xa8, 0x54, 0x4c, 0x70, 0xec, 0x04, 0x4e, 0xe4, 0xa6, 0x47,
	0x1e, 0xf2, 0x01, 0xb2, 0x52, 0x2c, 0x3f, 0xcf, 0x35, 0x91, 0x1a, 0xf7, 0x4c, 0xa2, 0xe3, 0xa0,
	0x1b, 0xb8, 0xb4, 0x8a, 0x7d, 0xa7, 0xd8, 0x35, 0xe5, 0x83, 0x81, 0xae, 0x61, 0xb8, 0x62, 0x25,
	0xbd, 0xff, 0x56, 0x53, 0xfc, 0xcc, 0x14, 0xf7, 0x1a, 0x5d, 0xc1, 0x40, 0xad, 0x89, 0xcc, 0x15,
	0xee, 0x07, 0x6e, 0x34, 0x4e, 0x5b, 0xd5, 0x4c, 0xa5, 0x38, 0xa9, 0xd5, 0x5a, 0xe8, 0x7b, 0x56,
	0x51, 0x3c, 0xb0, 0x53, 0x75, 0x3d, 0x14, 0xc3, 0x50, 0xd1, 0xa2, 0xa2, 0x5c, 0x2b, 0xfc, 0x3c,
	0x70, 0x23, 0x6f, 0x8a, 0x62, 0x0b, 0x65, 0x6e, 0xed, 0x66, 0xbf, 0x74, 0x9f, 0x41, 0xb7, 0x30,
	0x61, 0x87, 0xe5, 0xcd, 0x38, 0xc3, 0xc0, 0x89, 0xbc, 0xe9, 0x4d, 0x6c, 0xb9, 0xc5, 0x8f, 0xdc,
	0xe2, 0xb9, 0x96, 0x8c, 0x17, 0x0b, 0x52, 0x6e, 0x68, 0x7a, 0xfa, 0x28, 0xfc, 0xe9, 0x80, 0xd7,
	0xe9, 0x80, 0x02, 0xf0, 0xda, 0x1e, 0xe6, 0x9b, 0x0d, 0xc0, 0xcb, 0xb4, 0x6b, 0x9d, 0x31, 0xee,
	0xfd, 0x87, 0x71, 0x93, 0x61, 0xfc, 0x90, 0x71, 0xdb, 0x4c, 0xc7, 0x6b, 0x48, 0x56, 0x54, 0x93,
	0x9c, 0x68, 0x62, 0x48, 0x8e, 0xd2, 0xbd, 0x46, 0xaf, 0xa1, 0xdf, 0x50, 0xb5, 0x20, 0xbd, 0xe9,
	0xd5, 0x31, 0x8a, 0x5b, 0x56, 0x9a, 0xbf, 0x3b, 0xb5, 0xa1, 0xf0, 0x0d, 0x4c, 0x4e, 0x2a, 0x28,
	0x82, 0x89, 0x3a, 0x58, 0x9d, 0x55, 0x4e, 0xed, 0xb0, 0x84, 0x91, 0xb9, 0xa2, 0x0f, 0xac, 0xa0,
	0x4a, 0xab, 0xe6, 0x3c, 0x18, 0x5f, 0x09, 0x2b, 0xcd, 0xa3, 0x71, 0xda, 0x71, 0xd0, 0x5b, 0x78,
	0xd1, 0x7e, 0xa2, 0x7d, 0x81, 0x7b, 0x66, 0xc6, 0x57, 0xc7, 0x33, 0xda, 0x62, 0x7a, 0x92, 0x0d,
	0x09, 0x8c, 0x8f, 0x02, 0x4f, 0xe0, 0x1d, 0x3f, 0xb2, 0xb0, 0x7d, 0xf0, 0x39, 0x8b, 0xb6, 0x57,
	0x4b, 0xe3, 0x23, 0xbc, 0x3c, 0xab, 0x3d, 0x9d, 0x47, 0x73, 0xc4, 0xb9, 0xdd, 0xbd, 0x67, 0x76,
	0x6f, 0xd5, 0x7b, 0xfc, 0x7b, 0xeb, 0x3b, 0x0f, 0x5b, 0xdf, 0xf9, 0xbb, 0xf5, 0x9d, 0x1f, 0x3b,
	0xff, 0xe2, 0x61, 0xe7, 0x5f, 0xfc, 0xd9, 0xf9, 0x17, 0xd9, 0xc0, 0x5c, 0xda, 0xec, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc1, 0x03, 0x00, 0x68, 0xf9, 0x03, 0x00, 0x00,
}

func (m *IndexVolumeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexVolumeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexVolumeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexVolumeType != nil {
		{
			size, err := m.IndexVolumeType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndex(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SnapshotTime != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.SnapshotTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Shards) > 0 {
		dAtA3 := make([]byte, len(m.Shards)*10)
		var j2 int
		for _, num := range m.Shards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintIndex(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x2a
	}
	if m.FileType != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockSize != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockStart != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockStart))
		i--
		dAtA[i] = 0x10
	}
	if m.MajorVersion != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SegmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x22
	}
	if m.MinorVersion != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.MinorVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.MajorVersion != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SegmentType) > 0 {
		i -= len(m.SegmentType)
		copy(dAtA[i:], m.SegmentType)
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SegmentFileType) > 0 {
		i -= len(m.SegmentFileType)
		copy(dAtA[i:], m.SegmentFileType)
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentFileType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexDigests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDigests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexDigests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SegmentDigests) > 0 {
		for iNdEx := len(m.SegmentDigests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SegmentDigests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.InfoDigest != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.InfoDigest))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SegmentDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentDigest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentDigest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SegmentType) > 0 {
		i -= len(m.SegmentType)
		copy(dAtA[i:], m.SegmentType)
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentFileDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentFileDigest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentFileDigest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Digest != 0 {
		i = encodeVarintIndex(dAtA, i, uint64(m.Digest))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SegmentFileType) > 0 {
		i -= len(m.SegmentFileType)
		copy(dAtA[i:], m.SegmentFileType)
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentFileType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexVolumeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.BlockStart != 0 {
		n += 1 + sovIndex(uint64(m.BlockStart))
	}
	if m.BlockSize != 0 {
		n += 1 + sovIndex(uint64(m.BlockSize))
	}
	if m.FileType != 0 {
		n += 1 + sovIndex(uint64(m.FileType))
	}
	if len(m.Shards) > 0 {
		l = 0
		for _, e := range m.Shards {
			l += sovIndex(uint64(e))
		}
		n += 1 + sovIndex(uint64(l)) + l
	}
	if m.SnapshotTime != 0 {
		n += 1 + sovIndex(uint64(m.SnapshotTime))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if m.IndexVolumeType != nil {
		l = m.IndexVolumeType.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *SegmentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SegmentType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.MinorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MinorVersion))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SegmentFileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *IndexDigests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfoDigest != 0 {
		n += 1 + sovIndex(uint64(m.InfoDigest))
	}
	if len(m.SegmentDigests) > 0 {
		for _, e := range m.SegmentDigests {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentDigest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SegmentType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentFileDigest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SegmentFileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Digest != 0 {
		n += 1 + sovIndex(uint64(m.Digest))
	}
	return n
}

func sovIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexVolumeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexVolumeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexVolumeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shards = append(m.Shards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIndex
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shards) == 0 {
					m.Shards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shards = append(m.Shards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotTime", wireType)
			}
			m.SnapshotTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &SegmentInfo{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexVolumeType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexVolumeType == nil {
				m.IndexVolumeType = &types.StringValue{}
			}
			if err := m.IndexVolumeType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SegmentFileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentFileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentFileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDigests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexDigests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexDigests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDigest", wireType)
			}
			m.InfoDigest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDigest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentDigests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentDigests = append(m.SegmentDigests, &SegmentDigest{})
			if err := m.SegmentDigests[len(m.SegmentDigests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SegmentFileDigest{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentFileDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentFileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentFileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			m.Digest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndex = fmt.Errorf("proto: unexpected end of group")
)
