// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/index/index.proto

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package index is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/dbnode/generated/proto/index/index.proto

	It has these top-level messages:
		IndexVolumeInfo
		SegmentInfo
		SegmentFileInfo
		IndexDigests
		SegmentDigest
		SegmentFileDigest
*/
package index

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type IndexVolumeInfo struct {
	MajorVersion    int64                        `protobuf:"varint,1,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	BlockStart      int64                        `protobuf:"varint,2,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockSize       int64                        `protobuf:"varint,3,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
	FileType        int64                        `protobuf:"varint,4,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Shards          []uint32                     `protobuf:"varint,5,rep,packed,name=shards" json:"shards,omitempty"`
	SnapshotTime    int64                        `protobuf:"varint,6,opt,name=snapshotTime,proto3" json:"snapshotTime,omitempty"`
	Segments        []*SegmentInfo               `protobuf:"bytes,7,rep,name=segments" json:"segments,omitempty"`
	IndexVolumeType *google_protobuf.StringValue `protobuf:"bytes,8,opt,name=indexVolumeType" json:"indexVolumeType,omitempty"`
}

func (m *IndexVolumeInfo) Reset()                    { *m = IndexVolumeInfo{} }
func (m *IndexVolumeInfo) String() string            { return proto.CompactTextString(m) }
func (*IndexVolumeInfo) ProtoMessage()               {}
func (*IndexVolumeInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{0} }

func (m *IndexVolumeInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *IndexVolumeInfo) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *IndexVolumeInfo) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IndexVolumeInfo) GetFileType() int64 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *IndexVolumeInfo) GetShards() []uint32 {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *IndexVolumeInfo) GetSnapshotTime() int64 {
	if m != nil {
		return m.SnapshotTime
	}
	return 0
}

func (m *IndexVolumeInfo) GetSegments() []*SegmentInfo {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *IndexVolumeInfo) GetIndexVolumeType() *google_protobuf.StringValue {
	if m != nil {
		return m.IndexVolumeType
	}
	return nil
}

type SegmentInfo struct {
	SegmentType  string             `protobuf:"bytes,1,opt,name=segmentType,proto3" json:"segmentType,omitempty"`
	MajorVersion int64              `protobuf:"varint,2,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	MinorVersion int64              `protobuf:"varint,3,opt,name=minorVersion,proto3" json:"minorVersion,omitempty"`
	Metadata     []byte             `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Files        []*SegmentFileInfo `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"`
}

func (m *SegmentInfo) Reset()                    { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string            { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()               {}
func (*SegmentInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{1} }

func (m *SegmentInfo) GetSegmentType() string {
	if m != nil {
		return m.SegmentType
	}
	return ""
}

func (m *SegmentInfo) GetMajorVersion() int64 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *SegmentInfo) GetMinorVersion() int64 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *SegmentInfo) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SegmentInfo) GetFiles() []*SegmentFileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type SegmentFileInfo struct {
	SegmentFileType string `protobuf:"bytes,1,opt,name=segmentFileType,proto3" json:"segmentFileType,omitempty"`
}

func (m *SegmentFileInfo) Reset()                    { *m = SegmentFileInfo{} }
func (m *SegmentFileInfo) String() string            { return proto.CompactTextString(m) }
func (*SegmentFileInfo) ProtoMessage()               {}
func (*SegmentFileInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{2} }

func (m *SegmentFileInfo) GetSegmentFileType() string {
	if m != nil {
		return m.SegmentFileType
	}
	return ""
}

type IndexDigests struct {
	InfoDigest     uint32           `protobuf:"varint,1,opt,name=infoDigest,proto3" json:"infoDigest,omitempty"`
	SegmentDigests []*SegmentDigest `protobuf:"bytes,2,rep,name=segmentDigests" json:"segmentDigests,omitempty"`
}

func (m *IndexDigests) Reset()                    { *m = IndexDigests{} }
func (m *IndexDigests) String() string            { return proto.CompactTextString(m) }
func (*IndexDigests) ProtoMessage()               {}
func (*IndexDigests) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{3} }

func (m *IndexDigests) GetInfoDigest() uint32 {
	if m != nil {
		return m.InfoDigest
	}
	return 0
}

func (m *IndexDigests) GetSegmentDigests() []*SegmentDigest {
	if m != nil {
		return m.SegmentDigests
	}
	return nil
}

type SegmentDigest struct {
	SegmentType string               `protobuf:"bytes,1,opt,name=segmentType,proto3" json:"segmentType,omitempty"`
	Files       []*SegmentFileDigest `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *SegmentDigest) Reset()                    { *m = SegmentDigest{} }
func (m *SegmentDigest) String() string            { return proto.CompactTextString(m) }
func (*SegmentDigest) ProtoMessage()               {}
func (*SegmentDigest) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{4} }

func (m *SegmentDigest) GetSegmentType() string {
	if m != nil {
		return m.SegmentType
	}
	return ""
}

func (m *SegmentDigest) GetFiles() []*SegmentFileDigest {
	if m != nil {
		return m.Files
	}
	return nil
}

type SegmentFileDigest struct {
	SegmentFileType string `protobuf:"bytes,1,opt,name=segmentFileType,proto3" json:"segmentFileType,omitempty"`
	Digest          uint32 `protobuf:"varint,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *SegmentFileDigest) Reset()                    { *m = SegmentFileDigest{} }
func (m *SegmentFileDigest) String() string            { return proto.CompactTextString(m) }
func (*SegmentFileDigest) ProtoMessage()               {}
func (*SegmentFileDigest) Descriptor() ([]byte, []int) { return fileDescriptorIndex, []int{5} }

func (m *SegmentFileDigest) GetSegmentFileType() string {
	if m != nil {
		return m.SegmentFileType
	}
	return ""
}

func (m *SegmentFileDigest) GetDigest() uint32 {
	if m != nil {
		return m.Digest
	}
	return 0
}

func init() {
	proto.RegisterType((*IndexVolumeInfo)(nil), "index.IndexVolumeInfo")
	proto.RegisterType((*SegmentInfo)(nil), "index.SegmentInfo")
	proto.RegisterType((*SegmentFileInfo)(nil), "index.SegmentFileInfo")
	proto.RegisterType((*IndexDigests)(nil), "index.IndexDigests")
	proto.RegisterType((*SegmentDigest)(nil), "index.SegmentDigest")
	proto.RegisterType((*SegmentFileDigest)(nil), "index.SegmentFileDigest")
}
func (m *IndexVolumeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexVolumeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MajorVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
	}
	if m.BlockStart != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockStart))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BlockSize))
	}
	if m.FileType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.FileType))
	}
	if len(m.Shards) > 0 {
		dAtA2 := make([]byte, len(m.Shards)*10)
		var j1 int
		for _, num := range m.Shards {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.SnapshotTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.SnapshotTime))
	}
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IndexVolumeType != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IndexVolumeType.Size()))
		n3, err := m.IndexVolumeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SegmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SegmentType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentType)))
		i += copy(dAtA[i:], m.SegmentType)
	}
	if m.MajorVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MajorVersion))
	}
	if m.MinorVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.MinorVersion))
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SegmentFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentFileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SegmentFileType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentFileType)))
		i += copy(dAtA[i:], m.SegmentFileType)
	}
	return i, nil
}

func (m *IndexDigests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDigests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InfoDigest != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.InfoDigest))
	}
	if len(m.SegmentDigests) > 0 {
		for _, msg := range m.SegmentDigests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SegmentDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentDigest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SegmentType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentType)))
		i += copy(dAtA[i:], m.SegmentType)
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SegmentFileDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentFileDigest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SegmentFileType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SegmentFileType)))
		i += copy(dAtA[i:], m.SegmentFileType)
	}
	if m.Digest != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Digest))
	}
	return i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IndexVolumeInfo) Size() (n int) {
	var l int
	_ = l
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.BlockStart != 0 {
		n += 1 + sovIndex(uint64(m.BlockStart))
	}
	if m.BlockSize != 0 {
		n += 1 + sovIndex(uint64(m.BlockSize))
	}
	if m.FileType != 0 {
		n += 1 + sovIndex(uint64(m.FileType))
	}
	if len(m.Shards) > 0 {
		l = 0
		for _, e := range m.Shards {
			l += sovIndex(uint64(e))
		}
		n += 1 + sovIndex(uint64(l)) + l
	}
	if m.SnapshotTime != 0 {
		n += 1 + sovIndex(uint64(m.SnapshotTime))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if m.IndexVolumeType != nil {
		l = m.IndexVolumeType.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *SegmentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.SegmentType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.MajorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MajorVersion))
	}
	if m.MinorVersion != 0 {
		n += 1 + sovIndex(uint64(m.MinorVersion))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentFileInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.SegmentFileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *IndexDigests) Size() (n int) {
	var l int
	_ = l
	if m.InfoDigest != 0 {
		n += 1 + sovIndex(uint64(m.InfoDigest))
	}
	if len(m.SegmentDigests) > 0 {
		for _, e := range m.SegmentDigests {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentDigest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SegmentType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *SegmentFileDigest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SegmentFileType)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Digest != 0 {
		n += 1 + sovIndex(uint64(m.Digest))
	}
	return n
}

func sovIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexVolumeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexVolumeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexVolumeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shards = append(m.Shards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shards = append(m.Shards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotTime", wireType)
			}
			m.SnapshotTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &SegmentInfo{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexVolumeType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexVolumeType == nil {
				m.IndexVolumeType = &google_protobuf.StringValue{}
			}
			if err := m.IndexVolumeType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVersion", wireType)
			}
			m.MajorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SegmentFileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentFileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentFileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDigests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexDigests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexDigests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDigest", wireType)
			}
			m.InfoDigest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDigest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentDigests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentDigests = append(m.SegmentDigests, &SegmentDigest{})
			if err := m.SegmentDigests[len(m.SegmentDigests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SegmentFileDigest{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentFileDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFileDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFileDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentFileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentFileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			m.Digest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/index/index.proto", fileDescriptorIndex)
}

var fileDescriptorIndex = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8a, 0xdb, 0x30,
	0x10, 0xc6, 0x6b, 0xbb, 0x49, 0xb3, 0xe3, 0xa4, 0x69, 0x45, 0x59, 0xcc, 0xb2, 0x18, 0xe3, 0x93,
	0x0f, 0xc5, 0x86, 0xe4, 0xd8, 0x42, 0xa1, 0x94, 0x85, 0xbd, 0x3a, 0xdb, 0xdc, 0xe5, 0x58, 0x71,
	0xd4, 0xda, 0x92, 0x91, 0x14, 0xfa, 0xe7, 0x29, 0xfa, 0x4a, 0xa5, 0x97, 0x1e, 0xfb, 0x08, 0x25,
	0x7d, 0x91, 0x22, 0xc9, 0x9b, 0x38, 0xc9, 0x1e, 0xf6, 0x12, 0xf8, 0xbe, 0xf9, 0xe4, 0x99, 0xf9,
	0x65, 0xe0, 0x5d, 0x45, 0xd5, 0x66, 0x5b, 0xa4, 0x2b, 0xde, 0x64, 0xcd, 0xbc, 0x2c, 0xb2, 0x66,
	0x9e, 0x49, 0xb1, 0xca, 0xca, 0x82, 0xf1, 0x92, 0x64, 0x15, 0x61, 0x44, 0x60, 0x45, 0xca, 0xac,
	0x15, 0x5c, 0xf1, 0x8c, 0xb2, 0x92, 0x7c, 0xb5, 0xbf, 0xa9, 0x71, 0xd0, 0xc0, 0x88, 0xab, 0xb0,
	0xe2, 0xbc, 0xaa, 0x89, 0x8d, 0x15, 0xdb, 0x75, 0xf6, 0x45, 0xe0, 0xb6, 0x25, 0x42, 0xda, 0x58,
	0xfc, 0xcb, 0x85, 0xe9, 0xad, 0x4e, 0x2e, 0x79, 0xbd, 0x6d, 0xc8, 0x2d, 0x5b, 0x73, 0x14, 0xc3,
	0xb8, 0xc1, 0x9f, 0xb8, 0x58, 0x12, 0x21, 0x29, 0x67, 0x81, 0x13, 0x39, 0x89, 0x97, 0x1f, 0x79,
	0x28, 0x04, 0x28, 0x6a, 0xbe, 0xfa, 0xbc, 0x50, 0x58, 0xa8, 0xc0, 0x35, 0x89, 0x9e, 0x83, 0xae,
	0xe1, 0xc2, 0x2a, 0xfa, 0x9d, 0x04, 0x9e, 0x29, 0x1f, 0x0c, 0x74, 0x05, 0xa3, 0x35, 0xad, 0xc9,
	0xdd, 0xb7, 0x96, 0x04, 0x4f, 0x4d, 0x71, 0xaf, 0xd1, 0x25, 0x0c, 0xe5, 0x06, 0x8b, 0x52, 0x06,
	0x83, 0xc8, 0x4b, 0x26, 0x79, 0xa7, 0xf4, 0x54, 0x92, 0xe1, 0x56, 0x6e, 0xb8, 0xba, 0xa3, 0x0d,
	0x09, 0x86, 0x76, 0xaa, 0xbe, 0x87, 0x52, 0x18, 0x49, 0x52, 0x35, 0x84, 0x29, 0x19, 0x3c, 0x8b,
	0xbc, 0xc4, 0x9f, 0xa1, 0xd4, 0x42, 0x59, 0x58, 0x5b, 0xef, 0x97, 0xef, 0x33, 0xe8, 0x06, 0xa6,
	0xf4, 0xb0, 0xbc, 0x19, 0x67, 0x14, 0x39, 0x89, 0x3f, 0xbb, 0x4e, 0x2d, 0xb7, 0xf4, 0x9e, 0x5b,
	0xba, 0x50, 0x82, 0xb2, 0x6a, 0x89, 0xeb, 0x2d, 0xc9, 0x4f, 0x1f, 0xc5, 0x3f, 0x1d, 0xf0, 0x7b,
	0x1d, 0x50, 0x04, 0x7e, 0xd7, 0xc3, 0x7c, 0x53, 0x03, 0xbc, 0xc8, 0xfb, 0xd6, 0x19, 0x63, 0xf7,
	0x01, 0xc6, 0x3a, 0x43, 0xd9, 0x21, 0xe3, 0x75, 0x99, 0x9e, 0xa7, 0x49, 0x36, 0x44, 0xe1, 0x12,
	0x2b, 0x6c, 0x48, 0x8e, 0xf3, 0xbd, 0x46, 0xaf, 0x61, 0xa0, 0xa9, 0x5a, 0x90, 0xfe, 0xec, 0xf2,
	0x18, 0xc5, 0x0d, 0xad, 0xcd, 0xdf, 0x9d, 0xdb, 0x50, 0xfc, 0x06, 0xa6, 0x27, 0x15, 0x94, 0xc0,
	0x54, 0x1e, 0xac, 0xde, 0x2a, 0xa7, 0x76, 0x5c, 0xc3, 0xd8, 0x5c, 0xd1, 0x07, 0x5a, 0x11, 0xa9,
	0xa4, 0x3e, 0x0f, 0xca, 0xd6, 0xdc, 0x4a, 0xf3, 0x68, 0x92, 0xf7, 0x1c, 0xf4, 0x16, 0x9e, 0x77,
	0x9f, 0xe8, 0x5e, 0x04, 0xae, 0x99, 0xf1, 0xd5, 0xf1, 0x8c, 0xb6, 0x98, 0x9f, 0x64, 0x63, 0x0c,
	0x93, 0xa3, 0xc0, 0x23, 0x78, 0xa7, 0xf7, 0x2c, 0x6c, 0x9f, 0xe0, 0x9c, 0x45, 0xd7, 0xab, 0xa3,
	0xf1, 0x11, 0x5e, 0x9e, 0xd5, 0x1e, 0xcf, 0x43, 0x1f, 0x71, 0x69, 0x77, 0x77, 0xcd, 0xee, 0x9d,
	0x7a, 0xff, 0xe2, 0xf7, 0x2e, 0x74, 0xfe, 0xec, 0x42, 0xe7, 0xef, 0x2e, 0x74, 0x7e, 0xfc, 0x0b,
	0x9f, 0x14, 0x43, 0x73, 0x61, 0xf3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x48, 0x32, 0xee, 0x47,
	0xf1, 0x03, 0x00, 0x00,
}
