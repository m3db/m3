// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/pagetoken/pagetoken.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package pagetoken

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PageToken struct {
	ActiveSeriesPhase  *PageToken_ActiveSeriesPhase  `protobuf:"bytes,1,opt,name=active_series_phase,json=activeSeriesPhase,proto3" json:"active_series_phase,omitempty"`
	FlushedSeriesPhase *PageToken_FlushedSeriesPhase `protobuf:"bytes,2,opt,name=flushed_series_phase,json=flushedSeriesPhase,proto3" json:"flushed_series_phase,omitempty"`
}

func (m *PageToken) Reset()         { *m = PageToken{} }
func (m *PageToken) String() string { return proto.CompactTextString(m) }
func (*PageToken) ProtoMessage()    {}
func (*PageToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf6e87727ef4431, []int{0}
}
func (m *PageToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageToken.Merge(m, src)
}
func (m *PageToken) XXX_Size() int {
	return m.Size()
}
func (m *PageToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PageToken.DiscardUnknown(m)
}

var xxx_messageInfo_PageToken proto.InternalMessageInfo

func (m *PageToken) GetActiveSeriesPhase() *PageToken_ActiveSeriesPhase {
	if m != nil {
		return m.ActiveSeriesPhase
	}
	return nil
}

func (m *PageToken) GetFlushedSeriesPhase() *PageToken_FlushedSeriesPhase {
	if m != nil {
		return m.FlushedSeriesPhase
	}
	return nil
}

type PageToken_ActiveSeriesPhase struct {
	IndexCursor int64 `protobuf:"varint,1,opt,name=indexCursor,proto3" json:"indexCursor,omitempty"`
}

func (m *PageToken_ActiveSeriesPhase) Reset()         { *m = PageToken_ActiveSeriesPhase{} }
func (m *PageToken_ActiveSeriesPhase) String() string { return proto.CompactTextString(m) }
func (*PageToken_ActiveSeriesPhase) ProtoMessage()    {}
func (*PageToken_ActiveSeriesPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf6e87727ef4431, []int{0, 0}
}
func (m *PageToken_ActiveSeriesPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageToken_ActiveSeriesPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageToken_ActiveSeriesPhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageToken_ActiveSeriesPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageToken_ActiveSeriesPhase.Merge(m, src)
}
func (m *PageToken_ActiveSeriesPhase) XXX_Size() int {
	return m.Size()
}
func (m *PageToken_ActiveSeriesPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_PageToken_ActiveSeriesPhase.DiscardUnknown(m)
}

var xxx_messageInfo_PageToken_ActiveSeriesPhase proto.InternalMessageInfo

func (m *PageToken_ActiveSeriesPhase) GetIndexCursor() int64 {
	if m != nil {
		return m.IndexCursor
	}
	return 0
}

type PageToken_FlushedSeriesPhase struct {
	CurrBlockStartUnixNanos int64 `protobuf:"varint,1,opt,name=currBlockStartUnixNanos,proto3" json:"currBlockStartUnixNanos,omitempty"`
	CurrBlockEntryIdx       int64 `protobuf:"varint,2,opt,name=currBlockEntryIdx,proto3" json:"currBlockEntryIdx,omitempty"`
	Volume                  int64 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *PageToken_FlushedSeriesPhase) Reset()         { *m = PageToken_FlushedSeriesPhase{} }
func (m *PageToken_FlushedSeriesPhase) String() string { return proto.CompactTextString(m) }
func (*PageToken_FlushedSeriesPhase) ProtoMessage()    {}
func (*PageToken_FlushedSeriesPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf6e87727ef4431, []int{0, 1}
}
func (m *PageToken_FlushedSeriesPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageToken_FlushedSeriesPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageToken_FlushedSeriesPhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageToken_FlushedSeriesPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageToken_FlushedSeriesPhase.Merge(m, src)
}
func (m *PageToken_FlushedSeriesPhase) XXX_Size() int {
	return m.Size()
}
func (m *PageToken_FlushedSeriesPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_PageToken_FlushedSeriesPhase.DiscardUnknown(m)
}

var xxx_messageInfo_PageToken_FlushedSeriesPhase proto.InternalMessageInfo

func (m *PageToken_FlushedSeriesPhase) GetCurrBlockStartUnixNanos() int64 {
	if m != nil {
		return m.CurrBlockStartUnixNanos
	}
	return 0
}

func (m *PageToken_FlushedSeriesPhase) GetCurrBlockEntryIdx() int64 {
	if m != nil {
		return m.CurrBlockEntryIdx
	}
	return 0
}

func (m *PageToken_FlushedSeriesPhase) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto.RegisterType((*PageToken)(nil), "pagetoken.PageToken")
	proto.RegisterType((*PageToken_ActiveSeriesPhase)(nil), "pagetoken.PageToken.ActiveSeriesPhase")
	proto.RegisterType((*PageToken_FlushedSeriesPhase)(nil), "pagetoken.PageToken.FlushedSeriesPhase")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/pagetoken/pagetoken.proto", fileDescriptor_cdf6e87727ef4431)
}

var fileDescriptor_cdf6e87727ef4431 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4b, 0x3b, 0x31,
	0x18, 0xc6, 0x9b, 0xff, 0x41, 0xa1, 0xe9, 0xd4, 0xfc, 0x45, 0x4b, 0x87, 0x50, 0x1c, 0xd4, 0x41,
	0x2e, 0x60, 0x11, 0x5c, 0xad, 0xa8, 0xb8, 0x48, 0x69, 0x55, 0x70, 0x2a, 0xb9, 0xcb, 0xdb, 0xeb,
	0xd1, 0x5e, 0x52, 0x92, 0x5c, 0xa9, 0xdf, 0xc1, 0xc1, 0xc1, 0x0f, 0xe5, 0xd8, 0xd1, 0x51, 0xee,
	0xbe, 0x88, 0x34, 0x96, 0x6b, 0xf5, 0x74, 0xcb, 0xfb, 0x3c, 0xcf, 0xfb, 0xcb, 0x13, 0x82, 0xaf,
	0xa3, 0xd8, 0x8e, 0xd3, 0xc0, 0x0f, 0x55, 0xc2, 0x92, 0x8e, 0x08, 0x58, 0xd2, 0x61, 0x46, 0x87,
	0x4c, 0x04, 0x52, 0x09, 0x60, 0x11, 0x48, 0xd0, 0xdc, 0x82, 0x60, 0x33, 0xad, 0xac, 0x62, 0x33,
	0x1e, 0x81, 0x55, 0x13, 0x90, 0x9b, 0x93, 0xef, 0x1c, 0x52, 0x2b, 0x84, 0xfd, 0x67, 0x0f, 0xd7,
	0x7a, 0x3c, 0x82, 0xbb, 0xd5, 0x44, 0x1e, 0xf0, 0x7f, 0x1e, 0xda, 0x78, 0x0e, 0x43, 0x03, 0x3a,
	0x06, 0x33, 0x9c, 0x8d, 0xb9, 0x81, 0x26, 0x6a, 0xa3, 0xa3, 0xfa, 0xc9, 0x81, 0xbf, 0xe1, 0x14,
	0x2b, 0xfe, 0xb9, 0xcb, 0x0f, 0x5c, 0xbc, 0xb7, 0x4a, 0xf7, 0x1b, 0xfc, 0xa7, 0x44, 0x1e, 0xf1,
	0xce, 0x68, 0x9a, 0x9a, 0x31, 0x88, 0xef, 0xe0, 0x7f, 0x0e, 0x7c, 0xf8, 0x2b, 0xf8, 0xea, 0x6b,
	0x61, 0x9b, 0x4c, 0x46, 0x25, 0xad, 0x75, 0x8a, 0x1b, 0xa5, 0x0a, 0xa4, 0x8d, 0xeb, 0xb1, 0x14,
	0xb0, 0xb8, 0x48, 0xb5, 0x51, 0xda, 0xf5, 0xf7, 0xfa, 0xdb, 0x52, 0xeb, 0x15, 0x61, 0x52, 0xbe,
	0x81, 0x9c, 0xe1, 0xbd, 0x30, 0xd5, 0xba, 0x3b, 0x55, 0xe1, 0x64, 0x60, 0xb9, 0xb6, 0xf7, 0x32,
	0x5e, 0xdc, 0x72, 0xa9, 0xcc, 0x1a, 0xf2, 0x97, 0x4d, 0x8e, 0x71, 0xa3, 0xb0, 0x2e, 0xa5, 0xd5,
	0x4f, 0x37, 0x62, 0xe1, 0xde, 0xe7, 0xf5, 0xcb, 0x06, 0xd9, 0xc5, 0xd5, 0xb9, 0x9a, 0xa6, 0x09,
	0x34, 0x3d, 0x17, 0x59, 0x4f, 0xdd, 0xe6, 0x5b, 0x46, 0xd1, 0x32, 0xa3, 0xe8, 0x23, 0xa3, 0xe8,
	0x25, 0xa7, 0x95, 0x65, 0x4e, 0x2b, 0xef, 0x39, 0xad, 0x04, 0x55, 0xf7, 0x75, 0x9d, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x73, 0xb0, 0x1d, 0x23, 0x05, 0x02, 0x00, 0x00,
}

func (m *PageToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlushedSeriesPhase != nil {
		{
			size, err := m.FlushedSeriesPhase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPagetoken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ActiveSeriesPhase != nil {
		{
			size, err := m.ActiveSeriesPhase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPagetoken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageToken_ActiveSeriesPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageToken_ActiveSeriesPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageToken_ActiveSeriesPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexCursor != 0 {
		i = encodeVarintPagetoken(dAtA, i, uint64(m.IndexCursor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PageToken_FlushedSeriesPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageToken_FlushedSeriesPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageToken_FlushedSeriesPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i = encodeVarintPagetoken(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrBlockEntryIdx != 0 {
		i = encodeVarintPagetoken(dAtA, i, uint64(m.CurrBlockEntryIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrBlockStartUnixNanos != 0 {
		i = encodeVarintPagetoken(dAtA, i, uint64(m.CurrBlockStartUnixNanos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPagetoken(dAtA []byte, offset int, v uint64) int {
	offset -= sovPagetoken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PageToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveSeriesPhase != nil {
		l = m.ActiveSeriesPhase.Size()
		n += 1 + l + sovPagetoken(uint64(l))
	}
	if m.FlushedSeriesPhase != nil {
		l = m.FlushedSeriesPhase.Size()
		n += 1 + l + sovPagetoken(uint64(l))
	}
	return n
}

func (m *PageToken_ActiveSeriesPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IndexCursor != 0 {
		n += 1 + sovPagetoken(uint64(m.IndexCursor))
	}
	return n
}

func (m *PageToken_FlushedSeriesPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrBlockStartUnixNanos != 0 {
		n += 1 + sovPagetoken(uint64(m.CurrBlockStartUnixNanos))
	}
	if m.CurrBlockEntryIdx != 0 {
		n += 1 + sovPagetoken(uint64(m.CurrBlockEntryIdx))
	}
	if m.Volume != 0 {
		n += 1 + sovPagetoken(uint64(m.Volume))
	}
	return n
}

func sovPagetoken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPagetoken(x uint64) (n int) {
	return sovPagetoken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PageToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPagetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeriesPhase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPagetoken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPagetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveSeriesPhase == nil {
				m.ActiveSeriesPhase = &PageToken_ActiveSeriesPhase{}
			}
			if err := m.ActiveSeriesPhase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushedSeriesPhase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPagetoken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPagetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushedSeriesPhase == nil {
				m.FlushedSeriesPhase = &PageToken_FlushedSeriesPhase{}
			}
			if err := m.FlushedSeriesPhase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPagetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPagetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageToken_ActiveSeriesPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPagetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveSeriesPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveSeriesPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexCursor", wireType)
			}
			m.IndexCursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexCursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPagetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPagetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageToken_FlushedSeriesPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPagetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushedSeriesPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushedSeriesPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrBlockStartUnixNanos", wireType)
			}
			m.CurrBlockStartUnixNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrBlockStartUnixNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrBlockEntryIdx", wireType)
			}
			m.CurrBlockEntryIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrBlockEntryIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPagetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPagetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPagetoken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPagetoken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPagetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPagetoken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPagetoken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPagetoken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPagetoken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPagetoken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPagetoken = fmt.Errorf("proto: unexpected end of group")
)
