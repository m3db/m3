// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/dbnode/persist/fs/wide (interfaces: EntryChecksumMismatchChecker,StreamedMismatch)

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package wide is a generated GoMock package.
package wide

import (
	"reflect"

	"github.com/m3db/m3/src/dbnode/x/xio"

	"github.com/golang/mock/gomock"
)

// MockEntryChecksumMismatchChecker is a mock of EntryChecksumMismatchChecker interface
type MockEntryChecksumMismatchChecker struct {
	ctrl     *gomock.Controller
	recorder *MockEntryChecksumMismatchCheckerMockRecorder
}

// MockEntryChecksumMismatchCheckerMockRecorder is the mock recorder for MockEntryChecksumMismatchChecker
type MockEntryChecksumMismatchCheckerMockRecorder struct {
	mock *MockEntryChecksumMismatchChecker
}

// NewMockEntryChecksumMismatchChecker creates a new mock instance
func NewMockEntryChecksumMismatchChecker(ctrl *gomock.Controller) *MockEntryChecksumMismatchChecker {
	mock := &MockEntryChecksumMismatchChecker{ctrl: ctrl}
	mock.recorder = &MockEntryChecksumMismatchCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntryChecksumMismatchChecker) EXPECT() *MockEntryChecksumMismatchCheckerMockRecorder {
	return m.recorder
}

// ComputeMismatchesForEntry mocks base method
func (m *MockEntryChecksumMismatchChecker) ComputeMismatchesForEntry(arg0 xio.IndexChecksum) ([]ReadMismatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeMismatchesForEntry", arg0)
	ret0, _ := ret[0].([]ReadMismatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeMismatchesForEntry indicates an expected call of ComputeMismatchesForEntry
func (mr *MockEntryChecksumMismatchCheckerMockRecorder) ComputeMismatchesForEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeMismatchesForEntry", reflect.TypeOf((*MockEntryChecksumMismatchChecker)(nil).ComputeMismatchesForEntry), arg0)
}

// Drain mocks base method
func (m *MockEntryChecksumMismatchChecker) Drain() []ReadMismatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain")
	ret0, _ := ret[0].([]ReadMismatch)
	return ret0
}

// Drain indicates an expected call of Drain
func (mr *MockEntryChecksumMismatchCheckerMockRecorder) Drain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockEntryChecksumMismatchChecker)(nil).Drain))
}

// Lock mocks base method
func (m *MockEntryChecksumMismatchChecker) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock
func (mr *MockEntryChecksumMismatchCheckerMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockEntryChecksumMismatchChecker)(nil).Lock))
}

// Unlock mocks base method
func (m *MockEntryChecksumMismatchChecker) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock
func (mr *MockEntryChecksumMismatchCheckerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockEntryChecksumMismatchChecker)(nil).Unlock))
}

// MockStreamedMismatch is a mock of StreamedMismatch interface
type MockStreamedMismatch struct {
	ctrl     *gomock.Controller
	recorder *MockStreamedMismatchMockRecorder
}

// MockStreamedMismatchMockRecorder is the mock recorder for MockStreamedMismatch
type MockStreamedMismatchMockRecorder struct {
	mock *MockStreamedMismatch
}

// NewMockStreamedMismatch creates a new mock instance
func NewMockStreamedMismatch(ctrl *gomock.Controller) *MockStreamedMismatch {
	mock := &MockStreamedMismatch{ctrl: ctrl}
	mock.recorder = &MockStreamedMismatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamedMismatch) EXPECT() *MockStreamedMismatchMockRecorder {
	return m.recorder
}

// RetrieveMismatch mocks base method
func (m *MockStreamedMismatch) RetrieveMismatch() (ReadMismatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveMismatch")
	ret0, _ := ret[0].(ReadMismatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMismatch indicates an expected call of RetrieveMismatch
func (mr *MockStreamedMismatchMockRecorder) RetrieveMismatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMismatch", reflect.TypeOf((*MockStreamedMismatch)(nil).RetrieveMismatch))
}
