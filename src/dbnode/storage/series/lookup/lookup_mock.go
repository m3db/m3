// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/dbnode/storage/series/lookup (interfaces: OnReleaseReadWriteRef)

// Package lookup is a generated GoMock package.
package lookup

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockOnReleaseReadWriteRef is a mock of OnReleaseReadWriteRef interface
type MockOnReleaseReadWriteRef struct {
	ctrl     *gomock.Controller
	recorder *MockOnReleaseReadWriteRefMockRecorder
}

// MockOnReleaseReadWriteRefMockRecorder is the mock recorder for MockOnReleaseReadWriteRef
type MockOnReleaseReadWriteRefMockRecorder struct {
	mock *MockOnReleaseReadWriteRef
}

// NewMockOnReleaseReadWriteRef creates a new mock instance
func NewMockOnReleaseReadWriteRef(ctrl *gomock.Controller) *MockOnReleaseReadWriteRef {
	mock := &MockOnReleaseReadWriteRef{ctrl: ctrl}
	mock.recorder = &MockOnReleaseReadWriteRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOnReleaseReadWriteRef) EXPECT() *MockOnReleaseReadWriteRefMockRecorder {
	return m.recorder
}

// OnReleaseReadWriteRef mocks base method
func (m *MockOnReleaseReadWriteRef) OnReleaseReadWriteRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReleaseReadWriteRef")
}

// OnReleaseReadWriteRef indicates an expected call of OnReleaseReadWriteRef
func (mr *MockOnReleaseReadWriteRefMockRecorder) OnReleaseReadWriteRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReleaseReadWriteRef", reflect.TypeOf((*MockOnReleaseReadWriteRef)(nil).OnReleaseReadWriteRef))
}
