// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package storage

import (
	"bytes"

	"github.com/cespare/xxhash/v2"
)

// newDirtySeriesMap returns a new byte keyed map.
func newDirtySeriesMap() *dirtySeriesMap {
	return _dirtySeriesMapAlloc(_dirtySeriesMapOptions{
		hash: func(k idAndBlockStart) dirtySeriesMapHash {
			hash := uint64(7)
			hash = 31*hash + xxhash.Sum64(k.id)
			hash = 31*hash + uint64(k.blockStart)
			return dirtySeriesMapHash(hash)
		},
		equals: func(x, y idAndBlockStart) bool {
			// Note: Do cheap check (int comparison) first.
			return x.blockStart == y.blockStart && bytes.Equal(x.id, y.id)
		},
		copy: func(k idAndBlockStart) idAndBlockStart {
			return idAndBlockStart{
				id:         append(make([]byte, 0, len(k.id)), k.id...),
				blockStart: k.blockStart,
			}
		},
	})
}
