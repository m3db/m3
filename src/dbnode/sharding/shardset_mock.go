// Code generated by MockGen. DO NOT EDIT.
// Source: ../../sharding/types.go

// Copyright (c) 2025 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package sharding is a generated GoMock package.
package sharding

import (
	"reflect"

	"github.com/m3db/m3/src/cluster/shard"
	"github.com/m3db/m3/src/x/ident"

	"github.com/golang/mock/gomock"
)

// MockShardSet is a mock of ShardSet interface.
type MockShardSet struct {
	ctrl     *gomock.Controller
	recorder *MockShardSetMockRecorder
}

// MockShardSetMockRecorder is the mock recorder for MockShardSet.
type MockShardSetMockRecorder struct {
	mock *MockShardSet
}

// NewMockShardSet creates a new mock instance.
func NewMockShardSet(ctrl *gomock.Controller) *MockShardSet {
	mock := &MockShardSet{ctrl: ctrl}
	mock.recorder = &MockShardSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardSet) EXPECT() *MockShardSetMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockShardSet) All() []shard.Shard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]shard.Shard)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockShardSetMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockShardSet)(nil).All))
}

// AllIDs mocks base method.
func (m *MockShardSet) AllIDs() []uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllIDs")
	ret0, _ := ret[0].([]uint32)
	return ret0
}

// AllIDs indicates an expected call of AllIDs.
func (mr *MockShardSetMockRecorder) AllIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllIDs", reflect.TypeOf((*MockShardSet)(nil).AllIDs))
}

// HashFn mocks base method.
func (m *MockShardSet) HashFn() HashFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashFn")
	ret0, _ := ret[0].(HashFn)
	return ret0
}

// HashFn indicates an expected call of HashFn.
func (mr *MockShardSetMockRecorder) HashFn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashFn", reflect.TypeOf((*MockShardSet)(nil).HashFn))
}

// Lookup mocks base method.
func (m *MockShardSet) Lookup(id ident.ID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", id)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Lookup indicates an expected call of Lookup.
func (mr *MockShardSetMockRecorder) Lookup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockShardSet)(nil).Lookup), id)
}

// LookupShard mocks base method.
func (m *MockShardSet) LookupShard(id uint32) (shard.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupShard", id)
	ret0, _ := ret[0].(shard.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupShard indicates an expected call of LookupShard.
func (mr *MockShardSetMockRecorder) LookupShard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupShard", reflect.TypeOf((*MockShardSet)(nil).LookupShard), id)
}

// LookupStateByID mocks base method.
func (m *MockShardSet) LookupStateByID(shardID uint32) (shard.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupStateByID", shardID)
	ret0, _ := ret[0].(shard.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupStateByID indicates an expected call of LookupStateByID.
func (mr *MockShardSetMockRecorder) LookupStateByID(shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupStateByID", reflect.TypeOf((*MockShardSet)(nil).LookupStateByID), shardID)
}

// Max mocks base method.
func (m *MockShardSet) Max() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Max")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Max indicates an expected call of Max.
func (mr *MockShardSetMockRecorder) Max() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Max", reflect.TypeOf((*MockShardSet)(nil).Max))
}

// Min mocks base method.
func (m *MockShardSet) Min() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Min")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Min indicates an expected call of Min.
func (mr *MockShardSetMockRecorder) Min() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Min", reflect.TypeOf((*MockShardSet)(nil).Min))
}
