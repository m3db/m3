// Code generated by MockGen. DO NOT EDIT.
// Source: ../../x/xpool/types.go

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package xpool is a generated GoMock package.
package xpool

import (
	"reflect"

	"github.com/m3db/m3/src/x/checked"

	"github.com/golang/mock/gomock"
)

// MockCheckedBytesWrapperPool is a mock of CheckedBytesWrapperPool interface.
type MockCheckedBytesWrapperPool struct {
	ctrl     *gomock.Controller
	recorder *MockCheckedBytesWrapperPoolMockRecorder
}

// MockCheckedBytesWrapperPoolMockRecorder is the mock recorder for MockCheckedBytesWrapperPool.
type MockCheckedBytesWrapperPoolMockRecorder struct {
	mock *MockCheckedBytesWrapperPool
}

// NewMockCheckedBytesWrapperPool creates a new mock instance.
func NewMockCheckedBytesWrapperPool(ctrl *gomock.Controller) *MockCheckedBytesWrapperPool {
	mock := &MockCheckedBytesWrapperPool{ctrl: ctrl}
	mock.recorder = &MockCheckedBytesWrapperPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckedBytesWrapperPool) EXPECT() *MockCheckedBytesWrapperPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCheckedBytesWrapperPool) Get(arg0 []byte) checked.Bytes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(checked.Bytes)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCheckedBytesWrapperPoolMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCheckedBytesWrapperPool)(nil).Get), arg0)
}

// Init mocks base method.
func (m *MockCheckedBytesWrapperPool) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockCheckedBytesWrapperPoolMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCheckedBytesWrapperPool)(nil).Init))
}
