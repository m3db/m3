// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/dbnode/x/xio (interfaces: ReaderSliceOfSlicesIterator,SegmentReader,SegmentReaderPool)

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package xio is a generated GoMock package.
package xio

import (
	"reflect"
	"time"

	"github.com/m3db/m3/src/dbnode/ts"
	"github.com/m3db/m3/src/x/pool"
	time0 "github.com/m3db/m3/src/x/time"

	"github.com/golang/mock/gomock"
)

// MockReaderSliceOfSlicesIterator is a mock of ReaderSliceOfSlicesIterator interface.
type MockReaderSliceOfSlicesIterator struct {
	ctrl     *gomock.Controller
	recorder *MockReaderSliceOfSlicesIteratorMockRecorder
}

// MockReaderSliceOfSlicesIteratorMockRecorder is the mock recorder for MockReaderSliceOfSlicesIterator.
type MockReaderSliceOfSlicesIteratorMockRecorder struct {
	mock *MockReaderSliceOfSlicesIterator
}

// NewMockReaderSliceOfSlicesIterator creates a new mock instance.
func NewMockReaderSliceOfSlicesIterator(ctrl *gomock.Controller) *MockReaderSliceOfSlicesIterator {
	mock := &MockReaderSliceOfSlicesIterator{ctrl: ctrl}
	mock.recorder = &MockReaderSliceOfSlicesIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderSliceOfSlicesIterator) EXPECT() *MockReaderSliceOfSlicesIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReaderSliceOfSlicesIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).Close))
}

// CurrentReaderAt mocks base method.
func (m *MockReaderSliceOfSlicesIterator) CurrentReaderAt(arg0 int) BlockReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentReaderAt", arg0)
	ret0, _ := ret[0].(BlockReader)
	return ret0
}

// CurrentReaderAt indicates an expected call of CurrentReaderAt.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) CurrentReaderAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentReaderAt", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).CurrentReaderAt), arg0)
}

// CurrentReaders mocks base method.
func (m *MockReaderSliceOfSlicesIterator) CurrentReaders() (int, time0.UnixNano, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentReaders")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(time0.UnixNano)
	ret2, _ := ret[2].(time.Duration)
	return ret0, ret1, ret2
}

// CurrentReaders indicates an expected call of CurrentReaders.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) CurrentReaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentReaders", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).CurrentReaders))
}

// Index mocks base method.
func (m *MockReaderSliceOfSlicesIterator) Index() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(int)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).Index))
}

// Next mocks base method.
func (m *MockReaderSliceOfSlicesIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).Next))
}

// RewindToIndex mocks base method.
func (m *MockReaderSliceOfSlicesIterator) RewindToIndex(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindToIndex", arg0)
}

// RewindToIndex indicates an expected call of RewindToIndex.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) RewindToIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindToIndex", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).RewindToIndex), arg0)
}

// Size mocks base method.
func (m *MockReaderSliceOfSlicesIterator) Size() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockReaderSliceOfSlicesIteratorMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockReaderSliceOfSlicesIterator)(nil).Size))
}

// MockSegmentReader is a mock of SegmentReader interface.
type MockSegmentReader struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentReaderMockRecorder
}

// MockSegmentReaderMockRecorder is the mock recorder for MockSegmentReader.
type MockSegmentReaderMockRecorder struct {
	mock *MockSegmentReader
}

// NewMockSegmentReader creates a new mock instance.
func NewMockSegmentReader(ctrl *gomock.Controller) *MockSegmentReader {
	mock := &MockSegmentReader{ctrl: ctrl}
	mock.recorder = &MockSegmentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentReader) EXPECT() *MockSegmentReaderMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockSegmentReader) Clone(arg0 pool.CheckedBytesPool) (SegmentReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(SegmentReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockSegmentReaderMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSegmentReader)(nil).Clone), arg0)
}

// Finalize mocks base method.
func (m *MockSegmentReader) Finalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize.
func (mr *MockSegmentReaderMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockSegmentReader)(nil).Finalize))
}

// Peek64 mocks base method.
func (m *MockSegmentReader) Peek64() (uint64, byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Peek64 indicates an expected call of Peek64.
func (mr *MockSegmentReaderMockRecorder) Peek64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek64", reflect.TypeOf((*MockSegmentReader)(nil).Peek64))
}

// Read64 mocks base method.
func (m *MockSegmentReader) Read64() (uint64, byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read64 indicates an expected call of Read64.
func (mr *MockSegmentReaderMockRecorder) Read64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read64", reflect.TypeOf((*MockSegmentReader)(nil).Read64))
}

// Reset mocks base method.
func (m *MockSegmentReader) Reset(arg0 ts.Segment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset.
func (mr *MockSegmentReaderMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSegmentReader)(nil).Reset), arg0)
}

// Segment mocks base method.
func (m *MockSegmentReader) Segment() (ts.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Segment")
	ret0, _ := ret[0].(ts.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segment indicates an expected call of Segment.
func (mr *MockSegmentReaderMockRecorder) Segment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segment", reflect.TypeOf((*MockSegmentReader)(nil).Segment))
}

// MockSegmentReaderPool is a mock of SegmentReaderPool interface.
type MockSegmentReaderPool struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentReaderPoolMockRecorder
}

// MockSegmentReaderPoolMockRecorder is the mock recorder for MockSegmentReaderPool.
type MockSegmentReaderPoolMockRecorder struct {
	mock *MockSegmentReaderPool
}

// NewMockSegmentReaderPool creates a new mock instance.
func NewMockSegmentReaderPool(ctrl *gomock.Controller) *MockSegmentReaderPool {
	mock := &MockSegmentReaderPool{ctrl: ctrl}
	mock.recorder = &MockSegmentReaderPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentReaderPool) EXPECT() *MockSegmentReaderPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSegmentReaderPool) Get() SegmentReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(SegmentReader)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSegmentReaderPoolMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentReaderPool)(nil).Get))
}

// Init mocks base method.
func (m *MockSegmentReaderPool) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockSegmentReaderPoolMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSegmentReaderPool)(nil).Init))
}

// Put mocks base method.
func (m *MockSegmentReaderPool) Put(arg0 SegmentReader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put.
func (mr *MockSegmentReaderPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSegmentReaderPool)(nil).Put), arg0)
}
