// Code generated by MockGen. DO NOT EDIT.
// Source: ../../x/m3em/node/types.go

// Copyright (c) 2025 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package m3db is a generated GoMock package.
package m3db

import (
	"reflect"

	"github.com/m3db/m3/src/cluster/generated/proto/placementpb"
	"github.com/m3db/m3/src/cluster/placement"
	"github.com/m3db/m3/src/cluster/shard"
	"github.com/m3db/m3/src/m3em/build"
	"github.com/m3db/m3/src/m3em/node"
	"github.com/m3db/m3/src/x/instrument"

	"github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Bootstrapped mocks base method.
func (m *MockNode) Bootstrapped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bootstrapped indicates an expected call of Bootstrapped.
func (mr *MockNodeMockRecorder) Bootstrapped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrapped", reflect.TypeOf((*MockNode)(nil).Bootstrapped))
}

// Clone mocks base method.
func (m *MockNode) Clone() placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockNodeMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockNode)(nil).Clone))
}

// Close mocks base method.
func (m *MockNode) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNode)(nil).Close))
}

// DeregisterListener mocks base method.
func (m *MockNode) DeregisterListener(arg0 node.ListenerID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeregisterListener", arg0)
}

// DeregisterListener indicates an expected call of DeregisterListener.
func (mr *MockNodeMockRecorder) DeregisterListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterListener", reflect.TypeOf((*MockNode)(nil).DeregisterListener), arg0)
}

// Endpoint mocks base method.
func (m *MockNode) Endpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockNodeMockRecorder) Endpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockNode)(nil).Endpoint))
}

// GetRemoteOutput mocks base method.
func (m *MockNode) GetRemoteOutput(t node.RemoteOutputType, localDest string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteOutput", t, localDest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteOutput indicates an expected call of GetRemoteOutput.
func (mr *MockNodeMockRecorder) GetRemoteOutput(t, localDest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteOutput", reflect.TypeOf((*MockNode)(nil).GetRemoteOutput), t, localDest)
}

// Health mocks base method.
func (m *MockNode) Health() (NodeHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(NodeHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockNodeMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockNode)(nil).Health))
}

// Hostname mocks base method.
func (m *MockNode) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockNodeMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockNode)(nil).Hostname))
}

// ID mocks base method.
func (m *MockNode) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNodeMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNode)(nil).ID))
}

// IsAvailable mocks base method.
func (m *MockNode) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockNodeMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockNode)(nil).IsAvailable))
}

// IsInitializing mocks base method.
func (m *MockNode) IsInitializing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitializing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitializing indicates an expected call of IsInitializing.
func (mr *MockNodeMockRecorder) IsInitializing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitializing", reflect.TypeOf((*MockNode)(nil).IsInitializing))
}

// IsLeaving mocks base method.
func (m *MockNode) IsLeaving() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeaving")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLeaving indicates an expected call of IsLeaving.
func (mr *MockNodeMockRecorder) IsLeaving() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeaving", reflect.TypeOf((*MockNode)(nil).IsLeaving))
}

// IsolationGroup mocks base method.
func (m *MockNode) IsolationGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsolationGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// IsolationGroup indicates an expected call of IsolationGroup.
func (mr *MockNodeMockRecorder) IsolationGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsolationGroup", reflect.TypeOf((*MockNode)(nil).IsolationGroup))
}

// Metadata mocks base method.
func (m *MockNode) Metadata() placement.InstanceMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(placement.InstanceMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockNodeMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockNode)(nil).Metadata))
}

// Port mocks base method.
func (m *MockNode) Port() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockNodeMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockNode)(nil).Port))
}

// Proto mocks base method.
func (m *MockNode) Proto() (*placementpb.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(*placementpb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto.
func (mr *MockNodeMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockNode)(nil).Proto))
}

// RegisterListener mocks base method.
func (m *MockNode) RegisterListener(arg0 node.Listener) node.ListenerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterListener", arg0)
	ret0, _ := ret[0].(node.ListenerID)
	return ret0
}

// RegisterListener indicates an expected call of RegisterListener.
func (mr *MockNodeMockRecorder) RegisterListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockNode)(nil).RegisterListener), arg0)
}

// SetEndpoint mocks base method.
func (m *MockNode) SetEndpoint(ip string) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEndpoint", ip)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetEndpoint indicates an expected call of SetEndpoint.
func (mr *MockNodeMockRecorder) SetEndpoint(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpoint", reflect.TypeOf((*MockNode)(nil).SetEndpoint), ip)
}

// SetHostname mocks base method.
func (m *MockNode) SetHostname(value string) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostname", value)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetHostname indicates an expected call of SetHostname.
func (mr *MockNodeMockRecorder) SetHostname(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostname", reflect.TypeOf((*MockNode)(nil).SetHostname), value)
}

// SetID mocks base method.
func (m *MockNode) SetID(id string) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetID", id)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetID indicates an expected call of SetID.
func (mr *MockNodeMockRecorder) SetID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockNode)(nil).SetID), id)
}

// SetIsolationGroup mocks base method.
func (m *MockNode) SetIsolationGroup(r string) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsolationGroup", r)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetIsolationGroup indicates an expected call of SetIsolationGroup.
func (mr *MockNodeMockRecorder) SetIsolationGroup(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsolationGroup", reflect.TypeOf((*MockNode)(nil).SetIsolationGroup), r)
}

// SetMetadata mocks base method.
func (m *MockNode) SetMetadata(value placement.InstanceMetadata) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetadata", value)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetMetadata indicates an expected call of SetMetadata.
func (mr *MockNodeMockRecorder) SetMetadata(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockNode)(nil).SetMetadata), value)
}

// SetPort mocks base method.
func (m *MockNode) SetPort(value uint32) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPort", value)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetPort indicates an expected call of SetPort.
func (mr *MockNodeMockRecorder) SetPort(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPort", reflect.TypeOf((*MockNode)(nil).SetPort), value)
}

// SetShardSetID mocks base method.
func (m *MockNode) SetShardSetID(value uint32) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShardSetID", value)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetShardSetID indicates an expected call of SetShardSetID.
func (mr *MockNodeMockRecorder) SetShardSetID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShardSetID", reflect.TypeOf((*MockNode)(nil).SetShardSetID), value)
}

// SetShards mocks base method.
func (m *MockNode) SetShards(s shard.Shards) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShards", s)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetShards indicates an expected call of SetShards.
func (mr *MockNodeMockRecorder) SetShards(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShards", reflect.TypeOf((*MockNode)(nil).SetShards), s)
}

// SetSubClusterID mocks base method.
func (m *MockNode) SetSubClusterID(value uint32) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubClusterID", value)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetSubClusterID indicates an expected call of SetSubClusterID.
func (mr *MockNodeMockRecorder) SetSubClusterID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubClusterID", reflect.TypeOf((*MockNode)(nil).SetSubClusterID), value)
}

// SetWeight mocks base method.
func (m *MockNode) SetWeight(w uint32) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWeight", w)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetWeight indicates an expected call of SetWeight.
func (mr *MockNodeMockRecorder) SetWeight(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWeight", reflect.TypeOf((*MockNode)(nil).SetWeight), w)
}

// SetZone mocks base method.
func (m *MockNode) SetZone(z string) placement.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZone", z)
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// SetZone indicates an expected call of SetZone.
func (mr *MockNodeMockRecorder) SetZone(z interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZone", reflect.TypeOf((*MockNode)(nil).SetZone), z)
}

// Setup mocks base method.
func (m *MockNode) Setup(build build.ServiceBuild, config build.ServiceConfiguration, token string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", build, config, token, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockNodeMockRecorder) Setup(build, config, token, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockNode)(nil).Setup), build, config, token, force)
}

// ShardSetID mocks base method.
func (m *MockNode) ShardSetID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardSetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ShardSetID indicates an expected call of ShardSetID.
func (mr *MockNodeMockRecorder) ShardSetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardSetID", reflect.TypeOf((*MockNode)(nil).ShardSetID))
}

// Shards mocks base method.
func (m *MockNode) Shards() shard.Shards {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

// Shards indicates an expected call of Shards.
func (mr *MockNodeMockRecorder) Shards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shards", reflect.TypeOf((*MockNode)(nil).Shards))
}

// Start mocks base method.
func (m *MockNode) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNodeMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start))
}

// Status mocks base method.
func (m *MockNode) Status() node.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(node.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockNodeMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNode)(nil).Status))
}

// Stop mocks base method.
func (m *MockNode) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// String mocks base method.
func (m *MockNode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockNodeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNode)(nil).String))
}

// SubClusterID mocks base method.
func (m *MockNode) SubClusterID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClusterID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// SubClusterID indicates an expected call of SubClusterID.
func (mr *MockNodeMockRecorder) SubClusterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClusterID", reflect.TypeOf((*MockNode)(nil).SubClusterID))
}

// Teardown mocks base method.
func (m *MockNode) Teardown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *MockNodeMockRecorder) Teardown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockNode)(nil).Teardown))
}

// TransferLocalFile mocks base method.
func (m *MockNode) TransferLocalFile(localSrc string, destPaths []string, overwrite bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferLocalFile", localSrc, destPaths, overwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferLocalFile indicates an expected call of TransferLocalFile.
func (mr *MockNodeMockRecorder) TransferLocalFile(localSrc, destPaths, overwrite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLocalFile", reflect.TypeOf((*MockNode)(nil).TransferLocalFile), localSrc, destPaths, overwrite)
}

// Weight mocks base method.
func (m *MockNode) Weight() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *MockNodeMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*MockNode)(nil).Weight))
}

// Zone mocks base method.
func (m *MockNode) Zone() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

// Zone indicates an expected call of Zone.
func (mr *MockNodeMockRecorder) Zone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockNode)(nil).Zone))
}

// MockOptions is a mock of Options interface.
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions.
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance.
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return m.recorder
}

// InstrumentOptions mocks base method.
func (m *MockOptions) InstrumentOptions() instrument.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

// InstrumentOptions indicates an expected call of InstrumentOptions.
func (mr *MockOptionsMockRecorder) InstrumentOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstrumentOptions", reflect.TypeOf((*MockOptions)(nil).InstrumentOptions))
}

// NodeOptions mocks base method.
func (m *MockOptions) NodeOptions() node.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeOptions")
	ret0, _ := ret[0].(node.Options)
	return ret0
}

// NodeOptions indicates an expected call of NodeOptions.
func (mr *MockOptionsMockRecorder) NodeOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeOptions", reflect.TypeOf((*MockOptions)(nil).NodeOptions))
}

// SetInstrumentOptions mocks base method.
func (m *MockOptions) SetInstrumentOptions(arg0 instrument.Options) Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstrumentOptions", arg0)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetInstrumentOptions indicates an expected call of SetInstrumentOptions.
func (mr *MockOptionsMockRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstrumentOptions", reflect.TypeOf((*MockOptions)(nil).SetInstrumentOptions), arg0)
}

// SetNodeOptions mocks base method.
func (m *MockOptions) SetNodeOptions(arg0 node.Options) Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeOptions", arg0)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetNodeOptions indicates an expected call of SetNodeOptions.
func (mr *MockOptionsMockRecorder) SetNodeOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeOptions", reflect.TypeOf((*MockOptions)(nil).SetNodeOptions), arg0)
}

// Validate mocks base method.
func (m *MockOptions) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockOptionsMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockOptions)(nil).Validate))
}
