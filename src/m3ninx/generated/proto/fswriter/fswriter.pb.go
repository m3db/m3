// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/m3ninx/generated/proto/fswriter/fswriter.proto

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package fswriter is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/m3ninx/generated/proto/fswriter/fswriter.proto

	It has these top-level messages:
		Metadata
*/
package fswriter

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SegmentType int32

const (
	SegmentType_FST_SEGMENT_TYPE SegmentType = 0
)

var SegmentType_name = map[int32]string{
	0: "FST_SEGMENT_TYPE",
}
var SegmentType_value = map[string]int32{
	"FST_SEGMENT_TYPE": 0,
}

func (x SegmentType) String() string {
	return proto.EnumName(SegmentType_name, int32(x))
}
func (SegmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptorFswriter, []int{0} }

type FSTSegmentFileType int32

const (
	FSTSegmentFileType_DOCUMENTS_INDEX FSTSegmentFileType = 0
	FSTSegmentFileType_DOCUMENTS_DATA  FSTSegmentFileType = 1
	FSTSegmentFileType_POSTINGS_DATA   FSTSegmentFileType = 2
	FSTSegmentFileType_FST_TERMS       FSTSegmentFileType = 3
	FSTSegmentFileType_FST_FIELDS      FSTSegmentFileType = 4
)

var FSTSegmentFileType_name = map[int32]string{
	0: "DOCUMENTS_INDEX",
	1: "DOCUMENTS_DATA",
	2: "POSTINGS_DATA",
	3: "FST_TERMS",
	4: "FST_FIELDS",
}
var FSTSegmentFileType_value = map[string]int32{
	"DOCUMENTS_INDEX": 0,
	"DOCUMENTS_DATA":  1,
	"POSTINGS_DATA":   2,
	"FST_TERMS":       3,
	"FST_FIELDS":      4,
}

func (x FSTSegmentFileType) String() string {
	return proto.EnumName(FSTSegmentFileType_name, int32(x))
}
func (FSTSegmentFileType) EnumDescriptor() ([]byte, []int) { return fileDescriptorFswriter, []int{1} }

type PostingsFormat int32

const (
	PostingsFormat_PILOSAV1_POSTINGS_FORMAT PostingsFormat = 0
)

var PostingsFormat_name = map[int32]string{
	0: "PILOSAV1_POSTINGS_FORMAT",
}
var PostingsFormat_value = map[string]int32{
	"PILOSAV1_POSTINGS_FORMAT": 0,
}

func (x PostingsFormat) String() string {
	return proto.EnumName(PostingsFormat_name, int32(x))
}
func (PostingsFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptorFswriter, []int{2} }

type Metadata struct {
	PostingsFormat PostingsFormat `protobuf:"varint,1,opt,name=postingsFormat,proto3,enum=fswriter.PostingsFormat" json:"postingsFormat,omitempty"`
	NumDocs        int64          `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorFswriter, []int{0} }

func (m *Metadata) GetPostingsFormat() PostingsFormat {
	if m != nil {
		return m.PostingsFormat
	}
	return PostingsFormat_PILOSAV1_POSTINGS_FORMAT
}

func (m *Metadata) GetNumDocs() int64 {
	if m != nil {
		return m.NumDocs
	}
	return 0
}

func init() {
	proto.RegisterType((*Metadata)(nil), "fswriter.Metadata")
	proto.RegisterEnum("fswriter.SegmentType", SegmentType_name, SegmentType_value)
	proto.RegisterEnum("fswriter.FSTSegmentFileType", FSTSegmentFileType_name, FSTSegmentFileType_value)
	proto.RegisterEnum("fswriter.PostingsFormat", PostingsFormat_name, PostingsFormat_value)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PostingsFormat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFswriter(dAtA, i, uint64(m.PostingsFormat))
	}
	if m.NumDocs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFswriter(dAtA, i, uint64(m.NumDocs))
	}
	return i, nil
}

func encodeVarintFswriter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.PostingsFormat != 0 {
		n += 1 + sovFswriter(uint64(m.PostingsFormat))
	}
	if m.NumDocs != 0 {
		n += 1 + sovFswriter(uint64(m.NumDocs))
	}
	return n
}

func sovFswriter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFswriter(x uint64) (n int) {
	return sovFswriter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswriter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostingsFormat", wireType)
			}
			m.PostingsFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswriter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostingsFormat |= (PostingsFormat(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDocs", wireType)
			}
			m.NumDocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswriter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDocs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFswriter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFswriter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFswriter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFswriter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswriter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswriter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFswriter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFswriter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFswriter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFswriter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFswriter   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/m3ninx/generated/proto/fswriter/fswriter.proto", fileDescriptorFswriter)
}

var fileDescriptorFswriter = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0xa1, 0x35, 0x5a, 0xc7, 0x14, 0xd7, 0xd5, 0x03, 0x07, 0x43, 0x1a, 0xbd, 0x34, 0x3d,
	0x40, 0x94, 0x17, 0x10, 0x05, 0x1a, 0x92, 0x52, 0x08, 0xbb, 0x1a, 0x3d, 0x11, 0xda, 0x6e, 0x91,
	0xc4, 0x65, 0x1b, 0xd8, 0x46, 0x7d, 0x0b, 0x1f, 0xcb, 0xa3, 0x8f, 0x60, 0xea, 0x8b, 0x98, 0x36,
	0x6d, 0x4d, 0xbd, 0xed, 0xff, 0xed, 0x37, 0x33, 0x99, 0x01, 0x2f, 0x2f, 0xe4, 0xf3, 0x7c, 0x64,
	0x8e, 0x05, 0xb7, 0xb8, 0x3d, 0x19, 0x59, 0xdc, 0xb6, 0xea, 0x6a, 0x6c, 0x71, 0xbb, 0x2c, 0xca,
	0x37, 0x2b, 0x67, 0x25, 0xab, 0x32, 0xc9, 0x26, 0xd6, 0xac, 0x12, 0x52, 0x58, 0xd3, 0xfa, 0xb5,
	0x2a, 0x24, 0xab, 0xb6, 0x0f, 0x73, 0xc5, 0x71, 0x6b, 0x93, 0x2f, 0xa6, 0xd0, 0x0a, 0x99, 0xcc,
	0x26, 0x99, 0xcc, 0xf0, 0x0d, 0x68, 0x33, 0x51, 0xcb, 0xa2, 0xcc, 0x6b, 0x5f, 0x54, 0x3c, 0x93,
	0xba, 0xda, 0x51, 0xbb, 0xda, 0xb5, 0x6e, 0x6e, 0xcb, 0xe3, 0x9d, 0xff, 0xe4, 0x9f, 0x8f, 0x75,
	0x38, 0x28, 0xe7, 0xdc, 0x15, 0xe3, 0x5a, 0x6f, 0x74, 0xd4, 0x6e, 0x33, 0xd9, 0xc4, 0xde, 0x25,
	0x1c, 0x11, 0x96, 0x73, 0x56, 0x4a, 0xfa, 0x3e, 0x63, 0xf8, 0x0c, 0x90, 0x4f, 0x68, 0x4a, 0xbc,
	0x7e, 0xe8, 0x0d, 0x69, 0x4a, 0x9f, 0x62, 0x0f, 0x29, 0x3d, 0x01, 0xd8, 0x27, 0x74, 0xed, 0xf9,
	0xc5, 0x0b, 0x5b, 0xb9, 0xa7, 0x70, 0xec, 0x46, 0x77, 0xf7, 0x4b, 0x91, 0xa4, 0xc1, 0xd0, 0xf5,
	0x1e, 0x91, 0x82, 0x31, 0x68, 0x7f, 0xd0, 0x75, 0xa8, 0x83, 0x54, 0x7c, 0x02, 0xed, 0x38, 0x22,
	0x34, 0x18, 0xf6, 0xd7, 0xa8, 0x81, 0xdb, 0x70, 0xb8, 0x9c, 0x43, 0xbd, 0x24, 0x24, 0xa8, 0x89,
	0x35, 0x80, 0x65, 0xf4, 0x03, 0x6f, 0xe0, 0x12, 0xb4, 0xd7, 0x33, 0x41, 0xdb, 0xdd, 0x08, 0x9f,
	0x83, 0x1e, 0x07, 0x83, 0x88, 0x38, 0x0f, 0x57, 0xe9, 0xb6, 0x99, 0x1f, 0x25, 0xa1, 0x43, 0x91,
	0x72, 0x8b, 0x3e, 0x17, 0x86, 0xfa, 0xb5, 0x30, 0xd4, 0xef, 0x85, 0xa1, 0x7e, 0xfc, 0x18, 0xca,
	0x68, 0x7f, 0x75, 0x50, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x48, 0x39, 0x25, 0x99, 0x01,
	0x00, 0x00,
}
