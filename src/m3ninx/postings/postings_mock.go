// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3ninx/postings/types.go

package postings

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockList is a mock of List interface
type MockList struct {
	ctrl     *gomock.Controller
	recorder *MockListMockRecorder
}

// MockListMockRecorder is the mock recorder for MockList
type MockListMockRecorder struct {
	mock *MockList
}

// NewMockList creates a new mock instance
func NewMockList(ctrl *gomock.Controller) *MockList {
	mock := &MockList{ctrl: ctrl}
	mock.recorder = &MockListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockList) EXPECT() *MockListMockRecorder {
	return _m.recorder
}

// Contains mocks base method
func (_m *MockList) Contains(id ID) bool {
	ret := _m.ctrl.Call(_m, "Contains", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (_mr *MockListMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Contains", reflect.TypeOf((*MockList)(nil).Contains), arg0)
}

// IsEmpty mocks base method
func (_m *MockList) IsEmpty() bool {
	ret := _m.ctrl.Call(_m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (_mr *MockListMockRecorder) IsEmpty() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsEmpty", reflect.TypeOf((*MockList)(nil).IsEmpty))
}

// Min mocks base method
func (_m *MockList) Min() (ID, error) {
	ret := _m.ctrl.Call(_m, "Min")
	ret0, _ := ret[0].(ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Min indicates an expected call of Min
func (_mr *MockListMockRecorder) Min() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Min", reflect.TypeOf((*MockList)(nil).Min))
}

// Max mocks base method
func (_m *MockList) Max() (ID, error) {
	ret := _m.ctrl.Call(_m, "Max")
	ret0, _ := ret[0].(ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Max indicates an expected call of Max
func (_mr *MockListMockRecorder) Max() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Max", reflect.TypeOf((*MockList)(nil).Max))
}

// Len mocks base method
func (_m *MockList) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (_mr *MockListMockRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Len", reflect.TypeOf((*MockList)(nil).Len))
}

// Iterator mocks base method
func (_m *MockList) Iterator() Iterator {
	ret := _m.ctrl.Call(_m, "Iterator")
	ret0, _ := ret[0].(Iterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (_mr *MockListMockRecorder) Iterator() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Iterator", reflect.TypeOf((*MockList)(nil).Iterator))
}

// Clone mocks base method
func (_m *MockList) Clone() MutableList {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(MutableList)
	return ret0
}

// Clone indicates an expected call of Clone
func (_mr *MockListMockRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clone", reflect.TypeOf((*MockList)(nil).Clone))
}

// Equal mocks base method
func (_m *MockList) Equal(other List) bool {
	ret := _m.ctrl.Call(_m, "Equal", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (_mr *MockListMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Equal", reflect.TypeOf((*MockList)(nil).Equal), arg0)
}

// MockMutableList is a mock of MutableList interface
type MockMutableList struct {
	ctrl     *gomock.Controller
	recorder *MockMutableListMockRecorder
}

// MockMutableListMockRecorder is the mock recorder for MockMutableList
type MockMutableListMockRecorder struct {
	mock *MockMutableList
}

// NewMockMutableList creates a new mock instance
func NewMockMutableList(ctrl *gomock.Controller) *MockMutableList {
	mock := &MockMutableList{ctrl: ctrl}
	mock.recorder = &MockMutableListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMutableList) EXPECT() *MockMutableListMockRecorder {
	return _m.recorder
}

// Contains mocks base method
func (_m *MockMutableList) Contains(id ID) bool {
	ret := _m.ctrl.Call(_m, "Contains", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (_mr *MockMutableListMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Contains", reflect.TypeOf((*MockMutableList)(nil).Contains), arg0)
}

// IsEmpty mocks base method
func (_m *MockMutableList) IsEmpty() bool {
	ret := _m.ctrl.Call(_m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (_mr *MockMutableListMockRecorder) IsEmpty() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsEmpty", reflect.TypeOf((*MockMutableList)(nil).IsEmpty))
}

// Min mocks base method
func (_m *MockMutableList) Min() (ID, error) {
	ret := _m.ctrl.Call(_m, "Min")
	ret0, _ := ret[0].(ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Min indicates an expected call of Min
func (_mr *MockMutableListMockRecorder) Min() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Min", reflect.TypeOf((*MockMutableList)(nil).Min))
}

// Max mocks base method
func (_m *MockMutableList) Max() (ID, error) {
	ret := _m.ctrl.Call(_m, "Max")
	ret0, _ := ret[0].(ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Max indicates an expected call of Max
func (_mr *MockMutableListMockRecorder) Max() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Max", reflect.TypeOf((*MockMutableList)(nil).Max))
}

// Len mocks base method
func (_m *MockMutableList) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (_mr *MockMutableListMockRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Len", reflect.TypeOf((*MockMutableList)(nil).Len))
}

// Iterator mocks base method
func (_m *MockMutableList) Iterator() Iterator {
	ret := _m.ctrl.Call(_m, "Iterator")
	ret0, _ := ret[0].(Iterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (_mr *MockMutableListMockRecorder) Iterator() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Iterator", reflect.TypeOf((*MockMutableList)(nil).Iterator))
}

// Clone mocks base method
func (_m *MockMutableList) Clone() MutableList {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(MutableList)
	return ret0
}

// Clone indicates an expected call of Clone
func (_mr *MockMutableListMockRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clone", reflect.TypeOf((*MockMutableList)(nil).Clone))
}

// Equal mocks base method
func (_m *MockMutableList) Equal(other List) bool {
	ret := _m.ctrl.Call(_m, "Equal", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (_mr *MockMutableListMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Equal", reflect.TypeOf((*MockMutableList)(nil).Equal), arg0)
}

// Insert mocks base method
func (_m *MockMutableList) Insert(i ID) error {
	ret := _m.ctrl.Call(_m, "Insert", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (_mr *MockMutableListMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Insert", reflect.TypeOf((*MockMutableList)(nil).Insert), arg0)
}

// Intersect mocks base method
func (_m *MockMutableList) Intersect(other List) error {
	ret := _m.ctrl.Call(_m, "Intersect", other)
	ret0, _ := ret[0].(error)
	return ret0
}

// Intersect indicates an expected call of Intersect
func (_mr *MockMutableListMockRecorder) Intersect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Intersect", reflect.TypeOf((*MockMutableList)(nil).Intersect), arg0)
}

// Difference mocks base method
func (_m *MockMutableList) Difference(other List) error {
	ret := _m.ctrl.Call(_m, "Difference", other)
	ret0, _ := ret[0].(error)
	return ret0
}

// Difference indicates an expected call of Difference
func (_mr *MockMutableListMockRecorder) Difference(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Difference", reflect.TypeOf((*MockMutableList)(nil).Difference), arg0)
}

// Union mocks base method
func (_m *MockMutableList) Union(other List) error {
	ret := _m.ctrl.Call(_m, "Union", other)
	ret0, _ := ret[0].(error)
	return ret0
}

// Union indicates an expected call of Union
func (_mr *MockMutableListMockRecorder) Union(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Union", reflect.TypeOf((*MockMutableList)(nil).Union), arg0)
}

// RemoveRange mocks base method
func (_m *MockMutableList) RemoveRange(min ID, max ID) error {
	ret := _m.ctrl.Call(_m, "RemoveRange", min, max)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRange indicates an expected call of RemoveRange
func (_mr *MockMutableListMockRecorder) RemoveRange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveRange", reflect.TypeOf((*MockMutableList)(nil).RemoveRange), arg0, arg1)
}

// Reset mocks base method
func (_m *MockMutableList) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockMutableListMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockMutableList)(nil).Reset))
}

// MockIterator is a mock of Iterator interface
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return _m.recorder
}

// Next mocks base method
func (_m *MockIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockIteratorMockRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Current mocks base method
func (_m *MockIterator) Current() ID {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(ID)
	return ret0
}

// Current indicates an expected call of Current
func (_mr *MockIteratorMockRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Current", reflect.TypeOf((*MockIterator)(nil).Current))
}

// Err mocks base method
func (_m *MockIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (_mr *MockIteratorMockRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Err", reflect.TypeOf((*MockIterator)(nil).Err))
}

// Close mocks base method
func (_m *MockIterator) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockIteratorMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// MockPool is a mock of Pool interface
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPool) EXPECT() *MockPoolMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockPool) Get() MutableList {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(MutableList)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockPoolMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockPool)(nil).Get))
}

// Put mocks base method
func (_m *MockPool) Put(pl MutableList) {
	_m.ctrl.Call(_m, "Put", pl)
}

// Put indicates an expected call of Put
func (_mr *MockPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockPool)(nil).Put), arg0)
}
