// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3ninx/index/segment/mem (interfaces: ReadableSegment)

package mem

import (
	"reflect"
	"regexp"

	"github.com/m3db/m3ninx/doc"
	"github.com/m3db/m3ninx/postings"

	"github.com/golang/mock/gomock"
)

// MockReadableSegment is a mock of ReadableSegment interface
type MockReadableSegment struct {
	ctrl     *gomock.Controller
	recorder *MockReadableSegmentMockRecorder
}

// MockReadableSegmentMockRecorder is the mock recorder for MockReadableSegment
type MockReadableSegmentMockRecorder struct {
	mock *MockReadableSegment
}

// NewMockReadableSegment creates a new mock instance
func NewMockReadableSegment(ctrl *gomock.Controller) *MockReadableSegment {
	mock := &MockReadableSegment{ctrl: ctrl}
	mock.recorder = &MockReadableSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockReadableSegment) EXPECT() *MockReadableSegmentMockRecorder {
	return _m.recorder
}

// DecRef mocks base method
func (_m *MockReadableSegment) DecRef() {
	_m.ctrl.Call(_m, "DecRef")
}

// DecRef indicates an expected call of DecRef
func (_mr *MockReadableSegmentMockRecorder) DecRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DecRef", reflect.TypeOf((*MockReadableSegment)(nil).DecRef))
}

// IncRef mocks base method
func (_m *MockReadableSegment) IncRef() {
	_m.ctrl.Call(_m, "IncRef")
}

// IncRef indicates an expected call of IncRef
func (_mr *MockReadableSegmentMockRecorder) IncRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncRef", reflect.TypeOf((*MockReadableSegment)(nil).IncRef))
}

// MoveRef mocks base method
func (_m *MockReadableSegment) MoveRef() {
	_m.ctrl.Call(_m, "MoveRef")
}

// MoveRef indicates an expected call of MoveRef
func (_mr *MockReadableSegmentMockRecorder) MoveRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MoveRef", reflect.TypeOf((*MockReadableSegment)(nil).MoveRef))
}

// NumRef mocks base method
func (_m *MockReadableSegment) NumRef() int {
	ret := _m.ctrl.Call(_m, "NumRef")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRef indicates an expected call of NumRef
func (_mr *MockReadableSegmentMockRecorder) NumRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumRef", reflect.TypeOf((*MockReadableSegment)(nil).NumRef))
}

// getDoc mocks base method
func (_m *MockReadableSegment) getDoc(_param0 postings.ID) (doc.Document, error) {
	ret := _m.ctrl.Call(_m, "getDoc", _param0)
	ret0, _ := ret[0].(doc.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getDoc indicates an expected call of getDoc
func (_mr *MockReadableSegmentMockRecorder) getDoc(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "getDoc", reflect.TypeOf((*MockReadableSegment)(nil).getDoc), arg0)
}

// matchRegexp mocks base method
func (_m *MockReadableSegment) matchRegexp(_param0 []byte, _param1 []byte, _param2 *regexp.Regexp) (postings.List, error) {
	ret := _m.ctrl.Call(_m, "matchRegexp", _param0, _param1, _param2)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// matchRegexp indicates an expected call of matchRegexp
func (_mr *MockReadableSegmentMockRecorder) matchRegexp(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "matchRegexp", reflect.TypeOf((*MockReadableSegment)(nil).matchRegexp), arg0, arg1, arg2)
}

// matchTerm mocks base method
func (_m *MockReadableSegment) matchTerm(_param0 []byte, _param1 []byte) (postings.List, error) {
	ret := _m.ctrl.Call(_m, "matchTerm", _param0, _param1)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// matchTerm indicates an expected call of matchTerm
func (_mr *MockReadableSegmentMockRecorder) matchTerm(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "matchTerm", reflect.TypeOf((*MockReadableSegment)(nil).matchTerm), arg0, arg1)
}
