// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/x/debug (interfaces: ZipWriter)

// Copyright (c) 2025 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package debug is a generated GoMock package.
package debug

import (
	"io"
	"net/http"
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockZipWriter is a mock of ZipWriter interface.
type MockZipWriter struct {
	ctrl     *gomock.Controller
	recorder *MockZipWriterMockRecorder
}

// MockZipWriterMockRecorder is the mock recorder for MockZipWriter.
type MockZipWriterMockRecorder struct {
	mock *MockZipWriter
}

// NewMockZipWriter creates a new mock instance.
func NewMockZipWriter(ctrl *gomock.Controller) *MockZipWriter {
	mock := &MockZipWriter{ctrl: ctrl}
	mock.recorder = &MockZipWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZipWriter) EXPECT() *MockZipWriterMockRecorder {
	return m.recorder
}

// HTTPHandler mocks base method.
func (m *MockZipWriter) HTTPHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// HTTPHandler indicates an expected call of HTTPHandler.
func (mr *MockZipWriterMockRecorder) HTTPHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPHandler", reflect.TypeOf((*MockZipWriter)(nil).HTTPHandler))
}

// RegisterHandler mocks base method.
func (m *MockZipWriter) RegisterHandler(arg0 string, arg1 *http.ServeMux) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockZipWriterMockRecorder) RegisterHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockZipWriter)(nil).RegisterHandler), arg0, arg1)
}

// RegisterSource mocks base method.
func (m *MockZipWriter) RegisterSource(arg0 string, arg1 Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSource indicates an expected call of RegisterSource.
func (mr *MockZipWriterMockRecorder) RegisterSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSource", reflect.TypeOf((*MockZipWriter)(nil).RegisterSource), arg0, arg1)
}

// WriteZip mocks base method.
func (m *MockZipWriter) WriteZip(arg0 io.Writer, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteZip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteZip indicates an expected call of WriteZip.
func (mr *MockZipWriterMockRecorder) WriteZip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteZip", reflect.TypeOf((*MockZipWriter)(nil).WriteZip), arg0, arg1)
}
