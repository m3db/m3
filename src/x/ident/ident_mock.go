// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/x/ident (interfaces: ID,TagIterator,Pool)

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package ident is a generated GoMock package.
package ident

import (
	"reflect"

	"github.com/m3db/m3/src/x/checked"
	"github.com/m3db/m3/src/x/context"

	"github.com/golang/mock/gomock"
)

// MockID is a mock of ID interface.
type MockID struct {
	ctrl     *gomock.Controller
	recorder *MockIDMockRecorder
}

// MockIDMockRecorder is the mock recorder for MockID.
type MockIDMockRecorder struct {
	mock *MockID
}

// NewMockID creates a new mock instance.
func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &MockIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockID) EXPECT() *MockIDMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockID) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockIDMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockID)(nil).Bytes))
}

// Equal mocks base method.
func (m *MockID) Equal(arg0 ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockIDMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockID)(nil).Equal), arg0)
}

// Finalize mocks base method.
func (m *MockID) Finalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize.
func (mr *MockIDMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockID)(nil).Finalize))
}

// IsNoFinalize mocks base method.
func (m *MockID) IsNoFinalize() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoFinalize")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoFinalize indicates an expected call of IsNoFinalize.
func (mr *MockIDMockRecorder) IsNoFinalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoFinalize", reflect.TypeOf((*MockID)(nil).IsNoFinalize))
}

// NoFinalize mocks base method.
func (m *MockID) NoFinalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NoFinalize")
}

// NoFinalize indicates an expected call of NoFinalize.
func (mr *MockIDMockRecorder) NoFinalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoFinalize", reflect.TypeOf((*MockID)(nil).NoFinalize))
}

// String mocks base method.
func (m *MockID) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIDMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockID)(nil).String))
}

// MockTagIterator is a mock of TagIterator interface.
type MockTagIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTagIteratorMockRecorder
}

// MockTagIteratorMockRecorder is the mock recorder for MockTagIterator.
type MockTagIteratorMockRecorder struct {
	mock *MockTagIterator
}

// NewMockTagIterator creates a new mock instance.
func NewMockTagIterator(ctrl *gomock.Controller) *MockTagIterator {
	mock := &MockTagIterator{ctrl: ctrl}
	mock.recorder = &MockTagIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagIterator) EXPECT() *MockTagIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTagIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTagIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTagIterator)(nil).Close))
}

// Current mocks base method.
func (m *MockTagIterator) Current() Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(Tag)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockTagIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockTagIterator)(nil).Current))
}

// CurrentIndex mocks base method.
func (m *MockTagIterator) CurrentIndex() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentIndex")
	ret0, _ := ret[0].(int)
	return ret0
}

// CurrentIndex indicates an expected call of CurrentIndex.
func (mr *MockTagIteratorMockRecorder) CurrentIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentIndex", reflect.TypeOf((*MockTagIterator)(nil).CurrentIndex))
}

// Duplicate mocks base method.
func (m *MockTagIterator) Duplicate() TagIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate")
	ret0, _ := ret[0].(TagIterator)
	return ret0
}

// Duplicate indicates an expected call of Duplicate.
func (mr *MockTagIteratorMockRecorder) Duplicate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockTagIterator)(nil).Duplicate))
}

// Err mocks base method.
func (m *MockTagIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockTagIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTagIterator)(nil).Err))
}

// Len mocks base method.
func (m *MockTagIterator) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockTagIteratorMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockTagIterator)(nil).Len))
}

// Next mocks base method.
func (m *MockTagIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockTagIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTagIterator)(nil).Next))
}

// Remaining mocks base method.
func (m *MockTagIterator) Remaining() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remaining")
	ret0, _ := ret[0].(int)
	return ret0
}

// Remaining indicates an expected call of Remaining.
func (mr *MockTagIteratorMockRecorder) Remaining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remaining", reflect.TypeOf((*MockTagIterator)(nil).Remaining))
}

// Rewind mocks base method.
func (m *MockTagIterator) Rewind() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rewind")
}

// Rewind indicates an expected call of Rewind.
func (mr *MockTagIteratorMockRecorder) Rewind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewind", reflect.TypeOf((*MockTagIterator)(nil).Rewind))
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// BinaryID mocks base method.
func (m *MockPool) BinaryID(arg0 checked.Bytes) ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryID", arg0)
	ret0, _ := ret[0].(ID)
	return ret0
}

// BinaryID indicates an expected call of BinaryID.
func (mr *MockPoolMockRecorder) BinaryID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryID", reflect.TypeOf((*MockPool)(nil).BinaryID), arg0)
}

// BinaryTag mocks base method.
func (m *MockPool) BinaryTag(arg0, arg1 checked.Bytes) Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryTag", arg0, arg1)
	ret0, _ := ret[0].(Tag)
	return ret0
}

// BinaryTag indicates an expected call of BinaryTag.
func (mr *MockPoolMockRecorder) BinaryTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryTag", reflect.TypeOf((*MockPool)(nil).BinaryTag), arg0, arg1)
}

// Clone mocks base method.
func (m *MockPool) Clone(arg0 ID) ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(ID)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockPoolMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockPool)(nil).Clone), arg0)
}

// CloneTag mocks base method.
func (m *MockPool) CloneTag(arg0 Tag) Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneTag", arg0)
	ret0, _ := ret[0].(Tag)
	return ret0
}

// CloneTag indicates an expected call of CloneTag.
func (mr *MockPoolMockRecorder) CloneTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneTag", reflect.TypeOf((*MockPool)(nil).CloneTag), arg0)
}

// CloneTags mocks base method.
func (m *MockPool) CloneTags(arg0 Tags) Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneTags", arg0)
	ret0, _ := ret[0].(Tags)
	return ret0
}

// CloneTags indicates an expected call of CloneTags.
func (mr *MockPoolMockRecorder) CloneTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneTags", reflect.TypeOf((*MockPool)(nil).CloneTags), arg0)
}

// GetBinaryID mocks base method.
func (m *MockPool) GetBinaryID(arg0 context.Context, arg1 checked.Bytes) ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryID", arg0, arg1)
	ret0, _ := ret[0].(ID)
	return ret0
}

// GetBinaryID indicates an expected call of GetBinaryID.
func (mr *MockPoolMockRecorder) GetBinaryID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryID", reflect.TypeOf((*MockPool)(nil).GetBinaryID), arg0, arg1)
}

// GetBinaryTag mocks base method.
func (m *MockPool) GetBinaryTag(arg0 context.Context, arg1, arg2 checked.Bytes) Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(Tag)
	return ret0
}

// GetBinaryTag indicates an expected call of GetBinaryTag.
func (mr *MockPoolMockRecorder) GetBinaryTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryTag", reflect.TypeOf((*MockPool)(nil).GetBinaryTag), arg0, arg1, arg2)
}

// GetStringID mocks base method.
func (m *MockPool) GetStringID(arg0 context.Context, arg1 string) ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringID", arg0, arg1)
	ret0, _ := ret[0].(ID)
	return ret0
}

// GetStringID indicates an expected call of GetStringID.
func (mr *MockPoolMockRecorder) GetStringID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringID", reflect.TypeOf((*MockPool)(nil).GetStringID), arg0, arg1)
}

// GetStringTag mocks base method.
func (m *MockPool) GetStringTag(arg0 context.Context, arg1, arg2 string) Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(Tag)
	return ret0
}

// GetStringTag indicates an expected call of GetStringTag.
func (mr *MockPoolMockRecorder) GetStringTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringTag", reflect.TypeOf((*MockPool)(nil).GetStringTag), arg0, arg1, arg2)
}

// GetTagsIterator mocks base method.
func (m *MockPool) GetTagsIterator(arg0 context.Context) TagsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsIterator", arg0)
	ret0, _ := ret[0].(TagsIterator)
	return ret0
}

// GetTagsIterator indicates an expected call of GetTagsIterator.
func (mr *MockPoolMockRecorder) GetTagsIterator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsIterator", reflect.TypeOf((*MockPool)(nil).GetTagsIterator), arg0)
}

// Put mocks base method.
func (m *MockPool) Put(arg0 ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put.
func (mr *MockPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPool)(nil).Put), arg0)
}

// PutTag mocks base method.
func (m *MockPool) PutTag(arg0 Tag) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutTag", arg0)
}

// PutTag indicates an expected call of PutTag.
func (mr *MockPoolMockRecorder) PutTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTag", reflect.TypeOf((*MockPool)(nil).PutTag), arg0)
}

// PutTags mocks base method.
func (m *MockPool) PutTags(arg0 Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutTags", arg0)
}

// PutTags indicates an expected call of PutTags.
func (mr *MockPoolMockRecorder) PutTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTags", reflect.TypeOf((*MockPool)(nil).PutTags), arg0)
}

// PutTagsIterator mocks base method.
func (m *MockPool) PutTagsIterator(arg0 TagsIterator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutTagsIterator", arg0)
}

// PutTagsIterator indicates an expected call of PutTagsIterator.
func (mr *MockPoolMockRecorder) PutTagsIterator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTagsIterator", reflect.TypeOf((*MockPool)(nil).PutTagsIterator), arg0)
}

// StringID mocks base method.
func (m *MockPool) StringID(arg0 string) ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringID", arg0)
	ret0, _ := ret[0].(ID)
	return ret0
}

// StringID indicates an expected call of StringID.
func (mr *MockPoolMockRecorder) StringID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringID", reflect.TypeOf((*MockPool)(nil).StringID), arg0)
}

// StringTag mocks base method.
func (m *MockPool) StringTag(arg0, arg1 string) Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringTag", arg0, arg1)
	ret0, _ := ret[0].(Tag)
	return ret0
}

// StringTag indicates an expected call of StringTag.
func (mr *MockPoolMockRecorder) StringTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringTag", reflect.TypeOf((*MockPool)(nil).StringTag), arg0, arg1)
}

// Tags mocks base method.
func (m *MockPool) Tags() Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(Tags)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockPoolMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockPool)(nil).Tags))
}

// TagsIterator mocks base method.
func (m *MockPool) TagsIterator() TagsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsIterator")
	ret0, _ := ret[0].(TagsIterator)
	return ret0
}

// TagsIterator indicates an expected call of TagsIterator.
func (mr *MockPoolMockRecorder) TagsIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsIterator", reflect.TypeOf((*MockPool)(nil).TagsIterator))
}
