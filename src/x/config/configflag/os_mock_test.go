// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/andrewmains/Code/gocode/src/github.com/m3db/m3/src/x/config/configflag/flag.go

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package configflag is a generated GoMock package.
package configflag

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockosIface is a mock of osIface interface
type MockosIface struct {
	ctrl     *gomock.Controller
	recorder *MockosIfaceMockRecorder
}

// MockosIfaceMockRecorder is the mock recorder for MockosIface
type MockosIfaceMockRecorder struct {
	mock *MockosIface
}

// NewMockosIface creates a new mock instance
func NewMockosIface(ctrl *gomock.Controller) *MockosIface {
	mock := &MockosIface{ctrl: ctrl}
	mock.recorder = &MockosIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockosIface) EXPECT() *MockosIfaceMockRecorder {
	return m.recorder
}

// Exit mocks base method
func (m *MockosIface) Exit(status int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit", status)
}

// Exit indicates an expected call of Exit
func (mr *MockosIfaceMockRecorder) Exit(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockosIface)(nil).Exit), status)
}

// Stdout mocks base method
func (m *MockosIface) Stdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stdout indicates an expected call of Stdout
func (mr *MockosIfaceMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockosIface)(nil).Stdout))
}
