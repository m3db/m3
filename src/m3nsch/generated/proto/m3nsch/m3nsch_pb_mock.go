// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/m3nsch/generated/proto/m3nsch/pb.go

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package m3nsch is a generated GoMock package.
package m3nsch

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// MockMenschClient is a mock of MenschClient interface
type MockMenschClient struct {
	ctrl     *gomock.Controller
	recorder *MockMenschClientMockRecorder
}

// MockMenschClientMockRecorder is the mock recorder for MockMenschClient
type MockMenschClientMockRecorder struct {
	mock *MockMenschClient
}

// NewMockMenschClient creates a new mock instance
func NewMockMenschClient(ctrl *gomock.Controller) *MockMenschClient {
	mock := &MockMenschClient{ctrl: ctrl}
	mock.recorder = &MockMenschClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMenschClient) EXPECT() *MockMenschClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMenschClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMenschClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMenschClient)(nil).Status), varargs...)
}

// Init mocks base method
func (m *MockMenschClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(*InitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockMenschClientMockRecorder) Init(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockMenschClient)(nil).Init), varargs...)
}

// Start mocks base method
func (m *MockMenschClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(*StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockMenschClientMockRecorder) Start(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMenschClient)(nil).Start), varargs...)
}

// Stop mocks base method
func (m *MockMenschClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockMenschClientMockRecorder) Stop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMenschClient)(nil).Stop), varargs...)
}

// Modify mocks base method
func (m *MockMenschClient) Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Modify", varargs...)
	ret0, _ := ret[0].(*ModifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockMenschClientMockRecorder) Modify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockMenschClient)(nil).Modify), varargs...)
}

// MockMenschServer is a mock of MenschServer interface
type MockMenschServer struct {
	ctrl     *gomock.Controller
	recorder *MockMenschServerMockRecorder
}

// MockMenschServerMockRecorder is the mock recorder for MockMenschServer
type MockMenschServerMockRecorder struct {
	mock *MockMenschServer
}

// NewMockMenschServer creates a new mock instance
func NewMockMenschServer(ctrl *gomock.Controller) *MockMenschServer {
	mock := &MockMenschServer{ctrl: ctrl}
	mock.recorder = &MockMenschServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMenschServer) EXPECT() *MockMenschServerMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMenschServer) Status(arg0 context.Context, arg1 *StatusRequest) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMenschServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMenschServer)(nil).Status), arg0, arg1)
}

// Init mocks base method
func (m *MockMenschServer) Init(arg0 context.Context, arg1 *InitRequest) (*InitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(*InitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockMenschServerMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockMenschServer)(nil).Init), arg0, arg1)
}

// Start mocks base method
func (m *MockMenschServer) Start(arg0 context.Context, arg1 *StartRequest) (*StartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(*StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockMenschServerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMenschServer)(nil).Start), arg0, arg1)
}

// Stop mocks base method
func (m *MockMenschServer) Stop(arg0 context.Context, arg1 *StopRequest) (*StopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockMenschServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMenschServer)(nil).Stop), arg0, arg1)
}

// Modify mocks base method
func (m *MockMenschServer) Modify(arg0 context.Context, arg1 *ModifyRequest) (*ModifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0, arg1)
	ret0, _ := ret[0].(*ModifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockMenschServerMockRecorder) Modify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockMenschServer)(nil).Modify), arg0, arg1)
}
