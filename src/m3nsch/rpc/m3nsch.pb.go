// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: m3nsch.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	m3nsch.proto

It has these top-level messages:
	StatusRequest
	StatusResponse
	InitRequest
	InitResponse
	ModifyRequest
	ModifyResponse
	StartRequest
	StartResponse
	StopRequest
	StopResponse
	Workload
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_UNKNOWN       Status = 0
	Status_UNINITIALIZED Status = 1
	Status_INITIALIZED   Status = 2
	Status_RUNNING       Status = 3
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNINITIALIZED",
	2: "INITIALIZED",
	3: "RUNNING",
}
var Status_value = map[string]int32{
	"UNKNOWN":       0,
	"UNINITIALIZED": 1,
	"INITIALIZED":   2,
	"RUNNING":       3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusResponse struct {
	Status   Status    `protobuf:"varint,1,opt,name=status,enum=rpc.Status" json:"status,omitempty"`
	Token    string    `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	MaxQPS   int64     `protobuf:"varint,3,opt,name=maxQPS" json:"maxQPS,omitempty"`
	Workload *Workload `protobuf:"bytes,4,opt,name=workload" json:"workload,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *StatusResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *StatusResponse) GetMaxQPS() int64 {
	if m != nil {
		return m.MaxQPS
	}
	return 0
}

func (m *StatusResponse) GetWorkload() *Workload {
	if m != nil {
		return m.Workload
	}
	return nil
}

type InitRequest struct {
	Token      string    `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Workload   *Workload `protobuf:"bytes,2,opt,name=workload" json:"workload,omitempty"`
	Force      bool      `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	TargetZone string    `protobuf:"bytes,4,opt,name=targetZone" json:"targetZone,omitempty"`
	TargetEnv  string    `protobuf:"bytes,5,opt,name=targetEnv" json:"targetEnv,omitempty"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InitRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *InitRequest) GetWorkload() *Workload {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *InitRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *InitRequest) GetTargetZone() string {
	if m != nil {
		return m.TargetZone
	}
	return ""
}

func (m *InitRequest) GetTargetEnv() string {
	if m != nil {
		return m.TargetEnv
	}
	return ""
}

type InitResponse struct {
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ModifyRequest struct {
	Workload *Workload `protobuf:"bytes,1,opt,name=workload" json:"workload,omitempty"`
}

func (m *ModifyRequest) Reset()                    { *m = ModifyRequest{} }
func (m *ModifyRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyRequest) ProtoMessage()               {}
func (*ModifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ModifyRequest) GetWorkload() *Workload {
	if m != nil {
		return m.Workload
	}
	return nil
}

type ModifyResponse struct {
}

func (m *ModifyResponse) Reset()                    { *m = ModifyResponse{} }
func (m *ModifyResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyResponse) ProtoMessage()               {}
func (*ModifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StartRequest struct {
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Workload struct {
	BaseTime     *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=baseTime" json:"baseTime,omitempty"`
	MetricPrefix string                     `protobuf:"bytes,2,opt,name=metricPrefix" json:"metricPrefix,omitempty"`
	Namespace    string                     `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Cardinality  int32                      `protobuf:"varint,4,opt,name=cardinality" json:"cardinality,omitempty"`
	IngressQPS   int32                      `protobuf:"varint,5,opt,name=ingressQPS" json:"ingressQPS,omitempty"`
}

func (m *Workload) Reset()                    { *m = Workload{} }
func (m *Workload) String() string            { return proto.CompactTextString(m) }
func (*Workload) ProtoMessage()               {}
func (*Workload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Workload) GetBaseTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BaseTime
	}
	return nil
}

func (m *Workload) GetMetricPrefix() string {
	if m != nil {
		return m.MetricPrefix
	}
	return ""
}

func (m *Workload) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Workload) GetCardinality() int32 {
	if m != nil {
		return m.Cardinality
	}
	return 0
}

func (m *Workload) GetIngressQPS() int32 {
	if m != nil {
		return m.IngressQPS
	}
	return 0
}

func init() {
	proto.RegisterType((*StatusRequest)(nil), "rpc.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "rpc.StatusResponse")
	proto.RegisterType((*InitRequest)(nil), "rpc.InitRequest")
	proto.RegisterType((*InitResponse)(nil), "rpc.InitResponse")
	proto.RegisterType((*ModifyRequest)(nil), "rpc.ModifyRequest")
	proto.RegisterType((*ModifyResponse)(nil), "rpc.ModifyResponse")
	proto.RegisterType((*StartRequest)(nil), "rpc.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "rpc.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "rpc.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "rpc.StopResponse")
	proto.RegisterType((*Workload)(nil), "rpc.Workload")
	proto.RegisterEnum("rpc.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mensch service

type MenschClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
}

type menschClient struct {
	cc *grpc.ClientConn
}

func NewMenschClient(cc *grpc.ClientConn) MenschClient {
	return &menschClient{cc}
}

func (c *menschClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/rpc.Mensch/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menschClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/rpc.Mensch/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menschClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/rpc.Mensch/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menschClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/rpc.Mensch/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menschClient) Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/rpc.Mensch/Modify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mensch service

type MenschServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Modify(context.Context, *ModifyRequest) (*ModifyResponse, error)
}

func RegisterMenschServer(s *grpc.Server, srv MenschServer) {
	s.RegisterService(&_Mensch_serviceDesc, srv)
}

func _Mensch_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenschServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mensch/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenschServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensch_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenschServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mensch/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenschServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensch_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenschServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mensch/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenschServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensch_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenschServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mensch/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenschServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensch_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenschServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mensch/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenschServer).Modify(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mensch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Mensch",
	HandlerType: (*MenschServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Mensch_Status_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Mensch_Init_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Mensch_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Mensch_Stop_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Mensch_Modify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m3nsch.proto",
}

func init() { proto.RegisterFile("m3nsch.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0xed, 0x1a, 0xda, 0x9b, 0xb6, 0x6b, 0x0d, 0x42, 0x55, 0x84, 0xa0, 0x0a, 0x2f, 0x05,
	0xa4, 0x4c, 0xeb, 0x24, 0x1e, 0x78, 0x43, 0x62, 0xa0, 0x08, 0x16, 0x46, 0xda, 0x6a, 0xd2, 0xde,
	0xdc, 0xd4, 0x2d, 0xd1, 0x9a, 0x38, 0xd8, 0x2e, 0x6c, 0x3f, 0xc1, 0x47, 0xf0, 0x31, 0x7c, 0x13,
	0x8f, 0x53, 0x6c, 0xa7, 0x71, 0x5f, 0xf6, 0x78, 0xcf, 0xbd, 0x39, 0xf7, 0xe4, 0x9e, 0x63, 0xe8,
	0x66, 0x67, 0xb9, 0x48, 0x7e, 0x04, 0x05, 0x67, 0x92, 0xe1, 0x26, 0x2f, 0x12, 0xef, 0xe5, 0x86,
	0xb1, 0xcd, 0x96, 0x9e, 0x28, 0x68, 0xb9, 0x5b, 0x9f, 0xc8, 0x34, 0xa3, 0x42, 0x92, 0xac, 0xd0,
	0x53, 0xfe, 0x31, 0xf4, 0x66, 0x92, 0xc8, 0x9d, 0x88, 0xe9, 0xcf, 0x1d, 0x15, 0xd2, 0xff, 0x83,
	0xa0, 0x5f, 0x21, 0xa2, 0x60, 0xb9, 0xa0, 0xf8, 0x15, 0x38, 0x42, 0x21, 0x23, 0x34, 0x46, 0x93,
	0xfe, 0xd4, 0x0d, 0x78, 0x91, 0x04, 0x66, 0xc8, 0xb4, 0xf0, 0x53, 0x68, 0x49, 0x76, 0x43, 0xf3,
	0x51, 0x63, 0x8c, 0x26, 0x9d, 0x58, 0x17, 0xf8, 0x19, 0x38, 0x19, 0xb9, 0xfd, 0x7e, 0x39, 0x1b,
	0x35, 0xc7, 0x68, 0xd2, 0x8c, 0x4d, 0x85, 0x5f, 0x43, 0xfb, 0x37, 0xe3, 0x37, 0x5b, 0x46, 0x56,
	0xa3, 0xa3, 0x31, 0x9a, 0xb8, 0xd3, 0x9e, 0x22, 0xbd, 0x32, 0x60, 0xbc, 0x6f, 0xfb, 0x7f, 0x11,
	0xb8, 0x61, 0x9e, 0x4a, 0x23, 0xb0, 0x5e, 0x84, 0xec, 0x45, 0x36, 0x61, 0xe3, 0x41, 0xc2, 0x92,
	0x60, 0xcd, 0x78, 0x42, 0x95, 0xa4, 0x76, 0xac, 0x0b, 0xfc, 0x02, 0x40, 0x12, 0xbe, 0xa1, 0xf2,
	0x9a, 0xe5, 0x54, 0x69, 0xea, 0xc4, 0x16, 0x82, 0x9f, 0x43, 0x47, 0x57, 0xe7, 0xf9, 0xaf, 0x51,
	0x4b, 0xb5, 0x6b, 0xc0, 0xef, 0x43, 0x57, 0x6b, 0xd4, 0x27, 0xf3, 0xdf, 0x43, 0xef, 0x82, 0xad,
	0xd2, 0xf5, 0x5d, 0xa5, 0xda, 0xd6, 0x87, 0x1e, 0xfe, 0xe1, 0x01, 0xf4, 0xab, 0x6f, 0x0d, 0x5b,
	0x1f, 0xba, 0x33, 0x49, 0x78, 0x75, 0x02, 0x63, 0x1a, 0xaf, 0xd7, 0xf5, 0xc0, 0x9d, 0x49, 0x56,
	0x54, 0x7d, 0x35, 0x5f, 0x96, 0xa6, 0xfd, 0x0f, 0x41, 0xbb, 0x5a, 0x84, 0xdf, 0x41, 0x7b, 0x49,
	0x04, 0x9d, 0xa7, 0x19, 0x35, 0x4a, 0xbc, 0x40, 0xa7, 0x24, 0xa8, 0x52, 0x12, 0xcc, 0xab, 0x94,
	0xc4, 0xfb, 0x59, 0xec, 0x43, 0x37, 0xa3, 0x92, 0xa7, 0xc9, 0x25, 0xa7, 0xeb, 0xf4, 0xd6, 0xf8,
	0x7c, 0x80, 0x95, 0x47, 0xca, 0x49, 0x46, 0x45, 0x41, 0xcc, 0x79, 0x3b, 0x71, 0x0d, 0xe0, 0x31,
	0xb8, 0x09, 0xe1, 0xab, 0x34, 0x27, 0xdb, 0x54, 0xde, 0xa9, 0x1b, 0xb7, 0x62, 0x1b, 0x2a, 0x4d,
	0x48, 0xf3, 0x0d, 0xa7, 0x42, 0x94, 0x91, 0x69, 0xa9, 0x01, 0x0b, 0x79, 0xf3, 0x09, 0x1c, 0x1d,
	0x3b, 0xec, 0xc2, 0xe3, 0x45, 0xf4, 0x25, 0xfa, 0x76, 0x15, 0x0d, 0x1e, 0xe1, 0x21, 0xf4, 0x16,
	0x51, 0x18, 0x85, 0xf3, 0xf0, 0xc3, 0xd7, 0xf0, 0xfa, 0xfc, 0xe3, 0x00, 0xe1, 0x63, 0x70, 0x6d,
	0xa0, 0x51, 0x7e, 0x10, 0x2f, 0xa2, 0x28, 0x8c, 0x3e, 0x0f, 0x9a, 0xd3, 0xff, 0x08, 0x9c, 0x0b,
	0x5a, 0x3e, 0x16, 0x7c, 0xba, 0xa7, 0xc4, 0x76, 0xac, 0xf5, 0x25, 0xbd, 0x27, 0x07, 0x98, 0x79,
	0x0f, 0x6f, 0xe1, 0xa8, 0x34, 0x1b, 0x0f, 0x54, 0xd3, 0xca, 0xa6, 0x37, 0xb4, 0x10, 0x33, 0x1c,
	0x40, 0x4b, 0x79, 0x85, 0x87, 0x15, 0xd5, 0xde, 0x47, 0x0f, 0xdb, 0x50, 0x4d, 0x5e, 0x7a, 0x67,
	0xc8, 0x2d, 0x57, 0xbd, 0xa1, 0x85, 0x98, 0xe1, 0x53, 0x70, 0x74, 0x54, 0x8c, 0xf8, 0x83, 0xcc,
	0x19, 0xf1, 0x87, 0x59, 0x5a, 0x3a, 0xca, 0xe4, 0xb3, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c,
	0x35, 0xd2, 0x8e, 0x2d, 0x04, 0x00, 0x00,
}
