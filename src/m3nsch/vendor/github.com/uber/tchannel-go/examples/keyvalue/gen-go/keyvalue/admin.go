// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package keyvalue

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Admin interface {
	BaseService

	ClearAll() (err error)
}

type AdminClient struct {
	*BaseServiceClient
}

func NewAdminClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdminClient {
	return &AdminClient{BaseServiceClient: NewBaseServiceClientFactory(t, f)}
}

func NewAdminClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdminClient {
	return &AdminClient{BaseServiceClient: NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func (p *AdminClient) ClearAll() (err error) {
	if err = p.sendClearAll(); err != nil {
		return
	}
	return p.recvClearAll()
}

func (p *AdminClient) sendClearAll() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AdminClearAllArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminClient) recvClearAll() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearAll" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearAll failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearAll failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearAll failed: invalid message type")
		return
	}
	result := AdminClearAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotAuthorized != nil {
		err = result.NotAuthorized
		return
	}
	return
}

type AdminProcessor struct {
	*BaseServiceProcessor
}

func NewAdminProcessor(handler Admin) *AdminProcessor {
	self14 := &AdminProcessor{NewBaseServiceProcessor(handler)}
	self14.AddToProcessorMap("clearAll", &adminProcessorClearAll{handler: handler})
	return self14
}

type adminProcessorClearAll struct {
	handler Admin
}

func (p *adminProcessorClearAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClearAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClearAllResult{}
	var err2 error
	if err2 = p.handler.ClearAll(); err2 != nil {
		switch v := err2.(type) {
		case *NotAuthorized:
			result.NotAuthorized = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearAll: "+err2.Error())
			oprot.WriteMessageBegin("clearAll", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type AdminClearAllArgs struct {
}

func NewAdminClearAllArgs() *AdminClearAllArgs {
	return &AdminClearAllArgs{}
}

func (p *AdminClearAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClearAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearAll_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClearAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClearAllArgs(%+v)", *p)
}

// Attributes:
//  - NotAuthorized
type AdminClearAllResult struct {
	NotAuthorized *NotAuthorized `thrift:"notAuthorized,1" db:"notAuthorized" json:"notAuthorized,omitempty"`
}

func NewAdminClearAllResult() *AdminClearAllResult {
	return &AdminClearAllResult{}
}

var AdminClearAllResult_NotAuthorized_DEFAULT *NotAuthorized

func (p *AdminClearAllResult) GetNotAuthorized() *NotAuthorized {
	if !p.IsSetNotAuthorized() {
		return AdminClearAllResult_NotAuthorized_DEFAULT
	}
	return p.NotAuthorized
}
func (p *AdminClearAllResult) IsSetNotAuthorized() bool {
	return p.NotAuthorized != nil
}

func (p *AdminClearAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClearAllResult) ReadField1(iprot thrift.TProtocol) error {
	p.NotAuthorized = &NotAuthorized{}
	if err := p.NotAuthorized.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotAuthorized), err)
	}
	return nil
}

func (p *AdminClearAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearAll_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClearAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotAuthorized() {
		if err := oprot.WriteFieldBegin("notAuthorized", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notAuthorized: ", p), err)
		}
		if err := p.NotAuthorized.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotAuthorized), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notAuthorized: ", p), err)
		}
	}
	return err
}

func (p *AdminClearAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClearAllResult(%+v)", *p)
}
