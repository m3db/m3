// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3x/checked (interfaces: Bytes)

package checked

import (
	"github.com/m3db/m3x/resource"

	"github.com/golang/mock/gomock"
)

// Mock of Bytes interface
type MockBytes struct {
	ctrl     *gomock.Controller
	recorder *_MockBytesRecorder
}

// Recorder for MockBytes (not exported)
type _MockBytesRecorder struct {
	mock *MockBytes
}

func NewMockBytes(ctrl *gomock.Controller) *MockBytes {
	mock := &MockBytes{ctrl: ctrl}
	mock.recorder = &_MockBytesRecorder{mock}
	return mock
}

func (_m *MockBytes) EXPECT() *_MockBytesRecorder {
	return _m.recorder
}

func (_m *MockBytes) Append(_param0 byte) {
	_m.ctrl.Call(_m, "Append", _param0)
}

func (_mr *_MockBytesRecorder) Append(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Append", arg0)
}

func (_m *MockBytes) AppendAll(_param0 []byte) {
	_m.ctrl.Call(_m, "AppendAll", _param0)
}

func (_mr *_MockBytesRecorder) AppendAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AppendAll", arg0)
}

func (_m *MockBytes) Bytes() []byte {
	ret := _m.ctrl.Call(_m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockBytesRecorder) Bytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bytes")
}

func (_m *MockBytes) Cap() int {
	ret := _m.ctrl.Call(_m, "Cap")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBytesRecorder) Cap() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cap")
}

func (_m *MockBytes) DecReads() {
	_m.ctrl.Call(_m, "DecReads")
}

func (_mr *_MockBytesRecorder) DecReads() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecReads")
}

func (_m *MockBytes) DecRef() {
	_m.ctrl.Call(_m, "DecRef")
}

func (_mr *_MockBytesRecorder) DecRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecRef")
}

func (_m *MockBytes) DecWrites() {
	_m.ctrl.Call(_m, "DecWrites")
}

func (_mr *_MockBytesRecorder) DecWrites() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecWrites")
}

func (_m *MockBytes) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockBytesRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}

func (_m *MockBytes) Finalizer() resource.Finalizer {
	ret := _m.ctrl.Call(_m, "Finalizer")
	ret0, _ := ret[0].(resource.Finalizer)
	return ret0
}

func (_mr *_MockBytesRecorder) Finalizer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalizer")
}

func (_m *MockBytes) IncReads() {
	_m.ctrl.Call(_m, "IncReads")
}

func (_mr *_MockBytesRecorder) IncReads() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncReads")
}

func (_m *MockBytes) IncRef() {
	_m.ctrl.Call(_m, "IncRef")
}

func (_mr *_MockBytesRecorder) IncRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncRef")
}

func (_m *MockBytes) IncWrites() {
	_m.ctrl.Call(_m, "IncWrites")
}

func (_mr *_MockBytesRecorder) IncWrites() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncWrites")
}

func (_m *MockBytes) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBytesRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Len")
}

func (_m *MockBytes) MoveRef() {
	_m.ctrl.Call(_m, "MoveRef")
}

func (_mr *_MockBytesRecorder) MoveRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveRef")
}

func (_m *MockBytes) NumReaders() int {
	ret := _m.ctrl.Call(_m, "NumReaders")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBytesRecorder) NumReaders() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumReaders")
}

func (_m *MockBytes) NumRef() int {
	ret := _m.ctrl.Call(_m, "NumRef")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBytesRecorder) NumRef() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumRef")
}

func (_m *MockBytes) NumWriters() int {
	ret := _m.ctrl.Call(_m, "NumWriters")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBytesRecorder) NumWriters() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumWriters")
}

func (_m *MockBytes) Reset(_param0 []byte) {
	_m.ctrl.Call(_m, "Reset", _param0)
}

func (_mr *_MockBytesRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

func (_m *MockBytes) Resize(_param0 int) {
	_m.ctrl.Call(_m, "Resize", _param0)
}

func (_mr *_MockBytesRecorder) Resize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resize", arg0)
}

func (_m *MockBytes) SetFinalizer(_param0 resource.Finalizer) {
	_m.ctrl.Call(_m, "SetFinalizer", _param0)
}

func (_mr *_MockBytesRecorder) SetFinalizer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFinalizer", arg0)
}

func (_m *MockBytes) TrackObject(_param0 interface{}) {
	_m.ctrl.Call(_m, "TrackObject", _param0)
}

func (_mr *_MockBytesRecorder) TrackObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackObject", arg0)
}
