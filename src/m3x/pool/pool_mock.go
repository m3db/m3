// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3x/pool (interfaces: CheckedBytesPool,BytesPool)

package pool

import (
	"reflect"

	"github.com/m3db/m3x/checked"

	"github.com/golang/mock/gomock"
)

// MockCheckedBytesPool is a mock of CheckedBytesPool interface
type MockCheckedBytesPool struct {
	ctrl     *gomock.Controller
	recorder *MockCheckedBytesPoolMockRecorder
}

// MockCheckedBytesPoolMockRecorder is the mock recorder for MockCheckedBytesPool
type MockCheckedBytesPoolMockRecorder struct {
	mock *MockCheckedBytesPool
}

// NewMockCheckedBytesPool creates a new mock instance
func NewMockCheckedBytesPool(ctrl *gomock.Controller) *MockCheckedBytesPool {
	mock := &MockCheckedBytesPool{ctrl: ctrl}
	mock.recorder = &MockCheckedBytesPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCheckedBytesPool) EXPECT() *MockCheckedBytesPoolMockRecorder {
	return _m.recorder
}

// BytesPool mocks base method
func (_m *MockCheckedBytesPool) BytesPool() BytesPool {
	ret := _m.ctrl.Call(_m, "BytesPool")
	ret0, _ := ret[0].(BytesPool)
	return ret0
}

// BytesPool indicates an expected call of BytesPool
func (_mr *MockCheckedBytesPoolMockRecorder) BytesPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BytesPool", reflect.TypeOf((*MockCheckedBytesPool)(nil).BytesPool))
}

// Get mocks base method
func (_m *MockCheckedBytesPool) Get(_param0 int) checked.Bytes {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(checked.Bytes)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockCheckedBytesPoolMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockCheckedBytesPool)(nil).Get), arg0)
}

// Init mocks base method
func (_m *MockCheckedBytesPool) Init() {
	_m.ctrl.Call(_m, "Init")
}

// Init indicates an expected call of Init
func (_mr *MockCheckedBytesPoolMockRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Init", reflect.TypeOf((*MockCheckedBytesPool)(nil).Init))
}

// MockBytesPool is a mock of BytesPool interface
type MockBytesPool struct {
	ctrl     *gomock.Controller
	recorder *MockBytesPoolMockRecorder
}

// MockBytesPoolMockRecorder is the mock recorder for MockBytesPool
type MockBytesPoolMockRecorder struct {
	mock *MockBytesPool
}

// NewMockBytesPool creates a new mock instance
func NewMockBytesPool(ctrl *gomock.Controller) *MockBytesPool {
	mock := &MockBytesPool{ctrl: ctrl}
	mock.recorder = &MockBytesPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBytesPool) EXPECT() *MockBytesPoolMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockBytesPool) Get(_param0 int) []byte {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockBytesPoolMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockBytesPool)(nil).Get), arg0)
}

// Init mocks base method
func (_m *MockBytesPool) Init() {
	_m.ctrl.Call(_m, "Init")
}

// Init indicates an expected call of Init
func (_mr *MockBytesPoolMockRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Init", reflect.TypeOf((*MockBytesPool)(nil).Init))
}

// Put mocks base method
func (_m *MockBytesPool) Put(_param0 []byte) {
	_m.ctrl.Call(_m, "Put", _param0)
}

// Put indicates an expected call of Put
func (_mr *MockBytesPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockBytesPool)(nil).Put), arg0)
}
