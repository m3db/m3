// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3x/ident (interfaces: ID,TagIterator)

package ident

import (
	"reflect"

	"github.com/m3db/m3x/checked"

	"github.com/golang/mock/gomock"
)

// MockID is a mock of ID interface
type MockID struct {
	ctrl     *gomock.Controller
	recorder *MockIDMockRecorder
}

// MockIDMockRecorder is the mock recorder for MockID
type MockIDMockRecorder struct {
	mock *MockID
}

// NewMockID creates a new mock instance
func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &MockIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockID) EXPECT() *MockIDMockRecorder {
	return _m.recorder
}

// Data mocks base method
func (_m *MockID) Data() checked.Bytes {
	ret := _m.ctrl.Call(_m, "Data")
	ret0, _ := ret[0].(checked.Bytes)
	return ret0
}

// Data indicates an expected call of Data
func (_mr *MockIDMockRecorder) Data() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Data", reflect.TypeOf((*MockID)(nil).Data))
}

// Equal mocks base method
func (_m *MockID) Equal(_param0 ID) bool {
	ret := _m.ctrl.Call(_m, "Equal", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (_mr *MockIDMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Equal", reflect.TypeOf((*MockID)(nil).Equal), arg0)
}

// Finalize mocks base method
func (_m *MockID) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

// Finalize indicates an expected call of Finalize
func (_mr *MockIDMockRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Finalize", reflect.TypeOf((*MockID)(nil).Finalize))
}

// Hash mocks base method
func (_m *MockID) Hash() Hash {
	ret := _m.ctrl.Call(_m, "Hash")
	ret0, _ := ret[0].(Hash)
	return ret0
}

// Hash indicates an expected call of Hash
func (_mr *MockIDMockRecorder) Hash() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Hash", reflect.TypeOf((*MockID)(nil).Hash))
}

// Reset mocks base method
func (_m *MockID) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockIDMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockID)(nil).Reset))
}

// String mocks base method
func (_m *MockID) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockIDMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "String", reflect.TypeOf((*MockID)(nil).String))
}

// MockTagIterator is a mock of TagIterator interface
type MockTagIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTagIteratorMockRecorder
}

// MockTagIteratorMockRecorder is the mock recorder for MockTagIterator
type MockTagIteratorMockRecorder struct {
	mock *MockTagIterator
}

// NewMockTagIterator creates a new mock instance
func NewMockTagIterator(ctrl *gomock.Controller) *MockTagIterator {
	mock := &MockTagIterator{ctrl: ctrl}
	mock.recorder = &MockTagIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTagIterator) EXPECT() *MockTagIteratorMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockTagIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockTagIteratorMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockTagIterator)(nil).Close))
}

// Current mocks base method
func (_m *MockTagIterator) Current() Tag {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(Tag)
	return ret0
}

// Current indicates an expected call of Current
func (_mr *MockTagIteratorMockRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Current", reflect.TypeOf((*MockTagIterator)(nil).Current))
}

// Duplicate mocks base method
func (_m *MockTagIterator) Duplicate() TagIterator {
	ret := _m.ctrl.Call(_m, "Duplicate")
	ret0, _ := ret[0].(TagIterator)
	return ret0
}

// Duplicate indicates an expected call of Duplicate
func (_mr *MockTagIteratorMockRecorder) Duplicate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Duplicate", reflect.TypeOf((*MockTagIterator)(nil).Duplicate))
}

// Err mocks base method
func (_m *MockTagIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (_mr *MockTagIteratorMockRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Err", reflect.TypeOf((*MockTagIterator)(nil).Err))
}

// Next mocks base method
func (_m *MockTagIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockTagIteratorMockRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Next", reflect.TypeOf((*MockTagIterator)(nil).Next))
}

// Remaining mocks base method
func (_m *MockTagIterator) Remaining() int {
	ret := _m.ctrl.Call(_m, "Remaining")
	ret0, _ := ret[0].(int)
	return ret0
}

// Remaining indicates an expected call of Remaining
func (_mr *MockTagIteratorMockRecorder) Remaining() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remaining", reflect.TypeOf((*MockTagIterator)(nil).Remaining))
}
