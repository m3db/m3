// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3x/ident (interfaces: ID,TagIterator,MapKey)

package ident

import (
	"github.com/m3db/m3x/checked"

	"github.com/golang/mock/gomock"
)

// Mock of ID interface
type MockID struct {
	ctrl     *gomock.Controller
	recorder *_MockIDRecorder
}

// Recorder for MockID (not exported)
type _MockIDRecorder struct {
	mock *MockID
}

func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &_MockIDRecorder{mock}
	return mock
}

func (_m *MockID) EXPECT() *_MockIDRecorder {
	return _m.recorder
}

func (_m *MockID) Bytes() []byte {
	ret := _m.ctrl.Call(_m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockIDRecorder) Bytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bytes")
}

func (_m *MockID) Data() checked.Bytes {
	ret := _m.ctrl.Call(_m, "Data")
	ret0, _ := ret[0].(checked.Bytes)
	return ret0
}

func (_mr *_MockIDRecorder) Data() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Data")
}

func (_m *MockID) Equal(_param0 ID) bool {
	ret := _m.ctrl.Call(_m, "Equal", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIDRecorder) Equal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Equal", arg0)
}

func (_m *MockID) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockIDRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}

func (_m *MockID) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

func (_mr *_MockIDRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

func (_m *MockID) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockIDRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

// Mock of TagIterator interface
type MockTagIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockTagIteratorRecorder
}

// Recorder for MockTagIterator (not exported)
type _MockTagIteratorRecorder struct {
	mock *MockTagIterator
}

func NewMockTagIterator(ctrl *gomock.Controller) *MockTagIterator {
	mock := &MockTagIterator{ctrl: ctrl}
	mock.recorder = &_MockTagIteratorRecorder{mock}
	return mock
}

func (_m *MockTagIterator) EXPECT() *_MockTagIteratorRecorder {
	return _m.recorder
}

func (_m *MockTagIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockTagIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockTagIterator) Current() Tag {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(Tag)
	return ret0
}

func (_mr *_MockTagIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockTagIterator) Duplicate() TagIterator {
	ret := _m.ctrl.Call(_m, "Duplicate")
	ret0, _ := ret[0].(TagIterator)
	return ret0
}

func (_mr *_MockTagIteratorRecorder) Duplicate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Duplicate")
}

func (_m *MockTagIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTagIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockTagIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTagIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockTagIterator) Remaining() int {
	ret := _m.ctrl.Call(_m, "Remaining")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockTagIteratorRecorder) Remaining() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remaining")
}

// Mock of MapKey interface
type MockMapKey struct {
	ctrl     *gomock.Controller
	recorder *_MockMapKeyRecorder
}

// Recorder for MockMapKey (not exported)
type _MockMapKeyRecorder struct {
	mock *MockMapKey
}

func NewMockMapKey(ctrl *gomock.Controller) *MockMapKey {
	mock := &MockMapKey{ctrl: ctrl}
	mock.recorder = &_MockMapKeyRecorder{mock}
	return mock
}

func (_m *MockMapKey) EXPECT() *_MockMapKeyRecorder {
	return _m.recorder
}

func (_m *MockMapKey) Bytes() []byte {
	ret := _m.ctrl.Call(_m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockMapKeyRecorder) Bytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bytes")
}

func (_m *MockMapKey) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockMapKeyRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}
