# NOTE: Run `make asset-gen-query` if you make any changes to this file!
swagger: "2.0"
info:
  title: "M3DB"
  description: "A distributed time series database using M3TSZ float64 compression. You can find out more about M3DB at [https://docs.m3db.io/](https://docs.m3db.io/) or on [GitHub](https://github.com/m3db/m3)."
  version: "1.0.0"
  contact:
    name: "M3BD Google Group"
    url: "https://groups.google.com/forum/#!forum/m3db"
  license:
    name: "Apache License 2.0"
    url: "https://github.com/m3db/m3/blob/master/LICENSE"
host: "hostname:7201"
basePath: "/api/v1"
tags:
- name: "M3DB Namespace"
  description: "Configuring M3DB namespaces"
- name: "M3DB Placement"
  description: "Configuring M3DB placements"
- name: "M3Aggregator Placement"
  description: "Configuring M3Aggregator placements"
- name: "M3DB Database"
  description: "M3DB Database-wide functions"
schemes:
- "http"
paths:
  /services/m3db/namespace:
    get:
      tags:
        - "M3DB Namespace"
      summary: "Get M3DB namespaces"
      operationId: "namespaceGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/NamespaceGetResponse"
        404:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "M3DB Namespace"
      summary: "Add an M3DB namespace"
      operationId: "namespaceAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/NamespaceAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/NamespaceGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/namespace/{namespaceID}:
    delete:
      tags:
      - "M3DB Namespace"
      summary: "Delete an M3DB namespace"
      operationId: "namespaceDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "namespaceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        404:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/placement:
    get:
      tags:
      - "M3DB Placement"
      summary: "Get the M3DB placement"
      operationId: "placementGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "M3DB Placement"
      summary: "Add an instance to the placement"
      operationId: "placementAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    delete:
      tags:
      - "M3DB Placement"
      summary: "Delete the M3DB placement"
      operationId: "placementDeleteAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3coordinator/placement:
    get:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Get the M3Coordinator placement"
      operationId: "placementGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Add an instance to the placement"
      operationId: "placementAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    delete:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Delete the M3Coordinator placement"
      operationId: "placementDeleteAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3aggregator/placement:
    get:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Get the M3Agg placement"
      operationId: "m3AggplacementGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Add an M3Agg instance to the placement"
      operationId: "m3AggplacementAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    delete:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Delete the M3Agg placement"
      operationId: "m3AggPlacementDeleteAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/placement/init:
    post:
      tags:
      - "M3DB Placement"
      summary: "Initialize the M3DB placement"
      operationId: "placementInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementInitRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/placement/replace:
    post:
      tags:
      - "M3DB Placement"
      summary: "Replace an M3DB instance in the placement"
      operationId: "placementReplace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementReplaceRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3coordinator/placement/init:
    post:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Initialize the M3Coordinator placement"
      operationId: "placementInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementInitRequestM3Coordinator"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3coordinator/placement/replace:
    post:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Replace an M3Coordinator"
      operationId: "placementReplace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementReplaceRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3aggregator/placement/init:
    post:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Initialize the M3Agg placement"
      operationId: "m3AggPlacementInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementInitRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3aggregator/placement/replace:
    post:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Replace an M3Aggregator"
      operationId: "m3AggPlacementReplace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementReplaceRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/placement/{instanceID}:
    delete:
      tags:
      - "M3DB Placement"
      summary: "Delete an M3DB instance from the placement"
      operationId: "placementDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instanceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3coordinator/placement/{instanceID}:
    delete:
      tags:
      - "M3Coordinator Placement"
      - "M3Coordinator"
      summary: "Delete an M3Coordinator instance from the placement"
      operationId: "placementDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instanceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3aggregator/placement/{instanceID}:
    delete:
      tags:
      - "M3Aggregator Placement"
      - "M3Aggregator"
      summary: "Delete an M3Agg instance from the placement"
      operationId: "m3aggPlacementDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instanceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/database/create:
    post:
      tags:
      - "M3DB Database"
      summary: "Configures M3DB with most options defaulted"
      operationId: "databaseCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/DatabaseCreateRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DatabaseCreateResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /services/m3db/database/config/bootstrappers:
    post:
      tags:
      - "M3DB Database"
      summary: "Dynamically override the bootstrappers configured in M3DBs node-level configuration"
      operationId: "databaseConfigSetBootstrappers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/DatabaseConfigBootstrappers"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DatabaseConfigBootstrappers"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    get:
      tags:
      - "M3DB Database"
      summary: "Retrieve the dynamically configured bootstrappers override, if any"
      operationId: "databaseConfigGetBootstrappers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DatabaseConfigBootstrappers"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        404:
          description: "not found if not set"
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
definitions:
  NamespaceAddRequest:
    type: "object"
    properties:
      name:
        type: "string"
      options:
        $ref: "#/definitions/NamespaceOptions"
  NamespaceOptions:
    type: "object"
    properties:
      bootstrapEnabled:
        type: "boolean"
      flushEnabled:
        type: "boolean"
      writesToCommitLog:
        type: "boolean"
      cleanupEnabled:
        type: "boolean"
      repairEnabled:
        type: "boolean"
      retentionOptions:
        $ref: "#/definitions/RetentionOptions"
      snapshotEnabled:
        type: "boolean"
      indexOptions:
        $ref: "#/definitions/IndexOptions"
  RetentionOptions:
    type: "object"
    properties:
      retentionPeriodDuration:
        type: "string"
      blockSizeDuration:
        type: "string"
      bufferFutureDuration:
        type: "string"
      bufferPastDuration:
        type: "string"
      blockDataExpiry:
        type: "boolean"
      blockDataExpiryAfterNotAccessPeriodDuration:
        type: "string"
  IndexOptions:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      blockSizeDuration:
        type: "string"
  NamespaceGetResponse:
    type: "object"
    properties:
      registry:
        $ref: "#/definitions/NamespaceRegistry"
  NamespaceRegistry:
    type: "object"
    properties:
      namespaces:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/NamespaceOptions"
  DeleteConfirmation:
    type: "object"
    properties:
      deleted:
        type: "boolean"
  PlacementGetResponse:
    type: "object"
    properties:
      placement:
        $ref: "#/definitions/Placement"
      version:
        type: "integer"
        format: "int32"
  Placement:
    type: "object"
    properties:
      instances:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Instance"
      replicaFactor:
        type: "integer"
      numShards:
        type: "integer"
      isSharded:
        type: "boolean"
      cutoverTime:
        type: "integer"
        format: "int64"
      isMirrored:
        type: "boolean"
      maxShardSetId:
        type: "integer"
  Instance:
    type: "object"
    properties:
      id:
        type: "string"
      isolationGroup:
        type: "string"
      zone:
        type: "string"
      weight:
        type: "integer"
      endpoint:
        type: "string"
      shards:
        type: "array"
        items:
          $ref: "#/definitions/Shard"
      shardSetId:
        type: "integer"
      hostname:
        type: "string"
      port:
        type: "integer"
  InstanceRequest:
    type: "object"
    properties:
      id:
        type: "string"
      isolationGroup:
        type: "string"
      zone:
        type: "string"
      weight:
        type: "integer"
      endpoint:
        type: "string"
      hostname:
        type: "string"
      port:
        type: "integer"
  InstanceRequestM3Coordinator:
    type: "object"
    properties:
      id:
        type: "string"
      zone:
        type: "string"
      endpoint:
        type: "string"
      hostname:
        type: "string"
      port:
        type: "integer"
  Shard:
    type: "object"
    properties:
      id:
        type: "integer"
      state:
        $ref: "#/definitions/ShardState"
      sourceId:
        type: "string"
      cutoverNanos:
        type: "integer"
        format: "int64"
      cutoffNanos:
        type: "integer"
        format: "int64"
  ShardState:
    type: "string"
    enum:
    - "INITIALIZING"
    - "AVAILABLE"
    - "LEAVING"
  PlacementAddRequest:
    type: "object"
    properties:
      instances:
        type: "array"
        items:
          $ref: "#/definitions/InstanceRequest"
      force:
        type: "boolean"
  PlacementInitRequest:
    type: "object"
    properties:
      instances:
        type: "array"
        items:
          $ref: "#/definitions/InstanceRequest"
      numShards:
        type: "integer"
        format: "int32"
      replicationFactor:
        type: "integer"
        format: "int32"
  PlacementReplaceRequest:
    type: "object"
    properties:
      leavingInstanceIDs:
        type: "array"
        items:
          type: "string"
      candidates:
        type: "array"
        items:
          $ref: "#/definitions/InstanceRequest"
      force:
        type: "boolean"
  PlacementInitRequestM3Coordinator:
    type: "object"
    properties:
      instances:
        type: "array"
        items:
          $ref: "#/definitions/InstanceRequest"
  GenericError:
    type: "object"
    properties:
      error:
        type: "string"
  DatabaseCreateRequest:
    type: "object"
    properties:
      namespaceName:
        type: "string"
      type:
        type: "string"
        enum:
        - "local"
        - "cluster"
      numShards:
        type: "integer"
        format: "int32"
      replicationFactor:
        type: "integer"
        format: "int32"
      retentionTime:
        type: "string"
      blockSize:
        $ref: "#/definitions/BlockSize"
      hosts:
        type: "array"
        items:
          $ref: "#/definitions/Host"
  BlockSize:
    type: "object"
    properties:
      time:
        type: "string"
      expectedSeriesDatapointsPerHour:
        type: "integer"
        format: "int64"
  Host:
    type: "object"
    properties:
      id:
        type: "string"
      address:
        type: "string"
      port:
        type: "integer"
      isolationGroup:
        type: "string"
      zone:
        type: "string"
      weight:
        type: "integer"
      expectedSeriesDatapointsPerHour:
        type: "integer"
        format: "int64"
  DatabaseCreateResponse:
    type: "object"
    properties:
      namespace:
        $ref: "#/definitions/NamespaceGetResponse"
      placement:
        $ref: "#/definitions/PlacementGetResponse"
  DatabaseConfigBootstrappers:
    type: "object"
    properties:
      values:
        type: "array"
        items:
          type: "string"
