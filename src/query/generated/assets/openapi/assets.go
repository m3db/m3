// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    19038,
		modtime: 12345,
		compressed: `
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
//8tjOO2XkoAAA==
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
