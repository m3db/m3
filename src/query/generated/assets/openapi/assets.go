// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    24401,
		modtime: 12345,
		compressed: `
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
AA==
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
