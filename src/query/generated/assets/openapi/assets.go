// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    19016,
		modtime: 12345,
		compressed: `
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
AP//ura7GEhKAAA=
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
