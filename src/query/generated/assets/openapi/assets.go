// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    25958,
		modtime: 12345,
		compressed: `
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
+0HW5x8GdyuK2v4fAAD//+IJASNmZQAA
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
