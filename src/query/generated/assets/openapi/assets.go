// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    22816,
		modtime: 12345,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
