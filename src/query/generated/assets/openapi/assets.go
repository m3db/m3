// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    21608,
		modtime: 12345,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
