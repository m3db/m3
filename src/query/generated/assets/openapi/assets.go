// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    15324,
		modtime: 12345,
		compressed: `
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
fwAAAP//KJ57PNw7AAA=
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
