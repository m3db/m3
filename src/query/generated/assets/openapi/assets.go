// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    11257,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/+xaX1PbOBB/z6fYuvdwfQBT4HozeQuQQmZoYIDpzLVzM1WstaPWllxpVaCd++438p/E
SVzbIRRa7vICWKv9+/NvVyLPYXx2NezDhZXwIWGfEJgxSFsRyq3PFvXtBxAh3CoL+aK8hWDKZIQGSAFN
hYFQxPisZ65ZFKHug7e7veP1hAxVvwdAgmLsg/dm7+jA6wFwNIEWKQkl++ANgAtDWkwsIQcSCYJBLdAA
Z8QmzCBYI2QEb/auLt9BGCtGr/YhUEmq0Rih5Db8pSwETEIoJAdlCRKlEdjE/eqsAiN4PyVK+76f7PHJ
diRoaifbQvnJnv/3799degFKg5Lw/ljQiZ3kkqbv+4VUoJJsl5/svdh2sX1BbfK4Xm7vuCQABEoSC8hl
AkCyJE/FwREcKxXFCMda2dTLVq2O++DNbLgFsx1lYpmpUGmb+M+f5T+dYbcvFgFKgwsGBikLpgin+RLs
5q6sWFiJwp/EauInzBBq/3R0OBxfDr3eVBly25ShTP+fuzsvvZ6rzTmjaR88n6XC//LS6xGLTL+3Vbrh
fpiUBbha90MlQxFZnZf26ABmssabK0hjFmCCkjooqMjO9pcYWt1+VKxsXQuOEFoZuAXj9UwwxQSzKLJE
eb2U0dS49PozH/NkR1iUFSAPHIrP1lLo7mNskjB92wfvGGkh2nxdpaiZ82HEq5k7RiolAiWNzVybWWFp
Gosg2+Z/NEqWoqlW3AadRDWaVEmDFfd3d3bmfywnzqusZLliVVmA3zSGffCe+xxDIUWWVX9cCeeiMDhX
9Me92ztGiVoEQ62VzhWkDsM1xWou1YBzYLAi8J1aDTj/sbVKmWYJEuqKcIH0ieK381QJufJoNXfNlRpw
foGfLRr6iZCy/wBIeRhEzrnE/zb7dXT0T66KY4yE6+P1KNu3BmTzDY+G2krkS+B1pDt/pPGzFRp5H0hb
nD2m29RpcfODjB4Upnnesh6kkyzkhwfp/s7+U3kZZr27sbFuLQ0Eq22VpggrIovQny0/jc56Xgnnp+us
DdXKOqsEIQ0xGWB+lOhevKfQas8rwTxGq22GztNptS3ttAGkRTtdB5j5lkEcPwFuaWpyD9kUfCfT34Bs
Rs4Gi8XX9Wrptj0dlnHR/E8zD4LXb2Vb6zbQtzNQtVOGWiV3oKRHA/I8F7/WiP+fwW15SeYHGlkJ0gai
rV6qLaK1vJNDk1/JXQuaQqIMgcpcNsAxZDYm5PWYLVUfZp788tx7tBDOY5DvsgdPFcaVFbe35hYrV1nQ
iZp8xKCoRKodBknMC5GhoJmBCjzPpZovs87S4na54tpZVUUnvyZKkSHN0qFkkxj5io8TpWJkM4SHsTXT
jrLXWhCaK3WokkTQqYraNgTuD9vVFY0pE7qzMKF0yTnrlOWLJfEZL0mWmqmijlaF5HjTzeKoIuq2X9Q6
3Kmms1jPUQvFx0wqs+KpkIQRVl6nULmBPF95tV8+n8Qq+HQpvuJmWmwYon5tyer7UHTODG0eleOx4U0q
9G1bGZfEByGhHisaBAEas2GSRysQ6VRj7AbAzctXd3m+FhYjYaia4mZWuyjkF0xfLCjpzLf5P8NWgq5u
dB/GeeYFi89X1KxFw6tn2zUczqf5xoLWTY9rWFi6EG0fUssUlf+BXgs9e7sLLq/hZznc/6DKjQr1lTbi
ZrnXLCCl22KUNrmcMs1bXyVhMrn2NzSwpL6gvhI180FHNhPmjXAjS7uxhN1kbl0ijXiTuTJJ65SNt8w3
wqg4eyuyrye0CH9Vsm1eukYRTaktaSh5qoSkFmWmvqpMa1Yd2wmTdoRlKV5Q3Jpv95l9F6LZ01TpxqAz
65vVbckxQ4ywhTRyWFHlhGWU1QGO2lBR4H+jdu50hOGdVcx9X0hb1U+UNskXt8AbjUdXo8Hp6N1ofOyV
DwdvB6PTwcHpcPbkdDh4W0jUXMvfCyHeCZ5VAqy7yfs5PFuLbetaT4XbnfZu/F6nqHoqXGdCm8vXgqr2
IH+XCWfczhnZw2aRKsYLAMcqYLFXfRLE1tAduuEPrc/Ckae2jy5GOpuJWyjtoJSrEvQ9If1E5Zc2B4u+
dCo8tYeINykGhPwy+9qjQ1rWA91Z5URZfReSPFHrMUMb7zPONRqzYbN7xLni/lNcf7F2F0roetqquYZe
+5SwoOPfAAAA//9UScW2+SsAAA==
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
