// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    23034,
		modtime: 12345,
		compressed: `
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
AP//JDPkT/pZAAA=
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
