// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    22713,
		modtime: 12345,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
