// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    642,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9xJaHDtiQydmwpceuQ9DLblUk2lYrU4bIpDC2/ffBUdLmRr5H
fXwgpJfbhx+Pv3/dQS9D2Cz0siwXPx8e79awOxA8DeYFwTCjlB1SaWNMzpORmJ7AtzDFA+QRmsD2hjpk
kAjSe4bWB1wuynKz0BkOoHs0bi4AtHgJuLm/3X6HHW6j1Sor2R1QzExMjNIUB2nLz4W69sgM2BRHj69j
TFKAjSRI0hSv3knfODx6i+WpWYEnL96Ekq0J2HwozqDg6QX6hG1T9CIjr5VqIwlXXYxdQDN6rmwclGX+
2prBh6m5n31Mycj6tq5XH+t69amu/+7iPkq8lgpIGJqCZQrIPaJclp6UXAPso5vgz7kBGEzqPK2h/vIm
jcY5T92V9i9z1BtIq8tZ9cw770noogUe0ZaHFJqbOCKZ0SsWI96q2aimIdxstDqNXuLZ5EcBTvb9KNZR
9cwOgz+milAUjUN+9C0YQRa1P5ALyFmsWAw5EyJh9czFZs56ouawOaNW+VP8DwAA//+nh0MWggIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    11265,
		modtime: 12345,
		compressed: `
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
9ylhRcd/AwAA//9SGe+uASwAAA==
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
