// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/query/generated/proto/prompb/annotations.proto

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package prompb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/query/generated/proto/prompb/annotations.proto
		github.com/m3db/m3/src/query/generated/proto/prompb/remote.proto
		github.com/m3db/m3/src/query/generated/proto/prompb/types.proto

	It has these top-level messages:
		AnnotatedSample
		AnnotatedTimeSeries
		AnnotatedWriteRequest
		WriteRequest
		ReadRequest
		ReadResponse
		Query
		QueryResult
		Sample
		TimeSeries
		Label
		Labels
		LabelMatcher
*/
package prompb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AnnotatedSample struct {
	Value      float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Annotation []byte  `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (m *AnnotatedSample) Reset()                    { *m = AnnotatedSample{} }
func (m *AnnotatedSample) String() string            { return proto.CompactTextString(m) }
func (*AnnotatedSample) ProtoMessage()               {}
func (*AnnotatedSample) Descriptor() ([]byte, []int) { return fileDescriptorAnnotations, []int{0} }

func (m *AnnotatedSample) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AnnotatedSample) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AnnotatedSample) GetAnnotation() []byte {
	if m != nil {
		return m.Annotation
	}
	return nil
}

type AnnotatedTimeSeries struct {
	Labels  []Label           `protobuf:"bytes,1,rep,name=labels" json:"labels"`
	Samples []AnnotatedSample `protobuf:"bytes,2,rep,name=samples" json:"samples"`
}

func (m *AnnotatedTimeSeries) Reset()                    { *m = AnnotatedTimeSeries{} }
func (m *AnnotatedTimeSeries) String() string            { return proto.CompactTextString(m) }
func (*AnnotatedTimeSeries) ProtoMessage()               {}
func (*AnnotatedTimeSeries) Descriptor() ([]byte, []int) { return fileDescriptorAnnotations, []int{1} }

func (m *AnnotatedTimeSeries) GetLabels() []Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AnnotatedTimeSeries) GetSamples() []AnnotatedSample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type AnnotatedWriteRequest struct {
	Timeseries []AnnotatedTimeSeries `protobuf:"bytes,1,rep,name=timeseries" json:"timeseries"`
}

func (m *AnnotatedWriteRequest) Reset()                    { *m = AnnotatedWriteRequest{} }
func (m *AnnotatedWriteRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotatedWriteRequest) ProtoMessage()               {}
func (*AnnotatedWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnnotations, []int{2} }

func (m *AnnotatedWriteRequest) GetTimeseries() []AnnotatedTimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func init() {
	proto.RegisterType((*AnnotatedSample)(nil), "m3prometheus.AnnotatedSample")
	proto.RegisterType((*AnnotatedTimeSeries)(nil), "m3prometheus.AnnotatedTimeSeries")
	proto.RegisterType((*AnnotatedWriteRequest)(nil), "m3prometheus.AnnotatedWriteRequest")
}
func (m *AnnotatedSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedSample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnnotations(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Annotation) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnnotations(dAtA, i, uint64(len(m.Annotation)))
		i += copy(dAtA[i:], m.Annotation)
	}
	return i, nil
}

func (m *AnnotatedTimeSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedTimeSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, msg := range m.Labels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnnotations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Samples) > 0 {
		for _, msg := range m.Samples {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnnotations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AnnotatedWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, msg := range m.Timeseries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnnotations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAnnotations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AnnotatedSample) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	if m.Timestamp != 0 {
		n += 1 + sovAnnotations(uint64(m.Timestamp))
	}
	l = len(m.Annotation)
	if l > 0 {
		n += 1 + l + sovAnnotations(uint64(l))
	}
	return n
}

func (m *AnnotatedTimeSeries) Size() (n int) {
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovAnnotations(uint64(l))
		}
	}
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovAnnotations(uint64(l))
		}
	}
	return n
}

func (m *AnnotatedWriteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, e := range m.Timeseries {
			l = e.Size()
			n += 1 + l + sovAnnotations(uint64(l))
		}
	}
	return n
}

func sovAnnotations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnnotations(x uint64) (n int) {
	return sovAnnotations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnnotatedSample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnotations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnnotations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotation = append(m.Annotation[:0], dAtA[iNdEx:postIndex]...)
			if m.Annotation == nil {
				m.Annotation = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnnotations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnnotations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedTimeSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnotations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedTimeSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedTimeSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnnotations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnnotations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, AnnotatedSample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnnotations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnnotations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnotations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnnotations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeseries = append(m.Timeseries, AnnotatedTimeSeries{})
			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnnotations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnnotations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnnotations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnnotations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAnnotations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnnotations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnnotations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnnotations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnnotations   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/query/generated/proto/prompb/annotations.proto", fileDescriptorAnnotations)
}

var fileDescriptorAnnotations = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0xed, 0xb6, 0xdf, 0x57, 0x71, 0x2c, 0x08, 0x5b, 0x85, 0x50, 0x34, 0xc6, 0x9e, 0x72, 0x31,
	0x8b, 0xe6, 0x2c, 0x62, 0x41, 0xbc, 0x78, 0x4a, 0x05, 0xc1, 0x93, 0x9b, 0x76, 0x4c, 0x03, 0xd9,
	0x6c, 0x9a, 0xdd, 0x08, 0xfd, 0x05, 0x5e, 0xfd, 0x59, 0x3d, 0xfa, 0x0b, 0x44, 0xea, 0x1f, 0x91,
	0x6c, 0x62, 0x1b, 0x05, 0x2f, 0x5e, 0x96, 0x9d, 0x99, 0xf7, 0xde, 0xbe, 0x37, 0x0b, 0x57, 0x51,
	0xac, 0x67, 0x45, 0xe8, 0x4d, 0xa4, 0x60, 0xc2, 0x9f, 0x86, 0x4c, 0xf8, 0x4c, 0xe5, 0x13, 0x36,
	0x2f, 0x30, 0x5f, 0xb0, 0x08, 0x53, 0xcc, 0xb9, 0xc6, 0x29, 0xcb, 0x72, 0xa9, 0x65, 0x79, 0x8a,
	0x2c, 0x64, 0x3c, 0x4d, 0xa5, 0xe6, 0x3a, 0x96, 0xa9, 0xf2, 0xcc, 0x80, 0xf6, 0x84, 0x5f, 0xce,
	0x50, 0xcf, 0xb0, 0x50, 0x83, 0x8b, 0xbf, 0x88, 0xea, 0x45, 0x86, 0xb5, 0xdc, 0xe0, 0xa4, 0x21,
	0x10, 0xc9, 0x48, 0x56, 0xc8, 0xb0, 0x78, 0x34, 0x55, 0x45, 0x2b, 0x6f, 0x15, 0x7c, 0x88, 0xb0,
	0x7b, 0x59, 0x59, 0xc2, 0xe9, 0x98, 0x8b, 0x2c, 0x41, 0xba, 0x07, 0xff, 0x9f, 0x78, 0x52, 0xa0,
	0x45, 0x1c, 0xe2, 0x92, 0xa0, 0x2a, 0xe8, 0x01, 0x6c, 0xeb, 0x58, 0xa0, 0xd2, 0x5c, 0x64, 0x56,
	0xdb, 0x21, 0x6e, 0x27, 0xd8, 0x34, 0xa8, 0x0d, 0xb0, 0x49, 0x66, 0x75, 0x1c, 0xe2, 0xf6, 0x82,
	0x46, 0x67, 0xf8, 0x4c, 0xa0, 0xbf, 0x7e, 0xe7, 0x36, 0x16, 0x38, 0xc6, 0x3c, 0x46, 0x45, 0x4f,
	0xa1, 0x9b, 0xf0, 0x10, 0x13, 0x65, 0x11, 0xa7, 0xe3, 0xee, 0x9c, 0xf5, 0xbd, 0xe6, 0x36, 0xbc,
	0x9b, 0x72, 0x36, 0xfa, 0xb7, 0x7c, 0x3b, 0x6a, 0x05, 0x35, 0x90, 0x9e, 0xc3, 0x96, 0x32, 0x46,
	0x95, 0xd5, 0x36, 0x9c, 0xc3, 0xef, 0x9c, 0x1f, 0x71, 0x6a, 0xf6, 0x17, 0x67, 0xf8, 0x00, 0xfb,
	0x6b, 0xc4, 0x5d, 0x1e, 0x6b, 0x0c, 0x70, 0x5e, 0xa0, 0xd2, 0xf4, 0x1a, 0xc0, 0xe4, 0x31, 0xc6,
	0x6a, 0x3b, 0xc7, 0xbf, 0x48, 0x6f, 0x12, 0xd4, 0xf2, 0x0d, 0xea, 0xc8, 0x5a, 0xae, 0x6c, 0xf2,
	0xba, 0xb2, 0xc9, 0xfb, 0xca, 0x26, 0x2f, 0x1f, 0x76, 0xeb, 0xbe, 0x5b, 0xfd, 0x53, 0xd8, 0x35,
	0x3b, 0xf7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xa9, 0x99, 0xdf, 0x3a, 0x02, 0x00, 0x00,
}
