syntax = "proto3";

package rpc;

option go_package = "rpcpb";

service Query {
	rpc Fetch(FetchRequest) returns (stream FetchResponse);
}

message FetchRequest {
	int64 start               = 1;
	int64 end                 = 2;
	oneof matchers {
		TagMatchers tagMatchers = 3;
	}
}

message TagMatchers {
	repeated TagMatcher tagMatchers = 1;
}

message TagMatcher {
	bytes name       = 1;
	bytes value      = 2;
	MatcherType type = 3;
}

enum MatcherType {
	EQUAL     = 0;
	NOTEQUAL  = 1;
	REGEXP    = 2;
	NOTREGEXP = 3;
	// EXISTS and NOTEXISTS apply only to
	// matcher name rather than value
	EXISTS    = 4;
	NOTEXISTS = 5;
}

message FetchResponse {
	repeated Series series = 1;
}

message Series {
	SeriesMetadata meta               = 1;
	oneof value {
		DecompressedSeries decompressed = 2;
		M3CompressedSeries compressed   = 3;
	}
}

message SeriesMetadata {
	bytes id        = 1;
	int64 startTime = 2;
	int64 endTime   = 3;
}

message DecompressedSeries {
	repeated Datapoint datapoints = 1;
	repeated Tag tags             = 2;
}

message Datapoint {
	int64 timestamp = 1;
	double value    = 2;
}

message Tag {
	bytes name  = 1;
	bytes value = 2;
}

message M3CompressedSeries {
	bytes compressedTags                        = 1;
	repeated M3CompressedValuesReplica replicas = 2;
}

message M3CompressedValuesReplica {
	repeated M3Segments segments = 1;
}

message M3Segments {
	M3Segment merged            = 1;
	repeated M3Segment unmerged = 2;
}

message M3Segment {
	bytes head      = 1;
	bytes tail      = 2;
	int64 startTime = 3;
	int64 blockSize = 4;
}
