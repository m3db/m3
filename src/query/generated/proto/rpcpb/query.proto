syntax = "proto3";

package rpc;

option go_package = "rpcpb";

import "github.com/m3db/m3/src/metrics/generated/proto/policypb/policy.proto";

service Query {
	rpc Health(HealthRequest)             returns (HealthResponse);
	rpc Fetch(FetchRequest)               returns (stream FetchResponse);
	rpc Search(SearchRequest)             returns (stream SearchResponse);
	rpc CompleteTags(CompleteTagsRequest) returns (stream CompleteTagsResponse);
}

message HealthRequest {
}

message HealthResponse {
	string uptimeDuration = 1;
	int64 uptimeNanoseconds = 2;
}

message FetchRequest {
	int64 start               = 1;
	int64 end                 = 2;
	oneof matchers {
		TagMatchers tagMatchers = 3;
	}
	FetchOptions options = 4;
}

message TagMatchers {
	repeated TagMatcher tagMatchers = 1;
}

message TagMatcher {
	bytes name       = 1;
	bytes value      = 2;
	MatcherType type = 3;
}

enum MatcherType {
	EQUAL     = 0;
	NOTEQUAL  = 1;
	REGEXP    = 2;
	NOTREGEXP = 3;
	// EXISTS and NOTEXISTS apply only to
	// matcher name rather than value.
	EXISTS    = 4;
	NOTEXISTS = 5;
	// ALL supercedes other matcher types
	// and does no filtering.
	ALL       = 6;
}

message FetchOptions {
	int64 limit                      = 1;
	RestrictQueryOptions restrict    = 2;
	int64 lookbackDuration           = 3;
	FanoutOption unaggregated        = 4;
	FanoutOption aggregated          = 5;
	FanoutOption aggregatedOptimized = 6;
	bool includeResolution           = 7;
}

message RestrictQueryOptions {
	RestrictQueryType restrictQueryType = 3;
	RestrictQueryTags restrictQueryTags = 4;
}

message RestrictQueryType {
	MetricsType metricsType                     = 1;
	policypb.StoragePolicy metricsStoragePolicy = 2;
}

message RestrictQueryTags {
	TagMatchers restrict = 1;
	repeated bytes strip = 2;
}

enum MetricsType {
	UNKNOWN_METRICS_TYPE      = 0;
	UNAGGREGATED_METRICS_TYPE = 1;
	AGGREGATED_METRICS_TYPE   = 2;
}

enum FanoutOption {
	DEFAULT_OPTION   = 0;
	FORCE_ENABLED    = 1;
	FORCE_DISABLED   = 2;
}

message FetchResponse {
	repeated Series series = 1;
	ResultMetadata meta    = 2;
}

message Series {
	SeriesMetadata meta               = 1;
	oneof value {
		DecompressedSeries decompressed = 2;
		M3CompressedSeries compressed   = 3;
	}
}

message SeriesMetadata {
	bytes id         = 1;
	int64 startTime  = 2;
	int64 endTime    = 3;
}

message DecompressedSeries {
	repeated Datapoint datapoints = 1;
	repeated Tag tags             = 2;
}

message Datapoint {
	int64 timestamp = 1;
	double value    = 2;
}

message Tag {
	bytes name  = 1;
	bytes value = 2;
}

message M3CompressedSeries {
	bytes compressedTags                        = 1;
	repeated M3CompressedValuesReplica replicas = 2;
}

message M3CompressedValuesReplica {
	repeated M3Segments segments = 1;
}

message M3Segments {
	M3Segment merged            = 1;
	repeated M3Segment unmerged = 2;
}

message M3Segment {
	bytes head      = 1;
	bytes tail      = 2;
	int64 startTime = 3;
	int64 blockSize = 4;
	uint32 checksum = 5;
}

message SearchRequest {
	oneof matchers {
		TagMatchers tagMatchers = 1;
	}
	int64 start               = 2;
	int64 end                 = 3;
	FetchOptions options      = 4;
}

message M3TagProperty {
	bytes id             = 1;
	bytes compressedTags = 2;
}

message M3TagProperties {
	repeated M3TagProperty properties = 1;
}

message TagProperty {
	bytes key    = 1;
	bytes values = 2;
}

message TagProperties {
	repeated TagProperty properties = 1;
}

message SearchResponse {
	oneof value {
		TagProperties decompressed = 1;
		M3TagProperties compressed = 2;
	}

	ResultMetadata meta          = 3;
}

enum CompleteTagsType {
	// Requests tag names and values
	DEFAULT = 0;
	// Requests tag names only
	TAGNAME = 1;
}

message CompleteTagsRequestOptions {
	CompleteTagsType type         = 1;
	repeated bytes filterNameTags = 2;
	int64 start                   = 3;
	int64 end                     = 4;
	FetchOptions options          = 5;
}

message CompleteTagsRequest {
	oneof matchers {
		TagMatchers tagMatchers          = 1;
	}

	CompleteTagsRequestOptions options = 2;
}

message TagNames {
	repeated bytes names = 1;
}

message TagValue {
	bytes key             = 1;
	repeated bytes values = 2;
}

message TagValues {
	repeated TagValue values = 1;
}

message CompleteTagsResponse {
	oneof value {
		TagValues default   = 1;
		TagNames namesOnly  = 2;
	}

	ResultMetadata meta   = 3;
}

message ResultMetadata {
	bool exhaustive            = 1;
	repeated Warning warnings  = 2;
	repeated int64 resolutions = 3;
}

message Warning {
	bytes name    = 1;
	bytes message = 2;
}
