
syntax = "proto3";
package admin;

import "github.com/m3db/m3/src/query/generated/proto/admin/namespace.proto";
import "github.com/m3db/m3/src/query/generated/proto/admin/placement.proto";

message DatabaseCreateRequest {
  // Required fields
  string namespace_name = 1;
  string type = 2;

  // Optional fields that may be inferred depending on database type
  int32 num_shards = 3;
  int32 replication_factor = 4;

  // Explicit retention time using time shorthand, e.g. "48h"
  string retention_time = 5;

  // If no block size fields are set then the block size is
  // derived from the length of the retention period
  BlockSize block_size = 6;

  // Required if not using local database type
  repeated Host hosts = 7;
}

message BlockSize {
  // Explicit block size using time shorthand, e.g. "2h"
  string time = 1;
  // With the expected series datapoints per hour, use a recommended block size
  int64 expected_series_datapoints_per_hour = 2;
}

message Host {
  // Name (must be unique) of the host for logging/display purposes, can be hostname if desired,
  // or UUID or any other string ID as used in third party inventory system
  string id = 1;
  // Address can be IP address or hostname, this is used to connect to the host
  string address = 2;
  // Port running the Node RPC listen address (currently TChannel/Thrift Node service)
  uint32 port = 3;
  // (Optional) Isolation group is an optional grouping, for instance to isolate replicas by
  // zones use zone here, or to isolate by host racks use racks here
  string isolation_group = 4;
  // (Optional) Zone specifies the zone the host resides in, this is optional.
  string zone = 5;
  // (Optional) Weight specifies when considering how many shards to take how to weight
  // this instance, do not specify to default to a weight of 1.
  uint32 weight = 6;
}

message DatabaseCreateResponse {
  admin.NamespaceGetResponse namespace = 1;
  admin.PlacementGetResponse placement = 2;
}
