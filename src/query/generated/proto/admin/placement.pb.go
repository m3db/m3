// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/query/generated/proto/admin/placement.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package admin

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	placementpb "github.com/m3db/m3/src/cluster/generated/proto/placementpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlacementInitRequest struct {
	Instances         []*placementpb.Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	NumShards         int32                   `protobuf:"varint,2,opt,name=num_shards,json=numShards,proto3" json:"num_shards,omitempty"`
	ReplicationFactor int32                   `protobuf:"varint,3,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	OptionOverride    *placementpb.Options    `protobuf:"bytes,99,opt,name=option_override,json=optionOverride,proto3" json:"option_override,omitempty"`
}

func (m *PlacementInitRequest) Reset()         { *m = PlacementInitRequest{} }
func (m *PlacementInitRequest) String() string { return proto.CompactTextString(m) }
func (*PlacementInitRequest) ProtoMessage()    {}
func (*PlacementInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{0}
}
func (m *PlacementInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementInitRequest.Merge(m, src)
}
func (m *PlacementInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacementInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementInitRequest proto.InternalMessageInfo

func (m *PlacementInitRequest) GetInstances() []*placementpb.Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *PlacementInitRequest) GetNumShards() int32 {
	if m != nil {
		return m.NumShards
	}
	return 0
}

func (m *PlacementInitRequest) GetReplicationFactor() int32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *PlacementInitRequest) GetOptionOverride() *placementpb.Options {
	if m != nil {
		return m.OptionOverride
	}
	return nil
}

type PlacementGetResponse struct {
	Placement *placementpb.Placement `protobuf:"bytes,1,opt,name=placement,proto3" json:"placement,omitempty"`
	Version   int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PlacementGetResponse) Reset()         { *m = PlacementGetResponse{} }
func (m *PlacementGetResponse) String() string { return proto.CompactTextString(m) }
func (*PlacementGetResponse) ProtoMessage()    {}
func (*PlacementGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{1}
}
func (m *PlacementGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementGetResponse.Merge(m, src)
}
func (m *PlacementGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlacementGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementGetResponse proto.InternalMessageInfo

func (m *PlacementGetResponse) GetPlacement() *placementpb.Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (m *PlacementGetResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PlacementAddRequest struct {
	Instances []*placementpb.Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// By default add requests will only succeed if all instances in the placement
	// are AVAILABLE for all their shards. force overrides that.
	Force          bool                 `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	OptionOverride *placementpb.Options `protobuf:"bytes,99,opt,name=option_override,json=optionOverride,proto3" json:"option_override,omitempty"`
}

func (m *PlacementAddRequest) Reset()         { *m = PlacementAddRequest{} }
func (m *PlacementAddRequest) String() string { return proto.CompactTextString(m) }
func (*PlacementAddRequest) ProtoMessage()    {}
func (*PlacementAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{2}
}
func (m *PlacementAddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementAddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementAddRequest.Merge(m, src)
}
func (m *PlacementAddRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacementAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementAddRequest proto.InternalMessageInfo

func (m *PlacementAddRequest) GetInstances() []*placementpb.Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *PlacementAddRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *PlacementAddRequest) GetOptionOverride() *placementpb.Options {
	if m != nil {
		return m.OptionOverride
	}
	return nil
}

type PlacementRemoveRequest struct {
	InstanceIds    []string             `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	Force          bool                 `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	OptionOverride *placementpb.Options `protobuf:"bytes,99,opt,name=option_override,json=optionOverride,proto3" json:"option_override,omitempty"`
}

func (m *PlacementRemoveRequest) Reset()         { *m = PlacementRemoveRequest{} }
func (m *PlacementRemoveRequest) String() string { return proto.CompactTextString(m) }
func (*PlacementRemoveRequest) ProtoMessage()    {}
func (*PlacementRemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{3}
}
func (m *PlacementRemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementRemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementRemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementRemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementRemoveRequest.Merge(m, src)
}
func (m *PlacementRemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacementRemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementRemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementRemoveRequest proto.InternalMessageInfo

func (m *PlacementRemoveRequest) GetInstanceIds() []string {
	if m != nil {
		return m.InstanceIds
	}
	return nil
}

func (m *PlacementRemoveRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *PlacementRemoveRequest) GetOptionOverride() *placementpb.Options {
	if m != nil {
		return m.OptionOverride
	}
	return nil
}

type PlacementReplaceRequest struct {
	LeavingInstanceIDs []string                `protobuf:"bytes,1,rep,name=leavingInstanceIDs,proto3" json:"leavingInstanceIDs,omitempty"`
	Candidates         []*placementpb.Instance `protobuf:"bytes,2,rep,name=candidates,proto3" json:"candidates,omitempty"`
	Force              bool                    `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	OptionOverride     *placementpb.Options    `protobuf:"bytes,99,opt,name=option_override,json=optionOverride,proto3" json:"option_override,omitempty"`
}

func (m *PlacementReplaceRequest) Reset()         { *m = PlacementReplaceRequest{} }
func (m *PlacementReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*PlacementReplaceRequest) ProtoMessage()    {}
func (*PlacementReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{4}
}
func (m *PlacementReplaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementReplaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementReplaceRequest.Merge(m, src)
}
func (m *PlacementReplaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacementReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementReplaceRequest proto.InternalMessageInfo

func (m *PlacementReplaceRequest) GetLeavingInstanceIDs() []string {
	if m != nil {
		return m.LeavingInstanceIDs
	}
	return nil
}

func (m *PlacementReplaceRequest) GetCandidates() []*placementpb.Instance {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *PlacementReplaceRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *PlacementReplaceRequest) GetOptionOverride() *placementpb.Options {
	if m != nil {
		return m.OptionOverride
	}
	return nil
}

type PlacementSetRequest struct {
	Placement *placementpb.Placement `protobuf:"bytes,1,opt,name=placement,proto3" json:"placement,omitempty"`
	Version   int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Confirm must be set, otherwise just a dry run is executed.
	Confirm bool `protobuf:"varint,3,opt,name=confirm,proto3" json:"confirm,omitempty"`
	// Force will skip validating the placement.
	Force bool `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *PlacementSetRequest) Reset()         { *m = PlacementSetRequest{} }
func (m *PlacementSetRequest) String() string { return proto.CompactTextString(m) }
func (*PlacementSetRequest) ProtoMessage()    {}
func (*PlacementSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{5}
}
func (m *PlacementSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementSetRequest.Merge(m, src)
}
func (m *PlacementSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacementSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementSetRequest proto.InternalMessageInfo

func (m *PlacementSetRequest) GetPlacement() *placementpb.Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (m *PlacementSetRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PlacementSetRequest) GetConfirm() bool {
	if m != nil {
		return m.Confirm
	}
	return false
}

func (m *PlacementSetRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PlacementSetResponse struct {
	Placement *placementpb.Placement `protobuf:"bytes,1,opt,name=placement,proto3" json:"placement,omitempty"`
	Version   int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	DryRun    bool                   `protobuf:"varint,3,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (m *PlacementSetResponse) Reset()         { *m = PlacementSetResponse{} }
func (m *PlacementSetResponse) String() string { return proto.CompactTextString(m) }
func (*PlacementSetResponse) ProtoMessage()    {}
func (*PlacementSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c02b5df7aadc2496, []int{6}
}
func (m *PlacementSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementSetResponse.Merge(m, src)
}
func (m *PlacementSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlacementSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementSetResponse proto.InternalMessageInfo

func (m *PlacementSetResponse) GetPlacement() *placementpb.Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (m *PlacementSetResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PlacementSetResponse) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func init() {
	proto.RegisterType((*PlacementInitRequest)(nil), "admin.PlacementInitRequest")
	proto.RegisterType((*PlacementGetResponse)(nil), "admin.PlacementGetResponse")
	proto.RegisterType((*PlacementAddRequest)(nil), "admin.PlacementAddRequest")
	proto.RegisterType((*PlacementRemoveRequest)(nil), "admin.PlacementRemoveRequest")
	proto.RegisterType((*PlacementReplaceRequest)(nil), "admin.PlacementReplaceRequest")
	proto.RegisterType((*PlacementSetRequest)(nil), "admin.PlacementSetRequest")
	proto.RegisterType((*PlacementSetResponse)(nil), "admin.PlacementSetResponse")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/query/generated/proto/admin/placement.proto", fileDescriptor_c02b5df7aadc2496)
}

var fileDescriptor_c02b5df7aadc2496 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xae, 0x09, 0x29, 0x64, 0x82, 0x40, 0x98, 0x10, 0x56, 0x48, 0xac, 0x42, 0x4e, 0xb9, 0xb0,
	0x2b, 0x35, 0x70, 0xe4, 0x40, 0x85, 0x40, 0xe1, 0x52, 0xb4, 0x79, 0x80, 0xc8, 0xb1, 0x27, 0xa9,
	0xa5, 0xac, 0xbd, 0xb5, 0xbd, 0x91, 0x7a, 0xe1, 0x19, 0x7a, 0xe1, 0xcc, 0xeb, 0x70, 0xec, 0x05,
	0xa9, 0x47, 0x94, 0xbc, 0x08, 0xaa, 0xb3, 0x7f, 0xe5, 0xef, 0xd2, 0xf6, 0x38, 0x33, 0xdf, 0x7c,
	0xfe, 0xbe, 0xd1, 0x8c, 0xe1, 0x70, 0x29, 0xdd, 0x71, 0x3e, 0x8f, 0xb8, 0x4e, 0xe3, 0x74, 0x2c,
	0xe6, 0x71, 0x3a, 0x8e, 0xad, 0xe1, 0xf1, 0x49, 0x8e, 0xe6, 0x34, 0x5e, 0xa2, 0x42, 0xc3, 0x1c,
	0x8a, 0x38, 0x33, 0xda, 0xe9, 0x98, 0x89, 0x54, 0xaa, 0x38, 0x5b, 0x31, 0x8e, 0x29, 0x2a, 0x17,
	0xf9, 0x2c, 0x6d, 0xfb, 0xf4, 0xf3, 0x4f, 0xff, 0xa0, 0xe2, 0xab, 0xdc, 0x3a, 0x34, 0x7f, 0x90,
	0x55, 0x34, 0xd9, 0xfc, 0x77, 0xca, 0xe1, 0x05, 0x81, 0xde, 0xe7, 0x32, 0x37, 0x51, 0xd2, 0x25,
	0x78, 0x92, 0xa3, 0x75, 0x74, 0x0c, 0x1d, 0xa9, 0xac, 0x63, 0x8a, 0xa3, 0x0d, 0xc8, 0xa0, 0x35,
	0xea, 0x1e, 0x3c, 0x8d, 0x1a, 0x4c, 0xd1, 0xa4, 0xa8, 0x26, 0x35, 0x8e, 0xbe, 0x00, 0x50, 0x79,
	0x3a, 0xb3, 0xc7, 0xcc, 0x08, 0x1b, 0xdc, 0x19, 0x90, 0x51, 0x3b, 0xe9, 0xa8, 0x3c, 0x9d, 0xfa,
	0x04, 0x7d, 0x05, 0xd4, 0x60, 0xb6, 0x92, 0x9c, 0x39, 0xa9, 0xd5, 0x6c, 0xc1, 0xb8, 0xd3, 0x26,
	0x68, 0x79, 0xd8, 0xe3, 0x46, 0xe5, 0x83, 0x2f, 0xd0, 0xb7, 0xf0, 0x48, 0x67, 0x1e, 0xa9, 0xd7,
	0x68, 0x8c, 0x14, 0x18, 0xf0, 0x01, 0x19, 0x75, 0x0f, 0x7a, 0x57, 0x84, 0x1c, 0x79, 0x8c, 0x4d,
	0x1e, 0xee, 0xc0, 0x47, 0x05, 0x76, 0xb8, 0x68, 0x38, 0xfb, 0x88, 0x2e, 0x41, 0x9b, 0x69, 0x65,
	0x91, 0xbe, 0x86, 0x4e, 0xd5, 0x1e, 0x10, 0x4f, 0xd8, 0xbf, 0x42, 0x58, 0x75, 0x25, 0x35, 0x90,
	0x06, 0x70, 0x6f, 0x8d, 0xc6, 0x4a, 0xad, 0x0a, 0x5f, 0x65, 0x38, 0xfc, 0x46, 0xe0, 0x49, 0xd5,
	0xf2, 0x4e, 0x88, 0x6b, 0x4d, 0xb0, 0x07, 0xed, 0x85, 0x36, 0x1c, 0xfd, 0x23, 0xf7, 0x93, 0x5d,
	0x70, 0xdd, 0x49, 0x9c, 0x11, 0xe8, 0xd7, 0xa6, 0x30, 0xd5, 0x6b, 0x2c, 0x45, 0xbe, 0x84, 0x07,
	0xe5, 0xe3, 0x33, 0x29, 0x76, 0x3a, 0x3b, 0x49, 0xb7, 0xcc, 0x4d, 0xc4, 0x2d, 0x49, 0xfa, 0x41,
	0xe0, 0x59, 0x43, 0x92, 0x6f, 0x29, 0x35, 0x45, 0x40, 0x57, 0xc8, 0xd6, 0x52, 0x2d, 0xcb, 0x09,
	0x4d, 0xde, 0x97, 0xca, 0xfe, 0x52, 0xa1, 0x6f, 0x00, 0x38, 0x53, 0x42, 0x0a, 0xe6, 0xf0, 0x72,
	0xeb, 0xfe, 0x33, 0xe9, 0x06, 0xb0, 0xf6, 0xd5, 0xba, 0x41, 0x5f, 0x5f, 0x9b, 0xcb, 0x30, 0xc5,
	0xea, 0x9c, 0x6e, 0x78, 0xe9, 0x2e, 0x2b, 0x5c, 0xab, 0x85, 0x34, 0x69, 0x21, 0xbf, 0x0c, 0x6b,
	0x5b, 0x77, 0x1b, 0xb6, 0x86, 0x5f, 0x1a, 0xc7, 0x30, 0xbd, 0xbd, 0x63, 0xa0, 0x7d, 0xd8, 0x17,
	0xe6, 0x34, 0xc9, 0x55, 0x21, 0xab, 0x88, 0x0e, 0x83, 0xef, 0x9b, 0x90, 0x9c, 0x6f, 0x42, 0xf2,
	0x73, 0x13, 0x92, 0xb3, 0x6d, 0xb8, 0x77, 0xbe, 0x0d, 0xf7, 0x2e, 0xb6, 0xe1, 0xde, 0x7c, 0xdf,
	0x7f, 0x44, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x6f, 0x66, 0x24, 0x21, 0x05, 0x00,
	0x00,
}

func (m *PlacementInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptionOverride != nil {
		{
			size, err := m.OptionOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintPlacement(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x18
	}
	if m.NumShards != 0 {
		i = encodeVarintPlacement(dAtA, i, uint64(m.NumShards))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlacement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlacementGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintPlacement(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlacementAddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementAddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementAddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptionOverride != nil {
		{
			size, err := m.OptionOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlacement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlacementRemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementRemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementRemoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptionOverride != nil {
		{
			size, err := m.OptionOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.InstanceIds) > 0 {
		for iNdEx := len(m.InstanceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InstanceIds[iNdEx])
			copy(dAtA[i:], m.InstanceIds[iNdEx])
			i = encodeVarintPlacement(dAtA, i, uint64(len(m.InstanceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlacementReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementReplaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptionOverride != nil {
		{
			size, err := m.OptionOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Candidates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlacement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LeavingInstanceIDs) > 0 {
		for iNdEx := len(m.LeavingInstanceIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LeavingInstanceIDs[iNdEx])
			copy(dAtA[i:], m.LeavingInstanceIDs[iNdEx])
			i = encodeVarintPlacement(dAtA, i, uint64(len(m.LeavingInstanceIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlacementSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Confirm {
		i--
		if m.Confirm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintPlacement(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlacementSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintPlacement(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlacement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlacement(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlacement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlacementInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovPlacement(uint64(l))
		}
	}
	if m.NumShards != 0 {
		n += 1 + sovPlacement(uint64(m.NumShards))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovPlacement(uint64(m.ReplicationFactor))
	}
	if m.OptionOverride != nil {
		l = m.OptionOverride.Size()
		n += 2 + l + sovPlacement(uint64(l))
	}
	return n
}

func (m *PlacementGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovPlacement(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPlacement(uint64(m.Version))
	}
	return n
}

func (m *PlacementAddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovPlacement(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.OptionOverride != nil {
		l = m.OptionOverride.Size()
		n += 2 + l + sovPlacement(uint64(l))
	}
	return n
}

func (m *PlacementRemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InstanceIds) > 0 {
		for _, s := range m.InstanceIds {
			l = len(s)
			n += 1 + l + sovPlacement(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.OptionOverride != nil {
		l = m.OptionOverride.Size()
		n += 2 + l + sovPlacement(uint64(l))
	}
	return n
}

func (m *PlacementReplaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LeavingInstanceIDs) > 0 {
		for _, s := range m.LeavingInstanceIDs {
			l = len(s)
			n += 1 + l + sovPlacement(uint64(l))
		}
	}
	if len(m.Candidates) > 0 {
		for _, e := range m.Candidates {
			l = e.Size()
			n += 1 + l + sovPlacement(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.OptionOverride != nil {
		l = m.OptionOverride.Size()
		n += 2 + l + sovPlacement(uint64(l))
	}
	return n
}

func (m *PlacementSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovPlacement(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPlacement(uint64(m.Version))
	}
	if m.Confirm {
		n += 2
	}
	if m.Force {
		n += 2
	}
	return n
}

func (m *PlacementSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovPlacement(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPlacement(uint64(m.Version))
	}
	if m.DryRun {
		n += 2
	}
	return n
}

func sovPlacement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlacement(x uint64) (n int) {
	return sovPlacement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlacementInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &placementpb.Instance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumShards", wireType)
			}
			m.NumShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptionOverride == nil {
				m.OptionOverride = &placementpb.Options{}
			}
			if err := m.OptionOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &placementpb.Placement{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementAddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &placementpb.Instance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptionOverride == nil {
				m.OptionOverride = &placementpb.Options{}
			}
			if err := m.OptionOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementRemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceIds = append(m.InstanceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptionOverride == nil {
				m.OptionOverride = &placementpb.Options{}
			}
			if err := m.OptionOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeavingInstanceIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeavingInstanceIDs = append(m.LeavingInstanceIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, &placementpb.Instance{})
			if err := m.Candidates[len(m.Candidates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptionOverride == nil {
				m.OptionOverride = &placementpb.Options{}
			}
			if err := m.OptionOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &placementpb.Placement{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirm = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacementSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlacement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &placementpb.Placement{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlacement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlacement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlacement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlacement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlacement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlacement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlacement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlacement = fmt.Errorf("proto: unexpected end of group")
)
