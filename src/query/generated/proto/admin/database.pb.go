// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/query/generated/proto/admin/database.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package admin

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DatabaseCreateRequest struct {
	// Required fields
	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional fields that may be inferred depending on database type
	NumShards         int32 `protobuf:"varint,3,opt,name=num_shards,json=numShards,proto3" json:"num_shards,omitempty"`
	ReplicationFactor int32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// Explicit retention time using time shorthand, e.g. "48h"
	RetentionTime string `protobuf:"bytes,5,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	// If no block size fields are set then the block size is
	// derived from the length of the retention period
	BlockSize *BlockSize `protobuf:"bytes,6,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Required if not using local database type
	Hosts []*Host `protobuf:"bytes,7,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Optional field to add an additional aggregated namespace.
	AggregatedNamespace *AggregatedNamespace `protobuf:"bytes,8,opt,name=aggregated_namespace,json=aggregatedNamespace,proto3" json:"aggregated_namespace,omitempty"`
}

func (m *DatabaseCreateRequest) Reset()         { *m = DatabaseCreateRequest{} }
func (m *DatabaseCreateRequest) String() string { return proto.CompactTextString(m) }
func (*DatabaseCreateRequest) ProtoMessage()    {}
func (*DatabaseCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e104b0c13efd7, []int{0}
}
func (m *DatabaseCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatabaseCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatabaseCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseCreateRequest.Merge(m, src)
}
func (m *DatabaseCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseCreateRequest proto.InternalMessageInfo

func (m *DatabaseCreateRequest) GetNamespaceName() string {
	if m != nil {
		return m.NamespaceName
	}
	return ""
}

func (m *DatabaseCreateRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DatabaseCreateRequest) GetNumShards() int32 {
	if m != nil {
		return m.NumShards
	}
	return 0
}

func (m *DatabaseCreateRequest) GetReplicationFactor() int32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *DatabaseCreateRequest) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *DatabaseCreateRequest) GetBlockSize() *BlockSize {
	if m != nil {
		return m.BlockSize
	}
	return nil
}

func (m *DatabaseCreateRequest) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *DatabaseCreateRequest) GetAggregatedNamespace() *AggregatedNamespace {
	if m != nil {
		return m.AggregatedNamespace
	}
	return nil
}

type AggregatedNamespace struct {
	// Required fields.
	// Namespace name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Time window to aggregate data points across.
	// Uses same shorthand as retention_time.
	Resolution string `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Length of time to retain data.
	RetentionTime string `protobuf:"bytes,3,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
}

func (m *AggregatedNamespace) Reset()         { *m = AggregatedNamespace{} }
func (m *AggregatedNamespace) String() string { return proto.CompactTextString(m) }
func (*AggregatedNamespace) ProtoMessage()    {}
func (*AggregatedNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e104b0c13efd7, []int{1}
}
func (m *AggregatedNamespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedNamespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedNamespace.Merge(m, src)
}
func (m *AggregatedNamespace) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedNamespace proto.InternalMessageInfo

func (m *AggregatedNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AggregatedNamespace) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *AggregatedNamespace) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

type BlockSize struct {
	// Explicit block size using time shorthand, e.g. "2h"
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// With the expected series datapoints per hour, use a recommended block size
	ExpectedSeriesDatapointsPerHour int64 `protobuf:"varint,2,opt,name=expected_series_datapoints_per_hour,json=expectedSeriesDatapointsPerHour,proto3" json:"expected_series_datapoints_per_hour,omitempty"`
}

func (m *BlockSize) Reset()         { *m = BlockSize{} }
func (m *BlockSize) String() string { return proto.CompactTextString(m) }
func (*BlockSize) ProtoMessage()    {}
func (*BlockSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e104b0c13efd7, []int{2}
}
func (m *BlockSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSize.Merge(m, src)
}
func (m *BlockSize) XXX_Size() int {
	return m.Size()
}
func (m *BlockSize) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSize.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSize proto.InternalMessageInfo

func (m *BlockSize) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *BlockSize) GetExpectedSeriesDatapointsPerHour() int64 {
	if m != nil {
		return m.ExpectedSeriesDatapointsPerHour
	}
	return 0
}

type Host struct {
	// Name (must be unique) of the host for logging/display purposes, can be hostname if desired,
	// or UUID or any other string ID as used in third party inventory system
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address can be IP address or hostname, this is used to connect to the host
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Port running the Node RPC listen address (currently TChannel/Thrift Node service)
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// (Optional) Isolation group is an optional grouping, for instance to isolate replicas by
	// zones use zone here, or to isolate by host racks use racks here
	IsolationGroup string `protobuf:"bytes,4,opt,name=isolation_group,json=isolationGroup,proto3" json:"isolation_group,omitempty"`
	// (Optional) Zone specifies the zone the host resides in, this is optional.
	Zone string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	// (Optional) Weight specifies when considering how many shards to take how to weight
	// this instance, do not specify to default to a weight of 1.
	Weight uint32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e104b0c13efd7, []int{3}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Host) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Host) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Host) GetIsolationGroup() string {
	if m != nil {
		return m.IsolationGroup
	}
	return ""
}

func (m *Host) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Host) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type DatabaseCreateResponse struct {
	Namespace *NamespaceGetResponse `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Placement *PlacementGetResponse `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (m *DatabaseCreateResponse) Reset()         { *m = DatabaseCreateResponse{} }
func (m *DatabaseCreateResponse) String() string { return proto.CompactTextString(m) }
func (*DatabaseCreateResponse) ProtoMessage()    {}
func (*DatabaseCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e104b0c13efd7, []int{4}
}
func (m *DatabaseCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatabaseCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatabaseCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseCreateResponse.Merge(m, src)
}
func (m *DatabaseCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseCreateResponse proto.InternalMessageInfo

func (m *DatabaseCreateResponse) GetNamespace() *NamespaceGetResponse {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *DatabaseCreateResponse) GetPlacement() *PlacementGetResponse {
	if m != nil {
		return m.Placement
	}
	return nil
}

func init() {
	proto.RegisterType((*DatabaseCreateRequest)(nil), "admin.DatabaseCreateRequest")
	proto.RegisterType((*AggregatedNamespace)(nil), "admin.AggregatedNamespace")
	proto.RegisterType((*BlockSize)(nil), "admin.BlockSize")
	proto.RegisterType((*Host)(nil), "admin.Host")
	proto.RegisterType((*DatabaseCreateResponse)(nil), "admin.DatabaseCreateResponse")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/query/generated/proto/admin/database.proto", fileDescriptor_2a4e104b0c13efd7)
}

var fileDescriptor_2a4e104b0c13efd7 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xad, 0x93, 0x26, 0xfd, 0xbc, 0x51, 0xf2, 0xc1, 0x16, 0x2a, 0xab, 0x08, 0x13, 0x82, 0x10,
	0xb9, 0x10, 0x4b, 0xcd, 0x89, 0x63, 0x43, 0x45, 0x7b, 0x80, 0xaa, 0x72, 0xb8, 0x5b, 0x6b, 0x7b,
	0x70, 0x56, 0x64, 0xbd, 0xdb, 0xdd, 0xb5, 0xa0, 0xf9, 0x11, 0x88, 0x2b, 0xff, 0x88, 0x63, 0x8f,
	0x1c, 0x51, 0x72, 0xe3, 0x57, 0xa0, 0xdd, 0xd8, 0x4e, 0x80, 0x9c, 0x7a, 0x1b, 0xbf, 0x79, 0x33,
	0x3b, 0xef, 0xcd, 0x18, 0x9d, 0x66, 0x54, 0xcf, 0x8a, 0x78, 0x94, 0x70, 0x16, 0xb0, 0x71, 0x1a,
	0x07, 0x6c, 0x1c, 0x28, 0x99, 0x04, 0xd7, 0x05, 0xc8, 0x9b, 0x20, 0x83, 0x1c, 0x24, 0xd1, 0x90,
	0x06, 0x42, 0x72, 0xcd, 0x03, 0x92, 0x32, 0x9a, 0x07, 0x29, 0xd1, 0x24, 0x26, 0x0a, 0x46, 0x16,
	0xc4, 0x2d, 0x8b, 0x1e, 0x4f, 0xee, 0xd0, 0x29, 0x27, 0x0c, 0x94, 0x20, 0x49, 0xd9, 0xea, 0x4e,
	0x3d, 0xc4, 0x9c, 0x24, 0xc0, 0x20, 0xd7, 0xeb, 0x1e, 0x83, 0x5f, 0x0d, 0xf4, 0xf0, 0xac, 0x9c,
	0xf0, 0xb5, 0x04, 0xa2, 0x21, 0x84, 0xeb, 0x02, 0x94, 0xc6, 0xcf, 0x51, 0xaf, 0x7e, 0x30, 0x32,
	0x91, 0xe7, 0xf4, 0x9d, 0xa1, 0x1b, 0x76, 0x6b, 0xf4, 0x92, 0x30, 0xc0, 0x18, 0xed, 0xeb, 0x1b,
	0x01, 0x5e, 0xc3, 0x26, 0x6d, 0x8c, 0x1f, 0x23, 0x94, 0x17, 0x2c, 0x52, 0x33, 0x22, 0x53, 0xe5,
	0x35, 0xfb, 0xce, 0xb0, 0x15, 0xba, 0x79, 0xc1, 0xa6, 0x16, 0xc0, 0x2f, 0x11, 0x96, 0x20, 0xe6,
	0x34, 0x21, 0x9a, 0xf2, 0x3c, 0xfa, 0x40, 0x12, 0xcd, 0xa5, 0xb7, 0x6f, 0x69, 0xf7, 0xb7, 0x32,
	0x6f, 0x6c, 0xc2, 0x0c, 0x22, 0x41, 0x43, 0x6e, 0xc9, 0x9a, 0x32, 0xf0, 0x5a, 0xeb, 0x41, 0x6a,
	0xf4, 0x3d, 0x65, 0x80, 0x03, 0x84, 0xe2, 0x39, 0x4f, 0x3e, 0x46, 0x8a, 0x2e, 0xc0, 0x6b, 0xf7,
	0x9d, 0x61, 0xe7, 0xe4, 0xde, 0xc8, 0xaa, 0x1e, 0x4d, 0x4c, 0x62, 0x4a, 0x17, 0x10, 0xba, 0x71,
	0x15, 0xe2, 0xa7, 0xa8, 0x35, 0xe3, 0x4a, 0x2b, 0xef, 0xa0, 0xdf, 0x1c, 0x76, 0x4e, 0x3a, 0x25,
	0xf7, 0x82, 0x2b, 0x1d, 0xae, 0x33, 0xf8, 0x1d, 0x7a, 0x40, 0xb2, 0x4c, 0x42, 0x66, 0x7c, 0x8c,
	0x6a, 0xe1, 0xde, 0x7f, 0xb6, 0xfb, 0x71, 0x59, 0x71, 0x5a, 0x53, 0x2e, 0x2b, 0x46, 0x78, 0x48,
	0xfe, 0x05, 0x07, 0x02, 0x1d, 0xee, 0xe0, 0x1a, 0x0b, 0xb7, 0xfc, 0xb5, 0x31, 0xf6, 0x11, 0x92,
	0xa0, 0xf8, 0xbc, 0x30, 0xfa, 0x4a, 0x73, 0xb7, 0x90, 0x1d, 0xa6, 0x34, 0x77, 0x98, 0x32, 0x60,
	0xc8, 0xad, 0xb5, 0xdb, 0x55, 0xd1, 0xcd, 0x3b, 0x26, 0xc6, 0x6f, 0xd1, 0x33, 0xf8, 0x2c, 0x20,
	0x31, 0xfa, 0x14, 0x48, 0x0a, 0x2a, 0x32, 0x07, 0x2b, 0x38, 0xcd, 0xb5, 0x8a, 0x04, 0xc8, 0x68,
	0xc6, 0x0b, 0x69, 0x07, 0x68, 0x86, 0x4f, 0x2a, 0xea, 0xd4, 0x32, 0xcf, 0x6a, 0xe2, 0x15, 0xc8,
	0x0b, 0x5e, 0xc8, 0xc1, 0x37, 0x07, 0xed, 0x1b, 0xff, 0x70, 0x0f, 0x35, 0x68, 0x5a, 0x3e, 0xd4,
	0xa0, 0x29, 0xf6, 0xd0, 0x01, 0x49, 0x53, 0x09, 0x4a, 0x95, 0x5a, 0xaa, 0x4f, 0x33, 0x94, 0xe0,
	0x52, 0xdb, 0xf1, 0xbb, 0xa1, 0x8d, 0xf1, 0x0b, 0xf4, 0x3f, 0x55, 0x7c, 0xbe, 0x3e, 0x8f, 0x4c,
	0xf2, 0x42, 0xd8, 0xeb, 0x70, 0xc3, 0x5e, 0x0d, 0x9f, 0x1b, 0xd4, 0x14, 0x2f, 0x78, 0x5e, 0x1d,
	0x84, 0x8d, 0xf1, 0x11, 0x6a, 0x7f, 0x02, 0x9a, 0xcd, 0xb4, 0xbd, 0x81, 0x6e, 0x58, 0x7e, 0x0d,
	0xbe, 0x38, 0xe8, 0xe8, 0xef, 0x4b, 0x57, 0x82, 0xe7, 0x0a, 0xf0, 0x2b, 0xe4, 0x6e, 0x76, 0xeb,
	0xd8, 0xdd, 0x3e, 0x2a, 0x77, 0x5b, 0x6f, 0xe9, 0x1c, 0x74, 0xc5, 0x0f, 0x37, 0x6c, 0x53, 0x5a,
	0xff, 0x52, 0x56, 0xda, 0xa6, 0xf4, 0xaa, 0xc2, 0xff, 0x28, 0xad, 0xd9, 0x13, 0xef, 0xfb, 0xd2,
	0x77, 0x6e, 0x97, 0xbe, 0xf3, 0x73, 0xe9, 0x3b, 0x5f, 0x57, 0xfe, 0xde, 0xed, 0xca, 0xdf, 0xfb,
	0xb1, 0xf2, 0xf7, 0xe2, 0xb6, 0xfd, 0x37, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xa9,
	0x27, 0x91, 0x6f, 0x04, 0x00, 0x00,
}

func (m *DatabaseCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregatedNamespace != nil {
		{
			size, err := m.AggregatedNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatabase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Hosts) > 0 {
		for iNdEx := len(m.Hosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDatabase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.BlockSize != nil {
		{
			size, err := m.BlockSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatabase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.RetentionTime) > 0 {
		i -= len(m.RetentionTime)
		copy(dAtA[i:], m.RetentionTime)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.RetentionTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintDatabase(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x20
	}
	if m.NumShards != 0 {
		i = encodeVarintDatabase(dAtA, i, uint64(m.NumShards))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceName) > 0 {
		i -= len(m.NamespaceName)
		copy(dAtA[i:], m.NamespaceName)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.NamespaceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregatedNamespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RetentionTime) > 0 {
		i -= len(m.RetentionTime)
		copy(dAtA[i:], m.RetentionTime)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.RetentionTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Resolution) > 0 {
		i -= len(m.Resolution)
		copy(dAtA[i:], m.Resolution)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Resolution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectedSeriesDatapointsPerHour != 0 {
		i = encodeVarintDatabase(dAtA, i, uint64(m.ExpectedSeriesDatapointsPerHour))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintDatabase(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IsolationGroup) > 0 {
		i -= len(m.IsolationGroup)
		copy(dAtA[i:], m.IsolationGroup)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.IsolationGroup)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintDatabase(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDatabase(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatabaseCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatabase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatabase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDatabase(dAtA []byte, offset int, v uint64) int {
	offset -= sovDatabase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DatabaseCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceName)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.NumShards != 0 {
		n += 1 + sovDatabase(uint64(m.NumShards))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovDatabase(uint64(m.ReplicationFactor))
	}
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.BlockSize != nil {
		l = m.BlockSize.Size()
		n += 1 + l + sovDatabase(uint64(l))
	}
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			l = e.Size()
			n += 1 + l + sovDatabase(uint64(l))
		}
	}
	if m.AggregatedNamespace != nil {
		l = m.AggregatedNamespace.Size()
		n += 1 + l + sovDatabase(uint64(l))
	}
	return n
}

func (m *AggregatedNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	l = len(m.Resolution)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	return n
}

func (m *BlockSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.ExpectedSeriesDatapointsPerHour != 0 {
		n += 1 + sovDatabase(uint64(m.ExpectedSeriesDatapointsPerHour))
	}
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovDatabase(uint64(m.Port))
	}
	l = len(m.IsolationGroup)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovDatabase(uint64(m.Weight))
	}
	return n
}

func (m *DatabaseCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovDatabase(uint64(l))
	}
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovDatabase(uint64(l))
	}
	return n
}

func sovDatabase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDatabase(x uint64) (n int) {
	return sovDatabase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DatabaseCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumShards", wireType)
			}
			m.NumShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockSize == nil {
				m.BlockSize = &BlockSize{}
			}
			if err := m.BlockSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, &Host{})
			if err := m.Hosts[len(m.Hosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedNamespace == nil {
				m.AggregatedNamespace = &AggregatedNamespace{}
			}
			if err := m.AggregatedNamespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedNamespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedNamespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedNamespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedSeriesDatapointsPerHour", wireType)
			}
			m.ExpectedSeriesDatapointsPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedSeriesDatapointsPerHour |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolationGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsolationGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &NamespaceGetResponse{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatabase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &PlacementGetResponse{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatabase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatabase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatabase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDatabase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDatabase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDatabase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDatabase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatabase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDatabase = fmt.Errorf("proto: unexpected end of group")
)
