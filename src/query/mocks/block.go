// Code generated by MockGen. DO NOT EDIT.
// Source: src/coordinator/block/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBlock is a mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// Meta mocks base method
func (m *MockBlock) Meta() Metadata {
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockBlockMockRecorder) Meta() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockBlock)(nil).Meta))
}

// StepIter mocks base method
func (m *MockBlock) StepIter() StepIter {
	ret := m.ctrl.Call(m, "StepIter")
	ret0, _ := ret[0].(StepIter)
	return ret0
}

// StepIter indicates an expected call of StepIter
func (mr *MockBlockMockRecorder) StepIter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepIter", reflect.TypeOf((*MockBlock)(nil).StepIter))
}

// SeriesIter mocks base method
func (m *MockBlock) SeriesIter() SeriesIter {
	ret := m.ctrl.Call(m, "SeriesIter")
	ret0, _ := ret[0].(SeriesIter)
	return ret0
}

// SeriesIter indicates an expected call of SeriesIter
func (mr *MockBlockMockRecorder) SeriesIter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesIter", reflect.TypeOf((*MockBlock)(nil).SeriesIter))
}

// SeriesMeta mocks base method
func (m *MockBlock) SeriesMeta() []SeriesMeta {
	ret := m.ctrl.Call(m, "SeriesMeta")
	ret0, _ := ret[0].([]SeriesMeta)
	return ret0
}

// SeriesMeta indicates an expected call of SeriesMeta
func (mr *MockBlockMockRecorder) SeriesMeta() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesMeta", reflect.TypeOf((*MockBlock)(nil).SeriesMeta))
}

// StepCount mocks base method
func (m *MockBlock) StepCount() int {
	ret := m.ctrl.Call(m, "StepCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// StepCount indicates an expected call of StepCount
func (mr *MockBlockMockRecorder) StepCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepCount", reflect.TypeOf((*MockBlock)(nil).StepCount))
}

// SeriesCount mocks base method
func (m *MockBlock) SeriesCount() int {
	ret := m.ctrl.Call(m, "SeriesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// SeriesCount indicates an expected call of SeriesCount
func (mr *MockBlockMockRecorder) SeriesCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesCount", reflect.TypeOf((*MockBlock)(nil).SeriesCount))
}

// Close mocks base method
func (m *MockBlock) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBlockMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlock)(nil).Close))
}

// MockIterator is a mock of Iterator interface
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockIterator) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Close mocks base method
func (m *MockIterator) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// MockSeriesIter is a mock of SeriesIter interface
type MockSeriesIter struct {
	ctrl     *gomock.Controller
	recorder *MockSeriesIterMockRecorder
}

// MockSeriesIterMockRecorder is the mock recorder for MockSeriesIter
type MockSeriesIterMockRecorder struct {
	mock *MockSeriesIter
}

// NewMockSeriesIter creates a new mock instance
func NewMockSeriesIter(ctrl *gomock.Controller) *MockSeriesIter {
	mock := &MockSeriesIter{ctrl: ctrl}
	mock.recorder = &MockSeriesIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeriesIter) EXPECT() *MockSeriesIterMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockSeriesIter) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeriesIterMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeriesIter)(nil).Next))
}

// Close mocks base method
func (m *MockSeriesIter) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeriesIterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeriesIter)(nil).Close))
}

// Current mocks base method
func (m *MockSeriesIter) Current() Series {
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(Series)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeriesIterMockRecorder) Current() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeriesIter)(nil).Current))
}

// MockStepIter is a mock of StepIter interface
type MockStepIter struct {
	ctrl     *gomock.Controller
	recorder *MockStepIterMockRecorder
}

// MockStepIterMockRecorder is the mock recorder for MockStepIter
type MockStepIterMockRecorder struct {
	mock *MockStepIter
}

// NewMockStepIter creates a new mock instance
func NewMockStepIter(ctrl *gomock.Controller) *MockStepIter {
	mock := &MockStepIter{ctrl: ctrl}
	mock.recorder = &MockStepIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepIter) EXPECT() *MockStepIterMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockStepIter) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockStepIterMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStepIter)(nil).Next))
}

// Close mocks base method
func (m *MockStepIter) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockStepIterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStepIter)(nil).Close))
}

// Current mocks base method
func (m *MockStepIter) Current() Step {
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(Step)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockStepIterMockRecorder) Current() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockStepIter)(nil).Current))
}

// MockStep is a mock of Step interface
type MockStep struct {
	ctrl     *gomock.Controller
	recorder *MockStepMockRecorder
}

// MockStepMockRecorder is the mock recorder for MockStep
type MockStepMockRecorder struct {
	mock *MockStep
}

// NewMockStep creates a new mock instance
func NewMockStep(ctrl *gomock.Controller) *MockStep {
	mock := &MockStep{ctrl: ctrl}
	mock.recorder = &MockStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStep) EXPECT() *MockStepMockRecorder {
	return m.recorder
}

// Time mocks base method
func (m *MockStep) Time() time.Time {
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time
func (mr *MockStepMockRecorder) Time() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockStep)(nil).Time))
}

// Values mocks base method
func (m *MockStep) Values() []float64 {
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockStepMockRecorder) Values() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockStep)(nil).Values))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AppendValue mocks base method
func (m *MockBuilder) AppendValue(idx int, value float64) error {
	ret := m.ctrl.Call(m, "AppendValue", idx, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendValue indicates an expected call of AppendValue
func (mr *MockBuilderMockRecorder) AppendValue(idx, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendValue", reflect.TypeOf((*MockBuilder)(nil).AppendValue), idx, value)
}

// Build mocks base method
func (m *MockBuilder) Build() Block {
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(Block)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockBuilderMockRecorder) Build() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build))
}

// AddCols mocks base method
func (m *MockBuilder) AddCols(num int) error {
	ret := m.ctrl.Call(m, "AddCols", num)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCols indicates an expected call of AddCols
func (mr *MockBuilderMockRecorder) AddCols(num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCols", reflect.TypeOf((*MockBuilder)(nil).AddCols), num)
}
