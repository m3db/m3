// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/query/storage (interfaces: Storage,WriteQueryIter)

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package storage is a generated GoMock package.
package storage

import (
	"context"
	"reflect"

	"github.com/m3db/m3/src/query/block"

	"github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CompleteTags mocks base method
func (m *MockStorage) CompleteTags(arg0 context.Context, arg1 *CompleteTagsQuery, arg2 *FetchOptions) (*CompleteTagsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(*CompleteTagsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTags indicates an expected call of CompleteTags
func (mr *MockStorageMockRecorder) CompleteTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTags", reflect.TypeOf((*MockStorage)(nil).CompleteTags), arg0, arg1, arg2)
}

// Fetch mocks base method
func (m *MockStorage) Fetch(arg0 context.Context, arg1 *FetchQuery, arg2 *FetchOptions) (*FetchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*FetchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockStorageMockRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStorage)(nil).Fetch), arg0, arg1, arg2)
}

// FetchBlocks mocks base method
func (m *MockStorage) FetchBlocks(arg0 context.Context, arg1 *FetchQuery, arg2 *FetchOptions) (block.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBlocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(block.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks
func (mr *MockStorageMockRecorder) FetchBlocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBlocks", reflect.TypeOf((*MockStorage)(nil).FetchBlocks), arg0, arg1, arg2)
}

// SearchSeries mocks base method
func (m *MockStorage) SearchSeries(arg0 context.Context, arg1 *FetchQuery, arg2 *FetchOptions) (*SearchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSeries", arg0, arg1, arg2)
	ret0, _ := ret[0].(*SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSeries indicates an expected call of SearchSeries
func (mr *MockStorageMockRecorder) SearchSeries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSeries", reflect.TypeOf((*MockStorage)(nil).SearchSeries), arg0, arg1, arg2)
}

// Type mocks base method
func (m *MockStorage) Type() Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockStorageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockStorage)(nil).Type))
}

// Write mocks base method
func (m *MockStorage) Write(arg0 context.Context, arg1 WriteQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockStorageMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), arg0, arg1)
}

// WriteBatch mocks base method
func (m *MockStorage) WriteBatch(arg0 context.Context, arg1 WriteQueryIter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBatch indicates an expected call of WriteBatch
func (mr *MockStorageMockRecorder) WriteBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBatch", reflect.TypeOf((*MockStorage)(nil).WriteBatch), arg0, arg1)
}

// MockWriteQueryIter is a mock of WriteQueryIter interface
type MockWriteQueryIter struct {
	ctrl     *gomock.Controller
	recorder *MockWriteQueryIterMockRecorder
}

// MockWriteQueryIterMockRecorder is the mock recorder for MockWriteQueryIter
type MockWriteQueryIterMockRecorder struct {
	mock *MockWriteQueryIter
}

// NewMockWriteQueryIter creates a new mock instance
func NewMockWriteQueryIter(ctrl *gomock.Controller) *MockWriteQueryIter {
	mock := &MockWriteQueryIter{ctrl: ctrl}
	mock.recorder = &MockWriteQueryIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteQueryIter) EXPECT() *MockWriteQueryIterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockWriteQueryIter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockWriteQueryIterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteQueryIter)(nil).Close))
}

// Current mocks base method
func (m *MockWriteQueryIter) Current() WriteQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(WriteQuery)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockWriteQueryIterMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockWriteQueryIter)(nil).Current))
}

// CurrentAttributes mocks base method
func (m *MockWriteQueryIter) CurrentAttributes() Attributes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentAttributes")
	ret0, _ := ret[0].(Attributes)
	return ret0
}

// CurrentAttributes indicates an expected call of CurrentAttributes
func (mr *MockWriteQueryIterMockRecorder) CurrentAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentAttributes", reflect.TypeOf((*MockWriteQueryIter)(nil).CurrentAttributes))
}

// DatapointResult mocks base method
func (m *MockWriteQueryIter) DatapointResult(arg0 int) WriteQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatapointResult", arg0)
	ret0, _ := ret[0].(WriteQueryResult)
	return ret0
}

// DatapointResult indicates an expected call of DatapointResult
func (mr *MockWriteQueryIterMockRecorder) DatapointResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatapointResult", reflect.TypeOf((*MockWriteQueryIter)(nil).DatapointResult), arg0)
}

// DatapointState mocks base method
func (m *MockWriteQueryIter) DatapointState(arg0 int) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatapointState", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// DatapointState indicates an expected call of DatapointState
func (mr *MockWriteQueryIterMockRecorder) DatapointState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatapointState", reflect.TypeOf((*MockWriteQueryIter)(nil).DatapointState), arg0)
}

// Err mocks base method
func (m *MockWriteQueryIter) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockWriteQueryIterMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockWriteQueryIter)(nil).Err))
}

// Next mocks base method
func (m *MockWriteQueryIter) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockWriteQueryIterMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockWriteQueryIter)(nil).Next))
}

// Restart mocks base method
func (m *MockWriteQueryIter) Restart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart")
}

// Restart indicates an expected call of Restart
func (mr *MockWriteQueryIterMockRecorder) Restart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockWriteQueryIter)(nil).Restart))
}

// SetDatapointResult mocks base method
func (m *MockWriteQueryIter) SetDatapointResult(arg0 int, arg1 WriteQueryResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatapointResult", arg0, arg1)
}

// SetDatapointResult indicates an expected call of SetDatapointResult
func (mr *MockWriteQueryIterMockRecorder) SetDatapointResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatapointResult", reflect.TypeOf((*MockWriteQueryIter)(nil).SetDatapointResult), arg0, arg1)
}

// SetDatapointState mocks base method
func (m *MockWriteQueryIter) SetDatapointState(arg0 int, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatapointState", arg0, arg1)
}

// SetDatapointState indicates an expected call of SetDatapointState
func (mr *MockWriteQueryIterMockRecorder) SetDatapointState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatapointState", reflect.TypeOf((*MockWriteQueryIter)(nil).SetDatapointState), arg0, arg1)
}

// UniqueAttributes mocks base method
func (m *MockWriteQueryIter) UniqueAttributes() []Attributes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueAttributes")
	ret0, _ := ret[0].([]Attributes)
	return ret0
}

// UniqueAttributes indicates an expected call of UniqueAttributes
func (mr *MockWriteQueryIterMockRecorder) UniqueAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueAttributes", reflect.TypeOf((*MockWriteQueryIter)(nil).UniqueAttributes))
}
