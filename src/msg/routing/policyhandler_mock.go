// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/msg/routing (interfaces: PolicyHandler,PolicyConfig)

// Package routing is a generated GoMock package.
package routing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPolicyHandler is a mock of PolicyHandler interface.
type MockPolicyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyHandlerMockRecorder
}

// MockPolicyHandlerMockRecorder is the mock recorder for MockPolicyHandler.
type MockPolicyHandlerMockRecorder struct {
	mock *MockPolicyHandler
}

// NewMockPolicyHandler creates a new mock instance.
func NewMockPolicyHandler(ctrl *gomock.Controller) *MockPolicyHandler {
	mock := &MockPolicyHandler{ctrl: ctrl}
	mock.recorder = &MockPolicyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyHandler) EXPECT() *MockPolicyHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPolicyHandler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPolicyHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPolicyHandler)(nil).Close))
}

// GetTrafficTypes mocks base method.
func (m *MockPolicyHandler) GetTrafficTypes() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTypes")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// GetTrafficTypes indicates an expected call of GetTrafficTypes.
func (mr *MockPolicyHandlerMockRecorder) GetTrafficTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTypes", reflect.TypeOf((*MockPolicyHandler)(nil).GetTrafficTypes))
}

// Subscribe mocks base method.
func (m *MockPolicyHandler) Subscribe(arg0 PolicyUpdateListener) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPolicyHandlerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPolicyHandler)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockPolicyHandler) Unsubscribe(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPolicyHandlerMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPolicyHandler)(nil).Unsubscribe), arg0)
}

// MockPolicyConfig is a mock of PolicyConfig interface.
type MockPolicyConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyConfigMockRecorder
}

// MockPolicyConfigMockRecorder is the mock recorder for MockPolicyConfig.
type MockPolicyConfigMockRecorder struct {
	mock *MockPolicyConfig
}

// NewMockPolicyConfig creates a new mock instance.
func NewMockPolicyConfig(ctrl *gomock.Controller) *MockPolicyConfig {
	mock := &MockPolicyConfig{ctrl: ctrl}
	mock.recorder = &MockPolicyConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyConfig) EXPECT() *MockPolicyConfigMockRecorder {
	return m.recorder
}

// TrafficTypes mocks base method.
func (m *MockPolicyConfig) TrafficTypes() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficTypes")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// TrafficTypes indicates an expected call of TrafficTypes.
func (mr *MockPolicyConfigMockRecorder) TrafficTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficTypes", reflect.TypeOf((*MockPolicyConfig)(nil).TrafficTypes))
}
