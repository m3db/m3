// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/msg/routing (interfaces: PolicyHandler)

// Copyright (c) 2025 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package routing is a generated GoMock package.
package routing

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockPolicyHandler is a mock of PolicyHandler interface.
type MockPolicyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyHandlerMockRecorder
}

// MockPolicyHandlerMockRecorder is the mock recorder for MockPolicyHandler.
type MockPolicyHandlerMockRecorder struct {
	mock *MockPolicyHandler
}

// NewMockPolicyHandler creates a new mock instance.
func NewMockPolicyHandler(ctrl *gomock.Controller) *MockPolicyHandler {
	mock := &MockPolicyHandler{ctrl: ctrl}
	mock.recorder = &MockPolicyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyHandler) EXPECT() *MockPolicyHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPolicyHandler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPolicyHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPolicyHandler)(nil).Close))
}

// GetTrafficTypes mocks base method.
func (m *MockPolicyHandler) GetTrafficTypes() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTypes")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// GetTrafficTypes indicates an expected call of GetTrafficTypes.
func (mr *MockPolicyHandlerMockRecorder) GetTrafficTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTypes", reflect.TypeOf((*MockPolicyHandler)(nil).GetTrafficTypes))
}

// Init mocks base method.
func (m *MockPolicyHandler) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockPolicyHandlerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockPolicyHandler)(nil).Init))
}
