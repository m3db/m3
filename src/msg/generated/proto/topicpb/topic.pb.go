// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/msg/generated/proto/topicpb/topic.proto

/*
	Package topicpb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/msg/generated/proto/topicpb/topic.proto

	It has these top-level messages:
		Topic
		ConsumerService
		Filters
		StoragePolicyFilter
		PercentageFilter
		ShardSetFilter
		ServiceID
*/
package topicpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConsumptionType int32

const (
	ConsumptionType_UNKNOWN    ConsumptionType = 0
	ConsumptionType_SHARED     ConsumptionType = 1
	ConsumptionType_REPLICATED ConsumptionType = 2
)

var ConsumptionType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SHARED",
	2: "REPLICATED",
}
var ConsumptionType_value = map[string]int32{
	"UNKNOWN":    0,
	"SHARED":     1,
	"REPLICATED": 2,
}

func (x ConsumptionType) String() string {
	return proto.EnumName(ConsumptionType_name, int32(x))
}
func (ConsumptionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopic, []int{0} }

type Topic struct {
	Name             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumberOfShards   uint32             `protobuf:"varint,2,opt,name=number_of_shards,json=numberOfShards,proto3" json:"number_of_shards,omitempty"`
	ConsumerServices []*ConsumerService `protobuf:"bytes,3,rep,name=consumer_services,json=consumerServices" json:"consumer_services,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{0} }

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetNumberOfShards() uint32 {
	if m != nil {
		return m.NumberOfShards
	}
	return 0
}

func (m *Topic) GetConsumerServices() []*ConsumerService {
	if m != nil {
		return m.ConsumerServices
	}
	return nil
}

type ConsumerService struct {
	ServiceId       *ServiceID      `protobuf:"bytes,1,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	ConsumptionType ConsumptionType `protobuf:"varint,2,opt,name=consumption_type,json=consumptionType,proto3,enum=topicpb.ConsumptionType" json:"consumption_type,omitempty"`
	MessageTtlNanos int64           `protobuf:"varint,3,opt,name=message_ttl_nanos,json=messageTtlNanos,proto3" json:"message_ttl_nanos,omitempty"`
	Filters         *Filters        `protobuf:"bytes,4,opt,name=filters" json:"filters,omitempty"`
}

func (m *ConsumerService) Reset()                    { *m = ConsumerService{} }
func (m *ConsumerService) String() string            { return proto.CompactTextString(m) }
func (*ConsumerService) ProtoMessage()               {}
func (*ConsumerService) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{1} }

func (m *ConsumerService) GetServiceId() *ServiceID {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *ConsumerService) GetConsumptionType() ConsumptionType {
	if m != nil {
		return m.ConsumptionType
	}
	return ConsumptionType_UNKNOWN
}

func (m *ConsumerService) GetMessageTtlNanos() int64 {
	if m != nil {
		return m.MessageTtlNanos
	}
	return 0
}

func (m *ConsumerService) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Filters struct {
	StoragePolicyFilter *StoragePolicyFilter `protobuf:"bytes,1,opt,name=storage_policy_filter,json=storagePolicyFilter" json:"storage_policy_filter,omitempty"`
	PercentageFilter    *PercentageFilter    `protobuf:"bytes,2,opt,name=percentage_filter,json=percentageFilter" json:"percentage_filter,omitempty"`
	ShardSetFilter      *ShardSetFilter      `protobuf:"bytes,3,opt,name=shard_set_filter,json=shardSetFilter" json:"shard_set_filter,omitempty"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{2} }

func (m *Filters) GetStoragePolicyFilter() *StoragePolicyFilter {
	if m != nil {
		return m.StoragePolicyFilter
	}
	return nil
}

func (m *Filters) GetPercentageFilter() *PercentageFilter {
	if m != nil {
		return m.PercentageFilter
	}
	return nil
}

func (m *Filters) GetShardSetFilter() *ShardSetFilter {
	if m != nil {
		return m.ShardSetFilter
	}
	return nil
}

type StoragePolicyFilter struct {
	StoragePolicies []string `protobuf:"bytes,1,rep,name=storage_policies,json=storagePolicies" json:"storage_policies,omitempty"`
}

func (m *StoragePolicyFilter) Reset()                    { *m = StoragePolicyFilter{} }
func (m *StoragePolicyFilter) String() string            { return proto.CompactTextString(m) }
func (*StoragePolicyFilter) ProtoMessage()               {}
func (*StoragePolicyFilter) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{3} }

func (m *StoragePolicyFilter) GetStoragePolicies() []string {
	if m != nil {
		return m.StoragePolicies
	}
	return nil
}

type PercentageFilter struct {
	Percentage float64 `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (m *PercentageFilter) Reset()                    { *m = PercentageFilter{} }
func (m *PercentageFilter) String() string            { return proto.CompactTextString(m) }
func (*PercentageFilter) ProtoMessage()               {}
func (*PercentageFilter) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{4} }

func (m *PercentageFilter) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type ShardSetFilter struct {
	ShardSet string `protobuf:"bytes,1,opt,name=shard_set,json=shardSet,proto3" json:"shard_set,omitempty"`
}

func (m *ShardSetFilter) Reset()                    { *m = ShardSetFilter{} }
func (m *ShardSetFilter) String() string            { return proto.CompactTextString(m) }
func (*ShardSetFilter) ProtoMessage()               {}
func (*ShardSetFilter) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{5} }

func (m *ShardSetFilter) GetShardSet() string {
	if m != nil {
		return m.ShardSet
	}
	return ""
}

type ServiceID struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Zone        string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (m *ServiceID) Reset()                    { *m = ServiceID{} }
func (m *ServiceID) String() string            { return proto.CompactTextString(m) }
func (*ServiceID) ProtoMessage()               {}
func (*ServiceID) Descriptor() ([]byte, []int) { return fileDescriptorTopic, []int{6} }

func (m *ServiceID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceID) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ServiceID) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func init() {
	proto.RegisterType((*Topic)(nil), "topicpb.Topic")
	proto.RegisterType((*ConsumerService)(nil), "topicpb.ConsumerService")
	proto.RegisterType((*Filters)(nil), "topicpb.Filters")
	proto.RegisterType((*StoragePolicyFilter)(nil), "topicpb.StoragePolicyFilter")
	proto.RegisterType((*PercentageFilter)(nil), "topicpb.PercentageFilter")
	proto.RegisterType((*ShardSetFilter)(nil), "topicpb.ShardSetFilter")
	proto.RegisterType((*ServiceID)(nil), "topicpb.ServiceID")
	proto.RegisterEnum("topicpb.ConsumptionType", ConsumptionType_name, ConsumptionType_value)
}
func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NumberOfShards != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.NumberOfShards))
	}
	if len(m.ConsumerServices) > 0 {
		for _, msg := range m.ConsumerServices {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTopic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConsumerService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.ServiceId.Size()))
		n1, err := m.ServiceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ConsumptionType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.ConsumptionType))
	}
	if m.MessageTtlNanos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.MessageTtlNanos))
	}
	if m.Filters != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.Filters.Size()))
		n2, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Filters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StoragePolicyFilter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.StoragePolicyFilter.Size()))
		n3, err := m.StoragePolicyFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.PercentageFilter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.PercentageFilter.Size()))
		n4, err := m.PercentageFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ShardSetFilter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopic(dAtA, i, uint64(m.ShardSetFilter.Size()))
		n5, err := m.ShardSetFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *StoragePolicyFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoragePolicyFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StoragePolicies) > 0 {
		for _, s := range m.StoragePolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PercentageFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PercentageFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Percentage != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Percentage))))
		i += 8
	}
	return i, nil
}

func (m *ShardSetFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSetFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardSet) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopic(dAtA, i, uint64(len(m.ShardSet)))
		i += copy(dAtA[i:], m.ShardSet)
	}
	return i, nil
}

func (m *ServiceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	return i, nil
}

func encodeVarintTopic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.NumberOfShards != 0 {
		n += 1 + sovTopic(uint64(m.NumberOfShards))
	}
	if len(m.ConsumerServices) > 0 {
		for _, e := range m.ConsumerServices {
			l = e.Size()
			n += 1 + l + sovTopic(uint64(l))
		}
	}
	return n
}

func (m *ConsumerService) Size() (n int) {
	var l int
	_ = l
	if m.ServiceId != nil {
		l = m.ServiceId.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.ConsumptionType != 0 {
		n += 1 + sovTopic(uint64(m.ConsumptionType))
	}
	if m.MessageTtlNanos != 0 {
		n += 1 + sovTopic(uint64(m.MessageTtlNanos))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	return n
}

func (m *Filters) Size() (n int) {
	var l int
	_ = l
	if m.StoragePolicyFilter != nil {
		l = m.StoragePolicyFilter.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.PercentageFilter != nil {
		l = m.PercentageFilter.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.ShardSetFilter != nil {
		l = m.ShardSetFilter.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	return n
}

func (m *StoragePolicyFilter) Size() (n int) {
	var l int
	_ = l
	if len(m.StoragePolicies) > 0 {
		for _, s := range m.StoragePolicies {
			l = len(s)
			n += 1 + l + sovTopic(uint64(l))
		}
	}
	return n
}

func (m *PercentageFilter) Size() (n int) {
	var l int
	_ = l
	if m.Percentage != 0 {
		n += 9
	}
	return n
}

func (m *ShardSetFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.ShardSet)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	return n
}

func (m *ServiceID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	return n
}

func sovTopic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopic(x uint64) (n int) {
	return sovTopic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfShards", wireType)
			}
			m.NumberOfShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfShards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerServices = append(m.ConsumerServices, &ConsumerService{})
			if err := m.ConsumerServices[len(m.ConsumerServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceId == nil {
				m.ServiceId = &ServiceID{}
			}
			if err := m.ServiceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumptionType", wireType)
			}
			m.ConsumptionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumptionType |= (ConsumptionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageTtlNanos", wireType)
			}
			m.MessageTtlNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageTtlNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &Filters{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicyFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoragePolicyFilter == nil {
				m.StoragePolicyFilter = &StoragePolicyFilter{}
			}
			if err := m.StoragePolicyFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PercentageFilter == nil {
				m.PercentageFilter = &PercentageFilter{}
			}
			if err := m.PercentageFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSetFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardSetFilter == nil {
				m.ShardSetFilter = &ShardSetFilter{}
			}
			if err := m.ShardSetFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoragePolicyFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoragePolicyFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoragePolicyFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePolicies = append(m.StoragePolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PercentageFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PercentageFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PercentageFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Percentage = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSetFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSetFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSetFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTopic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopic   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/msg/generated/proto/topicpb/topic.proto", fileDescriptorTopic)
}

var fileDescriptorTopic = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x8e, 0xda, 0x3c,
	0x14, 0xc5, 0xc7, 0xc3, 0x7c, 0xc3, 0x97, 0x8b, 0x0a, 0xc1, 0xa3, 0xaa, 0xa9, 0x5a, 0x21, 0x94,
	0x55, 0x8a, 0x54, 0xa2, 0xc2, 0xae, 0x8b, 0xaa, 0x14, 0x18, 0x15, 0xb5, 0x62, 0x90, 0x61, 0xd4,
	0x65, 0x04, 0xc1, 0x30, 0x91, 0x88, 0x1d, 0xd9, 0x66, 0x24, 0xfa, 0x0c, 0x5d, 0xf4, 0xb1, 0xba,
	0xec, 0x23, 0xb4, 0x54, 0xea, 0x73, 0x54, 0x71, 0x4c, 0xf8, 0x33, 0xb3, 0x8a, 0xf3, 0xcb, 0xf1,
	0xf1, 0xb9, 0x37, 0xd7, 0xf0, 0x6e, 0x19, 0xa9, 0xbb, 0xf5, 0xac, 0x19, 0xf2, 0xd8, 0x8f, 0xdb,
	0xf3, 0x99, 0x1f, 0xb7, 0x7d, 0x29, 0x42, 0x3f, 0x96, 0x4b, 0x7f, 0x49, 0x19, 0x15, 0x53, 0x45,
	0xe7, 0x7e, 0x22, 0xb8, 0xe2, 0xbe, 0xe2, 0x49, 0x14, 0x26, 0xb3, 0xec, 0xd9, 0xd4, 0x0c, 0x17,
	0x0d, 0x74, 0xbf, 0x21, 0xf8, 0x6f, 0x92, 0xae, 0x31, 0x86, 0x0b, 0x36, 0x8d, 0xa9, 0x83, 0xea,
	0xc8, 0xb3, 0x88, 0x5e, 0x63, 0x0f, 0x6c, 0xb6, 0x8e, 0x67, 0x54, 0x04, 0x7c, 0x11, 0xc8, 0xbb,
	0xa9, 0x98, 0x4b, 0xe7, 0xbc, 0x8e, 0xbc, 0x27, 0xa4, 0x9c, 0xf1, 0x9b, 0xc5, 0x58, 0x53, 0xdc,
	0x87, 0x6a, 0xc8, 0x99, 0x5c, 0xc7, 0x54, 0x04, 0x92, 0x8a, 0xfb, 0x28, 0xa4, 0xd2, 0x29, 0xd4,
	0x0b, 0x5e, 0xa9, 0xe5, 0x34, 0xcd, 0x61, 0xcd, 0xae, 0x51, 0x8c, 0x33, 0x01, 0xb1, 0xc3, 0x63,
	0x20, 0xdd, 0xdf, 0x08, 0x2a, 0x27, 0x2a, 0xfc, 0x06, 0xc0, 0x38, 0x06, 0xd1, 0x5c, 0xc7, 0x2b,
	0xb5, 0x70, 0xee, 0x69, 0x54, 0x83, 0x1e, 0xb1, 0x8c, 0x6a, 0x30, 0xc7, 0x5d, 0x30, 0xd6, 0x89,
	0x8a, 0x38, 0x0b, 0xd4, 0x26, 0xa1, 0x3a, 0x77, 0xf9, 0x41, 0x18, 0x2d, 0x98, 0x6c, 0x12, 0x4a,
	0x2a, 0xe1, 0x31, 0xc0, 0x0d, 0xa8, 0xc6, 0x54, 0xca, 0xe9, 0x92, 0x06, 0x4a, 0xad, 0x02, 0x36,
	0x65, 0x3c, 0x2d, 0x09, 0x79, 0x05, 0x52, 0x31, 0x1f, 0x26, 0x6a, 0x35, 0x4c, 0x31, 0x6e, 0x40,
	0x71, 0x11, 0xad, 0x14, 0x15, 0xd2, 0xb9, 0xd0, 0x01, 0xed, 0xfc, 0x9c, 0xeb, 0x8c, 0x93, 0x9d,
	0xc0, 0xfd, 0x8b, 0xa0, 0x68, 0x20, 0x1e, 0xc1, 0x53, 0xa9, 0xb8, 0x48, 0xcf, 0x48, 0xf8, 0x2a,
	0x0a, 0x37, 0x41, 0xa6, 0x32, 0x65, 0xbe, 0xdc, 0x97, 0x99, 0xa9, 0x46, 0x5a, 0x94, 0xed, 0x26,
	0x57, 0xf2, 0x21, 0xc4, 0xd7, 0x50, 0x4d, 0xa8, 0x08, 0x29, 0x53, 0xa9, 0xa9, 0x71, 0x3b, 0xd7,
	0x6e, 0xcf, 0x73, 0xb7, 0x51, 0xae, 0x30, 0x56, 0x76, 0x72, 0x42, 0x70, 0x07, 0x6c, 0xfd, 0xc3,
	0x03, 0x49, 0xd5, 0xce, 0xa6, 0xa0, 0x6d, 0x9e, 0xed, 0x43, 0xa5, 0x82, 0x31, 0x55, 0xc6, 0xa4,
	0x2c, 0x8f, 0xde, 0xdd, 0xf7, 0x70, 0xf5, 0x48, 0x6c, 0xfc, 0x0a, 0xec, 0xa3, 0x9a, 0x23, 0x2a,
	0x1d, 0x54, 0x2f, 0x78, 0x16, 0xa9, 0x1c, 0x16, 0x14, 0x51, 0xe9, 0xb6, 0xc0, 0x3e, 0x8d, 0x8a,
	0x6b, 0x00, 0xfb, 0xb0, 0xba, 0x4f, 0x88, 0x1c, 0x10, 0xf7, 0x35, 0x94, 0x8f, 0x73, 0xe1, 0x17,
	0x60, 0xe5, 0xa5, 0x98, 0xf1, 0xfe, 0x7f, 0x17, 0xd5, 0xbd, 0x05, 0x2b, 0x1f, 0xa1, 0x47, 0xef,
	0x40, 0x1d, 0x4a, 0x94, 0xdd, 0x47, 0x82, 0xb3, 0x98, 0x32, 0xa5, 0x5b, 0x69, 0x91, 0x43, 0x94,
	0xee, 0xfa, 0xca, 0x19, 0xd5, 0xed, 0xb1, 0x88, 0x5e, 0x37, 0xde, 0xee, 0xe6, 0x78, 0x3f, 0x4f,
	0x25, 0x28, 0xde, 0x0e, 0x3f, 0x0d, 0x6f, 0xbe, 0x0c, 0xed, 0x33, 0x0c, 0x70, 0x39, 0xfe, 0xd8,
	0x21, 0xfd, 0x9e, 0x8d, 0x70, 0x19, 0x80, 0xf4, 0x47, 0x9f, 0x07, 0xdd, 0xce, 0xa4, 0xdf, 0xb3,
	0xcf, 0x3f, 0xd8, 0x3f, 0xb6, 0x35, 0xf4, 0x73, 0x5b, 0x43, 0xbf, 0xb6, 0x35, 0xf4, 0xfd, 0x4f,
	0xed, 0x6c, 0x76, 0xa9, 0x6f, 0x6d, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xa8, 0x59,
	0x77, 0xf7, 0x03, 0x00, 0x00,
}
