// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/msg/generated/proto/topicpb/topic.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package topicpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConsumptionType int32

const (
	ConsumptionType_UNKNOWN    ConsumptionType = 0
	ConsumptionType_SHARED     ConsumptionType = 1
	ConsumptionType_REPLICATED ConsumptionType = 2
)

var ConsumptionType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SHARED",
	2: "REPLICATED",
}

var ConsumptionType_value = map[string]int32{
	"UNKNOWN":    0,
	"SHARED":     1,
	"REPLICATED": 2,
}

func (x ConsumptionType) String() string {
	return proto.EnumName(ConsumptionType_name, int32(x))
}

func (ConsumptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d836b24b87c59fae, []int{0}
}

type Topic struct {
	Name             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumberOfShards   uint32             `protobuf:"varint,2,opt,name=number_of_shards,json=numberOfShards,proto3" json:"number_of_shards,omitempty"`
	ConsumerServices []*ConsumerService `protobuf:"bytes,3,rep,name=consumer_services,json=consumerServices,proto3" json:"consumer_services,omitempty"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d836b24b87c59fae, []int{0}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetNumberOfShards() uint32 {
	if m != nil {
		return m.NumberOfShards
	}
	return 0
}

func (m *Topic) GetConsumerServices() []*ConsumerService {
	if m != nil {
		return m.ConsumerServices
	}
	return nil
}

type ConsumerService struct {
	ServiceId       *ServiceID      `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ConsumptionType ConsumptionType `protobuf:"varint,2,opt,name=consumption_type,json=consumptionType,proto3,enum=topicpb.ConsumptionType" json:"consumption_type,omitempty"`
	MessageTtlNanos int64           `protobuf:"varint,3,opt,name=message_ttl_nanos,json=messageTtlNanos,proto3" json:"message_ttl_nanos,omitempty"`
}

func (m *ConsumerService) Reset()         { *m = ConsumerService{} }
func (m *ConsumerService) String() string { return proto.CompactTextString(m) }
func (*ConsumerService) ProtoMessage()    {}
func (*ConsumerService) Descriptor() ([]byte, []int) {
	return fileDescriptor_d836b24b87c59fae, []int{1}
}
func (m *ConsumerService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerService.Merge(m, src)
}
func (m *ConsumerService) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerService) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerService.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerService proto.InternalMessageInfo

func (m *ConsumerService) GetServiceId() *ServiceID {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *ConsumerService) GetConsumptionType() ConsumptionType {
	if m != nil {
		return m.ConsumptionType
	}
	return ConsumptionType_UNKNOWN
}

func (m *ConsumerService) GetMessageTtlNanos() int64 {
	if m != nil {
		return m.MessageTtlNanos
	}
	return 0
}

type ServiceID struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Zone        string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (m *ServiceID) Reset()         { *m = ServiceID{} }
func (m *ServiceID) String() string { return proto.CompactTextString(m) }
func (*ServiceID) ProtoMessage()    {}
func (*ServiceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d836b24b87c59fae, []int{2}
}
func (m *ServiceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceID.Merge(m, src)
}
func (m *ServiceID) XXX_Size() int {
	return m.Size()
}
func (m *ServiceID) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceID.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceID proto.InternalMessageInfo

func (m *ServiceID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceID) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ServiceID) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func init() {
	proto.RegisterEnum("topicpb.ConsumptionType", ConsumptionType_name, ConsumptionType_value)
	proto.RegisterType((*Topic)(nil), "topicpb.Topic")
	proto.RegisterType((*ConsumerService)(nil), "topicpb.ConsumerService")
	proto.RegisterType((*ServiceID)(nil), "topicpb.ServiceID")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/msg/generated/proto/topicpb/topic.proto", fileDescriptor_d836b24b87c59fae)
}

var fileDescriptor_d836b24b87c59fae = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0x87, 0xe3, 0x2e, 0xb4, 0xca, 0x44, 0xec, 0xa6, 0x3e, 0xe5, 0x14, 0x45, 0x7b, 0x8a, 0x7a,
	0x48, 0x44, 0xf7, 0xc6, 0x01, 0xa9, 0xec, 0x46, 0x62, 0x05, 0x4a, 0x91, 0x37, 0x15, 0xc7, 0x28,
	0x7f, 0xdc, 0x34, 0x52, 0x6d, 0x47, 0xb6, 0xb7, 0x52, 0x79, 0x06, 0x0e, 0xbc, 0x0c, 0xef, 0xc0,
	0xb1, 0x47, 0x8e, 0x68, 0xf7, 0x45, 0x50, 0xbc, 0xa6, 0x50, 0xe0, 0x94, 0xd1, 0x97, 0x9f, 0x67,
	0x3e, 0x8f, 0x0c, 0xaf, 0xbb, 0x5e, 0xdf, 0x6c, 0xeb, 0xa4, 0x11, 0x2c, 0x65, 0x8b, 0xb6, 0x4e,
	0xd9, 0x22, 0x55, 0xb2, 0x49, 0x99, 0xea, 0xd2, 0x8e, 0x72, 0x2a, 0x2b, 0x4d, 0xdb, 0x74, 0x90,
	0x42, 0x8b, 0x54, 0x8b, 0xa1, 0x6f, 0x86, 0xfa, 0xf0, 0x4d, 0x0c, 0xc3, 0x27, 0x16, 0xce, 0x3f,
	0x23, 0x78, 0x5e, 0x8c, 0x35, 0xc6, 0xf0, 0x8c, 0x57, 0x8c, 0x06, 0x28, 0x42, 0xb1, 0x4b, 0x4c,
	0x8d, 0x63, 0xf0, 0xf9, 0x96, 0xd5, 0x54, 0x96, 0xe2, 0xba, 0x54, 0x37, 0x95, 0x6c, 0x55, 0x70,
	0x14, 0xa1, 0xf8, 0x05, 0x99, 0x1e, 0xf8, 0xe5, 0xf5, 0xc6, 0x50, 0x9c, 0xc1, 0x69, 0x23, 0xb8,
	0xda, 0x32, 0x2a, 0x4b, 0x45, 0xe5, 0x5d, 0xdf, 0x50, 0x15, 0x4c, 0xa2, 0x49, 0xec, 0x9d, 0x07,
	0x89, 0x1d, 0x96, 0x2c, 0x6d, 0x62, 0x73, 0x08, 0x10, 0xbf, 0x79, 0x0a, 0xd4, 0xfc, 0x2b, 0x82,
	0xd9, 0x5f, 0x29, 0xfc, 0x12, 0xc0, 0x76, 0x2c, 0xfb, 0xd6, 0xe8, 0x79, 0xe7, 0xf8, 0xb1, 0xa7,
	0x4d, 0xad, 0x57, 0xc4, 0xb5, 0xa9, 0x75, 0x8b, 0x97, 0x60, 0x5b, 0x0f, 0xba, 0x17, 0xbc, 0xd4,
	0xf7, 0x03, 0x35, 0xde, 0xd3, 0x7f, 0x64, 0x4c, 0xa0, 0xb8, 0x1f, 0x28, 0x99, 0x35, 0x4f, 0x01,
	0x3e, 0x83, 0x53, 0x46, 0x95, 0xaa, 0x3a, 0x5a, 0x6a, 0x7d, 0x5b, 0xf2, 0x8a, 0x8b, 0xf1, 0x4a,
	0x28, 0x9e, 0x90, 0x99, 0xfd, 0x51, 0xe8, 0xdb, 0x7c, 0xc4, 0xf3, 0x2b, 0x70, 0x1f, 0x45, 0xfe,
	0xbb, 0xc9, 0x08, 0x3c, 0xca, 0xef, 0x7a, 0x29, 0x38, 0xa3, 0x5c, 0x1b, 0x19, 0x97, 0xfc, 0x89,
	0xc6, 0x53, 0x9f, 0x04, 0xa7, 0x66, 0x82, 0x4b, 0x4c, 0x7d, 0xf6, 0xea, 0xd7, 0x36, 0x7e, 0x5b,
	0x79, 0x70, 0x72, 0x95, 0xbf, 0xcb, 0x2f, 0x3f, 0xe6, 0xbe, 0x83, 0x01, 0x8e, 0x37, 0x6f, 0x2f,
	0x48, 0xb6, 0xf2, 0x11, 0x9e, 0x02, 0x90, 0xec, 0xc3, 0xfb, 0xf5, 0xf2, 0xa2, 0xc8, 0x56, 0xfe,
	0xd1, 0x9b, 0xe0, 0xdb, 0x2e, 0x44, 0x0f, 0xbb, 0x10, 0xfd, 0xd8, 0x85, 0xe8, 0xcb, 0x3e, 0x74,
	0x1e, 0xf6, 0xa1, 0xf3, 0x7d, 0x1f, 0x3a, 0xf5, 0xb1, 0x79, 0x03, 0x8b, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x05, 0x0a, 0x56, 0x45, 0x02, 0x00, 0x00,
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerServices) > 0 {
		for iNdEx := len(m.ConsumerServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NumberOfShards != 0 {
		i = encodeVarintTopic(dAtA, i, uint64(m.NumberOfShards))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageTtlNanos != 0 {
		i = encodeVarintTopic(dAtA, i, uint64(m.MessageTtlNanos))
		i--
		dAtA[i] = 0x18
	}
	if m.ConsumptionType != 0 {
		i = encodeVarintTopic(dAtA, i, uint64(m.ConsumptionType))
		i--
		dAtA[i] = 0x10
	}
	if m.ServiceId != nil {
		{
			size, err := m.ServiceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTopic(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopic(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.NumberOfShards != 0 {
		n += 1 + sovTopic(uint64(m.NumberOfShards))
	}
	if len(m.ConsumerServices) > 0 {
		for _, e := range m.ConsumerServices {
			l = e.Size()
			n += 1 + l + sovTopic(uint64(l))
		}
	}
	return n
}

func (m *ConsumerService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != nil {
		l = m.ServiceId.Size()
		n += 1 + l + sovTopic(uint64(l))
	}
	if m.ConsumptionType != 0 {
		n += 1 + sovTopic(uint64(m.ConsumptionType))
	}
	if m.MessageTtlNanos != 0 {
		n += 1 + sovTopic(uint64(m.MessageTtlNanos))
	}
	return n
}

func (m *ServiceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTopic(uint64(l))
	}
	return n
}

func sovTopic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopic(x uint64) (n int) {
	return sovTopic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfShards", wireType)
			}
			m.NumberOfShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfShards |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerServices = append(m.ConsumerServices, &ConsumerService{})
			if err := m.ConsumerServices[len(m.ConsumerServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceId == nil {
				m.ServiceId = &ServiceID{}
			}
			if err := m.ServiceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumptionType", wireType)
			}
			m.ConsumptionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumptionType |= ConsumptionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageTtlNanos", wireType)
			}
			m.MessageTtlNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageTtlNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopic = fmt.Errorf("proto: unexpected end of group")
)
