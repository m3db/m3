// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/msg/producer/writer/consumer_go

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package writer is a generated GoMock package.
package writer

import (
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
)

// MockconsumerWriter is a mock of consumerWriter interface.
type MockconsumerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockconsumerWriterMockRecorder
}

// MockconsumerWriterMockRecorder is the mock recorder for MockconsumerWriter.
type MockconsumerWriterMockRecorder struct {
	mock *MockconsumerWriter
}

// NewMockconsumerWriter creates a new mock instance.
func NewMockconsumerWriter(ctrl *gomock.Controller) *MockconsumerWriter {
	mock := &MockconsumerWriter{ctrl: ctrl}
	mock.recorder = &MockconsumerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconsumerWriter) EXPECT() *MockconsumerWriterMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockconsumerWriter) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockconsumerWriterMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockconsumerWriter)(nil).Address))
}

// Close mocks base method.
func (m *MockconsumerWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockconsumerWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockconsumerWriter)(nil).Close))
}

// Init mocks base method.
func (m *MockconsumerWriter) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockconsumerWriterMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockconsumerWriter)(nil).Init))
}

// Write mocks base method.
func (m *MockconsumerWriter) Write(connIndex int, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", connIndex, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockconsumerWriterMockRecorder) Write(connIndex, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockconsumerWriter)(nil).Write), connIndex, b)
}

// MockkeepAlivable is a mock of keepAlivable interface.
type MockkeepAlivable struct {
	ctrl     *gomock.Controller
	recorder *MockkeepAlivableMockRecorder
}

// MockkeepAlivableMockRecorder is the mock recorder for MockkeepAlivable.
type MockkeepAlivableMockRecorder struct {
	mock *MockkeepAlivable
}

// NewMockkeepAlivable creates a new mock instance.
func NewMockkeepAlivable(ctrl *gomock.Controller) *MockkeepAlivable {
	mock := &MockkeepAlivable{ctrl: ctrl}
	mock.recorder = &MockkeepAlivableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeepAlivable) EXPECT() *MockkeepAlivableMockRecorder {
	return m.recorder
}

// SetKeepAlive mocks base method.
func (m *MockkeepAlivable) SetKeepAlive(shouldKeepAlive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAlive", shouldKeepAlive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAlive indicates an expected call of SetKeepAlive.
func (mr *MockkeepAlivableMockRecorder) SetKeepAlive(shouldKeepAlive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlive", reflect.TypeOf((*MockkeepAlivable)(nil).SetKeepAlive), shouldKeepAlive)
}

// SetKeepAlivePeriod mocks base method.
func (m *MockkeepAlivable) SetKeepAlivePeriod(d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAlivePeriod", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAlivePeriod indicates an expected call of SetKeepAlivePeriod.
func (mr *MockkeepAlivableMockRecorder) SetKeepAlivePeriod(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlivePeriod", reflect.TypeOf((*MockkeepAlivable)(nil).SetKeepAlivePeriod), d)
}
