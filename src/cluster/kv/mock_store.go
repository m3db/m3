// Automatically generated by MockGen. DO NOT EDIT!
// Source: /Users/mmihic/Development/golang/src/github.com/m3db/m3cluster/kv/store.go

package kv

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
)

// Mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *_MockValueRecorder
}

// Recorder for MockValue (not exported)
type _MockValueRecorder struct {
	mock *MockValue
}

func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &_MockValueRecorder{mock}
	return mock
}

func (_m *MockValue) EXPECT() *_MockValueRecorder {
	return _m.recorder
}

func (_m *MockValue) Unmarshal(v proto.Message) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", v)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockValueRecorder) Unmarshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmarshal", arg0)
}

func (_m *MockValue) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockValueRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Get(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockStore) Set(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "Set", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockStore) SetIfNotExists(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "SetIfNotExists", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) SetIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIfNotExists", arg0, arg1)
}

func (_m *MockStore) CheckAndSet(key string, version int, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "CheckAndSet", key, version, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CheckAndSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSet", arg0, arg1, arg2)
}
