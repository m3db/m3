// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3cluster/kv/types.go

package kv

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	log "github.com/m3db/m3x/log"
)

// Mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *_MockValueRecorder
}

// Recorder for MockValue (not exported)
type _MockValueRecorder struct {
	mock *MockValue
}

func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &_MockValueRecorder{mock}
	return mock
}

func (_m *MockValue) EXPECT() *_MockValueRecorder {
	return _m.recorder
}

func (_m *MockValue) Unmarshal(v proto.Message) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", v)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockValueRecorder) Unmarshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmarshal", arg0)
}

func (_m *MockValue) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockValueRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

func (_m *MockValue) IsNewer(other Value) bool {
	ret := _m.ctrl.Call(_m, "IsNewer", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockValueRecorder) IsNewer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsNewer", arg0)
}

// Mock of ValueWatch interface
type MockValueWatch struct {
	ctrl     *gomock.Controller
	recorder *_MockValueWatchRecorder
}

// Recorder for MockValueWatch (not exported)
type _MockValueWatchRecorder struct {
	mock *MockValueWatch
}

func NewMockValueWatch(ctrl *gomock.Controller) *MockValueWatch {
	mock := &MockValueWatch{ctrl: ctrl}
	mock.recorder = &_MockValueWatchRecorder{mock}
	return mock
}

func (_m *MockValueWatch) EXPECT() *_MockValueWatchRecorder {
	return _m.recorder
}

func (_m *MockValueWatch) C() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "C")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

func (_mr *_MockValueWatchRecorder) C() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "C")
}

func (_m *MockValueWatch) Get() Value {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Value)
	return ret0
}

func (_mr *_MockValueWatchRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockValueWatch) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockValueWatchRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of ValueWatchable interface
type MockValueWatchable struct {
	ctrl     *gomock.Controller
	recorder *_MockValueWatchableRecorder
}

// Recorder for MockValueWatchable (not exported)
type _MockValueWatchableRecorder struct {
	mock *MockValueWatchable
}

func NewMockValueWatchable(ctrl *gomock.Controller) *MockValueWatchable {
	mock := &MockValueWatchable{ctrl: ctrl}
	mock.recorder = &_MockValueWatchableRecorder{mock}
	return mock
}

func (_m *MockValueWatchable) EXPECT() *_MockValueWatchableRecorder {
	return _m.recorder
}

func (_m *MockValueWatchable) Get() Value {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Value)
	return ret0
}

func (_mr *_MockValueWatchableRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockValueWatchable) Watch() (Value, ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(ValueWatch)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockValueWatchableRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch")
}

func (_m *MockValueWatchable) NumWatches() int {
	ret := _m.ctrl.Call(_m, "NumWatches")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockValueWatchableRecorder) NumWatches() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumWatches")
}

func (_m *MockValueWatchable) Update(_param0 Value) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockValueWatchableRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockValueWatchable) IsClosed() bool {
	ret := _m.ctrl.Call(_m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockValueWatchableRecorder) IsClosed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsClosed")
}

func (_m *MockValueWatchable) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockValueWatchableRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) Logger() log.Logger {
	ret := _m.ctrl.Call(_m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

func (_mr *_MockOptionsRecorder) Logger() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logger")
}

func (_m *MockOptions) SetLogger(logger log.Logger) Options {
	ret := _m.ctrl.Call(_m, "SetLogger", logger)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLogger", arg0)
}

func (_m *MockOptions) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOptionsRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

func (_m *MockOptions) SetZone(value string) Options {
	ret := _m.ctrl.Call(_m, "SetZone", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetZone", arg0)
}

func (_m *MockOptions) Namespace() string {
	ret := _m.ctrl.Call(_m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOptionsRecorder) Namespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Namespace")
}

func (_m *MockOptions) SetNamespace(namespace string) Options {
	ret := _m.ctrl.Call(_m, "SetNamespace", namespace)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNamespace", arg0)
}

func (_m *MockOptions) Environment() string {
	ret := _m.ctrl.Call(_m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOptionsRecorder) Environment() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Environment")
}

func (_m *MockOptions) SetEnvironment(env string) Options {
	ret := _m.ctrl.Call(_m, "SetEnvironment", env)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEnvironment", arg0)
}

func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Get(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockStore) Watch(key string) (ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch", key)
	ret0, _ := ret[0].(ValueWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", arg0)
}

func (_m *MockStore) Set(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "Set", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockStore) SetIfNotExists(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "SetIfNotExists", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) SetIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIfNotExists", arg0, arg1)
}

func (_m *MockStore) CheckAndSet(key string, version int, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "CheckAndSet", key, version, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CheckAndSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSet", arg0, arg1, arg2)
}

func (_m *MockStore) Delete(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Delete", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockStore) History(key string, from int, to int) ([]Value, error) {
	ret := _m.ctrl.Call(_m, "History", key, from, to)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) History(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "History", arg0, arg1, arg2)
}

// Mock of Condition interface
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *_MockConditionRecorder
}

// Recorder for MockCondition (not exported)
type _MockConditionRecorder struct {
	mock *MockCondition
}

func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &_MockConditionRecorder{mock}
	return mock
}

func (_m *MockCondition) EXPECT() *_MockConditionRecorder {
	return _m.recorder
}

func (_m *MockCondition) TargetType() TargetType {
	ret := _m.ctrl.Call(_m, "TargetType")
	ret0, _ := ret[0].(TargetType)
	return ret0
}

func (_mr *_MockConditionRecorder) TargetType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TargetType")
}

func (_m *MockCondition) SetTargetType(t TargetType) Condition {
	ret := _m.ctrl.Call(_m, "SetTargetType", t)
	ret0, _ := ret[0].(Condition)
	return ret0
}

func (_mr *_MockConditionRecorder) SetTargetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTargetType", arg0)
}

func (_m *MockCondition) CompareType() CompareType {
	ret := _m.ctrl.Call(_m, "CompareType")
	ret0, _ := ret[0].(CompareType)
	return ret0
}

func (_mr *_MockConditionRecorder) CompareType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CompareType")
}

func (_m *MockCondition) SetCompareType(t CompareType) Condition {
	ret := _m.ctrl.Call(_m, "SetCompareType", t)
	ret0, _ := ret[0].(Condition)
	return ret0
}

func (_mr *_MockConditionRecorder) SetCompareType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCompareType", arg0)
}

func (_m *MockCondition) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockConditionRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Key")
}

func (_m *MockCondition) SetKey(key string) Condition {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Condition)
	return ret0
}

func (_mr *_MockConditionRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKey", arg0)
}

func (_m *MockCondition) Value() interface{} {
	ret := _m.ctrl.Call(_m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockConditionRecorder) Value() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Value")
}

func (_m *MockCondition) SetValue(value interface{}) Condition {
	ret := _m.ctrl.Call(_m, "SetValue", value)
	ret0, _ := ret[0].(Condition)
	return ret0
}

func (_mr *_MockConditionRecorder) SetValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetValue", arg0)
}

// Mock of Op interface
type MockOp struct {
	ctrl     *gomock.Controller
	recorder *_MockOpRecorder
}

// Recorder for MockOp (not exported)
type _MockOpRecorder struct {
	mock *MockOp
}

func NewMockOp(ctrl *gomock.Controller) *MockOp {
	mock := &MockOp{ctrl: ctrl}
	mock.recorder = &_MockOpRecorder{mock}
	return mock
}

func (_m *MockOp) EXPECT() *_MockOpRecorder {
	return _m.recorder
}

func (_m *MockOp) Type() OpType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(OpType)
	return ret0
}

func (_mr *_MockOpRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type")
}

func (_m *MockOp) SetType(ot OpType) Op {
	ret := _m.ctrl.Call(_m, "SetType", ot)
	ret0, _ := ret[0].(Op)
	return ret0
}

func (_mr *_MockOpRecorder) SetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetType", arg0)
}

func (_m *MockOp) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOpRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Key")
}

func (_m *MockOp) SetKey(key string) Op {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Op)
	return ret0
}

func (_mr *_MockOpRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKey", arg0)
}

// Mock of OpResponse interface
type MockOpResponse struct {
	ctrl     *gomock.Controller
	recorder *_MockOpResponseRecorder
}

// Recorder for MockOpResponse (not exported)
type _MockOpResponseRecorder struct {
	mock *MockOpResponse
}

func NewMockOpResponse(ctrl *gomock.Controller) *MockOpResponse {
	mock := &MockOpResponse{ctrl: ctrl}
	mock.recorder = &_MockOpResponseRecorder{mock}
	return mock
}

func (_m *MockOpResponse) EXPECT() *_MockOpResponseRecorder {
	return _m.recorder
}

func (_m *MockOpResponse) Type() OpType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(OpType)
	return ret0
}

func (_mr *_MockOpResponseRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type")
}

func (_m *MockOpResponse) SetType(ot OpType) Op {
	ret := _m.ctrl.Call(_m, "SetType", ot)
	ret0, _ := ret[0].(Op)
	return ret0
}

func (_mr *_MockOpResponseRecorder) SetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetType", arg0)
}

func (_m *MockOpResponse) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOpResponseRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Key")
}

func (_m *MockOpResponse) SetKey(key string) Op {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Op)
	return ret0
}

func (_mr *_MockOpResponseRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKey", arg0)
}

func (_m *MockOpResponse) Value() interface{} {
	ret := _m.ctrl.Call(_m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockOpResponseRecorder) Value() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Value")
}

func (_m *MockOpResponse) SetValue(v interface{}) OpResponse {
	ret := _m.ctrl.Call(_m, "SetValue", v)
	ret0, _ := ret[0].(OpResponse)
	return ret0
}

func (_mr *_MockOpResponseRecorder) SetValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetValue", arg0)
}

// Mock of Response interface
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *_MockResponseRecorder
}

// Recorder for MockResponse (not exported)
type _MockResponseRecorder struct {
	mock *MockResponse
}

func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &_MockResponseRecorder{mock}
	return mock
}

func (_m *MockResponse) EXPECT() *_MockResponseRecorder {
	return _m.recorder
}

func (_m *MockResponse) Responses() []OpResponse {
	ret := _m.ctrl.Call(_m, "Responses")
	ret0, _ := ret[0].([]OpResponse)
	return ret0
}

func (_mr *_MockResponseRecorder) Responses() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Responses")
}

func (_m *MockResponse) SetResponses(oprs []OpResponse) Response {
	ret := _m.ctrl.Call(_m, "SetResponses", oprs)
	ret0, _ := ret[0].(Response)
	return ret0
}

func (_mr *_MockResponseRecorder) SetResponses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetResponses", arg0)
}

// Mock of TxnStore interface
type MockTxnStore struct {
	ctrl     *gomock.Controller
	recorder *_MockTxnStoreRecorder
}

// Recorder for MockTxnStore (not exported)
type _MockTxnStoreRecorder struct {
	mock *MockTxnStore
}

func NewMockTxnStore(ctrl *gomock.Controller) *MockTxnStore {
	mock := &MockTxnStore{ctrl: ctrl}
	mock.recorder = &_MockTxnStoreRecorder{mock}
	return mock
}

func (_m *MockTxnStore) EXPECT() *_MockTxnStoreRecorder {
	return _m.recorder
}

func (_m *MockTxnStore) Get(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockTxnStore) Watch(key string) (ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch", key)
	ret0, _ := ret[0].(ValueWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", arg0)
}

func (_m *MockTxnStore) Set(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "Set", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockTxnStore) SetIfNotExists(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "SetIfNotExists", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) SetIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIfNotExists", arg0, arg1)
}

func (_m *MockTxnStore) CheckAndSet(key string, version int, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "CheckAndSet", key, version, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) CheckAndSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSet", arg0, arg1, arg2)
}

func (_m *MockTxnStore) Delete(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Delete", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockTxnStore) History(key string, from int, to int) ([]Value, error) {
	ret := _m.ctrl.Call(_m, "History", key, from, to)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) History(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "History", arg0, arg1, arg2)
}

func (_m *MockTxnStore) Commit(_param0 []Condition, _param1 []Op) (Response, error) {
	ret := _m.ctrl.Call(_m, "Commit", _param0, _param1)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxnStoreRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0, arg1)
}
