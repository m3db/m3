// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3cluster/kv/types.go

package kv

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/golang/protobuf/proto"
)

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockValue) EXPECT() *MockValueMockRecorder {
	return _m.recorder
}

// Unmarshal mocks base method
func (_m *MockValue) Unmarshal(v proto.Message) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (_mr *MockValueMockRecorder) Unmarshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unmarshal", reflect.TypeOf((*MockValue)(nil).Unmarshal), arg0)
}

// Version mocks base method
func (_m *MockValue) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (_mr *MockValueMockRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Version", reflect.TypeOf((*MockValue)(nil).Version))
}

// IsNewer mocks base method
func (_m *MockValue) IsNewer(other Value) bool {
	ret := _m.ctrl.Call(_m, "IsNewer", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNewer indicates an expected call of IsNewer
func (_mr *MockValueMockRecorder) IsNewer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsNewer", reflect.TypeOf((*MockValue)(nil).IsNewer), arg0)
}

// MockValueWatch is a mock of ValueWatch interface
type MockValueWatch struct {
	ctrl     *gomock.Controller
	recorder *MockValueWatchMockRecorder
}

// MockValueWatchMockRecorder is the mock recorder for MockValueWatch
type MockValueWatchMockRecorder struct {
	mock *MockValueWatch
}

// NewMockValueWatch creates a new mock instance
func NewMockValueWatch(ctrl *gomock.Controller) *MockValueWatch {
	mock := &MockValueWatch{ctrl: ctrl}
	mock.recorder = &MockValueWatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockValueWatch) EXPECT() *MockValueWatchMockRecorder {
	return _m.recorder
}

// C mocks base method
func (_m *MockValueWatch) C() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "C")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// C indicates an expected call of C
func (_mr *MockValueWatchMockRecorder) C() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "C", reflect.TypeOf((*MockValueWatch)(nil).C))
}

// Get mocks base method
func (_m *MockValueWatch) Get() Value {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Value)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockValueWatchMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockValueWatch)(nil).Get))
}

// Close mocks base method
func (_m *MockValueWatch) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockValueWatchMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockValueWatch)(nil).Close))
}

// MockValueWatchable is a mock of ValueWatchable interface
type MockValueWatchable struct {
	ctrl     *gomock.Controller
	recorder *MockValueWatchableMockRecorder
}

// MockValueWatchableMockRecorder is the mock recorder for MockValueWatchable
type MockValueWatchableMockRecorder struct {
	mock *MockValueWatchable
}

// NewMockValueWatchable creates a new mock instance
func NewMockValueWatchable(ctrl *gomock.Controller) *MockValueWatchable {
	mock := &MockValueWatchable{ctrl: ctrl}
	mock.recorder = &MockValueWatchableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockValueWatchable) EXPECT() *MockValueWatchableMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockValueWatchable) Get() Value {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Value)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockValueWatchableMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockValueWatchable)(nil).Get))
}

// Watch mocks base method
func (_m *MockValueWatchable) Watch() (Value, ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(ValueWatch)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (_mr *MockValueWatchableMockRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockValueWatchable)(nil).Watch))
}

// NumWatches mocks base method
func (_m *MockValueWatchable) NumWatches() int {
	ret := _m.ctrl.Call(_m, "NumWatches")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumWatches indicates an expected call of NumWatches
func (_mr *MockValueWatchableMockRecorder) NumWatches() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumWatches", reflect.TypeOf((*MockValueWatchable)(nil).NumWatches))
}

// Update mocks base method
func (_m *MockValueWatchable) Update(_param0 Value) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockValueWatchableMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockValueWatchable)(nil).Update), arg0)
}

// IsClosed mocks base method
func (_m *MockValueWatchable) IsClosed() bool {
	ret := _m.ctrl.Call(_m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (_mr *MockValueWatchableMockRecorder) IsClosed() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsClosed", reflect.TypeOf((*MockValueWatchable)(nil).IsClosed))
}

// Close mocks base method
func (_m *MockValueWatchable) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockValueWatchableMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockValueWatchable)(nil).Close))
}

// MockOverrideOptions is a mock of OverrideOptions interface
type MockOverrideOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOverrideOptionsMockRecorder
}

// MockOverrideOptionsMockRecorder is the mock recorder for MockOverrideOptions
type MockOverrideOptionsMockRecorder struct {
	mock *MockOverrideOptions
}

// NewMockOverrideOptions creates a new mock instance
func NewMockOverrideOptions(ctrl *gomock.Controller) *MockOverrideOptions {
	mock := &MockOverrideOptions{ctrl: ctrl}
	mock.recorder = &MockOverrideOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOverrideOptions) EXPECT() *MockOverrideOptionsMockRecorder {
	return _m.recorder
}

// Zone mocks base method
func (_m *MockOverrideOptions) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

// Zone indicates an expected call of Zone
func (_mr *MockOverrideOptionsMockRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Zone", reflect.TypeOf((*MockOverrideOptions)(nil).Zone))
}

// SetZone mocks base method
func (_m *MockOverrideOptions) SetZone(value string) OverrideOptions {
	ret := _m.ctrl.Call(_m, "SetZone", value)
	ret0, _ := ret[0].(OverrideOptions)
	return ret0
}

// SetZone indicates an expected call of SetZone
func (_mr *MockOverrideOptionsMockRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetZone", reflect.TypeOf((*MockOverrideOptions)(nil).SetZone), arg0)
}

// Namespace mocks base method
func (_m *MockOverrideOptions) Namespace() string {
	ret := _m.ctrl.Call(_m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace
func (_mr *MockOverrideOptionsMockRecorder) Namespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Namespace", reflect.TypeOf((*MockOverrideOptions)(nil).Namespace))
}

// SetNamespace mocks base method
func (_m *MockOverrideOptions) SetNamespace(namespace string) OverrideOptions {
	ret := _m.ctrl.Call(_m, "SetNamespace", namespace)
	ret0, _ := ret[0].(OverrideOptions)
	return ret0
}

// SetNamespace indicates an expected call of SetNamespace
func (_mr *MockOverrideOptionsMockRecorder) SetNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNamespace", reflect.TypeOf((*MockOverrideOptions)(nil).SetNamespace), arg0)
}

// Environment mocks base method
func (_m *MockOverrideOptions) Environment() string {
	ret := _m.ctrl.Call(_m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

// Environment indicates an expected call of Environment
func (_mr *MockOverrideOptionsMockRecorder) Environment() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Environment", reflect.TypeOf((*MockOverrideOptions)(nil).Environment))
}

// SetEnvironment mocks base method
func (_m *MockOverrideOptions) SetEnvironment(env string) OverrideOptions {
	ret := _m.ctrl.Call(_m, "SetEnvironment", env)
	ret0, _ := ret[0].(OverrideOptions)
	return ret0
}

// SetEnvironment indicates an expected call of SetEnvironment
func (_mr *MockOverrideOptionsMockRecorder) SetEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEnvironment", reflect.TypeOf((*MockOverrideOptions)(nil).SetEnvironment), arg0)
}

// Validate mocks base method
func (_m *MockOverrideOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (_mr *MockOverrideOptionsMockRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Validate", reflect.TypeOf((*MockOverrideOptions)(nil).Validate))
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStore) EXPECT() *MockStoreMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockStore) Get(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0)
}

// Watch mocks base method
func (_m *MockStore) Watch(key string) (ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch", key)
	ret0, _ := ret[0].(ValueWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockStoreMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockStore)(nil).Watch), arg0)
}

// Set mocks base method
func (_m *MockStore) Set(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "Set", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (_mr *MockStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), arg0, arg1)
}

// SetIfNotExists mocks base method
func (_m *MockStore) SetIfNotExists(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "SetIfNotExists", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIfNotExists indicates an expected call of SetIfNotExists
func (_mr *MockStoreMockRecorder) SetIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIfNotExists", reflect.TypeOf((*MockStore)(nil).SetIfNotExists), arg0, arg1)
}

// CheckAndSet mocks base method
func (_m *MockStore) CheckAndSet(key string, version int, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "CheckAndSet", key, version, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndSet indicates an expected call of CheckAndSet
func (_mr *MockStoreMockRecorder) CheckAndSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSet", reflect.TypeOf((*MockStore)(nil).CheckAndSet), arg0, arg1, arg2)
}

// Delete mocks base method
func (_m *MockStore) Delete(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Delete", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0)
}

// History mocks base method
func (_m *MockStore) History(key string, from int, to int) ([]Value, error) {
	ret := _m.ctrl.Call(_m, "History", key, from, to)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History
func (_mr *MockStoreMockRecorder) History(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "History", reflect.TypeOf((*MockStore)(nil).History), arg0, arg1, arg2)
}

// MockCondition is a mock of Condition interface
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockConditionMockRecorder
}

// MockConditionMockRecorder is the mock recorder for MockCondition
type MockConditionMockRecorder struct {
	mock *MockCondition
}

// NewMockCondition creates a new mock instance
func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &MockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCondition) EXPECT() *MockConditionMockRecorder {
	return _m.recorder
}

// TargetType mocks base method
func (_m *MockCondition) TargetType() TargetType {
	ret := _m.ctrl.Call(_m, "TargetType")
	ret0, _ := ret[0].(TargetType)
	return ret0
}

// TargetType indicates an expected call of TargetType
func (_mr *MockConditionMockRecorder) TargetType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TargetType", reflect.TypeOf((*MockCondition)(nil).TargetType))
}

// SetTargetType mocks base method
func (_m *MockCondition) SetTargetType(t TargetType) Condition {
	ret := _m.ctrl.Call(_m, "SetTargetType", t)
	ret0, _ := ret[0].(Condition)
	return ret0
}

// SetTargetType indicates an expected call of SetTargetType
func (_mr *MockConditionMockRecorder) SetTargetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTargetType", reflect.TypeOf((*MockCondition)(nil).SetTargetType), arg0)
}

// CompareType mocks base method
func (_m *MockCondition) CompareType() CompareType {
	ret := _m.ctrl.Call(_m, "CompareType")
	ret0, _ := ret[0].(CompareType)
	return ret0
}

// CompareType indicates an expected call of CompareType
func (_mr *MockConditionMockRecorder) CompareType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CompareType", reflect.TypeOf((*MockCondition)(nil).CompareType))
}

// SetCompareType mocks base method
func (_m *MockCondition) SetCompareType(t CompareType) Condition {
	ret := _m.ctrl.Call(_m, "SetCompareType", t)
	ret0, _ := ret[0].(Condition)
	return ret0
}

// SetCompareType indicates an expected call of SetCompareType
func (_mr *MockConditionMockRecorder) SetCompareType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCompareType", reflect.TypeOf((*MockCondition)(nil).SetCompareType), arg0)
}

// Key mocks base method
func (_m *MockCondition) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (_mr *MockConditionMockRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Key", reflect.TypeOf((*MockCondition)(nil).Key))
}

// SetKey mocks base method
func (_m *MockCondition) SetKey(key string) Condition {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Condition)
	return ret0
}

// SetKey indicates an expected call of SetKey
func (_mr *MockConditionMockRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetKey", reflect.TypeOf((*MockCondition)(nil).SetKey), arg0)
}

// Value mocks base method
func (_m *MockCondition) Value() interface{} {
	ret := _m.ctrl.Call(_m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (_mr *MockConditionMockRecorder) Value() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Value", reflect.TypeOf((*MockCondition)(nil).Value))
}

// SetValue mocks base method
func (_m *MockCondition) SetValue(value interface{}) Condition {
	ret := _m.ctrl.Call(_m, "SetValue", value)
	ret0, _ := ret[0].(Condition)
	return ret0
}

// SetValue indicates an expected call of SetValue
func (_mr *MockConditionMockRecorder) SetValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetValue", reflect.TypeOf((*MockCondition)(nil).SetValue), arg0)
}

// MockOp is a mock of Op interface
type MockOp struct {
	ctrl     *gomock.Controller
	recorder *MockOpMockRecorder
}

// MockOpMockRecorder is the mock recorder for MockOp
type MockOpMockRecorder struct {
	mock *MockOp
}

// NewMockOp creates a new mock instance
func NewMockOp(ctrl *gomock.Controller) *MockOp {
	mock := &MockOp{ctrl: ctrl}
	mock.recorder = &MockOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOp) EXPECT() *MockOpMockRecorder {
	return _m.recorder
}

// Type mocks base method
func (_m *MockOp) Type() OpType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(OpType)
	return ret0
}

// Type indicates an expected call of Type
func (_mr *MockOpMockRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Type", reflect.TypeOf((*MockOp)(nil).Type))
}

// SetType mocks base method
func (_m *MockOp) SetType(ot OpType) Op {
	ret := _m.ctrl.Call(_m, "SetType", ot)
	ret0, _ := ret[0].(Op)
	return ret0
}

// SetType indicates an expected call of SetType
func (_mr *MockOpMockRecorder) SetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetType", reflect.TypeOf((*MockOp)(nil).SetType), arg0)
}

// Key mocks base method
func (_m *MockOp) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (_mr *MockOpMockRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Key", reflect.TypeOf((*MockOp)(nil).Key))
}

// SetKey mocks base method
func (_m *MockOp) SetKey(key string) Op {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Op)
	return ret0
}

// SetKey indicates an expected call of SetKey
func (_mr *MockOpMockRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetKey", reflect.TypeOf((*MockOp)(nil).SetKey), arg0)
}

// MockOpResponse is a mock of OpResponse interface
type MockOpResponse struct {
	ctrl     *gomock.Controller
	recorder *MockOpResponseMockRecorder
}

// MockOpResponseMockRecorder is the mock recorder for MockOpResponse
type MockOpResponseMockRecorder struct {
	mock *MockOpResponse
}

// NewMockOpResponse creates a new mock instance
func NewMockOpResponse(ctrl *gomock.Controller) *MockOpResponse {
	mock := &MockOpResponse{ctrl: ctrl}
	mock.recorder = &MockOpResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOpResponse) EXPECT() *MockOpResponseMockRecorder {
	return _m.recorder
}

// Type mocks base method
func (_m *MockOpResponse) Type() OpType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(OpType)
	return ret0
}

// Type indicates an expected call of Type
func (_mr *MockOpResponseMockRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Type", reflect.TypeOf((*MockOpResponse)(nil).Type))
}

// SetType mocks base method
func (_m *MockOpResponse) SetType(ot OpType) Op {
	ret := _m.ctrl.Call(_m, "SetType", ot)
	ret0, _ := ret[0].(Op)
	return ret0
}

// SetType indicates an expected call of SetType
func (_mr *MockOpResponseMockRecorder) SetType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetType", reflect.TypeOf((*MockOpResponse)(nil).SetType), arg0)
}

// Key mocks base method
func (_m *MockOpResponse) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (_mr *MockOpResponseMockRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Key", reflect.TypeOf((*MockOpResponse)(nil).Key))
}

// SetKey mocks base method
func (_m *MockOpResponse) SetKey(key string) Op {
	ret := _m.ctrl.Call(_m, "SetKey", key)
	ret0, _ := ret[0].(Op)
	return ret0
}

// SetKey indicates an expected call of SetKey
func (_mr *MockOpResponseMockRecorder) SetKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetKey", reflect.TypeOf((*MockOpResponse)(nil).SetKey), arg0)
}

// Value mocks base method
func (_m *MockOpResponse) Value() interface{} {
	ret := _m.ctrl.Call(_m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (_mr *MockOpResponseMockRecorder) Value() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Value", reflect.TypeOf((*MockOpResponse)(nil).Value))
}

// SetValue mocks base method
func (_m *MockOpResponse) SetValue(v interface{}) OpResponse {
	ret := _m.ctrl.Call(_m, "SetValue", v)
	ret0, _ := ret[0].(OpResponse)
	return ret0
}

// SetValue indicates an expected call of SetValue
func (_mr *MockOpResponseMockRecorder) SetValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetValue", reflect.TypeOf((*MockOpResponse)(nil).SetValue), arg0)
}

// MockResponse is a mock of Response interface
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return _m.recorder
}

// Responses mocks base method
func (_m *MockResponse) Responses() []OpResponse {
	ret := _m.ctrl.Call(_m, "Responses")
	ret0, _ := ret[0].([]OpResponse)
	return ret0
}

// Responses indicates an expected call of Responses
func (_mr *MockResponseMockRecorder) Responses() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Responses", reflect.TypeOf((*MockResponse)(nil).Responses))
}

// SetResponses mocks base method
func (_m *MockResponse) SetResponses(oprs []OpResponse) Response {
	ret := _m.ctrl.Call(_m, "SetResponses", oprs)
	ret0, _ := ret[0].(Response)
	return ret0
}

// SetResponses indicates an expected call of SetResponses
func (_mr *MockResponseMockRecorder) SetResponses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetResponses", reflect.TypeOf((*MockResponse)(nil).SetResponses), arg0)
}

// MockTxnStore is a mock of TxnStore interface
type MockTxnStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxnStoreMockRecorder
}

// MockTxnStoreMockRecorder is the mock recorder for MockTxnStore
type MockTxnStoreMockRecorder struct {
	mock *MockTxnStore
}

// NewMockTxnStore creates a new mock instance
func NewMockTxnStore(ctrl *gomock.Controller) *MockTxnStore {
	mock := &MockTxnStore{ctrl: ctrl}
	mock.recorder = &MockTxnStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTxnStore) EXPECT() *MockTxnStoreMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockTxnStore) Get(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTxnStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTxnStore)(nil).Get), arg0)
}

// Watch mocks base method
func (_m *MockTxnStore) Watch(key string) (ValueWatch, error) {
	ret := _m.ctrl.Call(_m, "Watch", key)
	ret0, _ := ret[0].(ValueWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockTxnStoreMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockTxnStore)(nil).Watch), arg0)
}

// Set mocks base method
func (_m *MockTxnStore) Set(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "Set", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (_mr *MockTxnStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockTxnStore)(nil).Set), arg0, arg1)
}

// SetIfNotExists mocks base method
func (_m *MockTxnStore) SetIfNotExists(key string, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "SetIfNotExists", key, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIfNotExists indicates an expected call of SetIfNotExists
func (_mr *MockTxnStoreMockRecorder) SetIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIfNotExists", reflect.TypeOf((*MockTxnStore)(nil).SetIfNotExists), arg0, arg1)
}

// CheckAndSet mocks base method
func (_m *MockTxnStore) CheckAndSet(key string, version int, v proto.Message) (int, error) {
	ret := _m.ctrl.Call(_m, "CheckAndSet", key, version, v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndSet indicates an expected call of CheckAndSet
func (_mr *MockTxnStoreMockRecorder) CheckAndSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSet", reflect.TypeOf((*MockTxnStore)(nil).CheckAndSet), arg0, arg1, arg2)
}

// Delete mocks base method
func (_m *MockTxnStore) Delete(key string) (Value, error) {
	ret := _m.ctrl.Call(_m, "Delete", key)
	ret0, _ := ret[0].(Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockTxnStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockTxnStore)(nil).Delete), arg0)
}

// History mocks base method
func (_m *MockTxnStore) History(key string, from int, to int) ([]Value, error) {
	ret := _m.ctrl.Call(_m, "History", key, from, to)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History
func (_mr *MockTxnStoreMockRecorder) History(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "History", reflect.TypeOf((*MockTxnStore)(nil).History), arg0, arg1, arg2)
}

// Commit mocks base method
func (_m *MockTxnStore) Commit(_param0 []Condition, _param1 []Op) (Response, error) {
	ret := _m.ctrl.Call(_m, "Commit", _param0, _param1)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (_mr *MockTxnStoreMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Commit", reflect.TypeOf((*MockTxnStore)(nil).Commit), arg0, arg1)
}
