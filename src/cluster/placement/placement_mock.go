// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3cluster/placement/types.go

package placement

import (
	"time"

	"github.com/m3db/m3cluster/generated/proto/placementpb"
	"github.com/m3db/m3cluster/kv"
	"github.com/m3db/m3cluster/shard"
	"github.com/m3db/m3x/clock"
	"github.com/m3db/m3x/instrument"

	"github.com/golang/mock/gomock"
	"github.com/golang/protobuf/proto"
)

// Mock of Instance interface
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *_MockInstanceRecorder
}

// Recorder for MockInstance (not exported)
type _MockInstanceRecorder struct {
	mock *MockInstance
}

func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &_MockInstanceRecorder{mock}
	return mock
}

func (_m *MockInstance) EXPECT() *_MockInstanceRecorder {
	return _m.recorder
}

func (_m *MockInstance) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockInstance) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockInstance) SetID(id string) Instance {
	ret := _m.ctrl.Call(_m, "SetID", id)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetID", arg0)
}

func (_m *MockInstance) Rack() string {
	ret := _m.ctrl.Call(_m, "Rack")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) Rack() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rack")
}

func (_m *MockInstance) SetRack(r string) Instance {
	ret := _m.ctrl.Call(_m, "SetRack", r)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetRack(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRack", arg0)
}

func (_m *MockInstance) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

func (_m *MockInstance) SetZone(z string) Instance {
	ret := _m.ctrl.Call(_m, "SetZone", z)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetZone", arg0)
}

func (_m *MockInstance) Weight() uint32 {
	ret := _m.ctrl.Call(_m, "Weight")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockInstanceRecorder) Weight() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Weight")
}

func (_m *MockInstance) SetWeight(w uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetWeight", w)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetWeight(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWeight", arg0)
}

func (_m *MockInstance) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

func (_m *MockInstance) SetEndpoint(ip string) Instance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", ip)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEndpoint", arg0)
}

func (_m *MockInstance) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

func (_mr *_MockInstanceRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockInstance) SetShards(s shard.Shards) Instance {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

func (_m *MockInstance) ShardSetID() uint32 {
	ret := _m.ctrl.Call(_m, "ShardSetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockInstanceRecorder) ShardSetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardSetID")
}

func (_m *MockInstance) SetShardSetID(value uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetShardSetID", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetShardSetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShardSetID", arg0)
}

func (_m *MockInstance) Hostname() string {
	ret := _m.ctrl.Call(_m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) Hostname() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hostname")
}

func (_m *MockInstance) SetHostname(value string) Instance {
	ret := _m.ctrl.Call(_m, "SetHostname", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetHostname(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHostname", arg0)
}

func (_m *MockInstance) Port() uint32 {
	ret := _m.ctrl.Call(_m, "Port")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockInstanceRecorder) Port() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Port")
}

func (_m *MockInstance) SetPort(value uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetPort", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) SetPort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPort", arg0)
}

func (_m *MockInstance) Proto() (*placementpb.Instance, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proto")
}

func (_m *MockInstance) IsLeaving() bool {
	ret := _m.ctrl.Call(_m, "IsLeaving")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInstanceRecorder) IsLeaving() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsLeaving")
}

func (_m *MockInstance) IsInitializing() bool {
	ret := _m.ctrl.Call(_m, "IsInitializing")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInstanceRecorder) IsInitializing() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsInitializing")
}

func (_m *MockInstance) Clone() Instance {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(Instance)
	return ret0
}

func (_mr *_MockInstanceRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clone")
}

// Mock of Placement interface
type MockPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockPlacementRecorder
}

// Recorder for MockPlacement (not exported)
type _MockPlacementRecorder struct {
	mock *MockPlacement
}

func NewMockPlacement(ctrl *gomock.Controller) *MockPlacement {
	mock := &MockPlacement{ctrl: ctrl}
	mock.recorder = &_MockPlacementRecorder{mock}
	return mock
}

func (_m *MockPlacement) EXPECT() *_MockPlacementRecorder {
	return _m.recorder
}

func (_m *MockPlacement) InstancesForShard(shard uint32) []Instance {
	ret := _m.ctrl.Call(_m, "InstancesForShard", shard)
	ret0, _ := ret[0].([]Instance)
	return ret0
}

func (_mr *_MockPlacementRecorder) InstancesForShard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstancesForShard", arg0)
}

func (_m *MockPlacement) Instances() []Instance {
	ret := _m.ctrl.Call(_m, "Instances")
	ret0, _ := ret[0].([]Instance)
	return ret0
}

func (_mr *_MockPlacementRecorder) Instances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instances")
}

func (_m *MockPlacement) SetInstances(instances []Instance) Placement {
	ret := _m.ctrl.Call(_m, "SetInstances", instances)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstances", arg0)
}

func (_m *MockPlacement) NumInstances() int {
	ret := _m.ctrl.Call(_m, "NumInstances")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) NumInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumInstances")
}

func (_m *MockPlacement) Instance(id string) (Instance, bool) {
	ret := _m.ctrl.Call(_m, "Instance", id)
	ret0, _ := ret[0].(Instance)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPlacementRecorder) Instance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instance", arg0)
}

func (_m *MockPlacement) ReplicaFactor() int {
	ret := _m.ctrl.Call(_m, "ReplicaFactor")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) ReplicaFactor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplicaFactor")
}

func (_m *MockPlacement) SetReplicaFactor(rf int) Placement {
	ret := _m.ctrl.Call(_m, "SetReplicaFactor", rf)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetReplicaFactor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReplicaFactor", arg0)
}

func (_m *MockPlacement) Shards() []uint32 {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].([]uint32)
	return ret0
}

func (_mr *_MockPlacementRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockPlacement) SetShards(s []uint32) Placement {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

func (_m *MockPlacement) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumShards")
}

func (_m *MockPlacement) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSharded")
}

func (_m *MockPlacement) SetIsSharded(v bool) Placement {
	ret := _m.ctrl.Call(_m, "SetIsSharded", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsSharded", arg0)
}

func (_m *MockPlacement) CutoverNanos() int64 {
	ret := _m.ctrl.Call(_m, "CutoverNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPlacementRecorder) CutoverNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CutoverNanos")
}

func (_m *MockPlacement) SetCutoverNanos(cutoverNanos int64) Placement {
	ret := _m.ctrl.Call(_m, "SetCutoverNanos", cutoverNanos)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetCutoverNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCutoverNanos", arg0)
}

func (_m *MockPlacement) IsMirrored() bool {
	ret := _m.ctrl.Call(_m, "IsMirrored")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementRecorder) IsMirrored() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsMirrored")
}

func (_m *MockPlacement) SetIsMirrored(v bool) Placement {
	ret := _m.ctrl.Call(_m, "SetIsMirrored", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetIsMirrored(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsMirrored", arg0)
}

func (_m *MockPlacement) MaxShardSetID() uint32 {
	ret := _m.ctrl.Call(_m, "MaxShardSetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockPlacementRecorder) MaxShardSetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxShardSetID")
}

func (_m *MockPlacement) SetMaxShardSetID(value uint32) Placement {
	ret := _m.ctrl.Call(_m, "SetMaxShardSetID", value)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetMaxShardSetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxShardSetID", arg0)
}

func (_m *MockPlacement) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockPlacement) GetVersion() int {
	ret := _m.ctrl.Call(_m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) GetVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVersion")
}

func (_m *MockPlacement) SetVersion(v int) Placement {
	ret := _m.ctrl.Call(_m, "SetVersion", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVersion", arg0)
}

func (_m *MockPlacement) Proto() (*placementpb.Placement, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPlacementRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proto")
}

func (_m *MockPlacement) Clone() Placement {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clone")
}

// Mock of StagedPlacementWatcher interface
type MockStagedPlacementWatcher struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementWatcherRecorder
}

// Recorder for MockStagedPlacementWatcher (not exported)
type _MockStagedPlacementWatcherRecorder struct {
	mock *MockStagedPlacementWatcher
}

func NewMockStagedPlacementWatcher(ctrl *gomock.Controller) *MockStagedPlacementWatcher {
	mock := &MockStagedPlacementWatcher{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementWatcherRecorder{mock}
	return mock
}

func (_m *MockStagedPlacementWatcher) EXPECT() *_MockStagedPlacementWatcherRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacementWatcher) Watch() error {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch")
}

func (_m *MockStagedPlacementWatcher) ActiveStagedPlacement() (ActiveStagedPlacement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement")
	ret0, _ := ret[0].(ActiveStagedPlacement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStagedPlacementWatcherRecorder) ActiveStagedPlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacement")
}

func (_m *MockStagedPlacementWatcher) Unwatch() error {
	ret := _m.ctrl.Call(_m, "Unwatch")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherRecorder) Unwatch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unwatch")
}

// Mock of StagedPlacementWatcherOptions interface
type MockStagedPlacementWatcherOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementWatcherOptionsRecorder
}

// Recorder for MockStagedPlacementWatcherOptions (not exported)
type _MockStagedPlacementWatcherOptionsRecorder struct {
	mock *MockStagedPlacementWatcherOptions
}

func NewMockStagedPlacementWatcherOptions(ctrl *gomock.Controller) *MockStagedPlacementWatcherOptions {
	mock := &MockStagedPlacementWatcherOptions{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementWatcherOptionsRecorder{mock}
	return mock
}

func (_m *MockStagedPlacementWatcherOptions) EXPECT() *_MockStagedPlacementWatcherOptionsRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacementWatcherOptions) SetClockOptions(value clock.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetInstrumentOptions(value instrument.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetActiveStagedPlacementOptions(value ActiveStagedPlacementOptions) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetActiveStagedPlacementOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacementOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementKey(value string) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementKey", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetStagedPlacementKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStagedPlacementKey", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) StagedPlacementKey() string {
	ret := _m.ctrl.Call(_m, "StagedPlacementKey")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) StagedPlacementKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StagedPlacementKey")
}

func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementStore(store kv.Store) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementStore", store)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetStagedPlacementStore(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStagedPlacementStore", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) StagedPlacementStore() kv.Store {
	ret := _m.ctrl.Call(_m, "StagedPlacementStore")
	ret0, _ := ret[0].(kv.Store)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) StagedPlacementStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StagedPlacementStore")
}

func (_m *MockStagedPlacementWatcherOptions) SetInitWatchTimeout(value time.Duration) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInitWatchTimeout", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetInitWatchTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInitWatchTimeout", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) InitWatchTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "InitWatchTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) InitWatchTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitWatchTimeout")
}

// Mock of ActiveStagedPlacement interface
type MockActiveStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockActiveStagedPlacementRecorder
}

// Recorder for MockActiveStagedPlacement (not exported)
type _MockActiveStagedPlacementRecorder struct {
	mock *MockActiveStagedPlacement
}

func NewMockActiveStagedPlacement(ctrl *gomock.Controller) *MockActiveStagedPlacement {
	mock := &MockActiveStagedPlacement{ctrl: ctrl}
	mock.recorder = &_MockActiveStagedPlacementRecorder{mock}
	return mock
}

func (_m *MockActiveStagedPlacement) EXPECT() *_MockActiveStagedPlacementRecorder {
	return _m.recorder
}

func (_m *MockActiveStagedPlacement) ActivePlacement() (Placement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActivePlacement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockActiveStagedPlacementRecorder) ActivePlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActivePlacement")
}

func (_m *MockActiveStagedPlacement) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockActiveStagedPlacementRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of ActiveStagedPlacementOptions interface
type MockActiveStagedPlacementOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockActiveStagedPlacementOptionsRecorder
}

// Recorder for MockActiveStagedPlacementOptions (not exported)
type _MockActiveStagedPlacementOptionsRecorder struct {
	mock *MockActiveStagedPlacementOptions
}

func NewMockActiveStagedPlacementOptions(ctrl *gomock.Controller) *MockActiveStagedPlacementOptions {
	mock := &MockActiveStagedPlacementOptions{ctrl: ctrl}
	mock.recorder = &_MockActiveStagedPlacementOptionsRecorder{mock}
	return mock
}

func (_m *MockActiveStagedPlacementOptions) EXPECT() *_MockActiveStagedPlacementOptionsRecorder {
	return _m.recorder
}

func (_m *MockActiveStagedPlacementOptions) SetClockOptions(value clock.Options) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockActiveStagedPlacementOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsAddedFn(value OnPlacementsAddedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsAddedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetOnPlacementsAddedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOnPlacementsAddedFn", arg0)
}

func (_m *MockActiveStagedPlacementOptions) OnPlacementsAddedFn() OnPlacementsAddedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsAddedFn")
	ret0, _ := ret[0].(OnPlacementsAddedFn)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) OnPlacementsAddedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnPlacementsAddedFn")
}

func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsRemovedFn(value OnPlacementsRemovedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsRemovedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetOnPlacementsRemovedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOnPlacementsRemovedFn", arg0)
}

func (_m *MockActiveStagedPlacementOptions) OnPlacementsRemovedFn() OnPlacementsRemovedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsRemovedFn")
	ret0, _ := ret[0].(OnPlacementsRemovedFn)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) OnPlacementsRemovedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnPlacementsRemovedFn")
}

// Mock of StagedPlacement interface
type MockStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementRecorder
}

// Recorder for MockStagedPlacement (not exported)
type _MockStagedPlacementRecorder struct {
	mock *MockStagedPlacement
}

func NewMockStagedPlacement(ctrl *gomock.Controller) *MockStagedPlacement {
	mock := &MockStagedPlacement{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementRecorder{mock}
	return mock
}

func (_m *MockStagedPlacement) EXPECT() *_MockStagedPlacementRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacement) ActiveStagedPlacement(timeNanos int64) ActiveStagedPlacement {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement", timeNanos)
	ret0, _ := ret[0].(ActiveStagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) ActiveStagedPlacement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacement", arg0)
}

func (_m *MockStagedPlacement) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

func (_m *MockStagedPlacement) SetVersion(version int) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetVersion", version)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVersion", arg0)
}

func (_m *MockStagedPlacement) Placements() Placements {
	ret := _m.ctrl.Call(_m, "Placements")
	ret0, _ := ret[0].(Placements)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) Placements() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Placements")
}

func (_m *MockStagedPlacement) SetPlacements(placements []Placement) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetPlacements", placements)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetPlacements(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacements", arg0)
}

func (_m *MockStagedPlacement) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacementOptions")
}

func (_m *MockStagedPlacement) SetActiveStagedPlacementOptions(opts ActiveStagedPlacementOptions) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", opts)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetActiveStagedPlacementOptions", arg0)
}

func (_m *MockStagedPlacement) Proto() (*placementpb.PlacementSnapshots, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.PlacementSnapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStagedPlacementRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proto")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) AllowPartialReplace() bool {
	ret := _m.ctrl.Call(_m, "AllowPartialReplace")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) AllowPartialReplace() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllowPartialReplace")
}

func (_m *MockOptions) SetAllowPartialReplace(allowPartialReplace bool) Options {
	ret := _m.ctrl.Call(_m, "SetAllowPartialReplace", allowPartialReplace)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetAllowPartialReplace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAllowPartialReplace", arg0)
}

func (_m *MockOptions) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSharded")
}

func (_m *MockOptions) SetIsSharded(sharded bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsSharded", sharded)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsSharded", arg0)
}

func (_m *MockOptions) ShardStateMode() ShardStateMode {
	ret := _m.ctrl.Call(_m, "ShardStateMode")
	ret0, _ := ret[0].(ShardStateMode)
	return ret0
}

func (_mr *_MockOptionsRecorder) ShardStateMode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardStateMode")
}

func (_m *MockOptions) SetShardStateMode(value ShardStateMode) Options {
	ret := _m.ctrl.Call(_m, "SetShardStateMode", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetShardStateMode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShardStateMode", arg0)
}

func (_m *MockOptions) Dryrun() bool {
	ret := _m.ctrl.Call(_m, "Dryrun")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) Dryrun() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dryrun")
}

func (_m *MockOptions) SetDryrun(d bool) Options {
	ret := _m.ctrl.Call(_m, "SetDryrun", d)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetDryrun(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDryrun", arg0)
}

func (_m *MockOptions) IsMirrored() bool {
	ret := _m.ctrl.Call(_m, "IsMirrored")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) IsMirrored() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsMirrored")
}

func (_m *MockOptions) SetIsMirrored(m bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsMirrored", m)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIsMirrored(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsMirrored", arg0)
}

func (_m *MockOptions) IsStaged() bool {
	ret := _m.ctrl.Call(_m, "IsStaged")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOptionsRecorder) IsStaged() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsStaged")
}

func (_m *MockOptions) SetIsStaged(v bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsStaged", v)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIsStaged(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsStaged", arg0)
}

func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockOptions) SetInstrumentOptions(iopts instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", iopts)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockOptions) ValidZone() string {
	ret := _m.ctrl.Call(_m, "ValidZone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOptionsRecorder) ValidZone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidZone")
}

func (_m *MockOptions) SetValidZone(z string) Options {
	ret := _m.ctrl.Call(_m, "SetValidZone", z)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetValidZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetValidZone", arg0)
}

func (_m *MockOptions) PlacementCutoverNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "PlacementCutoverNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) PlacementCutoverNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementCutoverNanosFn")
}

func (_m *MockOptions) SetPlacementCutoverNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetPlacementCutoverNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetPlacementCutoverNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacementCutoverNanosFn", arg0)
}

func (_m *MockOptions) ShardCutoverNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "ShardCutoverNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) ShardCutoverNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardCutoverNanosFn")
}

func (_m *MockOptions) SetShardCutoverNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetShardCutoverNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetShardCutoverNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShardCutoverNanosFn", arg0)
}

func (_m *MockOptions) ShardCutoffNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "ShardCutoffNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) ShardCutoffNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShardCutoffNanosFn")
}

func (_m *MockOptions) SetShardCutoffNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetShardCutoffNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetShardCutoffNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShardCutoffNanosFn", arg0)
}

func (_m *MockOptions) IsShardCutoverFn() ShardValidationFn {
	ret := _m.ctrl.Call(_m, "IsShardCutoverFn")
	ret0, _ := ret[0].(ShardValidationFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) IsShardCutoverFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsShardCutoverFn")
}

func (_m *MockOptions) SetIsShardCutoverFn(fn ShardValidationFn) Options {
	ret := _m.ctrl.Call(_m, "SetIsShardCutoverFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIsShardCutoverFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsShardCutoverFn", arg0)
}

func (_m *MockOptions) IsShardCutoffFn() ShardValidationFn {
	ret := _m.ctrl.Call(_m, "IsShardCutoffFn")
	ret0, _ := ret[0].(ShardValidationFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) IsShardCutoffFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsShardCutoffFn")
}

func (_m *MockOptions) SetIsShardCutoffFn(fn ShardValidationFn) Options {
	ret := _m.ctrl.Call(_m, "SetIsShardCutoffFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetIsShardCutoffFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsShardCutoffFn", arg0)
}

func (_m *MockOptions) NowFn() clock.NowFn {
	ret := _m.ctrl.Call(_m, "NowFn")
	ret0, _ := ret[0].(clock.NowFn)
	return ret0
}

func (_mr *_MockOptionsRecorder) NowFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NowFn")
}

func (_m *MockOptions) SetNowFn(fn clock.NowFn) Options {
	ret := _m.ctrl.Call(_m, "SetNowFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetNowFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNowFn", arg0)
}

// Mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockStorageRecorder
}

// Recorder for MockStorage (not exported)
type _MockStorageRecorder struct {
	mock *MockStorage
}

func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &_MockStorageRecorder{mock}
	return mock
}

func (_m *MockStorage) EXPECT() *_MockStorageRecorder {
	return _m.recorder
}

func (_m *MockStorage) Set(p Placement) error {
	ret := _m.ctrl.Call(_m, "Set", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0)
}

func (_m *MockStorage) CheckAndSet(p Placement, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSet", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) CheckAndSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSet", arg0, arg1)
}

func (_m *MockStorage) SetIfNotExist(p Placement) error {
	ret := _m.ctrl.Call(_m, "SetIfNotExist", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) SetIfNotExist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIfNotExist", arg0)
}

func (_m *MockStorage) Placement() (Placement, int, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStorageRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Placement")
}

func (_m *MockStorage) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete")
}

func (_m *MockStorage) SetProto(p proto.Message) error {
	ret := _m.ctrl.Call(_m, "SetProto", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) SetProto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetProto", arg0)
}

func (_m *MockStorage) CheckAndSetProto(p proto.Message, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSetProto", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) CheckAndSetProto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSetProto", arg0, arg1)
}

func (_m *MockStorage) Proto() (proto.Message, int, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStorageRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proto")
}

func (_m *MockStorage) PlacementForVersion(version int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "PlacementForVersion", version)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) PlacementForVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementForVersion", arg0)
}

// Mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceRecorder
}

// Recorder for MockService (not exported)
type _MockServiceRecorder struct {
	mock *MockService
}

func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &_MockServiceRecorder{mock}
	return mock
}

func (_m *MockService) EXPECT() *_MockServiceRecorder {
	return _m.recorder
}

func (_m *MockService) Set(p Placement) error {
	ret := _m.ctrl.Call(_m, "Set", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0)
}

func (_m *MockService) CheckAndSet(p Placement, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSet", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) CheckAndSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSet", arg0, arg1)
}

func (_m *MockService) SetIfNotExist(p Placement) error {
	ret := _m.ctrl.Call(_m, "SetIfNotExist", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) SetIfNotExist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIfNotExist", arg0)
}

func (_m *MockService) Placement() (Placement, int, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Placement")
}

func (_m *MockService) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete")
}

func (_m *MockService) SetProto(p proto.Message) error {
	ret := _m.ctrl.Call(_m, "SetProto", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) SetProto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetProto", arg0)
}

func (_m *MockService) CheckAndSetProto(p proto.Message, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSetProto", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) CheckAndSetProto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAndSetProto", arg0, arg1)
}

func (_m *MockService) Proto() (proto.Message, int, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proto")
}

func (_m *MockService) PlacementForVersion(version int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "PlacementForVersion", version)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) PlacementForVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementForVersion", arg0)
}

func (_m *MockService) BuildInitialPlacement(instances []Instance, numShards int, rf int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "BuildInitialPlacement", instances, numShards, rf)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) BuildInitialPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildInitialPlacement", arg0, arg1, arg2)
}

func (_m *MockService) AddReplica() (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddReplica")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) AddReplica() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddReplica")
}

func (_m *MockService) AddInstances(candidates []Instance) (Placement, []Instance, error) {
	ret := _m.ctrl.Call(_m, "AddInstances", candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].([]Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceRecorder) AddInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstances", arg0)
}

func (_m *MockService) RemoveInstances(leavingInstanceIDs []string) (Placement, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstances", leavingInstanceIDs)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) RemoveInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveInstances", arg0)
}

func (_m *MockService) ReplaceInstances(leavingInstanceIDs []string, candidates []Instance) (Placement, []Instance, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstances", leavingInstanceIDs, candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].([]Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceRecorder) ReplaceInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceInstances", arg0, arg1)
}

func (_m *MockService) MarkShardAvailable(instanceID string, shardID uint32) error {
	ret := _m.ctrl.Call(_m, "MarkShardAvailable", instanceID, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) MarkShardAvailable(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkShardAvailable", arg0, arg1)
}

func (_m *MockService) MarkAllShardsAvailable() (Placement, error) {
	ret := _m.ctrl.Call(_m, "MarkAllShardsAvailable")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) MarkAllShardsAvailable() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkAllShardsAvailable")
}

func (_m *MockService) MarkInstanceAvailable(instanceID string) error {
	ret := _m.ctrl.Call(_m, "MarkInstanceAvailable", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) MarkInstanceAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkInstanceAvailable", arg0)
}

// Mock of Algorithm interface
type MockAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *_MockAlgorithmRecorder
}

// Recorder for MockAlgorithm (not exported)
type _MockAlgorithmRecorder struct {
	mock *MockAlgorithm
}

func NewMockAlgorithm(ctrl *gomock.Controller) *MockAlgorithm {
	mock := &MockAlgorithm{ctrl: ctrl}
	mock.recorder = &_MockAlgorithmRecorder{mock}
	return mock
}

func (_m *MockAlgorithm) EXPECT() *_MockAlgorithmRecorder {
	return _m.recorder
}

func (_m *MockAlgorithm) InitialPlacement(instances []Instance, shards []uint32, rf int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "InitialPlacement", instances, shards, rf)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) InitialPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitialPlacement", arg0, arg1, arg2)
}

func (_m *MockAlgorithm) AddReplica(p Placement) (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddReplica", p)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) AddReplica(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddReplica", arg0)
}

func (_m *MockAlgorithm) AddInstances(p Placement, instances []Instance) (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddInstances", p, instances)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) AddInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstances", arg0, arg1)
}

func (_m *MockAlgorithm) RemoveInstances(p Placement, leavingInstanceIDs []string) (Placement, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstances", p, leavingInstanceIDs)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) RemoveInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveInstances", arg0, arg1)
}

func (_m *MockAlgorithm) ReplaceInstances(p Placement, leavingInstanecIDs []string, addingInstances []Instance) (Placement, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstances", p, leavingInstanecIDs, addingInstances)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) ReplaceInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceInstances", arg0, arg1, arg2)
}

func (_m *MockAlgorithm) IsCompatibleWith(p Placement) error {
	ret := _m.ctrl.Call(_m, "IsCompatibleWith", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAlgorithmRecorder) IsCompatibleWith(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsCompatibleWith", arg0)
}

func (_m *MockAlgorithm) MarkShardAvailable(p Placement, instanceID string, shardID uint32) (Placement, error) {
	ret := _m.ctrl.Call(_m, "MarkShardAvailable", p, instanceID, shardID)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAlgorithmRecorder) MarkShardAvailable(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkShardAvailable", arg0, arg1, arg2)
}

func (_m *MockAlgorithm) MarkAllShardsAvailable(p Placement) (Placement, bool, error) {
	ret := _m.ctrl.Call(_m, "MarkAllShardsAvailable", p)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAlgorithmRecorder) MarkAllShardsAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkAllShardsAvailable", arg0)
}

// Mock of InstanceSelector interface
type MockInstanceSelector struct {
	ctrl     *gomock.Controller
	recorder *_MockInstanceSelectorRecorder
}

// Recorder for MockInstanceSelector (not exported)
type _MockInstanceSelectorRecorder struct {
	mock *MockInstanceSelector
}

func NewMockInstanceSelector(ctrl *gomock.Controller) *MockInstanceSelector {
	mock := &MockInstanceSelector{ctrl: ctrl}
	mock.recorder = &_MockInstanceSelectorRecorder{mock}
	return mock
}

func (_m *MockInstanceSelector) EXPECT() *_MockInstanceSelectorRecorder {
	return _m.recorder
}

func (_m *MockInstanceSelector) SelectInitialInstances(candidates []Instance, rf int) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectInitialInstances", candidates, rf)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceSelectorRecorder) SelectInitialInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectInitialInstances", arg0, arg1)
}

func (_m *MockInstanceSelector) SelectAddingInstances(candidates []Instance, p Placement) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectAddingInstances", candidates, p)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceSelectorRecorder) SelectAddingInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectAddingInstances", arg0, arg1)
}

func (_m *MockInstanceSelector) SelectReplaceInstances(candidates []Instance, leavingInstanceIDs []string, p Placement) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectReplaceInstances", candidates, leavingInstanceIDs, p)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceSelectorRecorder) SelectReplaceInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectReplaceInstances", arg0, arg1, arg2)
}

// Mock of DeploymentPlanner interface
type MockDeploymentPlanner struct {
	ctrl     *gomock.Controller
	recorder *_MockDeploymentPlannerRecorder
}

// Recorder for MockDeploymentPlanner (not exported)
type _MockDeploymentPlannerRecorder struct {
	mock *MockDeploymentPlanner
}

func NewMockDeploymentPlanner(ctrl *gomock.Controller) *MockDeploymentPlanner {
	mock := &MockDeploymentPlanner{ctrl: ctrl}
	mock.recorder = &_MockDeploymentPlannerRecorder{mock}
	return mock
}

func (_m *MockDeploymentPlanner) EXPECT() *_MockDeploymentPlannerRecorder {
	return _m.recorder
}

func (_m *MockDeploymentPlanner) DeploymentSteps(p Placement) [][]Instance {
	ret := _m.ctrl.Call(_m, "DeploymentSteps", p)
	ret0, _ := ret[0].([][]Instance)
	return ret0
}

func (_mr *_MockDeploymentPlannerRecorder) DeploymentSteps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeploymentSteps", arg0)
}

// Mock of DeploymentOptions interface
type MockDeploymentOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockDeploymentOptionsRecorder
}

// Recorder for MockDeploymentOptions (not exported)
type _MockDeploymentOptionsRecorder struct {
	mock *MockDeploymentOptions
}

func NewMockDeploymentOptions(ctrl *gomock.Controller) *MockDeploymentOptions {
	mock := &MockDeploymentOptions{ctrl: ctrl}
	mock.recorder = &_MockDeploymentOptionsRecorder{mock}
	return mock
}

func (_m *MockDeploymentOptions) EXPECT() *_MockDeploymentOptionsRecorder {
	return _m.recorder
}

func (_m *MockDeploymentOptions) MaxStepSize() int {
	ret := _m.ctrl.Call(_m, "MaxStepSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDeploymentOptionsRecorder) MaxStepSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxStepSize")
}

func (_m *MockDeploymentOptions) SetMaxStepSize(stepSize int) DeploymentOptions {
	ret := _m.ctrl.Call(_m, "SetMaxStepSize", stepSize)
	ret0, _ := ret[0].(DeploymentOptions)
	return ret0
}

func (_mr *_MockDeploymentOptionsRecorder) SetMaxStepSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxStepSize", arg0)
}
