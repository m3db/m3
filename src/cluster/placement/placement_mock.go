// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3cluster/placement/types.go

package placement

import (
	"reflect"
	"time"

	"github.com/m3db/m3cluster/generated/proto/placementpb"
	"github.com/m3db/m3cluster/kv"
	"github.com/m3db/m3cluster/shard"
	"github.com/m3db/m3x/clock"
	"github.com/m3db/m3x/instrument"

	"github.com/golang/mock/gomock"
	"github.com/golang/protobuf/proto"
)

// MockInstance is a mock of Instance interface
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return _m.recorder
}

// String mocks base method
func (_m *MockInstance) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockInstanceMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "String", reflect.TypeOf((*MockInstance)(nil).String))
}

// ID mocks base method
func (_m *MockInstance) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockInstanceMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockInstance)(nil).ID))
}

// SetID mocks base method
func (_m *MockInstance) SetID(id string) Instance {
	ret := _m.ctrl.Call(_m, "SetID", id)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetID indicates an expected call of SetID
func (_mr *MockInstanceMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetID", reflect.TypeOf((*MockInstance)(nil).SetID), arg0)
}

// IsolationGroup mocks base method
func (_m *MockInstance) IsolationGroup() string {
	ret := _m.ctrl.Call(_m, "IsolationGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// IsolationGroup indicates an expected call of IsolationGroup
func (_mr *MockInstanceMockRecorder) IsolationGroup() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsolationGroup", reflect.TypeOf((*MockInstance)(nil).IsolationGroup))
}

// SetIsolationGroup mocks base method
func (_m *MockInstance) SetIsolationGroup(r string) Instance {
	ret := _m.ctrl.Call(_m, "SetIsolationGroup", r)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetIsolationGroup indicates an expected call of SetIsolationGroup
func (_mr *MockInstanceMockRecorder) SetIsolationGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsolationGroup", reflect.TypeOf((*MockInstance)(nil).SetIsolationGroup), arg0)
}

// Zone mocks base method
func (_m *MockInstance) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

// Zone indicates an expected call of Zone
func (_mr *MockInstanceMockRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Zone", reflect.TypeOf((*MockInstance)(nil).Zone))
}

// SetZone mocks base method
func (_m *MockInstance) SetZone(z string) Instance {
	ret := _m.ctrl.Call(_m, "SetZone", z)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetZone indicates an expected call of SetZone
func (_mr *MockInstanceMockRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetZone", reflect.TypeOf((*MockInstance)(nil).SetZone), arg0)
}

// Weight mocks base method
func (_m *MockInstance) Weight() uint32 {
	ret := _m.ctrl.Call(_m, "Weight")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Weight indicates an expected call of Weight
func (_mr *MockInstanceMockRecorder) Weight() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Weight", reflect.TypeOf((*MockInstance)(nil).Weight))
}

// SetWeight mocks base method
func (_m *MockInstance) SetWeight(w uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetWeight", w)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetWeight indicates an expected call of SetWeight
func (_mr *MockInstanceMockRecorder) SetWeight(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWeight", reflect.TypeOf((*MockInstance)(nil).SetWeight), arg0)
}

// Endpoint mocks base method
func (_m *MockInstance) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint
func (_mr *MockInstanceMockRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Endpoint", reflect.TypeOf((*MockInstance)(nil).Endpoint))
}

// SetEndpoint mocks base method
func (_m *MockInstance) SetEndpoint(ip string) Instance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", ip)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetEndpoint indicates an expected call of SetEndpoint
func (_mr *MockInstanceMockRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEndpoint", reflect.TypeOf((*MockInstance)(nil).SetEndpoint), arg0)
}

// Shards mocks base method
func (_m *MockInstance) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

// Shards indicates an expected call of Shards
func (_mr *MockInstanceMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockInstance)(nil).Shards))
}

// SetShards mocks base method
func (_m *MockInstance) SetShards(s shard.Shards) Instance {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetShards indicates an expected call of SetShards
func (_mr *MockInstanceMockRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShards", reflect.TypeOf((*MockInstance)(nil).SetShards), arg0)
}

// ShardSetID mocks base method
func (_m *MockInstance) ShardSetID() uint32 {
	ret := _m.ctrl.Call(_m, "ShardSetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ShardSetID indicates an expected call of ShardSetID
func (_mr *MockInstanceMockRecorder) ShardSetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardSetID", reflect.TypeOf((*MockInstance)(nil).ShardSetID))
}

// SetShardSetID mocks base method
func (_m *MockInstance) SetShardSetID(value uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetShardSetID", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetShardSetID indicates an expected call of SetShardSetID
func (_mr *MockInstanceMockRecorder) SetShardSetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShardSetID", reflect.TypeOf((*MockInstance)(nil).SetShardSetID), arg0)
}

// Hostname mocks base method
func (_m *MockInstance) Hostname() string {
	ret := _m.ctrl.Call(_m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname
func (_mr *MockInstanceMockRecorder) Hostname() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Hostname", reflect.TypeOf((*MockInstance)(nil).Hostname))
}

// SetHostname mocks base method
func (_m *MockInstance) SetHostname(value string) Instance {
	ret := _m.ctrl.Call(_m, "SetHostname", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetHostname indicates an expected call of SetHostname
func (_mr *MockInstanceMockRecorder) SetHostname(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHostname", reflect.TypeOf((*MockInstance)(nil).SetHostname), arg0)
}

// Port mocks base method
func (_m *MockInstance) Port() uint32 {
	ret := _m.ctrl.Call(_m, "Port")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Port indicates an expected call of Port
func (_mr *MockInstanceMockRecorder) Port() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Port", reflect.TypeOf((*MockInstance)(nil).Port))
}

// SetPort mocks base method
func (_m *MockInstance) SetPort(value uint32) Instance {
	ret := _m.ctrl.Call(_m, "SetPort", value)
	ret0, _ := ret[0].(Instance)
	return ret0
}

// SetPort indicates an expected call of SetPort
func (_mr *MockInstanceMockRecorder) SetPort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPort", reflect.TypeOf((*MockInstance)(nil).SetPort), arg0)
}

// Proto mocks base method
func (_m *MockInstance) Proto() (*placementpb.Instance, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto
func (_mr *MockInstanceMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockInstance)(nil).Proto))
}

// IsLeaving mocks base method
func (_m *MockInstance) IsLeaving() bool {
	ret := _m.ctrl.Call(_m, "IsLeaving")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLeaving indicates an expected call of IsLeaving
func (_mr *MockInstanceMockRecorder) IsLeaving() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsLeaving", reflect.TypeOf((*MockInstance)(nil).IsLeaving))
}

// IsInitializing mocks base method
func (_m *MockInstance) IsInitializing() bool {
	ret := _m.ctrl.Call(_m, "IsInitializing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitializing indicates an expected call of IsInitializing
func (_mr *MockInstanceMockRecorder) IsInitializing() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsInitializing", reflect.TypeOf((*MockInstance)(nil).IsInitializing))
}

// Clone mocks base method
func (_m *MockInstance) Clone() Instance {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(Instance)
	return ret0
}

// Clone indicates an expected call of Clone
func (_mr *MockInstanceMockRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clone", reflect.TypeOf((*MockInstance)(nil).Clone))
}

// MockPlacement is a mock of Placement interface
type MockPlacement struct {
	ctrl     *gomock.Controller
	recorder *MockPlacementMockRecorder
}

// MockPlacementMockRecorder is the mock recorder for MockPlacement
type MockPlacementMockRecorder struct {
	mock *MockPlacement
}

// NewMockPlacement creates a new mock instance
func NewMockPlacement(ctrl *gomock.Controller) *MockPlacement {
	mock := &MockPlacement{ctrl: ctrl}
	mock.recorder = &MockPlacementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPlacement) EXPECT() *MockPlacementMockRecorder {
	return _m.recorder
}

// InstancesForShard mocks base method
func (_m *MockPlacement) InstancesForShard(shard uint32) []Instance {
	ret := _m.ctrl.Call(_m, "InstancesForShard", shard)
	ret0, _ := ret[0].([]Instance)
	return ret0
}

// InstancesForShard indicates an expected call of InstancesForShard
func (_mr *MockPlacementMockRecorder) InstancesForShard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstancesForShard", reflect.TypeOf((*MockPlacement)(nil).InstancesForShard), arg0)
}

// Instances mocks base method
func (_m *MockPlacement) Instances() []Instance {
	ret := _m.ctrl.Call(_m, "Instances")
	ret0, _ := ret[0].([]Instance)
	return ret0
}

// Instances indicates an expected call of Instances
func (_mr *MockPlacementMockRecorder) Instances() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Instances", reflect.TypeOf((*MockPlacement)(nil).Instances))
}

// SetInstances mocks base method
func (_m *MockPlacement) SetInstances(instances []Instance) Placement {
	ret := _m.ctrl.Call(_m, "SetInstances", instances)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetInstances indicates an expected call of SetInstances
func (_mr *MockPlacementMockRecorder) SetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstances", reflect.TypeOf((*MockPlacement)(nil).SetInstances), arg0)
}

// NumInstances mocks base method
func (_m *MockPlacement) NumInstances() int {
	ret := _m.ctrl.Call(_m, "NumInstances")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInstances indicates an expected call of NumInstances
func (_mr *MockPlacementMockRecorder) NumInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumInstances", reflect.TypeOf((*MockPlacement)(nil).NumInstances))
}

// Instance mocks base method
func (_m *MockPlacement) Instance(id string) (Instance, bool) {
	ret := _m.ctrl.Call(_m, "Instance", id)
	ret0, _ := ret[0].(Instance)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Instance indicates an expected call of Instance
func (_mr *MockPlacementMockRecorder) Instance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Instance", reflect.TypeOf((*MockPlacement)(nil).Instance), arg0)
}

// ReplicaFactor mocks base method
func (_m *MockPlacement) ReplicaFactor() int {
	ret := _m.ctrl.Call(_m, "ReplicaFactor")
	ret0, _ := ret[0].(int)
	return ret0
}

// ReplicaFactor indicates an expected call of ReplicaFactor
func (_mr *MockPlacementMockRecorder) ReplicaFactor() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReplicaFactor", reflect.TypeOf((*MockPlacement)(nil).ReplicaFactor))
}

// SetReplicaFactor mocks base method
func (_m *MockPlacement) SetReplicaFactor(rf int) Placement {
	ret := _m.ctrl.Call(_m, "SetReplicaFactor", rf)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetReplicaFactor indicates an expected call of SetReplicaFactor
func (_mr *MockPlacementMockRecorder) SetReplicaFactor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReplicaFactor", reflect.TypeOf((*MockPlacement)(nil).SetReplicaFactor), arg0)
}

// Shards mocks base method
func (_m *MockPlacement) Shards() []uint32 {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].([]uint32)
	return ret0
}

// Shards indicates an expected call of Shards
func (_mr *MockPlacementMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockPlacement)(nil).Shards))
}

// SetShards mocks base method
func (_m *MockPlacement) SetShards(s []uint32) Placement {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetShards indicates an expected call of SetShards
func (_mr *MockPlacementMockRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShards", reflect.TypeOf((*MockPlacement)(nil).SetShards), arg0)
}

// NumShards mocks base method
func (_m *MockPlacement) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumShards indicates an expected call of NumShards
func (_mr *MockPlacementMockRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumShards", reflect.TypeOf((*MockPlacement)(nil).NumShards))
}

// IsSharded mocks base method
func (_m *MockPlacement) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSharded indicates an expected call of IsSharded
func (_mr *MockPlacementMockRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsSharded", reflect.TypeOf((*MockPlacement)(nil).IsSharded))
}

// SetIsSharded mocks base method
func (_m *MockPlacement) SetIsSharded(v bool) Placement {
	ret := _m.ctrl.Call(_m, "SetIsSharded", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetIsSharded indicates an expected call of SetIsSharded
func (_mr *MockPlacementMockRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsSharded", reflect.TypeOf((*MockPlacement)(nil).SetIsSharded), arg0)
}

// CutoverNanos mocks base method
func (_m *MockPlacement) CutoverNanos() int64 {
	ret := _m.ctrl.Call(_m, "CutoverNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CutoverNanos indicates an expected call of CutoverNanos
func (_mr *MockPlacementMockRecorder) CutoverNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CutoverNanos", reflect.TypeOf((*MockPlacement)(nil).CutoverNanos))
}

// SetCutoverNanos mocks base method
func (_m *MockPlacement) SetCutoverNanos(cutoverNanos int64) Placement {
	ret := _m.ctrl.Call(_m, "SetCutoverNanos", cutoverNanos)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetCutoverNanos indicates an expected call of SetCutoverNanos
func (_mr *MockPlacementMockRecorder) SetCutoverNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCutoverNanos", reflect.TypeOf((*MockPlacement)(nil).SetCutoverNanos), arg0)
}

// IsMirrored mocks base method
func (_m *MockPlacement) IsMirrored() bool {
	ret := _m.ctrl.Call(_m, "IsMirrored")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMirrored indicates an expected call of IsMirrored
func (_mr *MockPlacementMockRecorder) IsMirrored() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsMirrored", reflect.TypeOf((*MockPlacement)(nil).IsMirrored))
}

// SetIsMirrored mocks base method
func (_m *MockPlacement) SetIsMirrored(v bool) Placement {
	ret := _m.ctrl.Call(_m, "SetIsMirrored", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetIsMirrored indicates an expected call of SetIsMirrored
func (_mr *MockPlacementMockRecorder) SetIsMirrored(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsMirrored", reflect.TypeOf((*MockPlacement)(nil).SetIsMirrored), arg0)
}

// MaxShardSetID mocks base method
func (_m *MockPlacement) MaxShardSetID() uint32 {
	ret := _m.ctrl.Call(_m, "MaxShardSetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MaxShardSetID indicates an expected call of MaxShardSetID
func (_mr *MockPlacementMockRecorder) MaxShardSetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MaxShardSetID", reflect.TypeOf((*MockPlacement)(nil).MaxShardSetID))
}

// SetMaxShardSetID mocks base method
func (_m *MockPlacement) SetMaxShardSetID(value uint32) Placement {
	ret := _m.ctrl.Call(_m, "SetMaxShardSetID", value)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetMaxShardSetID indicates an expected call of SetMaxShardSetID
func (_mr *MockPlacementMockRecorder) SetMaxShardSetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMaxShardSetID", reflect.TypeOf((*MockPlacement)(nil).SetMaxShardSetID), arg0)
}

// String mocks base method
func (_m *MockPlacement) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockPlacementMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "String", reflect.TypeOf((*MockPlacement)(nil).String))
}

// GetVersion mocks base method
func (_m *MockPlacement) GetVersion() int {
	ret := _m.ctrl.Call(_m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetVersion indicates an expected call of GetVersion
func (_mr *MockPlacementMockRecorder) GetVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetVersion", reflect.TypeOf((*MockPlacement)(nil).GetVersion))
}

// SetVersion mocks base method
func (_m *MockPlacement) SetVersion(v int) Placement {
	ret := _m.ctrl.Call(_m, "SetVersion", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

// SetVersion indicates an expected call of SetVersion
func (_mr *MockPlacementMockRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVersion", reflect.TypeOf((*MockPlacement)(nil).SetVersion), arg0)
}

// Proto mocks base method
func (_m *MockPlacement) Proto() (*placementpb.Placement, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto
func (_mr *MockPlacementMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockPlacement)(nil).Proto))
}

// Clone mocks base method
func (_m *MockPlacement) Clone() Placement {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(Placement)
	return ret0
}

// Clone indicates an expected call of Clone
func (_mr *MockPlacementMockRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clone", reflect.TypeOf((*MockPlacement)(nil).Clone))
}

// MockStagedPlacementWatcher is a mock of StagedPlacementWatcher interface
type MockStagedPlacementWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockStagedPlacementWatcherMockRecorder
}

// MockStagedPlacementWatcherMockRecorder is the mock recorder for MockStagedPlacementWatcher
type MockStagedPlacementWatcherMockRecorder struct {
	mock *MockStagedPlacementWatcher
}

// NewMockStagedPlacementWatcher creates a new mock instance
func NewMockStagedPlacementWatcher(ctrl *gomock.Controller) *MockStagedPlacementWatcher {
	mock := &MockStagedPlacementWatcher{ctrl: ctrl}
	mock.recorder = &MockStagedPlacementWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStagedPlacementWatcher) EXPECT() *MockStagedPlacementWatcherMockRecorder {
	return _m.recorder
}

// Watch mocks base method
func (_m *MockStagedPlacementWatcher) Watch() error {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (_mr *MockStagedPlacementWatcherMockRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockStagedPlacementWatcher)(nil).Watch))
}

// ActiveStagedPlacement mocks base method
func (_m *MockStagedPlacementWatcher) ActiveStagedPlacement() (ActiveStagedPlacement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement")
	ret0, _ := ret[0].(ActiveStagedPlacement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ActiveStagedPlacement indicates an expected call of ActiveStagedPlacement
func (_mr *MockStagedPlacementWatcherMockRecorder) ActiveStagedPlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActiveStagedPlacement", reflect.TypeOf((*MockStagedPlacementWatcher)(nil).ActiveStagedPlacement))
}

// Unwatch mocks base method
func (_m *MockStagedPlacementWatcher) Unwatch() error {
	ret := _m.ctrl.Call(_m, "Unwatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwatch indicates an expected call of Unwatch
func (_mr *MockStagedPlacementWatcherMockRecorder) Unwatch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unwatch", reflect.TypeOf((*MockStagedPlacementWatcher)(nil).Unwatch))
}

// MockStagedPlacementWatcherOptions is a mock of StagedPlacementWatcherOptions interface
type MockStagedPlacementWatcherOptions struct {
	ctrl     *gomock.Controller
	recorder *MockStagedPlacementWatcherOptionsMockRecorder
}

// MockStagedPlacementWatcherOptionsMockRecorder is the mock recorder for MockStagedPlacementWatcherOptions
type MockStagedPlacementWatcherOptionsMockRecorder struct {
	mock *MockStagedPlacementWatcherOptions
}

// NewMockStagedPlacementWatcherOptions creates a new mock instance
func NewMockStagedPlacementWatcherOptions(ctrl *gomock.Controller) *MockStagedPlacementWatcherOptions {
	mock := &MockStagedPlacementWatcherOptions{ctrl: ctrl}
	mock.recorder = &MockStagedPlacementWatcherOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStagedPlacementWatcherOptions) EXPECT() *MockStagedPlacementWatcherOptionsMockRecorder {
	return _m.recorder
}

// SetClockOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetClockOptions(value clock.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetClockOptions indicates an expected call of SetClockOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetClockOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetClockOptions), arg0)
}

// ClockOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

// ClockOptions indicates an expected call of ClockOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClockOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).ClockOptions))
}

// SetInstrumentOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetInstrumentOptions(value instrument.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetInstrumentOptions indicates an expected call of SetInstrumentOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstrumentOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetInstrumentOptions), arg0)
}

// InstrumentOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

// InstrumentOptions indicates an expected call of InstrumentOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstrumentOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).InstrumentOptions))
}

// SetActiveStagedPlacementOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetActiveStagedPlacementOptions(value ActiveStagedPlacementOptions) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetActiveStagedPlacementOptions indicates an expected call of SetActiveStagedPlacementOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetActiveStagedPlacementOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetActiveStagedPlacementOptions), arg0)
}

// ActiveStagedPlacementOptions mocks base method
func (_m *MockStagedPlacementWatcherOptions) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

// ActiveStagedPlacementOptions indicates an expected call of ActiveStagedPlacementOptions
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActiveStagedPlacementOptions", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).ActiveStagedPlacementOptions))
}

// SetStagedPlacementKey mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementKey(value string) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementKey", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetStagedPlacementKey indicates an expected call of SetStagedPlacementKey
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetStagedPlacementKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetStagedPlacementKey", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetStagedPlacementKey), arg0)
}

// StagedPlacementKey mocks base method
func (_m *MockStagedPlacementWatcherOptions) StagedPlacementKey() string {
	ret := _m.ctrl.Call(_m, "StagedPlacementKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// StagedPlacementKey indicates an expected call of StagedPlacementKey
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) StagedPlacementKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StagedPlacementKey", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).StagedPlacementKey))
}

// SetStagedPlacementStore mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementStore(store kv.Store) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementStore", store)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetStagedPlacementStore indicates an expected call of SetStagedPlacementStore
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetStagedPlacementStore(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetStagedPlacementStore", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetStagedPlacementStore), arg0)
}

// StagedPlacementStore mocks base method
func (_m *MockStagedPlacementWatcherOptions) StagedPlacementStore() kv.Store {
	ret := _m.ctrl.Call(_m, "StagedPlacementStore")
	ret0, _ := ret[0].(kv.Store)
	return ret0
}

// StagedPlacementStore indicates an expected call of StagedPlacementStore
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) StagedPlacementStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StagedPlacementStore", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).StagedPlacementStore))
}

// SetInitWatchTimeout mocks base method
func (_m *MockStagedPlacementWatcherOptions) SetInitWatchTimeout(value time.Duration) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInitWatchTimeout", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

// SetInitWatchTimeout indicates an expected call of SetInitWatchTimeout
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) SetInitWatchTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInitWatchTimeout", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).SetInitWatchTimeout), arg0)
}

// InitWatchTimeout mocks base method
func (_m *MockStagedPlacementWatcherOptions) InitWatchTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "InitWatchTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// InitWatchTimeout indicates an expected call of InitWatchTimeout
func (_mr *MockStagedPlacementWatcherOptionsMockRecorder) InitWatchTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitWatchTimeout", reflect.TypeOf((*MockStagedPlacementWatcherOptions)(nil).InitWatchTimeout))
}

// MockActiveStagedPlacement is a mock of ActiveStagedPlacement interface
type MockActiveStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *MockActiveStagedPlacementMockRecorder
}

// MockActiveStagedPlacementMockRecorder is the mock recorder for MockActiveStagedPlacement
type MockActiveStagedPlacementMockRecorder struct {
	mock *MockActiveStagedPlacement
}

// NewMockActiveStagedPlacement creates a new mock instance
func NewMockActiveStagedPlacement(ctrl *gomock.Controller) *MockActiveStagedPlacement {
	mock := &MockActiveStagedPlacement{ctrl: ctrl}
	mock.recorder = &MockActiveStagedPlacementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockActiveStagedPlacement) EXPECT() *MockActiveStagedPlacementMockRecorder {
	return _m.recorder
}

// ActivePlacement mocks base method
func (_m *MockActiveStagedPlacement) ActivePlacement() (Placement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActivePlacement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ActivePlacement indicates an expected call of ActivePlacement
func (_mr *MockActiveStagedPlacementMockRecorder) ActivePlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActivePlacement", reflect.TypeOf((*MockActiveStagedPlacement)(nil).ActivePlacement))
}

// Close mocks base method
func (_m *MockActiveStagedPlacement) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockActiveStagedPlacementMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockActiveStagedPlacement)(nil).Close))
}

// MockActiveStagedPlacementOptions is a mock of ActiveStagedPlacementOptions interface
type MockActiveStagedPlacementOptions struct {
	ctrl     *gomock.Controller
	recorder *MockActiveStagedPlacementOptionsMockRecorder
}

// MockActiveStagedPlacementOptionsMockRecorder is the mock recorder for MockActiveStagedPlacementOptions
type MockActiveStagedPlacementOptionsMockRecorder struct {
	mock *MockActiveStagedPlacementOptions
}

// NewMockActiveStagedPlacementOptions creates a new mock instance
func NewMockActiveStagedPlacementOptions(ctrl *gomock.Controller) *MockActiveStagedPlacementOptions {
	mock := &MockActiveStagedPlacementOptions{ctrl: ctrl}
	mock.recorder = &MockActiveStagedPlacementOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockActiveStagedPlacementOptions) EXPECT() *MockActiveStagedPlacementOptionsMockRecorder {
	return _m.recorder
}

// SetClockOptions mocks base method
func (_m *MockActiveStagedPlacementOptions) SetClockOptions(value clock.Options) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

// SetClockOptions indicates an expected call of SetClockOptions
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetClockOptions", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).SetClockOptions), arg0)
}

// ClockOptions mocks base method
func (_m *MockActiveStagedPlacementOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

// ClockOptions indicates an expected call of ClockOptions
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClockOptions", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).ClockOptions))
}

// SetOnPlacementsAddedFn mocks base method
func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsAddedFn(value OnPlacementsAddedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsAddedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

// SetOnPlacementsAddedFn indicates an expected call of SetOnPlacementsAddedFn
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) SetOnPlacementsAddedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetOnPlacementsAddedFn", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).SetOnPlacementsAddedFn), arg0)
}

// OnPlacementsAddedFn mocks base method
func (_m *MockActiveStagedPlacementOptions) OnPlacementsAddedFn() OnPlacementsAddedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsAddedFn")
	ret0, _ := ret[0].(OnPlacementsAddedFn)
	return ret0
}

// OnPlacementsAddedFn indicates an expected call of OnPlacementsAddedFn
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) OnPlacementsAddedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnPlacementsAddedFn", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).OnPlacementsAddedFn))
}

// SetOnPlacementsRemovedFn mocks base method
func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsRemovedFn(value OnPlacementsRemovedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsRemovedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

// SetOnPlacementsRemovedFn indicates an expected call of SetOnPlacementsRemovedFn
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) SetOnPlacementsRemovedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetOnPlacementsRemovedFn", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).SetOnPlacementsRemovedFn), arg0)
}

// OnPlacementsRemovedFn mocks base method
func (_m *MockActiveStagedPlacementOptions) OnPlacementsRemovedFn() OnPlacementsRemovedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsRemovedFn")
	ret0, _ := ret[0].(OnPlacementsRemovedFn)
	return ret0
}

// OnPlacementsRemovedFn indicates an expected call of OnPlacementsRemovedFn
func (_mr *MockActiveStagedPlacementOptionsMockRecorder) OnPlacementsRemovedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnPlacementsRemovedFn", reflect.TypeOf((*MockActiveStagedPlacementOptions)(nil).OnPlacementsRemovedFn))
}

// MockStagedPlacement is a mock of StagedPlacement interface
type MockStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *MockStagedPlacementMockRecorder
}

// MockStagedPlacementMockRecorder is the mock recorder for MockStagedPlacement
type MockStagedPlacementMockRecorder struct {
	mock *MockStagedPlacement
}

// NewMockStagedPlacement creates a new mock instance
func NewMockStagedPlacement(ctrl *gomock.Controller) *MockStagedPlacement {
	mock := &MockStagedPlacement{ctrl: ctrl}
	mock.recorder = &MockStagedPlacementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStagedPlacement) EXPECT() *MockStagedPlacementMockRecorder {
	return _m.recorder
}

// ActiveStagedPlacement mocks base method
func (_m *MockStagedPlacement) ActiveStagedPlacement(timeNanos int64) ActiveStagedPlacement {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement", timeNanos)
	ret0, _ := ret[0].(ActiveStagedPlacement)
	return ret0
}

// ActiveStagedPlacement indicates an expected call of ActiveStagedPlacement
func (_mr *MockStagedPlacementMockRecorder) ActiveStagedPlacement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActiveStagedPlacement", reflect.TypeOf((*MockStagedPlacement)(nil).ActiveStagedPlacement), arg0)
}

// Version mocks base method
func (_m *MockStagedPlacement) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (_mr *MockStagedPlacementMockRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Version", reflect.TypeOf((*MockStagedPlacement)(nil).Version))
}

// SetVersion mocks base method
func (_m *MockStagedPlacement) SetVersion(version int) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetVersion", version)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

// SetVersion indicates an expected call of SetVersion
func (_mr *MockStagedPlacementMockRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVersion", reflect.TypeOf((*MockStagedPlacement)(nil).SetVersion), arg0)
}

// Placements mocks base method
func (_m *MockStagedPlacement) Placements() Placements {
	ret := _m.ctrl.Call(_m, "Placements")
	ret0, _ := ret[0].(Placements)
	return ret0
}

// Placements indicates an expected call of Placements
func (_mr *MockStagedPlacementMockRecorder) Placements() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Placements", reflect.TypeOf((*MockStagedPlacement)(nil).Placements))
}

// SetPlacements mocks base method
func (_m *MockStagedPlacement) SetPlacements(placements []Placement) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetPlacements", placements)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

// SetPlacements indicates an expected call of SetPlacements
func (_mr *MockStagedPlacementMockRecorder) SetPlacements(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacements", reflect.TypeOf((*MockStagedPlacement)(nil).SetPlacements), arg0)
}

// ActiveStagedPlacementOptions mocks base method
func (_m *MockStagedPlacement) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

// ActiveStagedPlacementOptions indicates an expected call of ActiveStagedPlacementOptions
func (_mr *MockStagedPlacementMockRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActiveStagedPlacementOptions", reflect.TypeOf((*MockStagedPlacement)(nil).ActiveStagedPlacementOptions))
}

// SetActiveStagedPlacementOptions mocks base method
func (_m *MockStagedPlacement) SetActiveStagedPlacementOptions(opts ActiveStagedPlacementOptions) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", opts)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

// SetActiveStagedPlacementOptions indicates an expected call of SetActiveStagedPlacementOptions
func (_mr *MockStagedPlacementMockRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetActiveStagedPlacementOptions", reflect.TypeOf((*MockStagedPlacement)(nil).SetActiveStagedPlacementOptions), arg0)
}

// Proto mocks base method
func (_m *MockStagedPlacement) Proto() (*placementpb.PlacementSnapshots, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*placementpb.PlacementSnapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto
func (_mr *MockStagedPlacementMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockStagedPlacement)(nil).Proto))
}

// MockOptions is a mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return _m.recorder
}

// AllowPartialReplace mocks base method
func (_m *MockOptions) AllowPartialReplace() bool {
	ret := _m.ctrl.Call(_m, "AllowPartialReplace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowPartialReplace indicates an expected call of AllowPartialReplace
func (_mr *MockOptionsMockRecorder) AllowPartialReplace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllowPartialReplace", reflect.TypeOf((*MockOptions)(nil).AllowPartialReplace))
}

// SetAllowPartialReplace mocks base method
func (_m *MockOptions) SetAllowPartialReplace(allowPartialReplace bool) Options {
	ret := _m.ctrl.Call(_m, "SetAllowPartialReplace", allowPartialReplace)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetAllowPartialReplace indicates an expected call of SetAllowPartialReplace
func (_mr *MockOptionsMockRecorder) SetAllowPartialReplace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAllowPartialReplace", reflect.TypeOf((*MockOptions)(nil).SetAllowPartialReplace), arg0)
}

// AddAllCandidates mocks base method
func (_m *MockOptions) AddAllCandidates() bool {
	ret := _m.ctrl.Call(_m, "AddAllCandidates")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddAllCandidates indicates an expected call of AddAllCandidates
func (_mr *MockOptionsMockRecorder) AddAllCandidates() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddAllCandidates", reflect.TypeOf((*MockOptions)(nil).AddAllCandidates))
}

// SetAddAllCandidates mocks base method
func (_m *MockOptions) SetAddAllCandidates(addAllCandidates bool) Options {
	ret := _m.ctrl.Call(_m, "SetAddAllCandidates", addAllCandidates)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetAddAllCandidates indicates an expected call of SetAddAllCandidates
func (_mr *MockOptionsMockRecorder) SetAddAllCandidates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAddAllCandidates", reflect.TypeOf((*MockOptions)(nil).SetAddAllCandidates), arg0)
}

// IsSharded mocks base method
func (_m *MockOptions) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSharded indicates an expected call of IsSharded
func (_mr *MockOptionsMockRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsSharded", reflect.TypeOf((*MockOptions)(nil).IsSharded))
}

// SetIsSharded mocks base method
func (_m *MockOptions) SetIsSharded(sharded bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsSharded", sharded)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIsSharded indicates an expected call of SetIsSharded
func (_mr *MockOptionsMockRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsSharded", reflect.TypeOf((*MockOptions)(nil).SetIsSharded), arg0)
}

// ShardStateMode mocks base method
func (_m *MockOptions) ShardStateMode() ShardStateMode {
	ret := _m.ctrl.Call(_m, "ShardStateMode")
	ret0, _ := ret[0].(ShardStateMode)
	return ret0
}

// ShardStateMode indicates an expected call of ShardStateMode
func (_mr *MockOptionsMockRecorder) ShardStateMode() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardStateMode", reflect.TypeOf((*MockOptions)(nil).ShardStateMode))
}

// SetShardStateMode mocks base method
func (_m *MockOptions) SetShardStateMode(value ShardStateMode) Options {
	ret := _m.ctrl.Call(_m, "SetShardStateMode", value)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetShardStateMode indicates an expected call of SetShardStateMode
func (_mr *MockOptionsMockRecorder) SetShardStateMode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShardStateMode", reflect.TypeOf((*MockOptions)(nil).SetShardStateMode), arg0)
}

// Dryrun mocks base method
func (_m *MockOptions) Dryrun() bool {
	ret := _m.ctrl.Call(_m, "Dryrun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Dryrun indicates an expected call of Dryrun
func (_mr *MockOptionsMockRecorder) Dryrun() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Dryrun", reflect.TypeOf((*MockOptions)(nil).Dryrun))
}

// SetDryrun mocks base method
func (_m *MockOptions) SetDryrun(d bool) Options {
	ret := _m.ctrl.Call(_m, "SetDryrun", d)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetDryrun indicates an expected call of SetDryrun
func (_mr *MockOptionsMockRecorder) SetDryrun(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDryrun", reflect.TypeOf((*MockOptions)(nil).SetDryrun), arg0)
}

// IsMirrored mocks base method
func (_m *MockOptions) IsMirrored() bool {
	ret := _m.ctrl.Call(_m, "IsMirrored")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMirrored indicates an expected call of IsMirrored
func (_mr *MockOptionsMockRecorder) IsMirrored() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsMirrored", reflect.TypeOf((*MockOptions)(nil).IsMirrored))
}

// SetIsMirrored mocks base method
func (_m *MockOptions) SetIsMirrored(m bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsMirrored", m)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIsMirrored indicates an expected call of SetIsMirrored
func (_mr *MockOptionsMockRecorder) SetIsMirrored(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsMirrored", reflect.TypeOf((*MockOptions)(nil).SetIsMirrored), arg0)
}

// IsStaged mocks base method
func (_m *MockOptions) IsStaged() bool {
	ret := _m.ctrl.Call(_m, "IsStaged")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStaged indicates an expected call of IsStaged
func (_mr *MockOptionsMockRecorder) IsStaged() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsStaged", reflect.TypeOf((*MockOptions)(nil).IsStaged))
}

// SetIsStaged mocks base method
func (_m *MockOptions) SetIsStaged(v bool) Options {
	ret := _m.ctrl.Call(_m, "SetIsStaged", v)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIsStaged indicates an expected call of SetIsStaged
func (_mr *MockOptionsMockRecorder) SetIsStaged(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsStaged", reflect.TypeOf((*MockOptions)(nil).SetIsStaged), arg0)
}

// InstrumentOptions mocks base method
func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

// InstrumentOptions indicates an expected call of InstrumentOptions
func (_mr *MockOptionsMockRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstrumentOptions", reflect.TypeOf((*MockOptions)(nil).InstrumentOptions))
}

// SetInstrumentOptions mocks base method
func (_m *MockOptions) SetInstrumentOptions(iopts instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", iopts)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetInstrumentOptions indicates an expected call of SetInstrumentOptions
func (_mr *MockOptionsMockRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstrumentOptions", reflect.TypeOf((*MockOptions)(nil).SetInstrumentOptions), arg0)
}

// ValidZone mocks base method
func (_m *MockOptions) ValidZone() string {
	ret := _m.ctrl.Call(_m, "ValidZone")
	ret0, _ := ret[0].(string)
	return ret0
}

// ValidZone indicates an expected call of ValidZone
func (_mr *MockOptionsMockRecorder) ValidZone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidZone", reflect.TypeOf((*MockOptions)(nil).ValidZone))
}

// SetValidZone mocks base method
func (_m *MockOptions) SetValidZone(z string) Options {
	ret := _m.ctrl.Call(_m, "SetValidZone", z)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetValidZone indicates an expected call of SetValidZone
func (_mr *MockOptionsMockRecorder) SetValidZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetValidZone", reflect.TypeOf((*MockOptions)(nil).SetValidZone), arg0)
}

// PlacementCutoverNanosFn mocks base method
func (_m *MockOptions) PlacementCutoverNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "PlacementCutoverNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

// PlacementCutoverNanosFn indicates an expected call of PlacementCutoverNanosFn
func (_mr *MockOptionsMockRecorder) PlacementCutoverNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementCutoverNanosFn", reflect.TypeOf((*MockOptions)(nil).PlacementCutoverNanosFn))
}

// SetPlacementCutoverNanosFn mocks base method
func (_m *MockOptions) SetPlacementCutoverNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetPlacementCutoverNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetPlacementCutoverNanosFn indicates an expected call of SetPlacementCutoverNanosFn
func (_mr *MockOptionsMockRecorder) SetPlacementCutoverNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacementCutoverNanosFn", reflect.TypeOf((*MockOptions)(nil).SetPlacementCutoverNanosFn), arg0)
}

// ShardCutoverNanosFn mocks base method
func (_m *MockOptions) ShardCutoverNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "ShardCutoverNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

// ShardCutoverNanosFn indicates an expected call of ShardCutoverNanosFn
func (_mr *MockOptionsMockRecorder) ShardCutoverNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardCutoverNanosFn", reflect.TypeOf((*MockOptions)(nil).ShardCutoverNanosFn))
}

// SetShardCutoverNanosFn mocks base method
func (_m *MockOptions) SetShardCutoverNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetShardCutoverNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetShardCutoverNanosFn indicates an expected call of SetShardCutoverNanosFn
func (_mr *MockOptionsMockRecorder) SetShardCutoverNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShardCutoverNanosFn", reflect.TypeOf((*MockOptions)(nil).SetShardCutoverNanosFn), arg0)
}

// ShardCutoffNanosFn mocks base method
func (_m *MockOptions) ShardCutoffNanosFn() TimeNanosFn {
	ret := _m.ctrl.Call(_m, "ShardCutoffNanosFn")
	ret0, _ := ret[0].(TimeNanosFn)
	return ret0
}

// ShardCutoffNanosFn indicates an expected call of ShardCutoffNanosFn
func (_mr *MockOptionsMockRecorder) ShardCutoffNanosFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShardCutoffNanosFn", reflect.TypeOf((*MockOptions)(nil).ShardCutoffNanosFn))
}

// SetShardCutoffNanosFn mocks base method
func (_m *MockOptions) SetShardCutoffNanosFn(fn TimeNanosFn) Options {
	ret := _m.ctrl.Call(_m, "SetShardCutoffNanosFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetShardCutoffNanosFn indicates an expected call of SetShardCutoffNanosFn
func (_mr *MockOptionsMockRecorder) SetShardCutoffNanosFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShardCutoffNanosFn", reflect.TypeOf((*MockOptions)(nil).SetShardCutoffNanosFn), arg0)
}

// IsShardCutoverFn mocks base method
func (_m *MockOptions) IsShardCutoverFn() ShardValidationFn {
	ret := _m.ctrl.Call(_m, "IsShardCutoverFn")
	ret0, _ := ret[0].(ShardValidationFn)
	return ret0
}

// IsShardCutoverFn indicates an expected call of IsShardCutoverFn
func (_mr *MockOptionsMockRecorder) IsShardCutoverFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsShardCutoverFn", reflect.TypeOf((*MockOptions)(nil).IsShardCutoverFn))
}

// SetIsShardCutoverFn mocks base method
func (_m *MockOptions) SetIsShardCutoverFn(fn ShardValidationFn) Options {
	ret := _m.ctrl.Call(_m, "SetIsShardCutoverFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIsShardCutoverFn indicates an expected call of SetIsShardCutoverFn
func (_mr *MockOptionsMockRecorder) SetIsShardCutoverFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsShardCutoverFn", reflect.TypeOf((*MockOptions)(nil).SetIsShardCutoverFn), arg0)
}

// IsShardCutoffFn mocks base method
func (_m *MockOptions) IsShardCutoffFn() ShardValidationFn {
	ret := _m.ctrl.Call(_m, "IsShardCutoffFn")
	ret0, _ := ret[0].(ShardValidationFn)
	return ret0
}

// IsShardCutoffFn indicates an expected call of IsShardCutoffFn
func (_mr *MockOptionsMockRecorder) IsShardCutoffFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsShardCutoffFn", reflect.TypeOf((*MockOptions)(nil).IsShardCutoffFn))
}

// SetIsShardCutoffFn mocks base method
func (_m *MockOptions) SetIsShardCutoffFn(fn ShardValidationFn) Options {
	ret := _m.ctrl.Call(_m, "SetIsShardCutoffFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetIsShardCutoffFn indicates an expected call of SetIsShardCutoffFn
func (_mr *MockOptionsMockRecorder) SetIsShardCutoffFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsShardCutoffFn", reflect.TypeOf((*MockOptions)(nil).SetIsShardCutoffFn), arg0)
}

// NowFn mocks base method
func (_m *MockOptions) NowFn() clock.NowFn {
	ret := _m.ctrl.Call(_m, "NowFn")
	ret0, _ := ret[0].(clock.NowFn)
	return ret0
}

// NowFn indicates an expected call of NowFn
func (_mr *MockOptionsMockRecorder) NowFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NowFn", reflect.TypeOf((*MockOptions)(nil).NowFn))
}

// SetNowFn mocks base method
func (_m *MockOptions) SetNowFn(fn clock.NowFn) Options {
	ret := _m.ctrl.Call(_m, "SetNowFn", fn)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetNowFn indicates an expected call of SetNowFn
func (_mr *MockOptionsMockRecorder) SetNowFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNowFn", reflect.TypeOf((*MockOptions)(nil).SetNowFn), arg0)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return _m.recorder
}

// Set mocks base method
func (_m *MockStorage) Set(p Placement) error {
	ret := _m.ctrl.Call(_m, "Set", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (_mr *MockStorageMockRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), arg0)
}

// CheckAndSet mocks base method
func (_m *MockStorage) CheckAndSet(p Placement, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSet", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSet indicates an expected call of CheckAndSet
func (_mr *MockStorageMockRecorder) CheckAndSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSet", reflect.TypeOf((*MockStorage)(nil).CheckAndSet), arg0, arg1)
}

// SetIfNotExist mocks base method
func (_m *MockStorage) SetIfNotExist(p Placement) error {
	ret := _m.ctrl.Call(_m, "SetIfNotExist", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIfNotExist indicates an expected call of SetIfNotExist
func (_mr *MockStorageMockRecorder) SetIfNotExist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIfNotExist", reflect.TypeOf((*MockStorage)(nil).SetIfNotExist), arg0)
}

// Placement mocks base method
func (_m *MockStorage) Placement() (Placement, int, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Placement indicates an expected call of Placement
func (_mr *MockStorageMockRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Placement", reflect.TypeOf((*MockStorage)(nil).Placement))
}

// Delete mocks base method
func (_m *MockStorage) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockStorageMockRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete))
}

// SetProto mocks base method
func (_m *MockStorage) SetProto(p proto.Message) error {
	ret := _m.ctrl.Call(_m, "SetProto", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProto indicates an expected call of SetProto
func (_mr *MockStorageMockRecorder) SetProto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetProto", reflect.TypeOf((*MockStorage)(nil).SetProto), arg0)
}

// CheckAndSetProto mocks base method
func (_m *MockStorage) CheckAndSetProto(p proto.Message, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSetProto", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSetProto indicates an expected call of CheckAndSetProto
func (_mr *MockStorageMockRecorder) CheckAndSetProto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSetProto", reflect.TypeOf((*MockStorage)(nil).CheckAndSetProto), arg0, arg1)
}

// Proto mocks base method
func (_m *MockStorage) Proto() (proto.Message, int, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Proto indicates an expected call of Proto
func (_mr *MockStorageMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockStorage)(nil).Proto))
}

// PlacementForVersion mocks base method
func (_m *MockStorage) PlacementForVersion(version int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "PlacementForVersion", version)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlacementForVersion indicates an expected call of PlacementForVersion
func (_mr *MockStorageMockRecorder) PlacementForVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementForVersion", reflect.TypeOf((*MockStorage)(nil).PlacementForVersion), arg0)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Set mocks base method
func (_m *MockService) Set(p Placement) error {
	ret := _m.ctrl.Call(_m, "Set", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (_mr *MockServiceMockRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockService)(nil).Set), arg0)
}

// CheckAndSet mocks base method
func (_m *MockService) CheckAndSet(p Placement, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSet", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSet indicates an expected call of CheckAndSet
func (_mr *MockServiceMockRecorder) CheckAndSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSet", reflect.TypeOf((*MockService)(nil).CheckAndSet), arg0, arg1)
}

// SetIfNotExist mocks base method
func (_m *MockService) SetIfNotExist(p Placement) error {
	ret := _m.ctrl.Call(_m, "SetIfNotExist", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIfNotExist indicates an expected call of SetIfNotExist
func (_mr *MockServiceMockRecorder) SetIfNotExist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIfNotExist", reflect.TypeOf((*MockService)(nil).SetIfNotExist), arg0)
}

// Placement mocks base method
func (_m *MockService) Placement() (Placement, int, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Placement indicates an expected call of Placement
func (_mr *MockServiceMockRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Placement", reflect.TypeOf((*MockService)(nil).Placement))
}

// Delete mocks base method
func (_m *MockService) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockServiceMockRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete))
}

// SetProto mocks base method
func (_m *MockService) SetProto(p proto.Message) error {
	ret := _m.ctrl.Call(_m, "SetProto", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProto indicates an expected call of SetProto
func (_mr *MockServiceMockRecorder) SetProto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetProto", reflect.TypeOf((*MockService)(nil).SetProto), arg0)
}

// CheckAndSetProto mocks base method
func (_m *MockService) CheckAndSetProto(p proto.Message, version int) error {
	ret := _m.ctrl.Call(_m, "CheckAndSetProto", p, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSetProto indicates an expected call of CheckAndSetProto
func (_mr *MockServiceMockRecorder) CheckAndSetProto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckAndSetProto", reflect.TypeOf((*MockService)(nil).CheckAndSetProto), arg0, arg1)
}

// Proto mocks base method
func (_m *MockService) Proto() (proto.Message, int, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Proto indicates an expected call of Proto
func (_mr *MockServiceMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockService)(nil).Proto))
}

// PlacementForVersion mocks base method
func (_m *MockService) PlacementForVersion(version int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "PlacementForVersion", version)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlacementForVersion indicates an expected call of PlacementForVersion
func (_mr *MockServiceMockRecorder) PlacementForVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementForVersion", reflect.TypeOf((*MockService)(nil).PlacementForVersion), arg0)
}

// BuildInitialPlacement mocks base method
func (_m *MockService) BuildInitialPlacement(instances []Instance, numShards int, rf int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "BuildInitialPlacement", instances, numShards, rf)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildInitialPlacement indicates an expected call of BuildInitialPlacement
func (_mr *MockServiceMockRecorder) BuildInitialPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BuildInitialPlacement", reflect.TypeOf((*MockService)(nil).BuildInitialPlacement), arg0, arg1, arg2)
}

// AddReplica mocks base method
func (_m *MockService) AddReplica() (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddReplica")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReplica indicates an expected call of AddReplica
func (_mr *MockServiceMockRecorder) AddReplica() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddReplica", reflect.TypeOf((*MockService)(nil).AddReplica))
}

// AddInstances mocks base method
func (_m *MockService) AddInstances(candidates []Instance) (Placement, []Instance, error) {
	ret := _m.ctrl.Call(_m, "AddInstances", candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].([]Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddInstances indicates an expected call of AddInstances
func (_mr *MockServiceMockRecorder) AddInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddInstances", reflect.TypeOf((*MockService)(nil).AddInstances), arg0)
}

// RemoveInstances mocks base method
func (_m *MockService) RemoveInstances(leavingInstanceIDs []string) (Placement, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstances", leavingInstanceIDs)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInstances indicates an expected call of RemoveInstances
func (_mr *MockServiceMockRecorder) RemoveInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveInstances", reflect.TypeOf((*MockService)(nil).RemoveInstances), arg0)
}

// ReplaceInstances mocks base method
func (_m *MockService) ReplaceInstances(leavingInstanceIDs []string, candidates []Instance) (Placement, []Instance, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstances", leavingInstanceIDs, candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].([]Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceInstances indicates an expected call of ReplaceInstances
func (_mr *MockServiceMockRecorder) ReplaceInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReplaceInstances", reflect.TypeOf((*MockService)(nil).ReplaceInstances), arg0, arg1)
}

// MarkShardAvailable mocks base method
func (_m *MockService) MarkShardAvailable(instanceID string, shardID uint32) error {
	ret := _m.ctrl.Call(_m, "MarkShardAvailable", instanceID, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkShardAvailable indicates an expected call of MarkShardAvailable
func (_mr *MockServiceMockRecorder) MarkShardAvailable(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarkShardAvailable", reflect.TypeOf((*MockService)(nil).MarkShardAvailable), arg0, arg1)
}

// MarkAllShardsAvailable mocks base method
func (_m *MockService) MarkAllShardsAvailable() (Placement, error) {
	ret := _m.ctrl.Call(_m, "MarkAllShardsAvailable")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAllShardsAvailable indicates an expected call of MarkAllShardsAvailable
func (_mr *MockServiceMockRecorder) MarkAllShardsAvailable() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarkAllShardsAvailable", reflect.TypeOf((*MockService)(nil).MarkAllShardsAvailable))
}

// MarkInstanceAvailable mocks base method
func (_m *MockService) MarkInstanceAvailable(instanceID string) error {
	ret := _m.ctrl.Call(_m, "MarkInstanceAvailable", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInstanceAvailable indicates an expected call of MarkInstanceAvailable
func (_mr *MockServiceMockRecorder) MarkInstanceAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarkInstanceAvailable", reflect.TypeOf((*MockService)(nil).MarkInstanceAvailable), arg0)
}

// MockAlgorithm is a mock of Algorithm interface
type MockAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockAlgorithmMockRecorder
}

// MockAlgorithmMockRecorder is the mock recorder for MockAlgorithm
type MockAlgorithmMockRecorder struct {
	mock *MockAlgorithm
}

// NewMockAlgorithm creates a new mock instance
func NewMockAlgorithm(ctrl *gomock.Controller) *MockAlgorithm {
	mock := &MockAlgorithm{ctrl: ctrl}
	mock.recorder = &MockAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAlgorithm) EXPECT() *MockAlgorithmMockRecorder {
	return _m.recorder
}

// InitialPlacement mocks base method
func (_m *MockAlgorithm) InitialPlacement(instances []Instance, shards []uint32, rf int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "InitialPlacement", instances, shards, rf)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitialPlacement indicates an expected call of InitialPlacement
func (_mr *MockAlgorithmMockRecorder) InitialPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitialPlacement", reflect.TypeOf((*MockAlgorithm)(nil).InitialPlacement), arg0, arg1, arg2)
}

// AddReplica mocks base method
func (_m *MockAlgorithm) AddReplica(p Placement) (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddReplica", p)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReplica indicates an expected call of AddReplica
func (_mr *MockAlgorithmMockRecorder) AddReplica(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddReplica", reflect.TypeOf((*MockAlgorithm)(nil).AddReplica), arg0)
}

// AddInstances mocks base method
func (_m *MockAlgorithm) AddInstances(p Placement, instances []Instance) (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddInstances", p, instances)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstances indicates an expected call of AddInstances
func (_mr *MockAlgorithmMockRecorder) AddInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddInstances", reflect.TypeOf((*MockAlgorithm)(nil).AddInstances), arg0, arg1)
}

// RemoveInstances mocks base method
func (_m *MockAlgorithm) RemoveInstances(p Placement, leavingInstanceIDs []string) (Placement, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstances", p, leavingInstanceIDs)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInstances indicates an expected call of RemoveInstances
func (_mr *MockAlgorithmMockRecorder) RemoveInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveInstances", reflect.TypeOf((*MockAlgorithm)(nil).RemoveInstances), arg0, arg1)
}

// ReplaceInstances mocks base method
func (_m *MockAlgorithm) ReplaceInstances(p Placement, leavingInstanecIDs []string, addingInstances []Instance) (Placement, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstances", p, leavingInstanecIDs, addingInstances)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceInstances indicates an expected call of ReplaceInstances
func (_mr *MockAlgorithmMockRecorder) ReplaceInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReplaceInstances", reflect.TypeOf((*MockAlgorithm)(nil).ReplaceInstances), arg0, arg1, arg2)
}

// IsCompatibleWith mocks base method
func (_m *MockAlgorithm) IsCompatibleWith(p Placement) error {
	ret := _m.ctrl.Call(_m, "IsCompatibleWith", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCompatibleWith indicates an expected call of IsCompatibleWith
func (_mr *MockAlgorithmMockRecorder) IsCompatibleWith(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsCompatibleWith", reflect.TypeOf((*MockAlgorithm)(nil).IsCompatibleWith), arg0)
}

// MarkShardAvailable mocks base method
func (_m *MockAlgorithm) MarkShardAvailable(p Placement, instanceID string, shardID uint32) (Placement, error) {
	ret := _m.ctrl.Call(_m, "MarkShardAvailable", p, instanceID, shardID)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkShardAvailable indicates an expected call of MarkShardAvailable
func (_mr *MockAlgorithmMockRecorder) MarkShardAvailable(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarkShardAvailable", reflect.TypeOf((*MockAlgorithm)(nil).MarkShardAvailable), arg0, arg1, arg2)
}

// MarkAllShardsAvailable mocks base method
func (_m *MockAlgorithm) MarkAllShardsAvailable(p Placement) (Placement, bool, error) {
	ret := _m.ctrl.Call(_m, "MarkAllShardsAvailable", p)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MarkAllShardsAvailable indicates an expected call of MarkAllShardsAvailable
func (_mr *MockAlgorithmMockRecorder) MarkAllShardsAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarkAllShardsAvailable", reflect.TypeOf((*MockAlgorithm)(nil).MarkAllShardsAvailable), arg0)
}

// MockInstanceSelector is a mock of InstanceSelector interface
type MockInstanceSelector struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceSelectorMockRecorder
}

// MockInstanceSelectorMockRecorder is the mock recorder for MockInstanceSelector
type MockInstanceSelectorMockRecorder struct {
	mock *MockInstanceSelector
}

// NewMockInstanceSelector creates a new mock instance
func NewMockInstanceSelector(ctrl *gomock.Controller) *MockInstanceSelector {
	mock := &MockInstanceSelector{ctrl: ctrl}
	mock.recorder = &MockInstanceSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInstanceSelector) EXPECT() *MockInstanceSelectorMockRecorder {
	return _m.recorder
}

// SelectInitialInstances mocks base method
func (_m *MockInstanceSelector) SelectInitialInstances(candidates []Instance, rf int) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectInitialInstances", candidates, rf)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectInitialInstances indicates an expected call of SelectInitialInstances
func (_mr *MockInstanceSelectorMockRecorder) SelectInitialInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectInitialInstances", reflect.TypeOf((*MockInstanceSelector)(nil).SelectInitialInstances), arg0, arg1)
}

// SelectAddingInstances mocks base method
func (_m *MockInstanceSelector) SelectAddingInstances(candidates []Instance, p Placement) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectAddingInstances", candidates, p)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAddingInstances indicates an expected call of SelectAddingInstances
func (_mr *MockInstanceSelectorMockRecorder) SelectAddingInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectAddingInstances", reflect.TypeOf((*MockInstanceSelector)(nil).SelectAddingInstances), arg0, arg1)
}

// SelectReplaceInstances mocks base method
func (_m *MockInstanceSelector) SelectReplaceInstances(candidates []Instance, leavingInstanceIDs []string, p Placement) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "SelectReplaceInstances", candidates, leavingInstanceIDs, p)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectReplaceInstances indicates an expected call of SelectReplaceInstances
func (_mr *MockInstanceSelectorMockRecorder) SelectReplaceInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectReplaceInstances", reflect.TypeOf((*MockInstanceSelector)(nil).SelectReplaceInstances), arg0, arg1, arg2)
}

// MockDeploymentPlanner is a mock of DeploymentPlanner interface
type MockDeploymentPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentPlannerMockRecorder
}

// MockDeploymentPlannerMockRecorder is the mock recorder for MockDeploymentPlanner
type MockDeploymentPlannerMockRecorder struct {
	mock *MockDeploymentPlanner
}

// NewMockDeploymentPlanner creates a new mock instance
func NewMockDeploymentPlanner(ctrl *gomock.Controller) *MockDeploymentPlanner {
	mock := &MockDeploymentPlanner{ctrl: ctrl}
	mock.recorder = &MockDeploymentPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDeploymentPlanner) EXPECT() *MockDeploymentPlannerMockRecorder {
	return _m.recorder
}

// DeploymentSteps mocks base method
func (_m *MockDeploymentPlanner) DeploymentSteps(p Placement) [][]Instance {
	ret := _m.ctrl.Call(_m, "DeploymentSteps", p)
	ret0, _ := ret[0].([][]Instance)
	return ret0
}

// DeploymentSteps indicates an expected call of DeploymentSteps
func (_mr *MockDeploymentPlannerMockRecorder) DeploymentSteps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeploymentSteps", reflect.TypeOf((*MockDeploymentPlanner)(nil).DeploymentSteps), arg0)
}

// MockDeploymentOptions is a mock of DeploymentOptions interface
type MockDeploymentOptions struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentOptionsMockRecorder
}

// MockDeploymentOptionsMockRecorder is the mock recorder for MockDeploymentOptions
type MockDeploymentOptionsMockRecorder struct {
	mock *MockDeploymentOptions
}

// NewMockDeploymentOptions creates a new mock instance
func NewMockDeploymentOptions(ctrl *gomock.Controller) *MockDeploymentOptions {
	mock := &MockDeploymentOptions{ctrl: ctrl}
	mock.recorder = &MockDeploymentOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDeploymentOptions) EXPECT() *MockDeploymentOptionsMockRecorder {
	return _m.recorder
}

// MaxStepSize mocks base method
func (_m *MockDeploymentOptions) MaxStepSize() int {
	ret := _m.ctrl.Call(_m, "MaxStepSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxStepSize indicates an expected call of MaxStepSize
func (_mr *MockDeploymentOptionsMockRecorder) MaxStepSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MaxStepSize", reflect.TypeOf((*MockDeploymentOptions)(nil).MaxStepSize))
}

// SetMaxStepSize mocks base method
func (_m *MockDeploymentOptions) SetMaxStepSize(stepSize int) DeploymentOptions {
	ret := _m.ctrl.Call(_m, "SetMaxStepSize", stepSize)
	ret0, _ := ret[0].(DeploymentOptions)
	return ret0
}

// SetMaxStepSize indicates an expected call of SetMaxStepSize
func (_mr *MockDeploymentOptionsMockRecorder) SetMaxStepSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMaxStepSize", reflect.TypeOf((*MockDeploymentOptions)(nil).SetMaxStepSize), arg0)
}
