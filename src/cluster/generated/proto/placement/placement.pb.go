// Code generated by protoc-gen-go.
// source: placement.proto
// DO NOT EDIT!

/*
Package placement is a generated protocol buffer package.

It is generated from these files:
	placement.proto

It has these top-level messages:
	Placement
	Instance
	Shard
*/
package placement

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardState int32

const (
	ShardState_Initializing ShardState = 0
	ShardState_Available    ShardState = 1
	ShardState_Leaving      ShardState = 2
)

var ShardState_name = map[int32]string{
	0: "Initializing",
	1: "Available",
	2: "Leaving",
}
var ShardState_value = map[string]int32{
	"Initializing": 0,
	"Available":    1,
	"Leaving":      2,
}

func (x ShardState) String() string {
	return proto.EnumName(ShardState_name, int32(x))
}
func (ShardState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Placement struct {
	Instances     map[string]*Instance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaFactor uint32               `protobuf:"varint,2,opt,name=replica_factor,json=replicaFactor" json:"replica_factor,omitempty"`
	NumShards     uint32               `protobuf:"varint,3,opt,name=num_shards,json=numShards" json:"num_shards,omitempty"`
	IsSharded     bool                 `protobuf:"varint,4,opt,name=is_sharded,json=isSharded" json:"is_sharded,omitempty"`
}

func (m *Placement) Reset()                    { *m = Placement{} }
func (m *Placement) String() string            { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()               {}
func (*Placement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Placement) GetInstances() map[string]*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type Instance struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rack     string   `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	Zone     string   `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Weight   uint32   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
	Endpoint string   `protobuf:"bytes,5,opt,name=endpoint" json:"endpoint,omitempty"`
	Shards   []*Shard `protobuf:"bytes,6,rep,name=shards" json:"shards,omitempty"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Instance) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type Shard struct {
	Id       uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State    ShardState `protobuf:"varint,2,opt,name=state,enum=placement.ShardState" json:"state,omitempty"`
	SourceId string     `protobuf:"bytes,3,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Placement)(nil), "placement.placement")
	proto.RegisterType((*Instance)(nil), "placement.instance")
	proto.RegisterType((*Shard)(nil), "placement.shard")
	proto.RegisterEnum("placement.ShardState", ShardState_name, ShardState_value)
}

func init() { proto.RegisterFile("placement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x92, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x86, 0x9d, 0x6c, 0x13, 0x33, 0x27, 0x26, 0x86, 0x23, 0x94, 0x50, 0x11, 0xc2, 0x8a, 0x10,
	0x45, 0x7a, 0xb1, 0xde, 0x88, 0x5e, 0xf5, 0x42, 0x61, 0xc1, 0x1b, 0xa7, 0x0f, 0x10, 0x66, 0x93,
	0xb1, 0x1d, 0x9a, 0x9d, 0x84, 0xcc, 0x64, 0xa5, 0x7d, 0x00, 0x9f, 0xc3, 0x47, 0x95, 0x9c, 0x64,
	0xb7, 0xb1, 0x77, 0xff, 0xf9, 0xff, 0xff, 0x9c, 0xfd, 0x76, 0x08, 0xbc, 0xec, 0x1a, 0x59, 0xa9,
	0xbd, 0x32, 0xee, 0xb2, 0xeb, 0x5b, 0xd7, 0x22, 0x3f, 0x19, 0xeb, 0x3f, 0x1e, 0x3c, 0x4e, 0x78,
	0x05, 0x5c, 0x1b, 0xeb, 0xa4, 0xa9, 0x94, 0xcd, 0x58, 0xbe, 0x2a, 0xa2, 0xcd, 0xdb, 0xcb, 0xc5,
	0xf6, 0x49, 0x6d, 0x8f, 0xad, 0x6f, 0xc6, 0xf5, 0xf7, 0xe2, 0x71, 0x0b, 0xdf, 0x41, 0xd2, 0xab,
	0xae, 0xd1, 0x95, 0x2c, 0x7f, 0xc9, 0xca, 0xb5, 0x7d, 0xe6, 0xe5, 0xac, 0x88, 0x45, 0x3c, 0xbb,
	0xdf, 0xc9, 0xc4, 0x37, 0x00, 0x66, 0xd8, 0x97, 0xf6, 0x56, 0xf6, 0xb5, 0xcd, 0x56, 0x54, 0xe1,
	0x66, 0xd8, 0x5f, 0x93, 0x31, 0xc6, 0xda, 0x4e, 0xa9, 0xaa, 0xb3, 0xb3, 0x9c, 0x15, 0xa1, 0xe0,
	0xda, 0x5e, 0x4f, 0xc6, 0xc5, 0x4f, 0x48, 0xfe, 0x27, 0xc0, 0x14, 0x56, 0x77, 0xea, 0x3e, 0x63,
	0x39, 0x2b, 0xb8, 0x18, 0x25, 0xbe, 0x07, 0xff, 0x20, 0x9b, 0x41, 0xd1, 0xef, 0x47, 0x9b, 0x57,
	0x0b, 0xfa, 0x23, 0xad, 0x98, 0x1a, 0x5f, 0xbc, 0xcf, 0x6c, 0xfd, 0x97, 0x41, 0x78, 0xf4, 0x31,
	0x01, 0x4f, 0xd7, 0xf3, 0x31, 0x4f, 0xd7, 0x88, 0x70, 0xd6, 0xcb, 0xea, 0x8e, 0x4e, 0x71, 0x41,
	0x7a, 0xf4, 0x1e, 0x5a, 0xa3, 0x88, 0x9d, 0x0b, 0xd2, 0x78, 0x0e, 0xc1, 0x6f, 0xa5, 0x6f, 0x6e,
	0x1d, 0x21, 0xc7, 0x62, 0x9e, 0xf0, 0x02, 0x42, 0x65, 0xea, 0xae, 0xd5, 0xc6, 0x65, 0x3e, 0xf5,
	0x4f, 0x33, 0x16, 0x10, 0xcc, 0xaf, 0x10, 0xd0, 0x83, 0xa7, 0x0b, 0x50, 0x0a, 0xc4, 0x9c, 0xaf,
	0x77, 0xe0, 0x93, 0x5a, 0xe0, 0xc5, 0x84, 0xf7, 0x11, 0x7c, 0xeb, 0xa4, 0x9b, 0xfe, 0x6a, 0xb2,
	0x39, 0x7f, 0x7a, 0xa1, 0xa4, 0x54, 0x4c, 0x25, 0x7c, 0x0d, 0xdc, 0xb6, 0x43, 0x5f, 0xa9, 0x52,
	0xd7, 0x33, 0x7d, 0x38, 0x19, 0xdb, 0xfa, 0xc3, 0x57, 0x88, 0x16, 0x2b, 0x98, 0xc2, 0x8b, 0xad,
	0xd1, 0x4e, 0xcb, 0x46, 0x3f, 0x68, 0x73, 0x93, 0x3e, 0xc3, 0x18, 0xf8, 0xd5, 0x41, 0xea, 0x46,
	0xee, 0x1a, 0x95, 0x32, 0x8c, 0xe0, 0xf9, 0x0f, 0x25, 0x0f, 0x63, 0xe6, 0xed, 0x02, 0xfa, 0xbc,
	0x3e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x79, 0x32, 0xb3, 0x57, 0x71, 0x02, 0x00, 0x00,
}
