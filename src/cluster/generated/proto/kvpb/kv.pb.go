// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/cluster/generated/proto/kvpb/kv.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package kvpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyValueUpdate struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Commit bool   `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *KeyValueUpdate) Reset()         { *m = KeyValueUpdate{} }
func (m *KeyValueUpdate) String() string { return proto.CompactTextString(m) }
func (*KeyValueUpdate) ProtoMessage()    {}
func (*KeyValueUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af26b26e1fde094, []int{0}
}
func (m *KeyValueUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueUpdate.Merge(m, src)
}
func (m *KeyValueUpdate) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueUpdate proto.InternalMessageInfo

func (m *KeyValueUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueUpdate) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KeyValueUpdate) GetCommit() bool {
	if m != nil {
		return m.Commit
	}
	return false
}

type KeyValueUpdateResult struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Old string `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	New string `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *KeyValueUpdateResult) Reset()         { *m = KeyValueUpdateResult{} }
func (m *KeyValueUpdateResult) String() string { return proto.CompactTextString(m) }
func (*KeyValueUpdateResult) ProtoMessage()    {}
func (*KeyValueUpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af26b26e1fde094, []int{1}
}
func (m *KeyValueUpdateResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueUpdateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueUpdateResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueUpdateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueUpdateResult.Merge(m, src)
}
func (m *KeyValueUpdateResult) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueUpdateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueUpdateResult.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueUpdateResult proto.InternalMessageInfo

func (m *KeyValueUpdateResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueUpdateResult) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *KeyValueUpdateResult) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

type QueryLimits struct {
	MaxRecentlyQueriedSeriesBlocks        *QueryLimit `protobuf:"bytes,1,opt,name=maxRecentlyQueriedSeriesBlocks,proto3" json:"maxRecentlyQueriedSeriesBlocks,omitempty"`
	MaxRecentlyQueriedSeriesDiskBytesRead *QueryLimit `protobuf:"bytes,2,opt,name=maxRecentlyQueriedSeriesDiskBytesRead,proto3" json:"maxRecentlyQueriedSeriesDiskBytesRead,omitempty"`
	MaxRecentlyQueriedSeriesDiskRead      *QueryLimit `protobuf:"bytes,3,opt,name=maxRecentlyQueriedSeriesDiskRead,proto3" json:"maxRecentlyQueriedSeriesDiskRead,omitempty"`
	MaxRecentlyQueriedMetadataRead        *QueryLimit `protobuf:"bytes,4,opt,name=maxRecentlyQueriedMetadataRead,proto3" json:"maxRecentlyQueriedMetadataRead,omitempty"`
}

func (m *QueryLimits) Reset()         { *m = QueryLimits{} }
func (m *QueryLimits) String() string { return proto.CompactTextString(m) }
func (*QueryLimits) ProtoMessage()    {}
func (*QueryLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af26b26e1fde094, []int{2}
}
func (m *QueryLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLimits.Merge(m, src)
}
func (m *QueryLimits) XXX_Size() int {
	return m.Size()
}
func (m *QueryLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLimits.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLimits proto.InternalMessageInfo

func (m *QueryLimits) GetMaxRecentlyQueriedSeriesBlocks() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedSeriesBlocks
	}
	return nil
}

func (m *QueryLimits) GetMaxRecentlyQueriedSeriesDiskBytesRead() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedSeriesDiskBytesRead
	}
	return nil
}

func (m *QueryLimits) GetMaxRecentlyQueriedSeriesDiskRead() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedSeriesDiskRead
	}
	return nil
}

func (m *QueryLimits) GetMaxRecentlyQueriedMetadataRead() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedMetadataRead
	}
	return nil
}

type QueryLimit struct {
	Limit           int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	LookbackSeconds int64 `protobuf:"varint,2,opt,name=lookbackSeconds,proto3" json:"lookbackSeconds,omitempty"`
	ForceExceeded   bool  `protobuf:"varint,3,opt,name=forceExceeded,proto3" json:"forceExceeded,omitempty"`
	ForceWaited     bool  `protobuf:"varint,4,opt,name=forceWaited,proto3" json:"forceWaited,omitempty"`
}

func (m *QueryLimit) Reset()         { *m = QueryLimit{} }
func (m *QueryLimit) String() string { return proto.CompactTextString(m) }
func (*QueryLimit) ProtoMessage()    {}
func (*QueryLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af26b26e1fde094, []int{3}
}
func (m *QueryLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLimit.Merge(m, src)
}
func (m *QueryLimit) XXX_Size() int {
	return m.Size()
}
func (m *QueryLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLimit.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLimit proto.InternalMessageInfo

func (m *QueryLimit) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryLimit) GetLookbackSeconds() int64 {
	if m != nil {
		return m.LookbackSeconds
	}
	return 0
}

func (m *QueryLimit) GetForceExceeded() bool {
	if m != nil {
		return m.ForceExceeded
	}
	return false
}

func (m *QueryLimit) GetForceWaited() bool {
	if m != nil {
		return m.ForceWaited
	}
	return false
}

func init() {
	proto.RegisterType((*KeyValueUpdate)(nil), "kvpb.KeyValueUpdate")
	proto.RegisterType((*KeyValueUpdateResult)(nil), "kvpb.KeyValueUpdateResult")
	proto.RegisterType((*QueryLimits)(nil), "kvpb.QueryLimits")
	proto.RegisterType((*QueryLimit)(nil), "kvpb.QueryLimit")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/cluster/generated/proto/kvpb/kv.proto", fileDescriptor_2af26b26e1fde094)
}

var fileDescriptor_2af26b26e1fde094 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0x8d, 0xf1, 0x71, 0xba, 0x9b, 0x08, 0x88, 0x56, 0x27, 0xe4, 0xca, 0xb2, 0x2c, 0x90, 0x52,
	0x79, 0x25, 0xd2, 0x52, 0x45, 0x50, 0x71, 0x48, 0xb0, 0x27, 0x3e, 0x0a, 0x9a, 0xf5, 0xee, 0xdc,
	0x61, 0x79, 0xed, 0x8d, 0xbc, 0xeb, 0x70, 0xfe, 0x05, 0xb4, 0x14, 0xfc, 0x28, 0xca, 0x94, 0x94,
	0x28, 0xf9, 0x23, 0x68, 0xd7, 0x91, 0x92, 0xa0, 0x84, 0xa4, 0xb1, 0xe6, 0x3d, 0xcf, 0x7b, 0x33,
	0xfb, 0x34, 0xf0, 0xf2, 0xae, 0xb0, 0x5f, 0xdb, 0x3c, 0x13, 0xba, 0xa2, 0xd5, 0x44, 0xe6, 0xb4,
	0x9a, 0x50, 0xd3, 0x08, 0x2a, 0x54, 0x6b, 0x2c, 0x36, 0xf4, 0x0e, 0x6b, 0x6c, 0xb8, 0x45, 0x49,
	0x67, 0x8d, 0xb6, 0x9a, 0x96, 0xf3, 0x59, 0x4e, 0xcb, 0x79, 0xe6, 0x11, 0x39, 0x73, 0x30, 0x7d,
	0x07, 0x8f, 0xdf, 0x60, 0xf7, 0x91, 0xab, 0x16, 0x3f, 0xcc, 0x24, 0xb7, 0x48, 0x46, 0x10, 0x96,
	0xd8, 0x45, 0x41, 0x12, 0x8c, 0x2f, 0x99, 0x2b, 0xc9, 0x15, 0x3c, 0x9c, 0xbb, 0x86, 0xe8, 0x81,
	0xe7, 0x7a, 0x40, 0x9e, 0xc2, 0xb9, 0xd0, 0x55, 0x55, 0xd8, 0x28, 0x4c, 0x82, 0xf1, 0x05, 0x5b,
	0xa3, 0xf4, 0x1a, 0xae, 0x76, 0x1d, 0x19, 0x9a, 0x56, 0xd9, 0x3d, 0xbe, 0x23, 0x08, 0xb5, 0x92,
	0x6b, 0x57, 0x57, 0x3a, 0xa6, 0xc6, 0x6f, 0xde, 0xf0, 0x92, 0xb9, 0x32, 0xfd, 0x1e, 0xc2, 0xf0,
	0x7d, 0x8b, 0x4d, 0x77, 0x5d, 0x54, 0x85, 0x35, 0xe4, 0x33, 0xc4, 0x15, 0xbf, 0x67, 0x28, 0xb0,
	0xb6, 0xaa, 0x73, 0x7f, 0x0a, 0x94, 0x37, 0xee, 0x6b, 0xa6, 0x4a, 0x8b, 0xd2, 0xf8, 0x01, 0xc3,
	0x17, 0xa3, 0xcc, 0x3d, 0x2f, 0xdb, 0x48, 0xd9, 0x11, 0x1d, 0xb9, 0x85, 0xe7, 0x87, 0x3a, 0x5e,
	0x15, 0xa6, 0x9c, 0x76, 0x16, 0x0d, 0x43, 0xde, 0xef, 0xbb, 0x6f, 0xc0, 0x69, 0x72, 0xf2, 0x05,
	0x92, 0xff, 0x35, 0xfa, 0x11, 0xe1, 0x81, 0x11, 0x47, 0x95, 0xfb, 0xf3, 0x79, 0x8b, 0x96, 0x4b,
	0x6e, 0xb9, 0xf7, 0x3e, 0x3b, 0x3d, 0x9f, 0x6d, 0x5d, 0xfa, 0x33, 0x00, 0xd8, 0xb4, 0xbb, 0xa3,
	0x50, 0xae, 0xf0, 0x79, 0x87, 0xac, 0x07, 0x64, 0x0c, 0x4f, 0x94, 0xd6, 0x65, 0xce, 0x45, 0x79,
	0x83, 0x42, 0xd7, 0xd2, 0xf8, 0xb8, 0x42, 0xf6, 0x2f, 0x4d, 0x9e, 0xc1, 0xa3, 0x5b, 0xdd, 0x08,
	0x7c, 0x7d, 0x2f, 0x10, 0x25, 0xca, 0xf5, 0x15, 0xed, 0x92, 0x24, 0x81, 0xa1, 0x27, 0x3e, 0xf1,
	0xc2, 0x62, 0xbf, 0xfb, 0x05, 0xdb, 0xa6, 0xa6, 0xd1, 0xaf, 0x65, 0x1c, 0x2c, 0x96, 0x71, 0xf0,
	0x67, 0x19, 0x07, 0x3f, 0x56, 0xf1, 0x60, 0xb1, 0x8a, 0x07, 0xbf, 0x57, 0xf1, 0x20, 0x3f, 0xf7,
	0x77, 0x3e, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xaf, 0x8e, 0xa0, 0x27, 0x03, 0x00, 0x00,
}

func (m *KeyValueUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commit {
		i--
		if m.Commit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintKv(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintKv(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueUpdateResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.New) > 0 {
		i -= len(m.New)
		copy(dAtA[i:], m.New)
		i = encodeVarintKv(dAtA, i, uint64(len(m.New)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Old) > 0 {
		i -= len(m.Old)
		copy(dAtA[i:], m.Old)
		i = encodeVarintKv(dAtA, i, uint64(len(m.Old)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintKv(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRecentlyQueriedMetadataRead != nil {
		{
			size, err := m.MaxRecentlyQueriedMetadataRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxRecentlyQueriedSeriesDiskRead != nil {
		{
			size, err := m.MaxRecentlyQueriedSeriesDiskRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxRecentlyQueriedSeriesDiskBytesRead != nil {
		{
			size, err := m.MaxRecentlyQueriedSeriesDiskBytesRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MaxRecentlyQueriedSeriesBlocks != nil {
		{
			size, err := m.MaxRecentlyQueriedSeriesBlocks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceWaited {
		i--
		if m.ForceWaited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ForceExceeded {
		i--
		if m.ForceExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LookbackSeconds != 0 {
		i = encodeVarintKv(dAtA, i, uint64(m.LookbackSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintKv(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKv(dAtA []byte, offset int, v uint64) int {
	offset -= sovKv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyValueUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	if m.Commit {
		n += 2
	}
	return n
}

func (m *KeyValueUpdateResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	return n
}

func (m *QueryLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRecentlyQueriedSeriesBlocks != nil {
		l = m.MaxRecentlyQueriedSeriesBlocks.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	if m.MaxRecentlyQueriedSeriesDiskBytesRead != nil {
		l = m.MaxRecentlyQueriedSeriesDiskBytesRead.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	if m.MaxRecentlyQueriedSeriesDiskRead != nil {
		l = m.MaxRecentlyQueriedSeriesDiskRead.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	if m.MaxRecentlyQueriedMetadataRead != nil {
		l = m.MaxRecentlyQueriedMetadataRead.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	return n
}

func (m *QueryLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovKv(uint64(m.Limit))
	}
	if m.LookbackSeconds != 0 {
		n += 1 + sovKv(uint64(m.LookbackSeconds))
	}
	if m.ForceExceeded {
		n += 2
	}
	if m.ForceWaited {
		n += 2
	}
	return n
}

func sovKv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKv(x uint64) (n int) {
	return sovKv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyValueUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedSeriesBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedSeriesBlocks == nil {
				m.MaxRecentlyQueriedSeriesBlocks = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedSeriesBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedSeriesDiskBytesRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedSeriesDiskBytesRead == nil {
				m.MaxRecentlyQueriedSeriesDiskBytesRead = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedSeriesDiskBytesRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedSeriesDiskRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedSeriesDiskRead == nil {
				m.MaxRecentlyQueriedSeriesDiskRead = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedSeriesDiskRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedMetadataRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedMetadataRead == nil {
				m.MaxRecentlyQueriedMetadataRead = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedMetadataRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookbackSeconds", wireType)
			}
			m.LookbackSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookbackSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceExceeded = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceWaited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceWaited = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKv = fmt.Errorf("proto: unexpected end of group")
)
