// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/cluster/generated/proto/kvpb/kv.proto

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package kvpb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/cluster/generated/proto/kvpb/kv.proto

	It has these top-level messages:
		KeyValueUpdate
		KeyValueUpdateResult
		QueryLimits
		QueryLimit
*/
package kvpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KeyValueUpdate struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Commit bool   `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *KeyValueUpdate) Reset()                    { *m = KeyValueUpdate{} }
func (m *KeyValueUpdate) String() string            { return proto.CompactTextString(m) }
func (*KeyValueUpdate) ProtoMessage()               {}
func (*KeyValueUpdate) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{0} }

func (m *KeyValueUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueUpdate) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KeyValueUpdate) GetCommit() bool {
	if m != nil {
		return m.Commit
	}
	return false
}

type KeyValueUpdateResult struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Old string `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	New string `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *KeyValueUpdateResult) Reset()                    { *m = KeyValueUpdateResult{} }
func (m *KeyValueUpdateResult) String() string            { return proto.CompactTextString(m) }
func (*KeyValueUpdateResult) ProtoMessage()               {}
func (*KeyValueUpdateResult) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{1} }

func (m *KeyValueUpdateResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueUpdateResult) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *KeyValueUpdateResult) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

type QueryLimits struct {
	MaxRecentlyQueriedSeriesBlocks        *QueryLimit `protobuf:"bytes,1,opt,name=maxRecentlyQueriedSeriesBlocks" json:"maxRecentlyQueriedSeriesBlocks,omitempty"`
	MaxRecentlyQueriedSeriesDiskBytesRead *QueryLimit `protobuf:"bytes,2,opt,name=maxRecentlyQueriedSeriesDiskBytesRead" json:"maxRecentlyQueriedSeriesDiskBytesRead,omitempty"`
}

func (m *QueryLimits) Reset()                    { *m = QueryLimits{} }
func (m *QueryLimits) String() string            { return proto.CompactTextString(m) }
func (*QueryLimits) ProtoMessage()               {}
func (*QueryLimits) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{2} }

func (m *QueryLimits) GetMaxRecentlyQueriedSeriesBlocks() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedSeriesBlocks
	}
	return nil
}

func (m *QueryLimits) GetMaxRecentlyQueriedSeriesDiskBytesRead() *QueryLimit {
	if m != nil {
		return m.MaxRecentlyQueriedSeriesDiskBytesRead
	}
	return nil
}

type QueryLimit struct {
	Limit           int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	LookbackSeconds int64 `protobuf:"varint,2,opt,name=lookbackSeconds,proto3" json:"lookbackSeconds,omitempty"`
	ForceExceeded   bool  `protobuf:"varint,3,opt,name=forceExceeded,proto3" json:"forceExceeded,omitempty"`
}

func (m *QueryLimit) Reset()                    { *m = QueryLimit{} }
func (m *QueryLimit) String() string            { return proto.CompactTextString(m) }
func (*QueryLimit) ProtoMessage()               {}
func (*QueryLimit) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{3} }

func (m *QueryLimit) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryLimit) GetLookbackSeconds() int64 {
	if m != nil {
		return m.LookbackSeconds
	}
	return 0
}

func (m *QueryLimit) GetForceExceeded() bool {
	if m != nil {
		return m.ForceExceeded
	}
	return false
}

func init() {
	proto.RegisterType((*KeyValueUpdate)(nil), "kvpb.KeyValueUpdate")
	proto.RegisterType((*KeyValueUpdateResult)(nil), "kvpb.KeyValueUpdateResult")
	proto.RegisterType((*QueryLimits)(nil), "kvpb.QueryLimits")
	proto.RegisterType((*QueryLimit)(nil), "kvpb.QueryLimit")
}
func (m *KeyValueUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKv(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKv(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Commit {
		dAtA[i] = 0x18
		i++
		if m.Commit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KeyValueUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKv(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Old) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKv(dAtA, i, uint64(len(m.Old)))
		i += copy(dAtA[i:], m.Old)
	}
	if len(m.New) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKv(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	return i, nil
}

func (m *QueryLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxRecentlyQueriedSeriesBlocks != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKv(dAtA, i, uint64(m.MaxRecentlyQueriedSeriesBlocks.Size()))
		n1, err := m.MaxRecentlyQueriedSeriesBlocks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MaxRecentlyQueriedSeriesDiskBytesRead != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKv(dAtA, i, uint64(m.MaxRecentlyQueriedSeriesDiskBytesRead.Size()))
		n2, err := m.MaxRecentlyQueriedSeriesDiskBytesRead.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *QueryLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKv(dAtA, i, uint64(m.Limit))
	}
	if m.LookbackSeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKv(dAtA, i, uint64(m.LookbackSeconds))
	}
	if m.ForceExceeded {
		dAtA[i] = 0x18
		i++
		if m.ForceExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintKv(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KeyValueUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	if m.Commit {
		n += 2
	}
	return n
}

func (m *KeyValueUpdateResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovKv(uint64(l))
	}
	return n
}

func (m *QueryLimits) Size() (n int) {
	var l int
	_ = l
	if m.MaxRecentlyQueriedSeriesBlocks != nil {
		l = m.MaxRecentlyQueriedSeriesBlocks.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	if m.MaxRecentlyQueriedSeriesDiskBytesRead != nil {
		l = m.MaxRecentlyQueriedSeriesDiskBytesRead.Size()
		n += 1 + l + sovKv(uint64(l))
	}
	return n
}

func (m *QueryLimit) Size() (n int) {
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovKv(uint64(m.Limit))
	}
	if m.LookbackSeconds != 0 {
		n += 1 + sovKv(uint64(m.LookbackSeconds))
	}
	if m.ForceExceeded {
		n += 2
	}
	return n
}

func sovKv(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKv(x uint64) (n int) {
	return sovKv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyValueUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedSeriesBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedSeriesBlocks == nil {
				m.MaxRecentlyQueriedSeriesBlocks = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedSeriesBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecentlyQueriedSeriesDiskBytesRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRecentlyQueriedSeriesDiskBytesRead == nil {
				m.MaxRecentlyQueriedSeriesDiskBytesRead = &QueryLimit{}
			}
			if err := m.MaxRecentlyQueriedSeriesDiskBytesRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookbackSeconds", wireType)
			}
			m.LookbackSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookbackSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceExceeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKv
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKv
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKv(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKv = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKv   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/cluster/generated/proto/kvpb/kv.proto", fileDescriptorKv)
}

var fileDescriptorKv = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xf2, 0xa5, 0x96, 0xf6, 0x16, 0x35, 0x0c, 0x45, 0xba, 0x0a, 0x25, 0x28, 0x74, 0x95,
	0x01, 0xbb, 0x75, 0x55, 0x74, 0xa3, 0x5d, 0xe8, 0x14, 0xc5, 0x6d, 0x32, 0x73, 0x5b, 0x43, 0x26,
	0x99, 0x92, 0x99, 0xd4, 0xe6, 0x2d, 0x7c, 0x2c, 0x97, 0x6e, 0xdc, 0x4b, 0x7d, 0x11, 0x99, 0xb4,
	0x50, 0x2a, 0x15, 0xdd, 0x0c, 0xe7, 0x9c, 0xb9, 0xe7, 0xdc, 0x3b, 0x3f, 0x70, 0x31, 0x4b, 0xcc,
	0x53, 0x19, 0x87, 0x5c, 0x65, 0x34, 0x1b, 0x8a, 0x98, 0x66, 0x43, 0xaa, 0x0b, 0x4e, 0xb9, 0x2c,
	0xb5, 0xc1, 0x82, 0xce, 0x30, 0xc7, 0x22, 0x32, 0x28, 0xe8, 0xbc, 0x50, 0x46, 0xd1, 0x74, 0x31,
	0x8f, 0x69, 0xba, 0x08, 0x6b, 0x46, 0x1a, 0x96, 0x06, 0xb7, 0x70, 0x74, 0x83, 0xd5, 0x43, 0x24,
	0x4b, 0xbc, 0x9f, 0x8b, 0xc8, 0x20, 0xf1, 0xc0, 0x4d, 0xb1, 0xea, 0x39, 0x7d, 0x67, 0xd0, 0x66,
	0x16, 0x92, 0x2e, 0x1c, 0x2c, 0x6c, 0x41, 0xef, 0x7f, 0xad, 0xad, 0x09, 0x39, 0x81, 0x26, 0x57,
	0x59, 0x96, 0x98, 0x9e, 0xdb, 0x77, 0x06, 0x2d, 0xb6, 0x61, 0xc1, 0x18, 0xba, 0xbb, 0x89, 0x0c,
	0x75, 0x29, 0xcd, 0x9e, 0x5c, 0x0f, 0x5c, 0x25, 0xc5, 0x26, 0xd5, 0x42, 0xab, 0xe4, 0xf8, 0x5c,
	0x07, 0xb6, 0x99, 0x85, 0xc1, 0xbb, 0x03, 0x9d, 0xbb, 0x12, 0x8b, 0x6a, 0x9c, 0x64, 0x89, 0xd1,
	0xe4, 0x11, 0xfc, 0x2c, 0x5a, 0x32, 0xe4, 0x98, 0x1b, 0x59, 0xd9, 0x9d, 0x04, 0xc5, 0xc4, 0xae,
	0x7a, 0x24, 0x15, 0x4f, 0x75, 0xdd, 0xa0, 0x73, 0xee, 0x85, 0xf6, 0x78, 0xe1, 0xd6, 0xca, 0x7e,
	0xf1, 0x91, 0x29, 0x9c, 0xfd, 0x54, 0x71, 0x99, 0xe8, 0x74, 0x54, 0x19, 0xd4, 0x0c, 0xa3, 0xf5,
	0xbc, 0xfb, 0x1a, 0xfc, 0xcd, 0x7e, 0xdd, 0x68, 0xb9, 0x5e, 0x23, 0x28, 0x00, 0xb6, 0x56, 0x7b,
	0xc3, 0xd2, 0x82, 0x7a, 0x78, 0x97, 0xad, 0x09, 0x19, 0xc0, 0xb1, 0x54, 0x2a, 0x8d, 0x23, 0x9e,
	0x4e, 0x90, 0xab, 0x5c, 0xe8, 0xba, 0xb7, 0xcb, 0xbe, 0xcb, 0xe4, 0x14, 0x0e, 0xa7, 0xaa, 0xe0,
	0x78, 0xb5, 0xe4, 0x88, 0x02, 0xc5, 0xe6, 0x49, 0x76, 0xc5, 0x91, 0xf7, 0xba, 0xf2, 0x9d, 0xb7,
	0x95, 0xef, 0x7c, 0xac, 0x7c, 0xe7, 0xe5, 0xd3, 0xff, 0x17, 0x37, 0xeb, 0xaf, 0x30, 0xfc, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0xc6, 0xa2, 0x4e, 0x4a, 0x02, 0x00, 0x00,
}
