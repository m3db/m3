// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: placement.proto
// DO NOT EDIT!

/*
Package placementpb is a generated protocol buffer package.

It is generated from these files:
	placement.proto

It has these top-level messages:
	Placement
	Instance
	Shard
	PlacementSnapshots
*/
package placementpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardState int32

const (
	ShardState_INITIALIZING ShardState = 0
	ShardState_AVAILABLE    ShardState = 1
	ShardState_LEAVING      ShardState = 2
)

var ShardState_name = map[int32]string{
	0: "INITIALIZING",
	1: "AVAILABLE",
	2: "LEAVING",
}
var ShardState_value = map[string]int32{
	"INITIALIZING": 0,
	"AVAILABLE":    1,
	"LEAVING":      2,
}

func (x ShardState) String() string {
	return proto.EnumName(ShardState_name, int32(x))
}
func (ShardState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Placement struct {
	Instances     map[string]*Instance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaFactor uint32               `protobuf:"varint,2,opt,name=replica_factor,json=replicaFactor" json:"replica_factor,omitempty"`
	NumShards     uint32               `protobuf:"varint,3,opt,name=num_shards,json=numShards" json:"num_shards,omitempty"`
	IsSharded     bool                 `protobuf:"varint,4,opt,name=is_sharded,json=isSharded" json:"is_sharded,omitempty"`
	// cutover_time is the placement-level cutover time and determines when the clients
	// watching the placement deems the placement as "in effect" and can use it to determine
	// shard placement.
	CutoverTime int64 `protobuf:"varint,5,opt,name=cutover_time,json=cutoverTime" json:"cutover_time,omitempty"`
	IsMirrored  bool  `protobuf:"varint,6,opt,name=is_mirrored,json=isMirrored" json:"is_mirrored,omitempty"`
}

func (m *Placement) Reset()                    { *m = Placement{} }
func (m *Placement) String() string            { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()               {}
func (*Placement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Placement) GetInstances() map[string]*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type Instance struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rack       string   `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	Zone       string   `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Weight     uint32   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
	Endpoint   string   `protobuf:"bytes,5,opt,name=endpoint" json:"endpoint,omitempty"`
	Shards     []*Shard `protobuf:"bytes,6,rep,name=shards" json:"shards,omitempty"`
	ShardSetId uint32   `protobuf:"varint,7,opt,name=shard_set_id,json=shardSetId" json:"shard_set_id,omitempty"`
	Hostname   string   `protobuf:"bytes,8,opt,name=hostname" json:"hostname,omitempty"`
	Port       uint32   `protobuf:"varint,9,opt,name=port" json:"port,omitempty"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Instance) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type Shard struct {
	Id       uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State    ShardState `protobuf:"varint,2,opt,name=state,enum=placementpb.ShardState" json:"state,omitempty"`
	SourceId string     `protobuf:"bytes,3,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// Shard-level cutover and cutoff times determine when the shards have been cut over or
	// cut off from the source instance to the destination instance. The placement-level
	// cutover times are usually (but not required to be) earlier than shard-level cutover
	// times if the clients watching the placement need to send traffic to the shards before
	// they are ready to cut over or after they are ready to cut off (e.g., for warmup purposes).
	CutoverNanos int64 `protobuf:"varint,4,opt,name=cutover_nanos,json=cutoverNanos" json:"cutover_nanos,omitempty"`
	CutoffNanos  int64 `protobuf:"varint,5,opt,name=cutoff_nanos,json=cutoffNanos" json:"cutoff_nanos,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PlacementSnapshots struct {
	Snapshots []*Placement `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *PlacementSnapshots) Reset()                    { *m = PlacementSnapshots{} }
func (m *PlacementSnapshots) String() string            { return proto.CompactTextString(m) }
func (*PlacementSnapshots) ProtoMessage()               {}
func (*PlacementSnapshots) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlacementSnapshots) GetSnapshots() []*Placement {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func init() {
	proto.RegisterType((*Placement)(nil), "placementpb.Placement")
	proto.RegisterType((*Instance)(nil), "placementpb.Instance")
	proto.RegisterType((*Shard)(nil), "placementpb.Shard")
	proto.RegisterType((*PlacementSnapshots)(nil), "placementpb.PlacementSnapshots")
	proto.RegisterEnum("placementpb.ShardState", ShardState_name, ShardState_value)
}

func init() { proto.RegisterFile("placement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0xec, 0x34, 0x69, 0x76, 0x5c, 0xe7, 0x8b, 0x56, 0xa2, 0x58, 0x45, 0x08, 0x13, 0x54,
	0x29, 0x2a, 0x22, 0x17, 0x85, 0x0b, 0xd4, 0xbb, 0x80, 0x02, 0x32, 0x0a, 0x11, 0x5a, 0x57, 0xbd,
	0xe0, 0xc6, 0x72, 0xed, 0x0d, 0x59, 0x35, 0xde, 0xb5, 0x76, 0x37, 0x45, 0xe5, 0x95, 0x78, 0x17,
	0x9e, 0x86, 0x07, 0x40, 0x1e, 0xdb, 0xf9, 0x11, 0xdc, 0xcd, 0x9c, 0x39, 0x3b, 0x33, 0xe7, 0x78,
	0x0c, 0xff, 0x97, 0xeb, 0x34, 0xe3, 0x05, 0x97, 0x76, 0x52, 0x6a, 0x65, 0x15, 0xf5, 0xb6, 0x40,
	0x79, 0x3b, 0xfa, 0xe5, 0x02, 0xf9, 0xd2, 0xe6, 0xf4, 0x3d, 0x10, 0x21, 0x8d, 0x4d, 0x65, 0xc6,
	0x4d, 0xe0, 0x84, 0x9d, 0xb1, 0x77, 0x79, 0x3e, 0xd9, 0xa3, 0x4f, 0xb6, 0xd4, 0x49, 0xd4, 0xf2,
	0x66, 0xd2, 0xea, 0x07, 0xb6, 0x7b, 0x47, 0xcf, 0x61, 0xa0, 0x79, 0xb9, 0x16, 0x59, 0x9a, 0x2c,
	0xd3, 0xcc, 0x2a, 0x1d, 0xb8, 0xa1, 0x33, 0xf6, 0x99, 0xdf, 0xa0, 0x1f, 0x10, 0xa4, 0x4f, 0x01,
	0xe4, 0xa6, 0x48, 0xcc, 0x2a, 0xd5, 0xb9, 0x09, 0x3a, 0x48, 0x21, 0x72, 0x53, 0xc4, 0x08, 0x54,
	0x65, 0x61, 0xea, 0x2a, 0xcf, 0x83, 0xa3, 0xd0, 0x19, 0xf7, 0x19, 0x11, 0x26, 0xae, 0x01, 0xfa,
	0x1c, 0x4e, 0xb2, 0x8d, 0x55, 0xf7, 0x5c, 0x27, 0x56, 0x14, 0x3c, 0xe8, 0x86, 0xce, 0xb8, 0xc3,
	0xbc, 0x06, 0xbb, 0x16, 0x05, 0xa7, 0xcf, 0xc0, 0x13, 0x26, 0x29, 0x84, 0xd6, 0x4a, 0xf3, 0x3c,
	0xe8, 0x61, 0x0b, 0x10, 0xe6, 0x73, 0x83, 0x9c, 0xc5, 0x30, 0x38, 0x54, 0x41, 0x87, 0xd0, 0xb9,
	0xe3, 0x0f, 0x81, 0x13, 0x3a, 0x63, 0xc2, 0xaa, 0x90, 0xbe, 0x84, 0xee, 0x7d, 0xba, 0xde, 0x70,
	0xd4, 0xe0, 0x5d, 0x3e, 0x3a, 0x70, 0xa3, 0x7d, 0xcd, 0x6a, 0xce, 0x95, 0xfb, 0xd6, 0x19, 0xfd,
	0x76, 0xa0, 0xdf, 0xe2, 0x74, 0x00, 0xae, 0xc8, 0x9b, 0x76, 0xae, 0xc8, 0x29, 0x85, 0x23, 0x9d,
	0x66, 0x77, 0xd8, 0x8c, 0x30, 0x8c, 0x2b, 0xec, 0x87, 0x92, 0x1c, 0x1d, 0x20, 0x0c, 0x63, 0x7a,
	0x0a, 0xbd, 0xef, 0x5c, 0x7c, 0x5b, 0x59, 0x14, 0xee, 0xb3, 0x26, 0xa3, 0x67, 0xd0, 0xe7, 0x32,
	0x2f, 0x95, 0x90, 0x16, 0x15, 0x13, 0xb6, 0xcd, 0xe9, 0x05, 0xf4, 0x1a, 0x2f, 0x7b, 0xf8, 0xe1,
	0xe8, 0xc1, 0xaa, 0xe8, 0x1b, 0x6b, 0x18, 0x34, 0x84, 0x13, 0x8c, 0x12, 0xc3, 0x6d, 0x22, 0xf2,
	0xe0, 0x18, 0xa7, 0x00, 0x62, 0x31, 0xb7, 0x51, 0x5e, 0x4d, 0x5a, 0x29, 0x63, 0x65, 0x5a, 0xf0,
	0xa0, 0x5f, 0x4f, 0x6a, 0xf3, 0x6a, 0xe3, 0x52, 0x69, 0x1b, 0x10, 0x7c, 0x85, 0xf1, 0xe8, 0xa7,
	0x03, 0x5d, 0x9c, 0xb1, 0xa7, 0xd9, 0x47, 0xcd, 0xaf, 0xa0, 0x6b, 0x6c, 0x6a, 0x6b, 0x07, 0x07,
	0x97, 0x8f, 0xff, 0x5e, 0x2b, 0xae, 0xca, 0xac, 0x66, 0xd1, 0x27, 0x40, 0x8c, 0xda, 0xe8, 0x8c,
	0x57, 0x7b, 0xd5, 0x9e, 0xf4, 0x6b, 0x20, 0xca, 0xe9, 0x0b, 0xf0, 0xdb, 0xaf, 0x2e, 0x53, 0xa9,
	0x0c, 0xda, 0xd3, 0x61, 0xed, 0x29, 0x2c, 0x2a, 0xac, 0x3d, 0x8d, 0xe5, 0xb2, 0xe1, 0xec, 0x9d,
	0xc6, 0x72, 0x89, 0x94, 0xd1, 0x27, 0xa0, 0xdb, 0x4b, 0x8e, 0x65, 0x5a, 0x9a, 0x95, 0xb2, 0x86,
	0xbe, 0x01, 0x62, 0xda, 0xa4, 0xb9, 0xfe, 0xd3, 0x7f, 0x5f, 0x3f, 0xdb, 0x11, 0x2f, 0xae, 0x00,
	0x76, 0x2a, 0xe8, 0x10, 0x4e, 0xa2, 0x45, 0x74, 0x1d, 0x4d, 0xe7, 0xd1, 0xd7, 0x68, 0xf1, 0x71,
	0xf8, 0x1f, 0xf5, 0x81, 0x4c, 0x6f, 0xa6, 0xd1, 0x7c, 0xfa, 0x6e, 0x3e, 0x1b, 0x3a, 0xd4, 0x83,
	0xe3, 0xf9, 0x6c, 0x7a, 0x53, 0xd5, 0xdc, 0xdb, 0x1e, 0xfe, 0x91, 0xaf, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x20, 0x36, 0x61, 0x31, 0xa4, 0x03, 0x00, 0x00,
}
