// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3cluster/services/types.go

package services

import (
	gomock "github.com/golang/mock/gomock"
	kv "github.com/m3db/m3cluster/kv"
	campaign "github.com/m3db/m3cluster/services/leader/campaign"
	shard "github.com/m3db/m3cluster/shard"
	clock "github.com/m3db/m3x/clock"
	instrument "github.com/m3db/m3x/instrument"
	watch "github.com/m3db/m3x/watch"
	time "time"
)

// Mock of Services interface
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *_MockServicesRecorder
}

// Recorder for MockServices (not exported)
type _MockServicesRecorder struct {
	mock *MockServices
}

func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &_MockServicesRecorder{mock}
	return mock
}

func (_m *MockServices) EXPECT() *_MockServicesRecorder {
	return _m.recorder
}

func (_m *MockServices) Advertise(ad Advertisement) error {
	ret := _m.ctrl.Call(_m, "Advertise", ad)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServicesRecorder) Advertise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Advertise", arg0)
}

func (_m *MockServices) Unadvertise(service ServiceID, id string) error {
	ret := _m.ctrl.Call(_m, "Unadvertise", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServicesRecorder) Unadvertise(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unadvertise", arg0, arg1)
}

func (_m *MockServices) Query(service ServiceID, opts QueryOptions) (Service, error) {
	ret := _m.ctrl.Call(_m, "Query", service, opts)
	ret0, _ := ret[0].(Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0, arg1)
}

func (_m *MockServices) Watch(service ServiceID, opts QueryOptions) (watch.Watch, error) {
	ret := _m.ctrl.Call(_m, "Watch", service, opts)
	ret0, _ := ret[0].(watch.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", arg0, arg1)
}

func (_m *MockServices) Metadata(sid ServiceID) (Metadata, error) {
	ret := _m.ctrl.Call(_m, "Metadata", sid)
	ret0, _ := ret[0].(Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) Metadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata", arg0)
}

func (_m *MockServices) SetMetadata(sid ServiceID, m Metadata) error {
	ret := _m.ctrl.Call(_m, "SetMetadata", sid, m)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServicesRecorder) SetMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMetadata", arg0, arg1)
}

func (_m *MockServices) PlacementService(service ServiceID, popts PlacementOptions) (PlacementService, error) {
	ret := _m.ctrl.Call(_m, "PlacementService", service, popts)
	ret0, _ := ret[0].(PlacementService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) PlacementService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementService", arg0, arg1)
}

func (_m *MockServices) HeartbeatService(service ServiceID) (HeartbeatService, error) {
	ret := _m.ctrl.Call(_m, "HeartbeatService", service)
	ret0, _ := ret[0].(HeartbeatService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) HeartbeatService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeartbeatService", arg0)
}

func (_m *MockServices) LeaderService(service ServiceID, opts ElectionOptions) (LeaderService, error) {
	ret := _m.ctrl.Call(_m, "LeaderService", service, opts)
	ret0, _ := ret[0].(LeaderService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) LeaderService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeaderService", arg0, arg1)
}

// Mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceRecorder
}

// Recorder for MockService (not exported)
type _MockServiceRecorder struct {
	mock *MockService
}

func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &_MockServiceRecorder{mock}
	return mock
}

func (_m *MockService) EXPECT() *_MockServiceRecorder {
	return _m.recorder
}

func (_m *MockService) Instance(instanceID string) (ServiceInstance, error) {
	ret := _m.ctrl.Call(_m, "Instance", instanceID)
	ret0, _ := ret[0].(ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) Instance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instance", arg0)
}

func (_m *MockService) Instances() []ServiceInstance {
	ret := _m.ctrl.Call(_m, "Instances")
	ret0, _ := ret[0].([]ServiceInstance)
	return ret0
}

func (_mr *_MockServiceRecorder) Instances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instances")
}

func (_m *MockService) SetInstances(insts []ServiceInstance) Service {
	ret := _m.ctrl.Call(_m, "SetInstances", insts)
	ret0, _ := ret[0].(Service)
	return ret0
}

func (_mr *_MockServiceRecorder) SetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstances", arg0)
}

func (_m *MockService) Replication() ServiceReplication {
	ret := _m.ctrl.Call(_m, "Replication")
	ret0, _ := ret[0].(ServiceReplication)
	return ret0
}

func (_mr *_MockServiceRecorder) Replication() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replication")
}

func (_m *MockService) SetReplication(r ServiceReplication) Service {
	ret := _m.ctrl.Call(_m, "SetReplication", r)
	ret0, _ := ret[0].(Service)
	return ret0
}

func (_mr *_MockServiceRecorder) SetReplication(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReplication", arg0)
}

func (_m *MockService) Sharding() ServiceSharding {
	ret := _m.ctrl.Call(_m, "Sharding")
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

func (_mr *_MockServiceRecorder) Sharding() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sharding")
}

func (_m *MockService) SetSharding(s ServiceSharding) Service {
	ret := _m.ctrl.Call(_m, "SetSharding", s)
	ret0, _ := ret[0].(Service)
	return ret0
}

func (_mr *_MockServiceRecorder) SetSharding(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSharding", arg0)
}

// Mock of ServiceReplication interface
type MockServiceReplication struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceReplicationRecorder
}

// Recorder for MockServiceReplication (not exported)
type _MockServiceReplicationRecorder struct {
	mock *MockServiceReplication
}

func NewMockServiceReplication(ctrl *gomock.Controller) *MockServiceReplication {
	mock := &MockServiceReplication{ctrl: ctrl}
	mock.recorder = &_MockServiceReplicationRecorder{mock}
	return mock
}

func (_m *MockServiceReplication) EXPECT() *_MockServiceReplicationRecorder {
	return _m.recorder
}

func (_m *MockServiceReplication) Replicas() int {
	ret := _m.ctrl.Call(_m, "Replicas")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockServiceReplicationRecorder) Replicas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replicas")
}

func (_m *MockServiceReplication) SetReplicas(r int) ServiceReplication {
	ret := _m.ctrl.Call(_m, "SetReplicas", r)
	ret0, _ := ret[0].(ServiceReplication)
	return ret0
}

func (_mr *_MockServiceReplicationRecorder) SetReplicas(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReplicas", arg0)
}

// Mock of ServiceSharding interface
type MockServiceSharding struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceShardingRecorder
}

// Recorder for MockServiceSharding (not exported)
type _MockServiceShardingRecorder struct {
	mock *MockServiceSharding
}

func NewMockServiceSharding(ctrl *gomock.Controller) *MockServiceSharding {
	mock := &MockServiceSharding{ctrl: ctrl}
	mock.recorder = &_MockServiceShardingRecorder{mock}
	return mock
}

func (_m *MockServiceSharding) EXPECT() *_MockServiceShardingRecorder {
	return _m.recorder
}

func (_m *MockServiceSharding) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockServiceShardingRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumShards")
}

func (_m *MockServiceSharding) SetNumShards(n int) ServiceSharding {
	ret := _m.ctrl.Call(_m, "SetNumShards", n)
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

func (_mr *_MockServiceShardingRecorder) SetNumShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNumShards", arg0)
}

func (_m *MockServiceSharding) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockServiceShardingRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSharded")
}

func (_m *MockServiceSharding) SetIsSharded(s bool) ServiceSharding {
	ret := _m.ctrl.Call(_m, "SetIsSharded", s)
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

func (_mr *_MockServiceShardingRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsSharded", arg0)
}

// Mock of ServiceInstance interface
type MockServiceInstance struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceInstanceRecorder
}

// Recorder for MockServiceInstance (not exported)
type _MockServiceInstanceRecorder struct {
	mock *MockServiceInstance
}

func NewMockServiceInstance(ctrl *gomock.Controller) *MockServiceInstance {
	mock := &MockServiceInstance{ctrl: ctrl}
	mock.recorder = &_MockServiceInstanceRecorder{mock}
	return mock
}

func (_m *MockServiceInstance) EXPECT() *_MockServiceInstanceRecorder {
	return _m.recorder
}

func (_m *MockServiceInstance) ServiceID() ServiceID {
	ret := _m.ctrl.Call(_m, "ServiceID")
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) ServiceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceID")
}

func (_m *MockServiceInstance) SetServiceID(service ServiceID) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetServiceID", service)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) SetServiceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetServiceID", arg0)
}

func (_m *MockServiceInstance) InstanceID() string {
	ret := _m.ctrl.Call(_m, "InstanceID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) InstanceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstanceID")
}

func (_m *MockServiceInstance) SetInstanceID(id string) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetInstanceID", id)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) SetInstanceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstanceID", arg0)
}

func (_m *MockServiceInstance) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

func (_m *MockServiceInstance) SetEndpoint(e string) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", e)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEndpoint", arg0)
}

func (_m *MockServiceInstance) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockServiceInstance) SetShards(s shard.Shards) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

func (_mr *_MockServiceInstanceRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

// Mock of Advertisement interface
type MockAdvertisement struct {
	ctrl     *gomock.Controller
	recorder *_MockAdvertisementRecorder
}

// Recorder for MockAdvertisement (not exported)
type _MockAdvertisementRecorder struct {
	mock *MockAdvertisement
}

func NewMockAdvertisement(ctrl *gomock.Controller) *MockAdvertisement {
	mock := &MockAdvertisement{ctrl: ctrl}
	mock.recorder = &_MockAdvertisementRecorder{mock}
	return mock
}

func (_m *MockAdvertisement) EXPECT() *_MockAdvertisementRecorder {
	return _m.recorder
}

func (_m *MockAdvertisement) ServiceID() ServiceID {
	ret := _m.ctrl.Call(_m, "ServiceID")
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) ServiceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceID")
}

func (_m *MockAdvertisement) SetServiceID(service ServiceID) Advertisement {
	ret := _m.ctrl.Call(_m, "SetServiceID", service)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) SetServiceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetServiceID", arg0)
}

func (_m *MockAdvertisement) Health() func() error {
	ret := _m.ctrl.Call(_m, "Health")
	ret0, _ := ret[0].(func() error)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) Health() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Health")
}

func (_m *MockAdvertisement) SetHealth(health func() error) Advertisement {
	ret := _m.ctrl.Call(_m, "SetHealth", health)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) SetHealth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHealth", arg0)
}

func (_m *MockAdvertisement) PlacementInstance() PlacementInstance {
	ret := _m.ctrl.Call(_m, "PlacementInstance")
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) PlacementInstance() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementInstance")
}

func (_m *MockAdvertisement) SetPlacementInstance(p PlacementInstance) Advertisement {
	ret := _m.ctrl.Call(_m, "SetPlacementInstance", p)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

func (_mr *_MockAdvertisementRecorder) SetPlacementInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacementInstance", arg0)
}

// Mock of ServiceID interface
type MockServiceID struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceIDRecorder
}

// Recorder for MockServiceID (not exported)
type _MockServiceIDRecorder struct {
	mock *MockServiceID
}

func NewMockServiceID(ctrl *gomock.Controller) *MockServiceID {
	mock := &MockServiceID{ctrl: ctrl}
	mock.recorder = &_MockServiceIDRecorder{mock}
	return mock
}

func (_m *MockServiceID) EXPECT() *_MockServiceIDRecorder {
	return _m.recorder
}

func (_m *MockServiceID) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceIDRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockServiceID) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceIDRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockServiceID) SetName(s string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetName", s)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

func (_mr *_MockServiceIDRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockServiceID) Environment() string {
	ret := _m.ctrl.Call(_m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceIDRecorder) Environment() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Environment")
}

func (_m *MockServiceID) SetEnvironment(env string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetEnvironment", env)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

func (_mr *_MockServiceIDRecorder) SetEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEnvironment", arg0)
}

func (_m *MockServiceID) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceIDRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

func (_m *MockServiceID) SetZone(zone string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetZone", zone)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

func (_mr *_MockServiceIDRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetZone", arg0)
}

// Mock of QueryOptions interface
type MockQueryOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockQueryOptionsRecorder
}

// Recorder for MockQueryOptions (not exported)
type _MockQueryOptionsRecorder struct {
	mock *MockQueryOptions
}

func NewMockQueryOptions(ctrl *gomock.Controller) *MockQueryOptions {
	mock := &MockQueryOptions{ctrl: ctrl}
	mock.recorder = &_MockQueryOptionsRecorder{mock}
	return mock
}

func (_m *MockQueryOptions) EXPECT() *_MockQueryOptionsRecorder {
	return _m.recorder
}

func (_m *MockQueryOptions) IncludeUnhealthy() bool {
	ret := _m.ctrl.Call(_m, "IncludeUnhealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockQueryOptionsRecorder) IncludeUnhealthy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncludeUnhealthy")
}

func (_m *MockQueryOptions) SetIncludeUnhealthy(h bool) QueryOptions {
	ret := _m.ctrl.Call(_m, "SetIncludeUnhealthy", h)
	ret0, _ := ret[0].(QueryOptions)
	return ret0
}

func (_mr *_MockQueryOptionsRecorder) SetIncludeUnhealthy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIncludeUnhealthy", arg0)
}

// Mock of Metadata interface
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *_MockMetadataRecorder
}

// Recorder for MockMetadata (not exported)
type _MockMetadataRecorder struct {
	mock *MockMetadata
}

func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &_MockMetadataRecorder{mock}
	return mock
}

func (_m *MockMetadata) EXPECT() *_MockMetadataRecorder {
	return _m.recorder
}

func (_m *MockMetadata) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMetadataRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockMetadata) Port() uint32 {
	ret := _m.ctrl.Call(_m, "Port")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockMetadataRecorder) Port() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Port")
}

func (_m *MockMetadata) SetPort(p uint32) Metadata {
	ret := _m.ctrl.Call(_m, "SetPort", p)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

func (_mr *_MockMetadataRecorder) SetPort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPort", arg0)
}

func (_m *MockMetadata) LivenessInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "LivenessInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockMetadataRecorder) LivenessInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LivenessInterval")
}

func (_m *MockMetadata) SetLivenessInterval(l time.Duration) Metadata {
	ret := _m.ctrl.Call(_m, "SetLivenessInterval", l)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

func (_mr *_MockMetadataRecorder) SetLivenessInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLivenessInterval", arg0)
}

func (_m *MockMetadata) HeartbeatInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "HeartbeatInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockMetadataRecorder) HeartbeatInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeartbeatInterval")
}

func (_m *MockMetadata) SetHeartbeatInterval(h time.Duration) Metadata {
	ret := _m.ctrl.Call(_m, "SetHeartbeatInterval", h)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

func (_mr *_MockMetadataRecorder) SetHeartbeatInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHeartbeatInterval", arg0)
}

// Mock of PlacementService interface
type MockPlacementService struct {
	ctrl     *gomock.Controller
	recorder *_MockPlacementServiceRecorder
}

// Recorder for MockPlacementService (not exported)
type _MockPlacementServiceRecorder struct {
	mock *MockPlacementService
}

func NewMockPlacementService(ctrl *gomock.Controller) *MockPlacementService {
	mock := &MockPlacementService{ctrl: ctrl}
	mock.recorder = &_MockPlacementServiceRecorder{mock}
	return mock
}

func (_m *MockPlacementService) EXPECT() *_MockPlacementServiceRecorder {
	return _m.recorder
}

func (_m *MockPlacementService) BuildInitialPlacement(instances []PlacementInstance, numShards int, rf int) (Placement, error) {
	ret := _m.ctrl.Call(_m, "BuildInitialPlacement", instances, numShards, rf)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPlacementServiceRecorder) BuildInitialPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildInitialPlacement", arg0, arg1, arg2)
}

func (_m *MockPlacementService) AddReplica() (Placement, error) {
	ret := _m.ctrl.Call(_m, "AddReplica")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPlacementServiceRecorder) AddReplica() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddReplica")
}

func (_m *MockPlacementService) AddInstance(candidates []PlacementInstance) (Placement, PlacementInstance, error) {
	ret := _m.ctrl.Call(_m, "AddInstance", candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(PlacementInstance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPlacementServiceRecorder) AddInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstance", arg0)
}

func (_m *MockPlacementService) RemoveInstance(leavingInstanceID string) (Placement, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstance", leavingInstanceID)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPlacementServiceRecorder) RemoveInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveInstance", arg0)
}

func (_m *MockPlacementService) ReplaceInstance(leavingInstanceID string, candidates []PlacementInstance) (Placement, []PlacementInstance, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstance", leavingInstanceID, candidates)
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].([]PlacementInstance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPlacementServiceRecorder) ReplaceInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceInstance", arg0, arg1)
}

func (_m *MockPlacementService) MarkShardAvailable(instanceID string, shardID uint32) error {
	ret := _m.ctrl.Call(_m, "MarkShardAvailable", instanceID, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPlacementServiceRecorder) MarkShardAvailable(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkShardAvailable", arg0, arg1)
}

func (_m *MockPlacementService) MarkInstanceAvailable(instanceID string) error {
	ret := _m.ctrl.Call(_m, "MarkInstanceAvailable", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPlacementServiceRecorder) MarkInstanceAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkInstanceAvailable", arg0)
}

func (_m *MockPlacementService) Placement() (Placement, int, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPlacementServiceRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Placement")
}

func (_m *MockPlacementService) SetPlacement(p Placement) error {
	ret := _m.ctrl.Call(_m, "SetPlacement", p)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPlacementServiceRecorder) SetPlacement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacement", arg0)
}

func (_m *MockPlacementService) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPlacementServiceRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete")
}

// Mock of PlacementOptions interface
type MockPlacementOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockPlacementOptionsRecorder
}

// Recorder for MockPlacementOptions (not exported)
type _MockPlacementOptionsRecorder struct {
	mock *MockPlacementOptions
}

func NewMockPlacementOptions(ctrl *gomock.Controller) *MockPlacementOptions {
	mock := &MockPlacementOptions{ctrl: ctrl}
	mock.recorder = &_MockPlacementOptionsRecorder{mock}
	return mock
}

func (_m *MockPlacementOptions) EXPECT() *_MockPlacementOptionsRecorder {
	return _m.recorder
}

func (_m *MockPlacementOptions) LooseRackCheck() bool {
	ret := _m.ctrl.Call(_m, "LooseRackCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) LooseRackCheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LooseRackCheck")
}

func (_m *MockPlacementOptions) SetLooseRackCheck(looseRackCheck bool) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetLooseRackCheck", looseRackCheck)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetLooseRackCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLooseRackCheck", arg0)
}

func (_m *MockPlacementOptions) AllowPartialReplace() bool {
	ret := _m.ctrl.Call(_m, "AllowPartialReplace")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) AllowPartialReplace() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllowPartialReplace")
}

func (_m *MockPlacementOptions) SetAllowPartialReplace(allowPartialReplace bool) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetAllowPartialReplace", allowPartialReplace)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetAllowPartialReplace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAllowPartialReplace", arg0)
}

func (_m *MockPlacementOptions) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSharded")
}

func (_m *MockPlacementOptions) SetIsSharded(sharded bool) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetIsSharded", sharded)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsSharded", arg0)
}

func (_m *MockPlacementOptions) Dryrun() bool {
	ret := _m.ctrl.Call(_m, "Dryrun")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) Dryrun() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dryrun")
}

func (_m *MockPlacementOptions) SetDryrun(d bool) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetDryrun", d)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetDryrun(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDryrun", arg0)
}

func (_m *MockPlacementOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockPlacementOptions) SetInstrumentOptions(iopts instrument.Options) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", iopts)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockPlacementOptions) ValidZone() string {
	ret := _m.ctrl.Call(_m, "ValidZone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) ValidZone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidZone")
}

func (_m *MockPlacementOptions) SetValidZone(z string) PlacementOptions {
	ret := _m.ctrl.Call(_m, "SetValidZone", z)
	ret0, _ := ret[0].(PlacementOptions)
	return ret0
}

func (_mr *_MockPlacementOptionsRecorder) SetValidZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetValidZone", arg0)
}

// Mock of StagedPlacementWatcher interface
type MockStagedPlacementWatcher struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementWatcherRecorder
}

// Recorder for MockStagedPlacementWatcher (not exported)
type _MockStagedPlacementWatcherRecorder struct {
	mock *MockStagedPlacementWatcher
}

func NewMockStagedPlacementWatcher(ctrl *gomock.Controller) *MockStagedPlacementWatcher {
	mock := &MockStagedPlacementWatcher{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementWatcherRecorder{mock}
	return mock
}

func (_m *MockStagedPlacementWatcher) EXPECT() *_MockStagedPlacementWatcherRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacementWatcher) Watch() error {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch")
}

func (_m *MockStagedPlacementWatcher) ActiveStagedPlacement() (ActiveStagedPlacement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement")
	ret0, _ := ret[0].(ActiveStagedPlacement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStagedPlacementWatcherRecorder) ActiveStagedPlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacement")
}

func (_m *MockStagedPlacementWatcher) Unwatch() error {
	ret := _m.ctrl.Call(_m, "Unwatch")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherRecorder) Unwatch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unwatch")
}

// Mock of StagedPlacementWatcherOptions interface
type MockStagedPlacementWatcherOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementWatcherOptionsRecorder
}

// Recorder for MockStagedPlacementWatcherOptions (not exported)
type _MockStagedPlacementWatcherOptionsRecorder struct {
	mock *MockStagedPlacementWatcherOptions
}

func NewMockStagedPlacementWatcherOptions(ctrl *gomock.Controller) *MockStagedPlacementWatcherOptions {
	mock := &MockStagedPlacementWatcherOptions{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementWatcherOptionsRecorder{mock}
	return mock
}

func (_m *MockStagedPlacementWatcherOptions) EXPECT() *_MockStagedPlacementWatcherOptionsRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacementWatcherOptions) SetClockOptions(value clock.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetInstrumentOptions(value instrument.Options) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetActiveStagedPlacementOptions(value ActiveStagedPlacementOptions) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetActiveStagedPlacementOptions", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacementOptions")
}

func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementKey(value string) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementKey", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetStagedPlacementKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStagedPlacementKey", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) StagedPlacementKey() string {
	ret := _m.ctrl.Call(_m, "StagedPlacementKey")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) StagedPlacementKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StagedPlacementKey")
}

func (_m *MockStagedPlacementWatcherOptions) SetStagedPlacementStore(store kv.Store) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetStagedPlacementStore", store)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetStagedPlacementStore(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStagedPlacementStore", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) StagedPlacementStore() kv.Store {
	ret := _m.ctrl.Call(_m, "StagedPlacementStore")
	ret0, _ := ret[0].(kv.Store)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) StagedPlacementStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StagedPlacementStore")
}

func (_m *MockStagedPlacementWatcherOptions) SetInitWatchTimeout(value time.Duration) StagedPlacementWatcherOptions {
	ret := _m.ctrl.Call(_m, "SetInitWatchTimeout", value)
	ret0, _ := ret[0].(StagedPlacementWatcherOptions)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) SetInitWatchTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInitWatchTimeout", arg0)
}

func (_m *MockStagedPlacementWatcherOptions) InitWatchTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "InitWatchTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockStagedPlacementWatcherOptionsRecorder) InitWatchTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitWatchTimeout")
}

// Mock of ActiveStagedPlacement interface
type MockActiveStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockActiveStagedPlacementRecorder
}

// Recorder for MockActiveStagedPlacement (not exported)
type _MockActiveStagedPlacementRecorder struct {
	mock *MockActiveStagedPlacement
}

func NewMockActiveStagedPlacement(ctrl *gomock.Controller) *MockActiveStagedPlacement {
	mock := &MockActiveStagedPlacement{ctrl: ctrl}
	mock.recorder = &_MockActiveStagedPlacementRecorder{mock}
	return mock
}

func (_m *MockActiveStagedPlacement) EXPECT() *_MockActiveStagedPlacementRecorder {
	return _m.recorder
}

func (_m *MockActiveStagedPlacement) ActivePlacement() (Placement, DoneFn, error) {
	ret := _m.ctrl.Call(_m, "ActivePlacement")
	ret0, _ := ret[0].(Placement)
	ret1, _ := ret[1].(DoneFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockActiveStagedPlacementRecorder) ActivePlacement() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActivePlacement")
}

func (_m *MockActiveStagedPlacement) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockActiveStagedPlacementRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of ActiveStagedPlacementOptions interface
type MockActiveStagedPlacementOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockActiveStagedPlacementOptionsRecorder
}

// Recorder for MockActiveStagedPlacementOptions (not exported)
type _MockActiveStagedPlacementOptionsRecorder struct {
	mock *MockActiveStagedPlacementOptions
}

func NewMockActiveStagedPlacementOptions(ctrl *gomock.Controller) *MockActiveStagedPlacementOptions {
	mock := &MockActiveStagedPlacementOptions{ctrl: ctrl}
	mock.recorder = &_MockActiveStagedPlacementOptionsRecorder{mock}
	return mock
}

func (_m *MockActiveStagedPlacementOptions) EXPECT() *_MockActiveStagedPlacementOptionsRecorder {
	return _m.recorder
}

func (_m *MockActiveStagedPlacementOptions) SetClockOptions(value clock.Options) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetClockOptions", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetClockOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClockOptions", arg0)
}

func (_m *MockActiveStagedPlacementOptions) ClockOptions() clock.Options {
	ret := _m.ctrl.Call(_m, "ClockOptions")
	ret0, _ := ret[0].(clock.Options)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) ClockOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClockOptions")
}

func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsAddedFn(value OnPlacementsAddedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsAddedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetOnPlacementsAddedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOnPlacementsAddedFn", arg0)
}

func (_m *MockActiveStagedPlacementOptions) OnPlacementsAddedFn() OnPlacementsAddedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsAddedFn")
	ret0, _ := ret[0].(OnPlacementsAddedFn)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) OnPlacementsAddedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnPlacementsAddedFn")
}

func (_m *MockActiveStagedPlacementOptions) SetOnPlacementsRemovedFn(value OnPlacementsRemovedFn) ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "SetOnPlacementsRemovedFn", value)
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) SetOnPlacementsRemovedFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOnPlacementsRemovedFn", arg0)
}

func (_m *MockActiveStagedPlacementOptions) OnPlacementsRemovedFn() OnPlacementsRemovedFn {
	ret := _m.ctrl.Call(_m, "OnPlacementsRemovedFn")
	ret0, _ := ret[0].(OnPlacementsRemovedFn)
	return ret0
}

func (_mr *_MockActiveStagedPlacementOptionsRecorder) OnPlacementsRemovedFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnPlacementsRemovedFn")
}

// Mock of StagedPlacement interface
type MockStagedPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockStagedPlacementRecorder
}

// Recorder for MockStagedPlacement (not exported)
type _MockStagedPlacementRecorder struct {
	mock *MockStagedPlacement
}

func NewMockStagedPlacement(ctrl *gomock.Controller) *MockStagedPlacement {
	mock := &MockStagedPlacement{ctrl: ctrl}
	mock.recorder = &_MockStagedPlacementRecorder{mock}
	return mock
}

func (_m *MockStagedPlacement) EXPECT() *_MockStagedPlacementRecorder {
	return _m.recorder
}

func (_m *MockStagedPlacement) ActiveStagedPlacement(timeNanos int64) ActiveStagedPlacement {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacement", timeNanos)
	ret0, _ := ret[0].(ActiveStagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) ActiveStagedPlacement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacement", arg0)
}

func (_m *MockStagedPlacement) Version() int {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

func (_m *MockStagedPlacement) SetVersion(version int) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetVersion", version)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVersion", arg0)
}

func (_m *MockStagedPlacement) Placements() []Placement {
	ret := _m.ctrl.Call(_m, "Placements")
	ret0, _ := ret[0].([]Placement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) Placements() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Placements")
}

func (_m *MockStagedPlacement) SetPlacements(placements []Placement) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetPlacements", placements)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetPlacements(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacements", arg0)
}

func (_m *MockStagedPlacement) ActiveStagedPlacementOptions() ActiveStagedPlacementOptions {
	ret := _m.ctrl.Call(_m, "ActiveStagedPlacementOptions")
	ret0, _ := ret[0].(ActiveStagedPlacementOptions)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) ActiveStagedPlacementOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ActiveStagedPlacementOptions")
}

func (_m *MockStagedPlacement) SetActiveStagedPlacementOptions(opts ActiveStagedPlacementOptions) StagedPlacement {
	ret := _m.ctrl.Call(_m, "SetActiveStagedPlacementOptions", opts)
	ret0, _ := ret[0].(StagedPlacement)
	return ret0
}

func (_mr *_MockStagedPlacementRecorder) SetActiveStagedPlacementOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetActiveStagedPlacementOptions", arg0)
}

// Mock of Placement interface
type MockPlacement struct {
	ctrl     *gomock.Controller
	recorder *_MockPlacementRecorder
}

// Recorder for MockPlacement (not exported)
type _MockPlacementRecorder struct {
	mock *MockPlacement
}

func NewMockPlacement(ctrl *gomock.Controller) *MockPlacement {
	mock := &MockPlacement{ctrl: ctrl}
	mock.recorder = &_MockPlacementRecorder{mock}
	return mock
}

func (_m *MockPlacement) EXPECT() *_MockPlacementRecorder {
	return _m.recorder
}

func (_m *MockPlacement) InstancesForShard(shard uint32) []PlacementInstance {
	ret := _m.ctrl.Call(_m, "InstancesForShard", shard)
	ret0, _ := ret[0].([]PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementRecorder) InstancesForShard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstancesForShard", arg0)
}

func (_m *MockPlacement) Instances() []PlacementInstance {
	ret := _m.ctrl.Call(_m, "Instances")
	ret0, _ := ret[0].([]PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementRecorder) Instances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instances")
}

func (_m *MockPlacement) SetInstances(instances []PlacementInstance) Placement {
	ret := _m.ctrl.Call(_m, "SetInstances", instances)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstances", arg0)
}

func (_m *MockPlacement) NumInstances() int {
	ret := _m.ctrl.Call(_m, "NumInstances")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) NumInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumInstances")
}

func (_m *MockPlacement) Instance(id string) (PlacementInstance, bool) {
	ret := _m.ctrl.Call(_m, "Instance", id)
	ret0, _ := ret[0].(PlacementInstance)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPlacementRecorder) Instance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instance", arg0)
}

func (_m *MockPlacement) ReplicaFactor() int {
	ret := _m.ctrl.Call(_m, "ReplicaFactor")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) ReplicaFactor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplicaFactor")
}

func (_m *MockPlacement) SetReplicaFactor(rf int) Placement {
	ret := _m.ctrl.Call(_m, "SetReplicaFactor", rf)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetReplicaFactor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReplicaFactor", arg0)
}

func (_m *MockPlacement) Shards() []uint32 {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].([]uint32)
	return ret0
}

func (_mr *_MockPlacementRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockPlacement) SetShards(s []uint32) Placement {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

func (_m *MockPlacement) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumShards")
}

func (_m *MockPlacement) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPlacementRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSharded")
}

func (_m *MockPlacement) SetIsSharded(v bool) Placement {
	ret := _m.ctrl.Call(_m, "SetIsSharded", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetIsSharded", arg0)
}

func (_m *MockPlacement) CutoverNanos() int64 {
	ret := _m.ctrl.Call(_m, "CutoverNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPlacementRecorder) CutoverNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CutoverNanos")
}

func (_m *MockPlacement) SetCutoverNanos(cutoverNanos int64) Placement {
	ret := _m.ctrl.Call(_m, "SetCutoverNanos", cutoverNanos)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetCutoverNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCutoverNanos", arg0)
}

func (_m *MockPlacement) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockPlacement) GetVersion() int {
	ret := _m.ctrl.Call(_m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPlacementRecorder) GetVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVersion")
}

func (_m *MockPlacement) SetVersion(v int) Placement {
	ret := _m.ctrl.Call(_m, "SetVersion", v)
	ret0, _ := ret[0].(Placement)
	return ret0
}

func (_mr *_MockPlacementRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVersion", arg0)
}

// Mock of PlacementInstance interface
type MockPlacementInstance struct {
	ctrl     *gomock.Controller
	recorder *_MockPlacementInstanceRecorder
}

// Recorder for MockPlacementInstance (not exported)
type _MockPlacementInstanceRecorder struct {
	mock *MockPlacementInstance
}

func NewMockPlacementInstance(ctrl *gomock.Controller) *MockPlacementInstance {
	mock := &MockPlacementInstance{ctrl: ctrl}
	mock.recorder = &_MockPlacementInstanceRecorder{mock}
	return mock
}

func (_m *MockPlacementInstance) EXPECT() *_MockPlacementInstanceRecorder {
	return _m.recorder
}

func (_m *MockPlacementInstance) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockPlacementInstance) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockPlacementInstance) SetID(id string) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetID", id)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetID", arg0)
}

func (_m *MockPlacementInstance) Rack() string {
	ret := _m.ctrl.Call(_m, "Rack")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) Rack() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rack")
}

func (_m *MockPlacementInstance) SetRack(r string) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetRack", r)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetRack(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRack", arg0)
}

func (_m *MockPlacementInstance) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

func (_m *MockPlacementInstance) SetZone(z string) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetZone", z)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetZone", arg0)
}

func (_m *MockPlacementInstance) Weight() uint32 {
	ret := _m.ctrl.Call(_m, "Weight")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) Weight() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Weight")
}

func (_m *MockPlacementInstance) SetWeight(w uint32) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetWeight", w)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetWeight(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWeight", arg0)
}

func (_m *MockPlacementInstance) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

func (_m *MockPlacementInstance) SetEndpoint(ip string) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", ip)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEndpoint", arg0)
}

func (_m *MockPlacementInstance) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockPlacementInstance) SetShards(s shard.Shards) PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(PlacementInstance)
	return ret0
}

func (_mr *_MockPlacementInstanceRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

// Mock of HeartbeatService interface
type MockHeartbeatService struct {
	ctrl     *gomock.Controller
	recorder *_MockHeartbeatServiceRecorder
}

// Recorder for MockHeartbeatService (not exported)
type _MockHeartbeatServiceRecorder struct {
	mock *MockHeartbeatService
}

func NewMockHeartbeatService(ctrl *gomock.Controller) *MockHeartbeatService {
	mock := &MockHeartbeatService{ctrl: ctrl}
	mock.recorder = &_MockHeartbeatServiceRecorder{mock}
	return mock
}

func (_m *MockHeartbeatService) EXPECT() *_MockHeartbeatServiceRecorder {
	return _m.recorder
}

func (_m *MockHeartbeatService) Heartbeat(instance PlacementInstance, ttl time.Duration) error {
	ret := _m.ctrl.Call(_m, "Heartbeat", instance, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHeartbeatServiceRecorder) Heartbeat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Heartbeat", arg0, arg1)
}

func (_m *MockHeartbeatService) Get() ([]string, error) {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHeartbeatServiceRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockHeartbeatService) GetInstances() ([]PlacementInstance, error) {
	ret := _m.ctrl.Call(_m, "GetInstances")
	ret0, _ := ret[0].([]PlacementInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHeartbeatServiceRecorder) GetInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstances")
}

func (_m *MockHeartbeatService) Delete(instance string) error {
	ret := _m.ctrl.Call(_m, "Delete", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHeartbeatServiceRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockHeartbeatService) Watch() (watch.Watch, error) {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(watch.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHeartbeatServiceRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch")
}

// Mock of ElectionOptions interface
type MockElectionOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockElectionOptionsRecorder
}

// Recorder for MockElectionOptions (not exported)
type _MockElectionOptionsRecorder struct {
	mock *MockElectionOptions
}

func NewMockElectionOptions(ctrl *gomock.Controller) *MockElectionOptions {
	mock := &MockElectionOptions{ctrl: ctrl}
	mock.recorder = &_MockElectionOptionsRecorder{mock}
	return mock
}

func (_m *MockElectionOptions) EXPECT() *_MockElectionOptionsRecorder {
	return _m.recorder
}

func (_m *MockElectionOptions) LeaderTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "LeaderTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) LeaderTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeaderTimeout")
}

func (_m *MockElectionOptions) SetLeaderTimeout(t time.Duration) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetLeaderTimeout", t)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) SetLeaderTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLeaderTimeout", arg0)
}

func (_m *MockElectionOptions) ResignTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "ResignTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) ResignTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResignTimeout")
}

func (_m *MockElectionOptions) SetResignTimeout(t time.Duration) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetResignTimeout", t)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) SetResignTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetResignTimeout", arg0)
}

func (_m *MockElectionOptions) TTLSecs() int {
	ret := _m.ctrl.Call(_m, "TTLSecs")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) TTLSecs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TTLSecs")
}

func (_m *MockElectionOptions) SetTTLSecs(ttl int) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetTTLSecs", ttl)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) SetTTLSecs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTTLSecs", arg0)
}

func (_m *MockElectionOptions) Hostname() string {
	ret := _m.ctrl.Call(_m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockElectionOptionsRecorder) Hostname() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hostname")
}

// Mock of CampaignOptions interface
type MockCampaignOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockCampaignOptionsRecorder
}

// Recorder for MockCampaignOptions (not exported)
type _MockCampaignOptionsRecorder struct {
	mock *MockCampaignOptions
}

func NewMockCampaignOptions(ctrl *gomock.Controller) *MockCampaignOptions {
	mock := &MockCampaignOptions{ctrl: ctrl}
	mock.recorder = &_MockCampaignOptionsRecorder{mock}
	return mock
}

func (_m *MockCampaignOptions) EXPECT() *_MockCampaignOptionsRecorder {
	return _m.recorder
}

func (_m *MockCampaignOptions) LeaderValue() string {
	ret := _m.ctrl.Call(_m, "LeaderValue")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockCampaignOptionsRecorder) LeaderValue() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeaderValue")
}

func (_m *MockCampaignOptions) SetLeaderValue(v string) CampaignOptions {
	ret := _m.ctrl.Call(_m, "SetLeaderValue", v)
	ret0, _ := ret[0].(CampaignOptions)
	return ret0
}

func (_mr *_MockCampaignOptionsRecorder) SetLeaderValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLeaderValue", arg0)
}

// Mock of LeaderService interface
type MockLeaderService struct {
	ctrl     *gomock.Controller
	recorder *_MockLeaderServiceRecorder
}

// Recorder for MockLeaderService (not exported)
type _MockLeaderServiceRecorder struct {
	mock *MockLeaderService
}

func NewMockLeaderService(ctrl *gomock.Controller) *MockLeaderService {
	mock := &MockLeaderService{ctrl: ctrl}
	mock.recorder = &_MockLeaderServiceRecorder{mock}
	return mock
}

func (_m *MockLeaderService) EXPECT() *_MockLeaderServiceRecorder {
	return _m.recorder
}

func (_m *MockLeaderService) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLeaderServiceRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockLeaderService) Campaign(electionID string, opts CampaignOptions) (<-chan campaign.Status, error) {
	ret := _m.ctrl.Call(_m, "Campaign", electionID, opts)
	ret0, _ := ret[0].(<-chan campaign.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLeaderServiceRecorder) Campaign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Campaign", arg0, arg1)
}

func (_m *MockLeaderService) Resign(electionID string) error {
	ret := _m.ctrl.Call(_m, "Resign", electionID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLeaderServiceRecorder) Resign(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resign", arg0)
}

func (_m *MockLeaderService) Leader(electionID string) (string, error) {
	ret := _m.ctrl.Call(_m, "Leader", electionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLeaderServiceRecorder) Leader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Leader", arg0)
}
