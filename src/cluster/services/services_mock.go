// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3cluster/services/types.go

package services

import (
	"reflect"
	"time"

	"github.com/m3db/m3cluster/generated/proto/metadatapb"
	"github.com/m3db/m3cluster/placement"
	"github.com/m3db/m3cluster/services/leader/campaign"
	"github.com/m3db/m3cluster/shard"
	"github.com/m3db/m3x/instrument"
	"github.com/m3db/m3x/watch"

	"github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServices) EXPECT() *MockServicesMockRecorder {
	return _m.recorder
}

// Advertise mocks base method
func (_m *MockServices) Advertise(ad Advertisement) error {
	ret := _m.ctrl.Call(_m, "Advertise", ad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Advertise indicates an expected call of Advertise
func (_mr *MockServicesMockRecorder) Advertise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Advertise", reflect.TypeOf((*MockServices)(nil).Advertise), arg0)
}

// Unadvertise mocks base method
func (_m *MockServices) Unadvertise(service ServiceID, id string) error {
	ret := _m.ctrl.Call(_m, "Unadvertise", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unadvertise indicates an expected call of Unadvertise
func (_mr *MockServicesMockRecorder) Unadvertise(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unadvertise", reflect.TypeOf((*MockServices)(nil).Unadvertise), arg0, arg1)
}

// Query mocks base method
func (_m *MockServices) Query(service ServiceID, opts QueryOptions) (Service, error) {
	ret := _m.ctrl.Call(_m, "Query", service, opts)
	ret0, _ := ret[0].(Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockServicesMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Query", reflect.TypeOf((*MockServices)(nil).Query), arg0, arg1)
}

// Watch mocks base method
func (_m *MockServices) Watch(service ServiceID, opts QueryOptions) (Watch, error) {
	ret := _m.ctrl.Call(_m, "Watch", service, opts)
	ret0, _ := ret[0].(Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockServicesMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockServices)(nil).Watch), arg0, arg1)
}

// Metadata mocks base method
func (_m *MockServices) Metadata(sid ServiceID) (Metadata, error) {
	ret := _m.ctrl.Call(_m, "Metadata", sid)
	ret0, _ := ret[0].(Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata
func (_mr *MockServicesMockRecorder) Metadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Metadata", reflect.TypeOf((*MockServices)(nil).Metadata), arg0)
}

// SetMetadata mocks base method
func (_m *MockServices) SetMetadata(sid ServiceID, m Metadata) error {
	ret := _m.ctrl.Call(_m, "SetMetadata", sid, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetadata indicates an expected call of SetMetadata
func (_mr *MockServicesMockRecorder) SetMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMetadata", reflect.TypeOf((*MockServices)(nil).SetMetadata), arg0, arg1)
}

// PlacementService mocks base method
func (_m *MockServices) PlacementService(sid ServiceID, popts placement.Options) (placement.Service, error) {
	ret := _m.ctrl.Call(_m, "PlacementService", sid, popts)
	ret0, _ := ret[0].(placement.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlacementService indicates an expected call of PlacementService
func (_mr *MockServicesMockRecorder) PlacementService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementService", reflect.TypeOf((*MockServices)(nil).PlacementService), arg0, arg1)
}

// HeartbeatService mocks base method
func (_m *MockServices) HeartbeatService(service ServiceID) (HeartbeatService, error) {
	ret := _m.ctrl.Call(_m, "HeartbeatService", service)
	ret0, _ := ret[0].(HeartbeatService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatService indicates an expected call of HeartbeatService
func (_mr *MockServicesMockRecorder) HeartbeatService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HeartbeatService", reflect.TypeOf((*MockServices)(nil).HeartbeatService), arg0)
}

// LeaderService mocks base method
func (_m *MockServices) LeaderService(service ServiceID, opts ElectionOptions) (LeaderService, error) {
	ret := _m.ctrl.Call(_m, "LeaderService", service, opts)
	ret0, _ := ret[0].(LeaderService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaderService indicates an expected call of LeaderService
func (_mr *MockServicesMockRecorder) LeaderService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LeaderService", reflect.TypeOf((*MockServices)(nil).LeaderService), arg0, arg1)
}

// MockOptions is a mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return _m.recorder
}

// InitTimeout mocks base method
func (_m *MockOptions) InitTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "InitTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// InitTimeout indicates an expected call of InitTimeout
func (_mr *MockOptionsMockRecorder) InitTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitTimeout", reflect.TypeOf((*MockOptions)(nil).InitTimeout))
}

// SetInitTimeout mocks base method
func (_m *MockOptions) SetInitTimeout(t time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetInitTimeout", t)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetInitTimeout indicates an expected call of SetInitTimeout
func (_mr *MockOptionsMockRecorder) SetInitTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInitTimeout", reflect.TypeOf((*MockOptions)(nil).SetInitTimeout), arg0)
}

// KVGen mocks base method
func (_m *MockOptions) KVGen() KVGen {
	ret := _m.ctrl.Call(_m, "KVGen")
	ret0, _ := ret[0].(KVGen)
	return ret0
}

// KVGen indicates an expected call of KVGen
func (_mr *MockOptionsMockRecorder) KVGen() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KVGen", reflect.TypeOf((*MockOptions)(nil).KVGen))
}

// SetKVGen mocks base method
func (_m *MockOptions) SetKVGen(gen KVGen) Options {
	ret := _m.ctrl.Call(_m, "SetKVGen", gen)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetKVGen indicates an expected call of SetKVGen
func (_mr *MockOptionsMockRecorder) SetKVGen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetKVGen", reflect.TypeOf((*MockOptions)(nil).SetKVGen), arg0)
}

// HeartbeatGen mocks base method
func (_m *MockOptions) HeartbeatGen() HeartbeatGen {
	ret := _m.ctrl.Call(_m, "HeartbeatGen")
	ret0, _ := ret[0].(HeartbeatGen)
	return ret0
}

// HeartbeatGen indicates an expected call of HeartbeatGen
func (_mr *MockOptionsMockRecorder) HeartbeatGen() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HeartbeatGen", reflect.TypeOf((*MockOptions)(nil).HeartbeatGen))
}

// SetHeartbeatGen mocks base method
func (_m *MockOptions) SetHeartbeatGen(gen HeartbeatGen) Options {
	ret := _m.ctrl.Call(_m, "SetHeartbeatGen", gen)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetHeartbeatGen indicates an expected call of SetHeartbeatGen
func (_mr *MockOptionsMockRecorder) SetHeartbeatGen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHeartbeatGen", reflect.TypeOf((*MockOptions)(nil).SetHeartbeatGen), arg0)
}

// LeaderGen mocks base method
func (_m *MockOptions) LeaderGen() LeaderGen {
	ret := _m.ctrl.Call(_m, "LeaderGen")
	ret0, _ := ret[0].(LeaderGen)
	return ret0
}

// LeaderGen indicates an expected call of LeaderGen
func (_mr *MockOptionsMockRecorder) LeaderGen() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LeaderGen", reflect.TypeOf((*MockOptions)(nil).LeaderGen))
}

// SetLeaderGen mocks base method
func (_m *MockOptions) SetLeaderGen(gen LeaderGen) Options {
	ret := _m.ctrl.Call(_m, "SetLeaderGen", gen)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetLeaderGen indicates an expected call of SetLeaderGen
func (_mr *MockOptionsMockRecorder) SetLeaderGen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLeaderGen", reflect.TypeOf((*MockOptions)(nil).SetLeaderGen), arg0)
}

// InstrumentsOptions mocks base method
func (_m *MockOptions) InstrumentsOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentsOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

// InstrumentsOptions indicates an expected call of InstrumentsOptions
func (_mr *MockOptionsMockRecorder) InstrumentsOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstrumentsOptions", reflect.TypeOf((*MockOptions)(nil).InstrumentsOptions))
}

// SetInstrumentsOptions mocks base method
func (_m *MockOptions) SetInstrumentsOptions(iopts instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentsOptions", iopts)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetInstrumentsOptions indicates an expected call of SetInstrumentsOptions
func (_mr *MockOptionsMockRecorder) SetInstrumentsOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstrumentsOptions", reflect.TypeOf((*MockOptions)(nil).SetInstrumentsOptions), arg0)
}

// NamespaceOptions mocks base method
func (_m *MockOptions) NamespaceOptions() NamespaceOptions {
	ret := _m.ctrl.Call(_m, "NamespaceOptions")
	ret0, _ := ret[0].(NamespaceOptions)
	return ret0
}

// NamespaceOptions indicates an expected call of NamespaceOptions
func (_mr *MockOptionsMockRecorder) NamespaceOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NamespaceOptions", reflect.TypeOf((*MockOptions)(nil).NamespaceOptions))
}

// SetNamespaceOptions mocks base method
func (_m *MockOptions) SetNamespaceOptions(opts NamespaceOptions) Options {
	ret := _m.ctrl.Call(_m, "SetNamespaceOptions", opts)
	ret0, _ := ret[0].(Options)
	return ret0
}

// SetNamespaceOptions indicates an expected call of SetNamespaceOptions
func (_mr *MockOptionsMockRecorder) SetNamespaceOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNamespaceOptions", reflect.TypeOf((*MockOptions)(nil).SetNamespaceOptions), arg0)
}

// Validate mocks base method
func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (_mr *MockOptionsMockRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Validate", reflect.TypeOf((*MockOptions)(nil).Validate))
}

// MockNamespaceOptions is a mock of NamespaceOptions interface
type MockNamespaceOptions struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceOptionsMockRecorder
}

// MockNamespaceOptionsMockRecorder is the mock recorder for MockNamespaceOptions
type MockNamespaceOptionsMockRecorder struct {
	mock *MockNamespaceOptions
}

// NewMockNamespaceOptions creates a new mock instance
func NewMockNamespaceOptions(ctrl *gomock.Controller) *MockNamespaceOptions {
	mock := &MockNamespaceOptions{ctrl: ctrl}
	mock.recorder = &MockNamespaceOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNamespaceOptions) EXPECT() *MockNamespaceOptionsMockRecorder {
	return _m.recorder
}

// PlacementNamespace mocks base method
func (_m *MockNamespaceOptions) PlacementNamespace() string {
	ret := _m.ctrl.Call(_m, "PlacementNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlacementNamespace indicates an expected call of PlacementNamespace
func (_mr *MockNamespaceOptionsMockRecorder) PlacementNamespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementNamespace", reflect.TypeOf((*MockNamespaceOptions)(nil).PlacementNamespace))
}

// SetPlacementNamespace mocks base method
func (_m *MockNamespaceOptions) SetPlacementNamespace(v string) NamespaceOptions {
	ret := _m.ctrl.Call(_m, "SetPlacementNamespace", v)
	ret0, _ := ret[0].(NamespaceOptions)
	return ret0
}

// SetPlacementNamespace indicates an expected call of SetPlacementNamespace
func (_mr *MockNamespaceOptionsMockRecorder) SetPlacementNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacementNamespace", reflect.TypeOf((*MockNamespaceOptions)(nil).SetPlacementNamespace), arg0)
}

// MetadataNamespace mocks base method
func (_m *MockNamespaceOptions) MetadataNamespace() string {
	ret := _m.ctrl.Call(_m, "MetadataNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// MetadataNamespace indicates an expected call of MetadataNamespace
func (_mr *MockNamespaceOptionsMockRecorder) MetadataNamespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MetadataNamespace", reflect.TypeOf((*MockNamespaceOptions)(nil).MetadataNamespace))
}

// SetMetadataNamespace mocks base method
func (_m *MockNamespaceOptions) SetMetadataNamespace(v string) NamespaceOptions {
	ret := _m.ctrl.Call(_m, "SetMetadataNamespace", v)
	ret0, _ := ret[0].(NamespaceOptions)
	return ret0
}

// SetMetadataNamespace indicates an expected call of SetMetadataNamespace
func (_mr *MockNamespaceOptionsMockRecorder) SetMetadataNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMetadataNamespace", reflect.TypeOf((*MockNamespaceOptions)(nil).SetMetadataNamespace), arg0)
}

// MockOverrideOptions is a mock of OverrideOptions interface
type MockOverrideOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOverrideOptionsMockRecorder
}

// MockOverrideOptionsMockRecorder is the mock recorder for MockOverrideOptions
type MockOverrideOptionsMockRecorder struct {
	mock *MockOverrideOptions
}

// NewMockOverrideOptions creates a new mock instance
func NewMockOverrideOptions(ctrl *gomock.Controller) *MockOverrideOptions {
	mock := &MockOverrideOptions{ctrl: ctrl}
	mock.recorder = &MockOverrideOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOverrideOptions) EXPECT() *MockOverrideOptionsMockRecorder {
	return _m.recorder
}

// NamespaceOptions mocks base method
func (_m *MockOverrideOptions) NamespaceOptions() NamespaceOptions {
	ret := _m.ctrl.Call(_m, "NamespaceOptions")
	ret0, _ := ret[0].(NamespaceOptions)
	return ret0
}

// NamespaceOptions indicates an expected call of NamespaceOptions
func (_mr *MockOverrideOptionsMockRecorder) NamespaceOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NamespaceOptions", reflect.TypeOf((*MockOverrideOptions)(nil).NamespaceOptions))
}

// SetNamespaceOptions mocks base method
func (_m *MockOverrideOptions) SetNamespaceOptions(opts NamespaceOptions) OverrideOptions {
	ret := _m.ctrl.Call(_m, "SetNamespaceOptions", opts)
	ret0, _ := ret[0].(OverrideOptions)
	return ret0
}

// SetNamespaceOptions indicates an expected call of SetNamespaceOptions
func (_mr *MockOverrideOptionsMockRecorder) SetNamespaceOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNamespaceOptions", reflect.TypeOf((*MockOverrideOptions)(nil).SetNamespaceOptions), arg0)
}

// MockWatch is a mock of Watch interface
type MockWatch struct {
	ctrl     *gomock.Controller
	recorder *MockWatchMockRecorder
}

// MockWatchMockRecorder is the mock recorder for MockWatch
type MockWatchMockRecorder struct {
	mock *MockWatch
}

// NewMockWatch creates a new mock instance
func NewMockWatch(ctrl *gomock.Controller) *MockWatch {
	mock := &MockWatch{ctrl: ctrl}
	mock.recorder = &MockWatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockWatch) EXPECT() *MockWatchMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockWatch) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockWatchMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockWatch)(nil).Close))
}

// C mocks base method
func (_m *MockWatch) C() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "C")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// C indicates an expected call of C
func (_mr *MockWatchMockRecorder) C() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "C", reflect.TypeOf((*MockWatch)(nil).C))
}

// Get mocks base method
func (_m *MockWatch) Get() Service {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Service)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockWatchMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockWatch)(nil).Get))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Instance mocks base method
func (_m *MockService) Instance(instanceID string) (ServiceInstance, error) {
	ret := _m.ctrl.Call(_m, "Instance", instanceID)
	ret0, _ := ret[0].(ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instance indicates an expected call of Instance
func (_mr *MockServiceMockRecorder) Instance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Instance", reflect.TypeOf((*MockService)(nil).Instance), arg0)
}

// Instances mocks base method
func (_m *MockService) Instances() []ServiceInstance {
	ret := _m.ctrl.Call(_m, "Instances")
	ret0, _ := ret[0].([]ServiceInstance)
	return ret0
}

// Instances indicates an expected call of Instances
func (_mr *MockServiceMockRecorder) Instances() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Instances", reflect.TypeOf((*MockService)(nil).Instances))
}

// SetInstances mocks base method
func (_m *MockService) SetInstances(insts []ServiceInstance) Service {
	ret := _m.ctrl.Call(_m, "SetInstances", insts)
	ret0, _ := ret[0].(Service)
	return ret0
}

// SetInstances indicates an expected call of SetInstances
func (_mr *MockServiceMockRecorder) SetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstances", reflect.TypeOf((*MockService)(nil).SetInstances), arg0)
}

// Replication mocks base method
func (_m *MockService) Replication() ServiceReplication {
	ret := _m.ctrl.Call(_m, "Replication")
	ret0, _ := ret[0].(ServiceReplication)
	return ret0
}

// Replication indicates an expected call of Replication
func (_mr *MockServiceMockRecorder) Replication() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Replication", reflect.TypeOf((*MockService)(nil).Replication))
}

// SetReplication mocks base method
func (_m *MockService) SetReplication(r ServiceReplication) Service {
	ret := _m.ctrl.Call(_m, "SetReplication", r)
	ret0, _ := ret[0].(Service)
	return ret0
}

// SetReplication indicates an expected call of SetReplication
func (_mr *MockServiceMockRecorder) SetReplication(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReplication", reflect.TypeOf((*MockService)(nil).SetReplication), arg0)
}

// Sharding mocks base method
func (_m *MockService) Sharding() ServiceSharding {
	ret := _m.ctrl.Call(_m, "Sharding")
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

// Sharding indicates an expected call of Sharding
func (_mr *MockServiceMockRecorder) Sharding() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Sharding", reflect.TypeOf((*MockService)(nil).Sharding))
}

// SetSharding mocks base method
func (_m *MockService) SetSharding(s ServiceSharding) Service {
	ret := _m.ctrl.Call(_m, "SetSharding", s)
	ret0, _ := ret[0].(Service)
	return ret0
}

// SetSharding indicates an expected call of SetSharding
func (_mr *MockServiceMockRecorder) SetSharding(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetSharding", reflect.TypeOf((*MockService)(nil).SetSharding), arg0)
}

// MockServiceReplication is a mock of ServiceReplication interface
type MockServiceReplication struct {
	ctrl     *gomock.Controller
	recorder *MockServiceReplicationMockRecorder
}

// MockServiceReplicationMockRecorder is the mock recorder for MockServiceReplication
type MockServiceReplicationMockRecorder struct {
	mock *MockServiceReplication
}

// NewMockServiceReplication creates a new mock instance
func NewMockServiceReplication(ctrl *gomock.Controller) *MockServiceReplication {
	mock := &MockServiceReplication{ctrl: ctrl}
	mock.recorder = &MockServiceReplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceReplication) EXPECT() *MockServiceReplicationMockRecorder {
	return _m.recorder
}

// Replicas mocks base method
func (_m *MockServiceReplication) Replicas() int {
	ret := _m.ctrl.Call(_m, "Replicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// Replicas indicates an expected call of Replicas
func (_mr *MockServiceReplicationMockRecorder) Replicas() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Replicas", reflect.TypeOf((*MockServiceReplication)(nil).Replicas))
}

// SetReplicas mocks base method
func (_m *MockServiceReplication) SetReplicas(r int) ServiceReplication {
	ret := _m.ctrl.Call(_m, "SetReplicas", r)
	ret0, _ := ret[0].(ServiceReplication)
	return ret0
}

// SetReplicas indicates an expected call of SetReplicas
func (_mr *MockServiceReplicationMockRecorder) SetReplicas(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReplicas", reflect.TypeOf((*MockServiceReplication)(nil).SetReplicas), arg0)
}

// MockServiceSharding is a mock of ServiceSharding interface
type MockServiceSharding struct {
	ctrl     *gomock.Controller
	recorder *MockServiceShardingMockRecorder
}

// MockServiceShardingMockRecorder is the mock recorder for MockServiceSharding
type MockServiceShardingMockRecorder struct {
	mock *MockServiceSharding
}

// NewMockServiceSharding creates a new mock instance
func NewMockServiceSharding(ctrl *gomock.Controller) *MockServiceSharding {
	mock := &MockServiceSharding{ctrl: ctrl}
	mock.recorder = &MockServiceShardingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceSharding) EXPECT() *MockServiceShardingMockRecorder {
	return _m.recorder
}

// NumShards mocks base method
func (_m *MockServiceSharding) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumShards indicates an expected call of NumShards
func (_mr *MockServiceShardingMockRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NumShards", reflect.TypeOf((*MockServiceSharding)(nil).NumShards))
}

// SetNumShards mocks base method
func (_m *MockServiceSharding) SetNumShards(n int) ServiceSharding {
	ret := _m.ctrl.Call(_m, "SetNumShards", n)
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

// SetNumShards indicates an expected call of SetNumShards
func (_mr *MockServiceShardingMockRecorder) SetNumShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNumShards", reflect.TypeOf((*MockServiceSharding)(nil).SetNumShards), arg0)
}

// IsSharded mocks base method
func (_m *MockServiceSharding) IsSharded() bool {
	ret := _m.ctrl.Call(_m, "IsSharded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSharded indicates an expected call of IsSharded
func (_mr *MockServiceShardingMockRecorder) IsSharded() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsSharded", reflect.TypeOf((*MockServiceSharding)(nil).IsSharded))
}

// SetIsSharded mocks base method
func (_m *MockServiceSharding) SetIsSharded(s bool) ServiceSharding {
	ret := _m.ctrl.Call(_m, "SetIsSharded", s)
	ret0, _ := ret[0].(ServiceSharding)
	return ret0
}

// SetIsSharded indicates an expected call of SetIsSharded
func (_mr *MockServiceShardingMockRecorder) SetIsSharded(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIsSharded", reflect.TypeOf((*MockServiceSharding)(nil).SetIsSharded), arg0)
}

// MockServiceInstance is a mock of ServiceInstance interface
type MockServiceInstance struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceMockRecorder
}

// MockServiceInstanceMockRecorder is the mock recorder for MockServiceInstance
type MockServiceInstanceMockRecorder struct {
	mock *MockServiceInstance
}

// NewMockServiceInstance creates a new mock instance
func NewMockServiceInstance(ctrl *gomock.Controller) *MockServiceInstance {
	mock := &MockServiceInstance{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceInstance) EXPECT() *MockServiceInstanceMockRecorder {
	return _m.recorder
}

// ServiceID mocks base method
func (_m *MockServiceInstance) ServiceID() ServiceID {
	ret := _m.ctrl.Call(_m, "ServiceID")
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

// ServiceID indicates an expected call of ServiceID
func (_mr *MockServiceInstanceMockRecorder) ServiceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ServiceID", reflect.TypeOf((*MockServiceInstance)(nil).ServiceID))
}

// SetServiceID mocks base method
func (_m *MockServiceInstance) SetServiceID(service ServiceID) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetServiceID", service)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

// SetServiceID indicates an expected call of SetServiceID
func (_mr *MockServiceInstanceMockRecorder) SetServiceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetServiceID", reflect.TypeOf((*MockServiceInstance)(nil).SetServiceID), arg0)
}

// InstanceID mocks base method
func (_m *MockServiceInstance) InstanceID() string {
	ret := _m.ctrl.Call(_m, "InstanceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceID indicates an expected call of InstanceID
func (_mr *MockServiceInstanceMockRecorder) InstanceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstanceID", reflect.TypeOf((*MockServiceInstance)(nil).InstanceID))
}

// SetInstanceID mocks base method
func (_m *MockServiceInstance) SetInstanceID(id string) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetInstanceID", id)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

// SetInstanceID indicates an expected call of SetInstanceID
func (_mr *MockServiceInstanceMockRecorder) SetInstanceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetInstanceID", reflect.TypeOf((*MockServiceInstance)(nil).SetInstanceID), arg0)
}

// Endpoint mocks base method
func (_m *MockServiceInstance) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint
func (_mr *MockServiceInstanceMockRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Endpoint", reflect.TypeOf((*MockServiceInstance)(nil).Endpoint))
}

// SetEndpoint mocks base method
func (_m *MockServiceInstance) SetEndpoint(e string) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", e)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

// SetEndpoint indicates an expected call of SetEndpoint
func (_mr *MockServiceInstanceMockRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEndpoint", reflect.TypeOf((*MockServiceInstance)(nil).SetEndpoint), arg0)
}

// Shards mocks base method
func (_m *MockServiceInstance) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

// Shards indicates an expected call of Shards
func (_mr *MockServiceInstanceMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockServiceInstance)(nil).Shards))
}

// SetShards mocks base method
func (_m *MockServiceInstance) SetShards(s shard.Shards) ServiceInstance {
	ret := _m.ctrl.Call(_m, "SetShards", s)
	ret0, _ := ret[0].(ServiceInstance)
	return ret0
}

// SetShards indicates an expected call of SetShards
func (_mr *MockServiceInstanceMockRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetShards", reflect.TypeOf((*MockServiceInstance)(nil).SetShards), arg0)
}

// MockAdvertisement is a mock of Advertisement interface
type MockAdvertisement struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementMockRecorder
}

// MockAdvertisementMockRecorder is the mock recorder for MockAdvertisement
type MockAdvertisementMockRecorder struct {
	mock *MockAdvertisement
}

// NewMockAdvertisement creates a new mock instance
func NewMockAdvertisement(ctrl *gomock.Controller) *MockAdvertisement {
	mock := &MockAdvertisement{ctrl: ctrl}
	mock.recorder = &MockAdvertisementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAdvertisement) EXPECT() *MockAdvertisementMockRecorder {
	return _m.recorder
}

// ServiceID mocks base method
func (_m *MockAdvertisement) ServiceID() ServiceID {
	ret := _m.ctrl.Call(_m, "ServiceID")
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

// ServiceID indicates an expected call of ServiceID
func (_mr *MockAdvertisementMockRecorder) ServiceID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ServiceID", reflect.TypeOf((*MockAdvertisement)(nil).ServiceID))
}

// SetServiceID mocks base method
func (_m *MockAdvertisement) SetServiceID(service ServiceID) Advertisement {
	ret := _m.ctrl.Call(_m, "SetServiceID", service)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

// SetServiceID indicates an expected call of SetServiceID
func (_mr *MockAdvertisementMockRecorder) SetServiceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetServiceID", reflect.TypeOf((*MockAdvertisement)(nil).SetServiceID), arg0)
}

// Health mocks base method
func (_m *MockAdvertisement) Health() func() error {
	ret := _m.ctrl.Call(_m, "Health")
	ret0, _ := ret[0].(func() error)
	return ret0
}

// Health indicates an expected call of Health
func (_mr *MockAdvertisementMockRecorder) Health() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Health", reflect.TypeOf((*MockAdvertisement)(nil).Health))
}

// SetHealth mocks base method
func (_m *MockAdvertisement) SetHealth(health func() error) Advertisement {
	ret := _m.ctrl.Call(_m, "SetHealth", health)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

// SetHealth indicates an expected call of SetHealth
func (_mr *MockAdvertisementMockRecorder) SetHealth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHealth", reflect.TypeOf((*MockAdvertisement)(nil).SetHealth), arg0)
}

// PlacementInstance mocks base method
func (_m *MockAdvertisement) PlacementInstance() placement.Instance {
	ret := _m.ctrl.Call(_m, "PlacementInstance")
	ret0, _ := ret[0].(placement.Instance)
	return ret0
}

// PlacementInstance indicates an expected call of PlacementInstance
func (_mr *MockAdvertisementMockRecorder) PlacementInstance() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlacementInstance", reflect.TypeOf((*MockAdvertisement)(nil).PlacementInstance))
}

// SetPlacementInstance mocks base method
func (_m *MockAdvertisement) SetPlacementInstance(p placement.Instance) Advertisement {
	ret := _m.ctrl.Call(_m, "SetPlacementInstance", p)
	ret0, _ := ret[0].(Advertisement)
	return ret0
}

// SetPlacementInstance indicates an expected call of SetPlacementInstance
func (_mr *MockAdvertisementMockRecorder) SetPlacementInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacementInstance", reflect.TypeOf((*MockAdvertisement)(nil).SetPlacementInstance), arg0)
}

// MockServiceID is a mock of ServiceID interface
type MockServiceID struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIDMockRecorder
}

// MockServiceIDMockRecorder is the mock recorder for MockServiceID
type MockServiceIDMockRecorder struct {
	mock *MockServiceID
}

// NewMockServiceID creates a new mock instance
func NewMockServiceID(ctrl *gomock.Controller) *MockServiceID {
	mock := &MockServiceID{ctrl: ctrl}
	mock.recorder = &MockServiceIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceID) EXPECT() *MockServiceIDMockRecorder {
	return _m.recorder
}

// Name mocks base method
func (_m *MockServiceID) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockServiceIDMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockServiceID)(nil).Name))
}

// SetName mocks base method
func (_m *MockServiceID) SetName(s string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetName", s)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

// SetName indicates an expected call of SetName
func (_mr *MockServiceIDMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetName", reflect.TypeOf((*MockServiceID)(nil).SetName), arg0)
}

// Environment mocks base method
func (_m *MockServiceID) Environment() string {
	ret := _m.ctrl.Call(_m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

// Environment indicates an expected call of Environment
func (_mr *MockServiceIDMockRecorder) Environment() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Environment", reflect.TypeOf((*MockServiceID)(nil).Environment))
}

// SetEnvironment mocks base method
func (_m *MockServiceID) SetEnvironment(env string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetEnvironment", env)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

// SetEnvironment indicates an expected call of SetEnvironment
func (_mr *MockServiceIDMockRecorder) SetEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEnvironment", reflect.TypeOf((*MockServiceID)(nil).SetEnvironment), arg0)
}

// Zone mocks base method
func (_m *MockServiceID) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

// Zone indicates an expected call of Zone
func (_mr *MockServiceIDMockRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Zone", reflect.TypeOf((*MockServiceID)(nil).Zone))
}

// SetZone mocks base method
func (_m *MockServiceID) SetZone(zone string) ServiceID {
	ret := _m.ctrl.Call(_m, "SetZone", zone)
	ret0, _ := ret[0].(ServiceID)
	return ret0
}

// SetZone indicates an expected call of SetZone
func (_mr *MockServiceIDMockRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetZone", reflect.TypeOf((*MockServiceID)(nil).SetZone), arg0)
}

// String mocks base method
func (_m *MockServiceID) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockServiceIDMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "String", reflect.TypeOf((*MockServiceID)(nil).String))
}

// MockQueryOptions is a mock of QueryOptions interface
type MockQueryOptions struct {
	ctrl     *gomock.Controller
	recorder *MockQueryOptionsMockRecorder
}

// MockQueryOptionsMockRecorder is the mock recorder for MockQueryOptions
type MockQueryOptionsMockRecorder struct {
	mock *MockQueryOptions
}

// NewMockQueryOptions creates a new mock instance
func NewMockQueryOptions(ctrl *gomock.Controller) *MockQueryOptions {
	mock := &MockQueryOptions{ctrl: ctrl}
	mock.recorder = &MockQueryOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockQueryOptions) EXPECT() *MockQueryOptionsMockRecorder {
	return _m.recorder
}

// IncludeUnhealthy mocks base method
func (_m *MockQueryOptions) IncludeUnhealthy() bool {
	ret := _m.ctrl.Call(_m, "IncludeUnhealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IncludeUnhealthy indicates an expected call of IncludeUnhealthy
func (_mr *MockQueryOptionsMockRecorder) IncludeUnhealthy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncludeUnhealthy", reflect.TypeOf((*MockQueryOptions)(nil).IncludeUnhealthy))
}

// SetIncludeUnhealthy mocks base method
func (_m *MockQueryOptions) SetIncludeUnhealthy(h bool) QueryOptions {
	ret := _m.ctrl.Call(_m, "SetIncludeUnhealthy", h)
	ret0, _ := ret[0].(QueryOptions)
	return ret0
}

// SetIncludeUnhealthy indicates an expected call of SetIncludeUnhealthy
func (_mr *MockQueryOptionsMockRecorder) SetIncludeUnhealthy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetIncludeUnhealthy", reflect.TypeOf((*MockQueryOptions)(nil).SetIncludeUnhealthy), arg0)
}

// MockMetadata is a mock of Metadata interface
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return _m.recorder
}

// String mocks base method
func (_m *MockMetadata) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockMetadataMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "String", reflect.TypeOf((*MockMetadata)(nil).String))
}

// Port mocks base method
func (_m *MockMetadata) Port() uint32 {
	ret := _m.ctrl.Call(_m, "Port")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Port indicates an expected call of Port
func (_mr *MockMetadataMockRecorder) Port() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Port", reflect.TypeOf((*MockMetadata)(nil).Port))
}

// SetPort mocks base method
func (_m *MockMetadata) SetPort(p uint32) Metadata {
	ret := _m.ctrl.Call(_m, "SetPort", p)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// SetPort indicates an expected call of SetPort
func (_mr *MockMetadataMockRecorder) SetPort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPort", reflect.TypeOf((*MockMetadata)(nil).SetPort), arg0)
}

// LivenessInterval mocks base method
func (_m *MockMetadata) LivenessInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "LivenessInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LivenessInterval indicates an expected call of LivenessInterval
func (_mr *MockMetadataMockRecorder) LivenessInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LivenessInterval", reflect.TypeOf((*MockMetadata)(nil).LivenessInterval))
}

// SetLivenessInterval mocks base method
func (_m *MockMetadata) SetLivenessInterval(l time.Duration) Metadata {
	ret := _m.ctrl.Call(_m, "SetLivenessInterval", l)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// SetLivenessInterval indicates an expected call of SetLivenessInterval
func (_mr *MockMetadataMockRecorder) SetLivenessInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLivenessInterval", reflect.TypeOf((*MockMetadata)(nil).SetLivenessInterval), arg0)
}

// HeartbeatInterval mocks base method
func (_m *MockMetadata) HeartbeatInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "HeartbeatInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// HeartbeatInterval indicates an expected call of HeartbeatInterval
func (_mr *MockMetadataMockRecorder) HeartbeatInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HeartbeatInterval", reflect.TypeOf((*MockMetadata)(nil).HeartbeatInterval))
}

// SetHeartbeatInterval mocks base method
func (_m *MockMetadata) SetHeartbeatInterval(h time.Duration) Metadata {
	ret := _m.ctrl.Call(_m, "SetHeartbeatInterval", h)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// SetHeartbeatInterval indicates an expected call of SetHeartbeatInterval
func (_mr *MockMetadataMockRecorder) SetHeartbeatInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHeartbeatInterval", reflect.TypeOf((*MockMetadata)(nil).SetHeartbeatInterval), arg0)
}

// Proto mocks base method
func (_m *MockMetadata) Proto() (*metadatapb.Metadata, error) {
	ret := _m.ctrl.Call(_m, "Proto")
	ret0, _ := ret[0].(*metadatapb.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto
func (_mr *MockMetadataMockRecorder) Proto() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Proto", reflect.TypeOf((*MockMetadata)(nil).Proto))
}

// MockHeartbeatService is a mock of HeartbeatService interface
type MockHeartbeatService struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatServiceMockRecorder
}

// MockHeartbeatServiceMockRecorder is the mock recorder for MockHeartbeatService
type MockHeartbeatServiceMockRecorder struct {
	mock *MockHeartbeatService
}

// NewMockHeartbeatService creates a new mock instance
func NewMockHeartbeatService(ctrl *gomock.Controller) *MockHeartbeatService {
	mock := &MockHeartbeatService{ctrl: ctrl}
	mock.recorder = &MockHeartbeatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHeartbeatService) EXPECT() *MockHeartbeatServiceMockRecorder {
	return _m.recorder
}

// Heartbeat mocks base method
func (_m *MockHeartbeatService) Heartbeat(instance placement.Instance, ttl time.Duration) error {
	ret := _m.ctrl.Call(_m, "Heartbeat", instance, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat
func (_mr *MockHeartbeatServiceMockRecorder) Heartbeat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Heartbeat", reflect.TypeOf((*MockHeartbeatService)(nil).Heartbeat), arg0, arg1)
}

// Get mocks base method
func (_m *MockHeartbeatService) Get() ([]string, error) {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockHeartbeatServiceMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockHeartbeatService)(nil).Get))
}

// GetInstances mocks base method
func (_m *MockHeartbeatService) GetInstances() ([]placement.Instance, error) {
	ret := _m.ctrl.Call(_m, "GetInstances")
	ret0, _ := ret[0].([]placement.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (_mr *MockHeartbeatServiceMockRecorder) GetInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetInstances", reflect.TypeOf((*MockHeartbeatService)(nil).GetInstances))
}

// Delete mocks base method
func (_m *MockHeartbeatService) Delete(instance string) error {
	ret := _m.ctrl.Call(_m, "Delete", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockHeartbeatServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockHeartbeatService)(nil).Delete), arg0)
}

// Watch mocks base method
func (_m *MockHeartbeatService) Watch() (watch.Watch, error) {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(watch.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockHeartbeatServiceMockRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockHeartbeatService)(nil).Watch))
}

// MockElectionOptions is a mock of ElectionOptions interface
type MockElectionOptions struct {
	ctrl     *gomock.Controller
	recorder *MockElectionOptionsMockRecorder
}

// MockElectionOptionsMockRecorder is the mock recorder for MockElectionOptions
type MockElectionOptionsMockRecorder struct {
	mock *MockElectionOptions
}

// NewMockElectionOptions creates a new mock instance
func NewMockElectionOptions(ctrl *gomock.Controller) *MockElectionOptions {
	mock := &MockElectionOptions{ctrl: ctrl}
	mock.recorder = &MockElectionOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockElectionOptions) EXPECT() *MockElectionOptionsMockRecorder {
	return _m.recorder
}

// LeaderTimeout mocks base method
func (_m *MockElectionOptions) LeaderTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "LeaderTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LeaderTimeout indicates an expected call of LeaderTimeout
func (_mr *MockElectionOptionsMockRecorder) LeaderTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LeaderTimeout", reflect.TypeOf((*MockElectionOptions)(nil).LeaderTimeout))
}

// SetLeaderTimeout mocks base method
func (_m *MockElectionOptions) SetLeaderTimeout(t time.Duration) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetLeaderTimeout", t)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

// SetLeaderTimeout indicates an expected call of SetLeaderTimeout
func (_mr *MockElectionOptionsMockRecorder) SetLeaderTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLeaderTimeout", reflect.TypeOf((*MockElectionOptions)(nil).SetLeaderTimeout), arg0)
}

// ResignTimeout mocks base method
func (_m *MockElectionOptions) ResignTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "ResignTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ResignTimeout indicates an expected call of ResignTimeout
func (_mr *MockElectionOptionsMockRecorder) ResignTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ResignTimeout", reflect.TypeOf((*MockElectionOptions)(nil).ResignTimeout))
}

// SetResignTimeout mocks base method
func (_m *MockElectionOptions) SetResignTimeout(t time.Duration) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetResignTimeout", t)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

// SetResignTimeout indicates an expected call of SetResignTimeout
func (_mr *MockElectionOptionsMockRecorder) SetResignTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetResignTimeout", reflect.TypeOf((*MockElectionOptions)(nil).SetResignTimeout), arg0)
}

// TTLSecs mocks base method
func (_m *MockElectionOptions) TTLSecs() int {
	ret := _m.ctrl.Call(_m, "TTLSecs")
	ret0, _ := ret[0].(int)
	return ret0
}

// TTLSecs indicates an expected call of TTLSecs
func (_mr *MockElectionOptionsMockRecorder) TTLSecs() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TTLSecs", reflect.TypeOf((*MockElectionOptions)(nil).TTLSecs))
}

// SetTTLSecs mocks base method
func (_m *MockElectionOptions) SetTTLSecs(ttl int) ElectionOptions {
	ret := _m.ctrl.Call(_m, "SetTTLSecs", ttl)
	ret0, _ := ret[0].(ElectionOptions)
	return ret0
}

// SetTTLSecs indicates an expected call of SetTTLSecs
func (_mr *MockElectionOptionsMockRecorder) SetTTLSecs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTTLSecs", reflect.TypeOf((*MockElectionOptions)(nil).SetTTLSecs), arg0)
}

// MockCampaignOptions is a mock of CampaignOptions interface
type MockCampaignOptions struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignOptionsMockRecorder
}

// MockCampaignOptionsMockRecorder is the mock recorder for MockCampaignOptions
type MockCampaignOptionsMockRecorder struct {
	mock *MockCampaignOptions
}

// NewMockCampaignOptions creates a new mock instance
func NewMockCampaignOptions(ctrl *gomock.Controller) *MockCampaignOptions {
	mock := &MockCampaignOptions{ctrl: ctrl}
	mock.recorder = &MockCampaignOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCampaignOptions) EXPECT() *MockCampaignOptionsMockRecorder {
	return _m.recorder
}

// LeaderValue mocks base method
func (_m *MockCampaignOptions) LeaderValue() string {
	ret := _m.ctrl.Call(_m, "LeaderValue")
	ret0, _ := ret[0].(string)
	return ret0
}

// LeaderValue indicates an expected call of LeaderValue
func (_mr *MockCampaignOptionsMockRecorder) LeaderValue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LeaderValue", reflect.TypeOf((*MockCampaignOptions)(nil).LeaderValue))
}

// SetLeaderValue mocks base method
func (_m *MockCampaignOptions) SetLeaderValue(v string) CampaignOptions {
	ret := _m.ctrl.Call(_m, "SetLeaderValue", v)
	ret0, _ := ret[0].(CampaignOptions)
	return ret0
}

// SetLeaderValue indicates an expected call of SetLeaderValue
func (_mr *MockCampaignOptionsMockRecorder) SetLeaderValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLeaderValue", reflect.TypeOf((*MockCampaignOptions)(nil).SetLeaderValue), arg0)
}

// MockLeaderService is a mock of LeaderService interface
type MockLeaderService struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderServiceMockRecorder
}

// MockLeaderServiceMockRecorder is the mock recorder for MockLeaderService
type MockLeaderServiceMockRecorder struct {
	mock *MockLeaderService
}

// NewMockLeaderService creates a new mock instance
func NewMockLeaderService(ctrl *gomock.Controller) *MockLeaderService {
	mock := &MockLeaderService{ctrl: ctrl}
	mock.recorder = &MockLeaderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLeaderService) EXPECT() *MockLeaderServiceMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockLeaderService) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockLeaderServiceMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockLeaderService)(nil).Close))
}

// Campaign mocks base method
func (_m *MockLeaderService) Campaign(electionID string, opts CampaignOptions) (<-chan campaign.Status, error) {
	ret := _m.ctrl.Call(_m, "Campaign", electionID, opts)
	ret0, _ := ret[0].(<-chan campaign.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Campaign indicates an expected call of Campaign
func (_mr *MockLeaderServiceMockRecorder) Campaign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Campaign", reflect.TypeOf((*MockLeaderService)(nil).Campaign), arg0, arg1)
}

// Resign mocks base method
func (_m *MockLeaderService) Resign(electionID string) error {
	ret := _m.ctrl.Call(_m, "Resign", electionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resign indicates an expected call of Resign
func (_mr *MockLeaderServiceMockRecorder) Resign(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Resign", reflect.TypeOf((*MockLeaderService)(nil).Resign), arg0)
}

// Leader mocks base method
func (_m *MockLeaderService) Leader(electionID string) (string, error) {
	ret := _m.ctrl.Call(_m, "Leader", electionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader
func (_mr *MockLeaderServiceMockRecorder) Leader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Leader", reflect.TypeOf((*MockLeaderService)(nil).Leader), arg0)
}
