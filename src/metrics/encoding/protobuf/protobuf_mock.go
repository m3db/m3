// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/metrics/encoding/protobuf (interfaces: UnaggregatedEncoder)

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package protobuf is a generated GoMock package.
package protobuf

import (
	"reflect"

	"github.com/m3db/m3/src/metrics/encoding"

	"github.com/golang/mock/gomock"
)

// MockUnaggregatedEncoder is a mock of UnaggregatedEncoder interface
type MockUnaggregatedEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockUnaggregatedEncoderMockRecorder
}

// MockUnaggregatedEncoderMockRecorder is the mock recorder for MockUnaggregatedEncoder
type MockUnaggregatedEncoderMockRecorder struct {
	mock *MockUnaggregatedEncoder
}

// NewMockUnaggregatedEncoder creates a new mock instance
func NewMockUnaggregatedEncoder(ctrl *gomock.Controller) *MockUnaggregatedEncoder {
	mock := &MockUnaggregatedEncoder{ctrl: ctrl}
	mock.recorder = &MockUnaggregatedEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnaggregatedEncoder) EXPECT() *MockUnaggregatedEncoderMockRecorder {
	return m.recorder
}

// EncodeMessage mocks base method
func (m *MockUnaggregatedEncoder) EncodeMessage(arg0 encoding.UnaggregatedMessageUnion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeMessage indicates an expected call of EncodeMessage
func (mr *MockUnaggregatedEncoderMockRecorder) EncodeMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeMessage", reflect.TypeOf((*MockUnaggregatedEncoder)(nil).EncodeMessage), arg0)
}

// Len mocks base method
func (m *MockUnaggregatedEncoder) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockUnaggregatedEncoderMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockUnaggregatedEncoder)(nil).Len))
}

// Relinquish mocks base method
func (m *MockUnaggregatedEncoder) Relinquish() Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relinquish")
	ret0, _ := ret[0].(Buffer)
	return ret0
}

// Relinquish indicates an expected call of Relinquish
func (mr *MockUnaggregatedEncoderMockRecorder) Relinquish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relinquish", reflect.TypeOf((*MockUnaggregatedEncoder)(nil).Relinquish))
}

// Reset mocks base method
func (m *MockUnaggregatedEncoder) Reset(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset
func (mr *MockUnaggregatedEncoderMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUnaggregatedEncoder)(nil).Reset), arg0)
}

// Truncate mocks base method
func (m *MockUnaggregatedEncoder) Truncate(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate
func (mr *MockUnaggregatedEncoderMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockUnaggregatedEncoder)(nil).Truncate), arg0)
}
