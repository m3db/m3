// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/rulepb/rule.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package rulepb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	aggregationpb "github.com/m3db/m3/src/metrics/generated/proto/aggregationpb"
	metricpb "github.com/m3db/m3/src/metrics/generated/proto/metricpb"
	pipelinepb "github.com/m3db/m3/src/metrics/generated/proto/pipelinepb"
	policypb "github.com/m3db/m3/src/metrics/generated/proto/policypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MappingRuleSnapshot struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tombstoned   bool   `protobuf:"varint,2,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	CutoverNanos int64  `protobuf:"varint,3,opt,name=cutover_nanos,json=cutoverNanos,proto3" json:"cutover_nanos,omitempty"`
	Filter       string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// TODO(xichen): remove this and mark the field number reserved once all mapping rules are updated in KV.
	Policies           []*policypb.Policy              `protobuf:"bytes,5,rep,name=policies,proto3" json:"policies,omitempty"`
	LastUpdatedAtNanos int64                           `protobuf:"varint,6,opt,name=last_updated_at_nanos,json=lastUpdatedAtNanos,proto3" json:"last_updated_at_nanos,omitempty"`
	LastUpdatedBy      string                          `protobuf:"bytes,7,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	AggregationTypes   []aggregationpb.AggregationType `protobuf:"varint,8,rep,packed,name=aggregation_types,json=aggregationTypes,proto3,enum=aggregationpb.AggregationType" json:"aggregation_types,omitempty"`
	StoragePolicies    []*policypb.StoragePolicy       `protobuf:"bytes,9,rep,name=storage_policies,json=storagePolicies,proto3" json:"storage_policies,omitempty"`
	DropPolicy         policypb.DropPolicy             `protobuf:"varint,10,opt,name=drop_policy,json=dropPolicy,proto3,enum=policypb.DropPolicy" json:"drop_policy,omitempty"`
	Tags               []*metricpb.Tag                 `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *MappingRuleSnapshot) Reset()         { *m = MappingRuleSnapshot{} }
func (m *MappingRuleSnapshot) String() string { return proto.CompactTextString(m) }
func (*MappingRuleSnapshot) ProtoMessage()    {}
func (*MappingRuleSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{0}
}
func (m *MappingRuleSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MappingRuleSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MappingRuleSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MappingRuleSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingRuleSnapshot.Merge(m, src)
}
func (m *MappingRuleSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *MappingRuleSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingRuleSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_MappingRuleSnapshot proto.InternalMessageInfo

func (m *MappingRuleSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MappingRuleSnapshot) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *MappingRuleSnapshot) GetCutoverNanos() int64 {
	if m != nil {
		return m.CutoverNanos
	}
	return 0
}

func (m *MappingRuleSnapshot) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *MappingRuleSnapshot) GetPolicies() []*policypb.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *MappingRuleSnapshot) GetLastUpdatedAtNanos() int64 {
	if m != nil {
		return m.LastUpdatedAtNanos
	}
	return 0
}

func (m *MappingRuleSnapshot) GetLastUpdatedBy() string {
	if m != nil {
		return m.LastUpdatedBy
	}
	return ""
}

func (m *MappingRuleSnapshot) GetAggregationTypes() []aggregationpb.AggregationType {
	if m != nil {
		return m.AggregationTypes
	}
	return nil
}

func (m *MappingRuleSnapshot) GetStoragePolicies() []*policypb.StoragePolicy {
	if m != nil {
		return m.StoragePolicies
	}
	return nil
}

func (m *MappingRuleSnapshot) GetDropPolicy() policypb.DropPolicy {
	if m != nil {
		return m.DropPolicy
	}
	return policypb.DropPolicy_NONE
}

func (m *MappingRuleSnapshot) GetTags() []*metricpb.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MappingRule struct {
	Uuid      string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Snapshots []*MappingRuleSnapshot `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (m *MappingRule) Reset()         { *m = MappingRule{} }
func (m *MappingRule) String() string { return proto.CompactTextString(m) }
func (*MappingRule) ProtoMessage()    {}
func (*MappingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{1}
}
func (m *MappingRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MappingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MappingRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MappingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingRule.Merge(m, src)
}
func (m *MappingRule) XXX_Size() int {
	return m.Size()
}
func (m *MappingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingRule.DiscardUnknown(m)
}

var xxx_messageInfo_MappingRule proto.InternalMessageInfo

func (m *MappingRule) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *MappingRule) GetSnapshots() []*MappingRuleSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

// TODO(xichen): remove this once all rules are updated in KV.
type RollupTarget struct {
	Name     string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags     []string           `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Policies []*policypb.Policy `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *RollupTarget) Reset()         { *m = RollupTarget{} }
func (m *RollupTarget) String() string { return proto.CompactTextString(m) }
func (*RollupTarget) ProtoMessage()    {}
func (*RollupTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{2}
}
func (m *RollupTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupTarget.Merge(m, src)
}
func (m *RollupTarget) XXX_Size() int {
	return m.Size()
}
func (m *RollupTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupTarget.DiscardUnknown(m)
}

var xxx_messageInfo_RollupTarget proto.InternalMessageInfo

func (m *RollupTarget) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RollupTarget) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RollupTarget) GetPolicies() []*policypb.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

// TODO(xichen): rename this once all rules are updated in KV.
type RollupTargetV2 struct {
	Pipeline        *pipelinepb.Pipeline      `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	StoragePolicies []*policypb.StoragePolicy `protobuf:"bytes,2,rep,name=storage_policies,json=storagePolicies,proto3" json:"storage_policies,omitempty"`
	ResendEnabled   bool                      `protobuf:"varint,3,opt,name=resend_enabled,json=resendEnabled,proto3" json:"resend_enabled,omitempty"`
}

func (m *RollupTargetV2) Reset()         { *m = RollupTargetV2{} }
func (m *RollupTargetV2) String() string { return proto.CompactTextString(m) }
func (*RollupTargetV2) ProtoMessage()    {}
func (*RollupTargetV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{3}
}
func (m *RollupTargetV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupTargetV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupTargetV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupTargetV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupTargetV2.Merge(m, src)
}
func (m *RollupTargetV2) XXX_Size() int {
	return m.Size()
}
func (m *RollupTargetV2) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupTargetV2.DiscardUnknown(m)
}

var xxx_messageInfo_RollupTargetV2 proto.InternalMessageInfo

func (m *RollupTargetV2) GetPipeline() *pipelinepb.Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *RollupTargetV2) GetStoragePolicies() []*policypb.StoragePolicy {
	if m != nil {
		return m.StoragePolicies
	}
	return nil
}

func (m *RollupTargetV2) GetResendEnabled() bool {
	if m != nil {
		return m.ResendEnabled
	}
	return false
}

type RollupRuleSnapshot struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tombstoned   bool   `protobuf:"varint,2,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	CutoverNanos int64  `protobuf:"varint,3,opt,name=cutover_nanos,json=cutoverNanos,proto3" json:"cutover_nanos,omitempty"`
	Filter       string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// TODO(xichen): remove this and mark the field number reserved once all rollup rules are updated in KV.
	Targets            []*RollupTarget `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	LastUpdatedAtNanos int64           `protobuf:"varint,6,opt,name=last_updated_at_nanos,json=lastUpdatedAtNanos,proto3" json:"last_updated_at_nanos,omitempty"`
	LastUpdatedBy      string          `protobuf:"bytes,7,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	// TODO(xichen): rename this once all rules are updated in KV.
	TargetsV2    []*RollupTargetV2 `protobuf:"bytes,8,rep,name=targets_v2,json=targetsV2,proto3" json:"targets_v2,omitempty"`
	KeepOriginal bool              `protobuf:"varint,9,opt,name=keep_original,json=keepOriginal,proto3" json:"keep_original,omitempty"`
	Tags         []*metricpb.Tag   `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *RollupRuleSnapshot) Reset()         { *m = RollupRuleSnapshot{} }
func (m *RollupRuleSnapshot) String() string { return proto.CompactTextString(m) }
func (*RollupRuleSnapshot) ProtoMessage()    {}
func (*RollupRuleSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{4}
}
func (m *RollupRuleSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupRuleSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupRuleSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupRuleSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupRuleSnapshot.Merge(m, src)
}
func (m *RollupRuleSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *RollupRuleSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupRuleSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RollupRuleSnapshot proto.InternalMessageInfo

func (m *RollupRuleSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RollupRuleSnapshot) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *RollupRuleSnapshot) GetCutoverNanos() int64 {
	if m != nil {
		return m.CutoverNanos
	}
	return 0
}

func (m *RollupRuleSnapshot) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *RollupRuleSnapshot) GetTargets() []*RollupTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *RollupRuleSnapshot) GetLastUpdatedAtNanos() int64 {
	if m != nil {
		return m.LastUpdatedAtNanos
	}
	return 0
}

func (m *RollupRuleSnapshot) GetLastUpdatedBy() string {
	if m != nil {
		return m.LastUpdatedBy
	}
	return ""
}

func (m *RollupRuleSnapshot) GetTargetsV2() []*RollupTargetV2 {
	if m != nil {
		return m.TargetsV2
	}
	return nil
}

func (m *RollupRuleSnapshot) GetKeepOriginal() bool {
	if m != nil {
		return m.KeepOriginal
	}
	return false
}

func (m *RollupRuleSnapshot) GetTags() []*metricpb.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RollupRule struct {
	Uuid      string                `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Snapshots []*RollupRuleSnapshot `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (m *RollupRule) Reset()         { *m = RollupRule{} }
func (m *RollupRule) String() string { return proto.CompactTextString(m) }
func (*RollupRule) ProtoMessage()    {}
func (*RollupRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{5}
}
func (m *RollupRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupRule.Merge(m, src)
}
func (m *RollupRule) XXX_Size() int {
	return m.Size()
}
func (m *RollupRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupRule.DiscardUnknown(m)
}

var xxx_messageInfo_RollupRule proto.InternalMessageInfo

func (m *RollupRule) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *RollupRule) GetSnapshots() []*RollupRuleSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type RuleSet struct {
	Uuid               string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Namespace          string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreatedAtNanos     int64          `protobuf:"varint,3,opt,name=created_at_nanos,json=createdAtNanos,proto3" json:"created_at_nanos,omitempty"`
	LastUpdatedAtNanos int64          `protobuf:"varint,4,opt,name=last_updated_at_nanos,json=lastUpdatedAtNanos,proto3" json:"last_updated_at_nanos,omitempty"`
	Tombstoned         bool           `protobuf:"varint,5,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	CutoverNanos       int64          `protobuf:"varint,6,opt,name=cutover_nanos,json=cutoverNanos,proto3" json:"cutover_nanos,omitempty"`
	MappingRules       []*MappingRule `protobuf:"bytes,7,rep,name=mapping_rules,json=mappingRules,proto3" json:"mapping_rules,omitempty"`
	RollupRules        []*RollupRule  `protobuf:"bytes,8,rep,name=rollup_rules,json=rollupRules,proto3" json:"rollup_rules,omitempty"`
	LastUpdatedBy      string         `protobuf:"bytes,9,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
}

func (m *RuleSet) Reset()         { *m = RuleSet{} }
func (m *RuleSet) String() string { return proto.CompactTextString(m) }
func (*RuleSet) ProtoMessage()    {}
func (*RuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf9dbfd2e445e0a, []int{6}
}
func (m *RuleSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleSet.Merge(m, src)
}
func (m *RuleSet) XXX_Size() int {
	return m.Size()
}
func (m *RuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_RuleSet proto.InternalMessageInfo

func (m *RuleSet) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *RuleSet) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RuleSet) GetCreatedAtNanos() int64 {
	if m != nil {
		return m.CreatedAtNanos
	}
	return 0
}

func (m *RuleSet) GetLastUpdatedAtNanos() int64 {
	if m != nil {
		return m.LastUpdatedAtNanos
	}
	return 0
}

func (m *RuleSet) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *RuleSet) GetCutoverNanos() int64 {
	if m != nil {
		return m.CutoverNanos
	}
	return 0
}

func (m *RuleSet) GetMappingRules() []*MappingRule {
	if m != nil {
		return m.MappingRules
	}
	return nil
}

func (m *RuleSet) GetRollupRules() []*RollupRule {
	if m != nil {
		return m.RollupRules
	}
	return nil
}

func (m *RuleSet) GetLastUpdatedBy() string {
	if m != nil {
		return m.LastUpdatedBy
	}
	return ""
}

func init() {
	proto.RegisterType((*MappingRuleSnapshot)(nil), "rulepb.MappingRuleSnapshot")
	proto.RegisterType((*MappingRule)(nil), "rulepb.MappingRule")
	proto.RegisterType((*RollupTarget)(nil), "rulepb.RollupTarget")
	proto.RegisterType((*RollupTargetV2)(nil), "rulepb.RollupTargetV2")
	proto.RegisterType((*RollupRuleSnapshot)(nil), "rulepb.RollupRuleSnapshot")
	proto.RegisterType((*RollupRule)(nil), "rulepb.RollupRule")
	proto.RegisterType((*RuleSet)(nil), "rulepb.RuleSet")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/rulepb/rule.proto", fileDescriptor_fbf9dbfd2e445e0a)
}

var fileDescriptor_fbf9dbfd2e445e0a = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6a, 0xe3, 0x46,
	0x14, 0x8e, 0x6c, 0xaf, 0x6d, 0x1d, 0xff, 0xac, 0x3b, 0xbb, 0xdd, 0x8a, 0xb4, 0x08, 0xd7, 0xa5,
	0xc5, 0x17, 0x45, 0x6e, 0x15, 0x02, 0xdb, 0xbb, 0x6e, 0xd8, 0x42, 0xa1, 0x74, 0x13, 0x26, 0x69,
	0x2e, 0x42, 0x41, 0x8c, 0xac, 0xa9, 0x22, 0xaa, 0x9f, 0x61, 0x66, 0x14, 0xf0, 0x53, 0xb4, 0x2f,
	0xd2, 0xf7, 0xe8, 0x65, 0x2e, 0x7b, 0x59, 0x92, 0x77, 0xe8, 0x45, 0xaf, 0x8a, 0x66, 0x24, 0x5b,
	0x26, 0x32, 0xc1, 0x81, 0xb2, 0x57, 0x3e, 0x73, 0xe6, 0xcc, 0x77, 0x7e, 0xbe, 0xef, 0x08, 0xc3,
	0xb7, 0x61, 0x24, 0xaf, 0x73, 0xdf, 0x59, 0x66, 0xc9, 0x22, 0x39, 0x0a, 0xfc, 0x45, 0x72, 0xb4,
	0x10, 0x7c, 0xb9, 0x48, 0xa8, 0xe4, 0xd1, 0x52, 0x2c, 0x42, 0x9a, 0x52, 0x4e, 0x24, 0x0d, 0x16,
	0x8c, 0x67, 0x32, 0x5b, 0xf0, 0x3c, 0xa6, 0xcc, 0x57, 0x3f, 0x8e, 0xf2, 0xa0, 0xae, 0x76, 0x1d,
	0xbe, 0xdb, 0x13, 0x89, 0x84, 0x21, 0xa7, 0x21, 0x91, 0x51, 0x96, 0x32, 0xbf, 0x7e, 0xd2, 0xb8,
	0x87, 0xdf, 0xef, 0x89, 0xc7, 0x22, 0x46, 0xe3, 0x28, 0x2d, 0xaa, 0xab, 0xcc, 0x12, 0xe9, 0xed,
	0xbe, 0x48, 0x59, 0x1c, 0x2d, 0x57, 0x05, 0x8e, 0x32, 0x9e, 0x88, 0xa2, 0xfd, 0xcc, 0x2f, 0x0d,
	0x8d, 0x32, 0xfb, 0xb7, 0x0d, 0x2f, 0x7e, 0x24, 0x8c, 0x45, 0x69, 0x88, 0xf3, 0x98, 0x9e, 0xa7,
	0x84, 0x89, 0xeb, 0x4c, 0x22, 0x04, 0x9d, 0x94, 0x24, 0xd4, 0x32, 0xa6, 0xc6, 0xdc, 0xc4, 0xca,
	0x46, 0x36, 0x80, 0xcc, 0x12, 0x5f, 0xc8, 0x2c, 0xa5, 0x81, 0xd5, 0x9a, 0x1a, 0xf3, 0x3e, 0xae,
	0x79, 0xd0, 0x67, 0x30, 0x5a, 0xe6, 0x32, 0xbb, 0xa1, 0xdc, 0x4b, 0x49, 0x9a, 0x09, 0xab, 0x3d,
	0x35, 0xe6, 0x6d, 0x3c, 0x2c, 0x9d, 0xef, 0x0a, 0x1f, 0x7a, 0x05, 0xdd, 0x5f, 0xa2, 0x58, 0x52,
	0x6e, 0x75, 0x14, 0x74, 0x79, 0x42, 0x5f, 0x42, 0x5f, 0xb5, 0x17, 0x51, 0x61, 0x3d, 0x9b, 0xb6,
	0xe7, 0x03, 0x77, 0xe2, 0x54, 0x8d, 0x3b, 0x67, 0xca, 0xc0, 0xeb, 0x08, 0xf4, 0x35, 0x7c, 0x18,
	0x13, 0x21, 0xbd, 0x9c, 0x05, 0x45, 0x8b, 0x1e, 0x91, 0x65, 0xca, 0xae, 0x4a, 0x89, 0x8a, 0xcb,
	0x9f, 0xf4, 0xdd, 0x1b, 0xa9, 0x13, 0x7f, 0x01, 0xcf, 0xb7, 0x9e, 0xf8, 0x2b, 0xab, 0xa7, 0x2a,
	0x18, 0xd5, 0x82, 0x4f, 0x56, 0xe8, 0x07, 0xf8, 0xa0, 0x46, 0xbe, 0x27, 0x57, 0x8c, 0x0a, 0xab,
	0x3f, 0x6d, 0xcf, 0xc7, 0xae, 0xed, 0x6c, 0x89, 0xc4, 0x79, 0xb3, 0x39, 0x5d, 0xac, 0x18, 0xc5,
	0x13, 0xb2, 0xed, 0x10, 0xe8, 0x04, 0x26, 0x42, 0x66, 0x9c, 0x84, 0xd4, 0x5b, 0x77, 0x67, 0xaa,
	0xee, 0x3e, 0xda, 0x74, 0x77, 0xae, 0x23, 0xca, 0x26, 0x9f, 0x8b, 0xda, 0xb1, 0xe8, 0xf5, 0x18,
	0x06, 0x01, 0xcf, 0x98, 0x06, 0x58, 0x59, 0x30, 0x35, 0xe6, 0x63, 0xf7, 0xe5, 0xe6, 0xf9, 0x5b,
	0x9e, 0xb1, 0xf2, 0x2d, 0x04, 0x6b, 0x1b, 0x7d, 0x0a, 0x1d, 0x49, 0x42, 0x61, 0x0d, 0x54, 0xba,
	0x91, 0x53, 0xf1, 0xef, 0x5c, 0x90, 0x10, 0xab, 0xab, 0xd9, 0xcf, 0x30, 0xa8, 0x71, 0x5f, 0x70,
	0x9e, 0xe7, 0x51, 0x50, 0x71, 0x5e, 0xd8, 0xe8, 0x1b, 0x30, 0x45, 0xa9, 0x09, 0x61, 0xb5, 0x14,
	0xd4, 0xc7, 0x8e, 0xde, 0x30, 0xa7, 0x41, 0x37, 0x78, 0x13, 0x3d, 0x0b, 0x60, 0x88, 0xb3, 0x38,
	0xce, 0xd9, 0x05, 0xe1, 0x21, 0x6d, 0x96, 0x14, 0x2a, 0x8b, 0x2c, 0x90, 0x4d, 0x5d, 0xd5, 0x96,
	0x12, 0xda, 0x8f, 0x29, 0x61, 0xf6, 0x87, 0x01, 0xe3, 0x7a, 0x9a, 0x4b, 0x17, 0x7d, 0x05, 0xfd,
	0x6a, 0xe3, 0x54, 0xb2, 0x41, 0x31, 0xad, 0xf5, 0x36, 0x3a, 0x67, 0xa5, 0x89, 0xd7, 0x51, 0x8d,
	0x34, 0xb5, 0xf6, 0xa4, 0xe9, 0x73, 0x18, 0x73, 0x2a, 0x68, 0x1a, 0x78, 0x34, 0x25, 0x7e, 0x4c,
	0x03, 0x25, 0xff, 0x3e, 0x1e, 0x69, 0xef, 0x77, 0xda, 0x39, 0xfb, 0xad, 0x0d, 0x48, 0xd7, 0xfb,
	0x7e, 0xf7, 0xcd, 0x81, 0x9e, 0x54, 0x03, 0xab, 0xd6, 0xed, 0x65, 0x45, 0x6b, 0x7d, 0x9a, 0xb8,
	0x0a, 0xfa, 0x3f, 0x37, 0xee, 0x18, 0xa0, 0xcc, 0xe2, 0xdd, 0xb8, 0x6a, 0xd5, 0x06, 0xee, 0xab,
	0xa6, 0x6a, 0x2e, 0x5d, 0x6c, 0x96, 0x91, 0x97, 0x6e, 0xd1, 0xfe, 0xaf, 0x94, 0x32, 0x2f, 0xe3,
	0x51, 0x18, 0xa5, 0x24, 0xb6, 0x4c, 0x35, 0xa1, 0x61, 0xe1, 0x3c, 0x2d, 0x7d, 0xeb, 0x2d, 0x80,
	0xdd, 0x5b, 0x70, 0x05, 0xb0, 0x21, 0xa4, 0x71, 0x09, 0x5e, 0x3f, 0x5c, 0x82, 0xc3, 0xed, 0xfa,
	0x76, 0xed, 0xc0, 0x3f, 0x2d, 0xe8, 0xa9, 0x3b, 0xad, 0xff, 0x07, 0xc8, 0x9f, 0x80, 0x59, 0x50,
	0x2d, 0x18, 0x59, 0x52, 0xc5, 0xb0, 0x89, 0x37, 0x0e, 0x34, 0x87, 0xc9, 0x92, 0xd3, 0xed, 0x71,
	0x6b, 0x8e, 0xc7, 0xa5, 0xbf, 0x1a, 0xf5, 0x4e, 0x76, 0x3a, 0x3b, 0xd9, 0xd9, 0x56, 0xd7, 0xb3,
	0xc7, 0xd5, 0xd5, 0x6d, 0x50, 0xd7, 0x6b, 0x18, 0x25, 0xfa, 0x2b, 0xe0, 0x15, 0xf3, 0x10, 0x56,
	0x4f, 0x4d, 0xe7, 0x45, 0xc3, 0x27, 0x02, 0x0f, 0x93, 0xcd, 0xa1, 0xf8, 0xaa, 0x0d, 0xb9, 0x1a,
	0x5d, 0xf9, 0x50, 0xd3, 0x8e, 0x1e, 0x8e, 0x15, 0x0f, 0xf8, 0xda, 0x6e, 0xd4, 0x94, 0xd9, 0xa0,
	0xa9, 0x93, 0xd3, 0x3f, 0xef, 0x6c, 0xe3, 0xf6, 0xce, 0x36, 0xfe, 0xbe, 0xb3, 0x8d, 0xdf, 0xef,
	0xed, 0x83, 0xdb, 0x7b, 0xfb, 0xe0, 0xaf, 0x7b, 0xfb, 0xe0, 0xea, 0xf8, 0x49, 0xff, 0x30, 0xfc,
	0xae, 0x3a, 0x1d, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xa8, 0xef, 0x67, 0xa1, 0x08, 0x00,
	0x00,
}

func (m *MappingRuleSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MappingRuleSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MappingRuleSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.DropPolicy != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.DropPolicy))
		i--
		dAtA[i] = 0x50
	}
	if len(m.StoragePolicies) > 0 {
		for iNdEx := len(m.StoragePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoragePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.AggregationTypes) > 0 {
		dAtA2 := make([]byte, len(m.AggregationTypes)*10)
		var j1 int
		for _, num := range m.AggregationTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRule(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastUpdatedBy) > 0 {
		i -= len(m.LastUpdatedBy)
		copy(dAtA[i:], m.LastUpdatedBy)
		i = encodeVarintRule(dAtA, i, uint64(len(m.LastUpdatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastUpdatedAtNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.LastUpdatedAtNanos))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x22
	}
	if m.CutoverNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.CutoverNanos))
		i--
		dAtA[i] = 0x18
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MappingRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MappingRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MappingRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Snapshots) > 0 {
		for iNdEx := len(m.Snapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Snapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintRule(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupTargetV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupTargetV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupTargetV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResendEnabled {
		i--
		if m.ResendEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.StoragePolicies) > 0 {
		for iNdEx := len(m.StoragePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoragePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupRuleSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupRuleSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupRuleSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.KeepOriginal {
		i--
		if m.KeepOriginal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.TargetsV2) > 0 {
		for iNdEx := len(m.TargetsV2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetsV2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LastUpdatedBy) > 0 {
		i -= len(m.LastUpdatedBy)
		copy(dAtA[i:], m.LastUpdatedBy)
		i = encodeVarintRule(dAtA, i, uint64(len(m.LastUpdatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastUpdatedAtNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.LastUpdatedAtNanos))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x22
	}
	if m.CutoverNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.CutoverNanos))
		i--
		dAtA[i] = 0x18
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Snapshots) > 0 {
		for iNdEx := len(m.Snapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Snapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastUpdatedBy) > 0 {
		i -= len(m.LastUpdatedBy)
		copy(dAtA[i:], m.LastUpdatedBy)
		i = encodeVarintRule(dAtA, i, uint64(len(m.LastUpdatedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RollupRules) > 0 {
		for iNdEx := len(m.RollupRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RollupRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MappingRules) > 0 {
		for iNdEx := len(m.MappingRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappingRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CutoverNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.CutoverNanos))
		i--
		dAtA[i] = 0x30
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LastUpdatedAtNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.LastUpdatedAtNanos))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAtNanos != 0 {
		i = encodeVarintRule(dAtA, i, uint64(m.CreatedAtNanos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintRule(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRule(dAtA []byte, offset int, v uint64) int {
	offset -= sovRule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MappingRuleSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if m.Tombstoned {
		n += 2
	}
	if m.CutoverNanos != 0 {
		n += 1 + sovRule(uint64(m.CutoverNanos))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if m.LastUpdatedAtNanos != 0 {
		n += 1 + sovRule(uint64(m.LastUpdatedAtNanos))
	}
	l = len(m.LastUpdatedBy)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.AggregationTypes) > 0 {
		l = 0
		for _, e := range m.AggregationTypes {
			l += sovRule(uint64(e))
		}
		n += 1 + sovRule(uint64(l)) + l
	}
	if len(m.StoragePolicies) > 0 {
		for _, e := range m.StoragePolicies {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if m.DropPolicy != 0 {
		n += 1 + sovRule(uint64(m.DropPolicy))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	return n
}

func (m *MappingRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	return n
}

func (m *RollupTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	return n
}

func (m *RollupTargetV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.StoragePolicies) > 0 {
		for _, e := range m.StoragePolicies {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if m.ResendEnabled {
		n += 2
	}
	return n
}

func (m *RollupRuleSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if m.Tombstoned {
		n += 2
	}
	if m.CutoverNanos != 0 {
		n += 1 + sovRule(uint64(m.CutoverNanos))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if m.LastUpdatedAtNanos != 0 {
		n += 1 + sovRule(uint64(m.LastUpdatedAtNanos))
	}
	l = len(m.LastUpdatedBy)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.TargetsV2) > 0 {
		for _, e := range m.TargetsV2 {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if m.KeepOriginal {
		n += 2
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	return n
}

func (m *RollupRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	return n
}

func (m *RuleSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	if m.CreatedAtNanos != 0 {
		n += 1 + sovRule(uint64(m.CreatedAtNanos))
	}
	if m.LastUpdatedAtNanos != 0 {
		n += 1 + sovRule(uint64(m.LastUpdatedAtNanos))
	}
	if m.Tombstoned {
		n += 2
	}
	if m.CutoverNanos != 0 {
		n += 1 + sovRule(uint64(m.CutoverNanos))
	}
	if len(m.MappingRules) > 0 {
		for _, e := range m.MappingRules {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	if len(m.RollupRules) > 0 {
		for _, e := range m.RollupRules {
			l = e.Size()
			n += 1 + l + sovRule(uint64(l))
		}
	}
	l = len(m.LastUpdatedBy)
	if l > 0 {
		n += 1 + l + sovRule(uint64(l))
	}
	return n
}

func sovRule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRule(x uint64) (n int) {
	return sovRule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MappingRuleSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MappingRuleSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MappingRuleSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutoverNanos", wireType)
			}
			m.CutoverNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutoverNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &policypb.Policy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAtNanos", wireType)
			}
			m.LastUpdatedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedAtNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v aggregationpb.AggregationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= aggregationpb.AggregationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AggregationTypes = append(m.AggregationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRule
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRule
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AggregationTypes) == 0 {
					m.AggregationTypes = make([]aggregationpb.AggregationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v aggregationpb.AggregationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= aggregationpb.AggregationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AggregationTypes = append(m.AggregationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationTypes", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePolicies = append(m.StoragePolicies, &policypb.StoragePolicy{})
			if err := m.StoragePolicies[len(m.StoragePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPolicy", wireType)
			}
			m.DropPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropPolicy |= policypb.DropPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &metricpb.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MappingRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MappingRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MappingRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &MappingRuleSnapshot{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &policypb.Policy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupTargetV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupTargetV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupTargetV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pipeline == nil {
				m.Pipeline = &pipelinepb.Pipeline{}
			}
			if err := m.Pipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePolicies = append(m.StoragePolicies, &policypb.StoragePolicy{})
			if err := m.StoragePolicies[len(m.StoragePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResendEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResendEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupRuleSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupRuleSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupRuleSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutoverNanos", wireType)
			}
			m.CutoverNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutoverNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &RollupTarget{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAtNanos", wireType)
			}
			m.LastUpdatedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedAtNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetsV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetsV2 = append(m.TargetsV2, &RollupTargetV2{})
			if err := m.TargetsV2[len(m.TargetsV2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepOriginal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepOriginal = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &metricpb.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &RollupRuleSnapshot{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtNanos", wireType)
			}
			m.CreatedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAtNanos", wireType)
			}
			m.LastUpdatedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedAtNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutoverNanos", wireType)
			}
			m.CutoverNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutoverNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingRules = append(m.MappingRules, &MappingRule{})
			if err := m.MappingRules[len(m.MappingRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupRules = append(m.RollupRules, &RollupRule{})
			if err := m.RollupRules[len(m.RollupRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRule = fmt.Errorf("proto: unexpected end of group")
)
