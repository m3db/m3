// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/policypb/policy.proto

package policypb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	aggregationpb "github.com/m3db/m3/src/metrics/generated/proto/aggregationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DropPolicy int32

const (
	DropPolicy_NONE               DropPolicy = 0
	DropPolicy_DROP_MUST          DropPolicy = 1
	DropPolicy_DROP_IF_ONLY_MATCH DropPolicy = 2
)

var DropPolicy_name = map[int32]string{
	0: "NONE",
	1: "DROP_MUST",
	2: "DROP_IF_ONLY_MATCH",
}

var DropPolicy_value = map[string]int32{
	"NONE":               0,
	"DROP_MUST":          1,
	"DROP_IF_ONLY_MATCH": 2,
}

func (x DropPolicy) String() string {
	return proto.EnumName(DropPolicy_name, int32(x))
}

func (DropPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe25feec0f3e51b9, []int{0}
}

type Resolution struct {
	WindowSize int64 `protobuf:"varint,1,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	Precision  int64 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (m *Resolution) Reset()         { *m = Resolution{} }
func (m *Resolution) String() string { return proto.CompactTextString(m) }
func (*Resolution) ProtoMessage()    {}
func (*Resolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe25feec0f3e51b9, []int{0}
}
func (m *Resolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resolution.Merge(m, src)
}
func (m *Resolution) XXX_Size() int {
	return m.Size()
}
func (m *Resolution) XXX_DiscardUnknown() {
	xxx_messageInfo_Resolution.DiscardUnknown(m)
}

var xxx_messageInfo_Resolution proto.InternalMessageInfo

func (m *Resolution) GetWindowSize() int64 {
	if m != nil {
		return m.WindowSize
	}
	return 0
}

func (m *Resolution) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

type Retention struct {
	Period int64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *Retention) Reset()         { *m = Retention{} }
func (m *Retention) String() string { return proto.CompactTextString(m) }
func (*Retention) ProtoMessage()    {}
func (*Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe25feec0f3e51b9, []int{1}
}
func (m *Retention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Retention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Retention.Merge(m, src)
}
func (m *Retention) XXX_Size() int {
	return m.Size()
}
func (m *Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_Retention proto.InternalMessageInfo

func (m *Retention) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

type StoragePolicy struct {
	Resolution Resolution `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution"`
	Retention  Retention  `protobuf:"bytes,2,opt,name=retention,proto3" json:"retention"`
}

func (m *StoragePolicy) Reset()         { *m = StoragePolicy{} }
func (m *StoragePolicy) String() string { return proto.CompactTextString(m) }
func (*StoragePolicy) ProtoMessage()    {}
func (*StoragePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe25feec0f3e51b9, []int{2}
}
func (m *StoragePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoragePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoragePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoragePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoragePolicy.Merge(m, src)
}
func (m *StoragePolicy) XXX_Size() int {
	return m.Size()
}
func (m *StoragePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_StoragePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_StoragePolicy proto.InternalMessageInfo

func (m *StoragePolicy) GetResolution() Resolution {
	if m != nil {
		return m.Resolution
	}
	return Resolution{}
}

func (m *StoragePolicy) GetRetention() Retention {
	if m != nil {
		return m.Retention
	}
	return Retention{}
}

type Policy struct {
	StoragePolicy    *StoragePolicy                  `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
	AggregationTypes []aggregationpb.AggregationType `protobuf:"varint,2,rep,packed,name=aggregation_types,json=aggregationTypes,proto3,enum=aggregationpb.AggregationType" json:"aggregation_types,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe25feec0f3e51b9, []int{3}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetStoragePolicy() *StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return nil
}

func (m *Policy) GetAggregationTypes() []aggregationpb.AggregationType {
	if m != nil {
		return m.AggregationTypes
	}
	return nil
}

func init() {
	proto.RegisterEnum("policypb.DropPolicy", DropPolicy_name, DropPolicy_value)
	proto.RegisterType((*Resolution)(nil), "policypb.Resolution")
	proto.RegisterType((*Retention)(nil), "policypb.Retention")
	proto.RegisterType((*StoragePolicy)(nil), "policypb.StoragePolicy")
	proto.RegisterType((*Policy)(nil), "policypb.Policy")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/policypb/policy.proto", fileDescriptor_fe25feec0f3e51b9)
}

var fileDescriptor_fe25feec0f3e51b9 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xde, 0x49, 0x4b, 0x68, 0x5e, 0x48, 0x89, 0xa3, 0xd4, 0x50, 0x64, 0x5b, 0xe2, 0xa5, 0x08,
	0xee, 0x42, 0x72, 0x28, 0x08, 0x0a, 0xad, 0x51, 0x94, 0xda, 0x4d, 0xdd, 0xc4, 0x83, 0x5e, 0x96,
	0xfd, 0x31, 0x8e, 0x03, 0xdd, 0x9d, 0x61, 0x66, 0x42, 0x49, 0xcf, 0xfe, 0x01, 0x5e, 0xfc, 0x9f,
	0x7a, 0xec, 0xd1, 0x93, 0x48, 0xf2, 0x8f, 0x48, 0x67, 0x27, 0xee, 0xee, 0xd1, 0xde, 0xde, 0xf7,
	0xbd, 0xf7, 0x7d, 0xef, 0xe3, 0xcd, 0xc0, 0x84, 0x32, 0xfd, 0x6d, 0x91, 0x78, 0x29, 0xcf, 0xfd,
	0x7c, 0x9c, 0x25, 0x7e, 0x3e, 0xf6, 0x95, 0x4c, 0xfd, 0x9c, 0x68, 0xc9, 0x52, 0xe5, 0x53, 0x52,
	0x10, 0x19, 0x6b, 0x92, 0xf9, 0x42, 0x72, 0xcd, 0x7d, 0xc1, 0x2f, 0x59, 0xba, 0x14, 0x89, 0x2d,
	0x3c, 0xc3, 0xe2, 0x9d, 0x0d, 0xbd, 0xff, 0xbc, 0xe6, 0x47, 0x39, 0xe5, 0xa5, 0x2c, 0x59, 0x7c,
	0x35, 0xa8, 0xf4, 0xb8, 0xab, 0x4a, 0xe1, 0x7e, 0xf0, 0x9f, 0xeb, 0x63, 0x4a, 0x25, 0xa1, 0xb1,
	0x66, 0xbc, 0x10, 0x49, 0x1d, 0x95, 0x7e, 0xc3, 0x33, 0x80, 0x90, 0x28, 0x7e, 0xb9, 0xb8, 0xe3,
	0xf0, 0x01, 0x74, 0xaf, 0x58, 0x91, 0xf1, 0xab, 0x48, 0xb1, 0x6b, 0x32, 0x40, 0x87, 0xe8, 0x68,
	0x2b, 0x84, 0x92, 0x9a, 0xb1, 0x6b, 0x82, 0x9f, 0x40, 0x47, 0x48, 0x92, 0x32, 0xc5, 0x78, 0x31,
	0x68, 0x99, 0x76, 0x45, 0x0c, 0x9f, 0x42, 0x27, 0x24, 0x9a, 0x14, 0xc6, 0x6b, 0x0f, 0xda, 0x82,
	0x48, 0xc6, 0x33, 0x6b, 0x63, 0xd1, 0xf0, 0x3b, 0x82, 0xde, 0x4c, 0x73, 0x19, 0x53, 0x72, 0x61,
	0x8e, 0x80, 0x5f, 0x00, 0xc8, 0x7f, 0x19, 0xcc, 0x74, 0x77, 0xf4, 0xc8, 0xdb, 0x5c, 0xc8, 0xab,
	0xf2, 0x9d, 0x6e, 0xdf, 0xfc, 0x3e, 0x70, 0xc2, 0xda, 0x34, 0x3e, 0x86, 0x8e, 0xdc, 0xac, 0x34,
	0x81, 0xba, 0xa3, 0x87, 0x75, 0xa9, 0x6d, 0x59, 0x65, 0x35, 0x3b, 0xfc, 0x89, 0xa0, 0x6d, 0xf7,
	0xbf, 0x82, 0x5d, 0x55, 0x06, 0x8a, 0x4a, 0xa5, 0xcd, 0xf0, 0xb8, 0x32, 0x6a, 0x04, 0x0e, 0x7b,
	0xaa, 0x91, 0xff, 0x0c, 0x1e, 0xd4, 0x0e, 0x1b, 0xe9, 0xa5, 0x20, 0x6a, 0xd0, 0x3a, 0xdc, 0x3a,
	0xda, 0x1d, 0xb9, 0x5e, 0xe3, 0x01, 0xbc, 0x93, 0x0a, 0xcd, 0x97, 0x82, 0x84, 0xfd, 0xb8, 0x49,
	0xa8, 0x67, 0x2f, 0x01, 0x26, 0x92, 0x0b, 0x6b, 0xbd, 0x03, 0xdb, 0xc1, 0x34, 0x78, 0xd3, 0x77,
	0x70, 0x0f, 0x3a, 0x93, 0x70, 0x7a, 0x11, 0x9d, 0x7f, 0x9a, 0xcd, 0xfb, 0x08, 0xef, 0x01, 0x36,
	0xf0, 0xfd, 0xdb, 0x68, 0x1a, 0x7c, 0xf8, 0x1c, 0x9d, 0x9f, 0xcc, 0x5f, 0xbf, 0xeb, 0xb7, 0x4e,
	0x3f, 0xde, 0xac, 0x5c, 0x74, 0xbb, 0x72, 0xd1, 0x9f, 0x95, 0x8b, 0x7e, 0xac, 0x5d, 0xe7, 0x76,
	0xed, 0x3a, 0xbf, 0xd6, 0xae, 0xf3, 0xe5, 0xf8, 0x9e, 0x1f, 0x37, 0x69, 0x1b, 0x3c, 0xfe, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0x27, 0xba, 0x64, 0xfa, 0x02, 0x00, 0x00,
}

func (m *Resolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Precision != 0 {
		i = encodeVarintPolicy(dAtA, i, uint64(m.Precision))
		i--
		dAtA[i] = 0x10
	}
	if m.WindowSize != 0 {
		i = encodeVarintPolicy(dAtA, i, uint64(m.WindowSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Retention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Retention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Retention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintPolicy(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoragePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoragePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoragePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Retention.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Resolution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregationTypes) > 0 {
		dAtA4 := make([]byte, len(m.AggregationTypes)*10)
		var j3 int
		for _, num := range m.AggregationTypes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPolicy(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.StoragePolicy != nil {
		{
			size, err := m.StoragePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WindowSize != 0 {
		n += 1 + sovPolicy(uint64(m.WindowSize))
	}
	if m.Precision != 0 {
		n += 1 + sovPolicy(uint64(m.Precision))
	}
	return n
}

func (m *Retention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovPolicy(uint64(m.Period))
	}
	return n
}

func (m *StoragePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Resolution.Size()
	n += 1 + l + sovPolicy(uint64(l))
	l = m.Retention.Size()
	n += 1 + l + sovPolicy(uint64(l))
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoragePolicy != nil {
		l = m.StoragePolicy.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if len(m.AggregationTypes) > 0 {
		l = 0
		for _, e := range m.AggregationTypes {
			l += sovPolicy(uint64(e))
		}
		n += 1 + sovPolicy(uint64(l)) + l
	}
	return n
}

func sovPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicy(x uint64) (n int) {
	return sovPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			m.WindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
			}
			m.Precision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Precision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Retention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoragePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoragePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoragePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resolution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Retention.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoragePolicy == nil {
				m.StoragePolicy = &StoragePolicy{}
			}
			if err := m.StoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v aggregationpb.AggregationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= aggregationpb.AggregationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AggregationTypes = append(m.AggregationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPolicy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPolicy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AggregationTypes) == 0 {
					m.AggregationTypes = make([]aggregationpb.AggregationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v aggregationpb.AggregationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= aggregationpb.AggregationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AggregationTypes = append(m.AggregationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicy = fmt.Errorf("proto: unexpected end of group")
)
