// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package metricpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	policypb "github.com/m3db/m3/src/metrics/generated/proto/policypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetricWithMetadatas_Type int32

const (
	MetricWithMetadatas_UNKNOWN                          MetricWithMetadatas_Type = 0
	MetricWithMetadatas_COUNTER_WITH_METADATAS           MetricWithMetadatas_Type = 1
	MetricWithMetadatas_BATCH_TIMER_WITH_METADATAS       MetricWithMetadatas_Type = 2
	MetricWithMetadatas_GAUGE_WITH_METADATAS             MetricWithMetadatas_Type = 3
	MetricWithMetadatas_FORWARDED_METRIC_WITH_METADATA   MetricWithMetadatas_Type = 4
	MetricWithMetadatas_TIMED_METRIC_WITH_METADATA       MetricWithMetadatas_Type = 5
	MetricWithMetadatas_TIMED_METRIC_WITH_METADATAS      MetricWithMetadatas_Type = 6
	MetricWithMetadatas_TIMED_METRIC_WITH_STORAGE_POLICY MetricWithMetadatas_Type = 7
)

var MetricWithMetadatas_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COUNTER_WITH_METADATAS",
	2: "BATCH_TIMER_WITH_METADATAS",
	3: "GAUGE_WITH_METADATAS",
	4: "FORWARDED_METRIC_WITH_METADATA",
	5: "TIMED_METRIC_WITH_METADATA",
	6: "TIMED_METRIC_WITH_METADATAS",
	7: "TIMED_METRIC_WITH_STORAGE_POLICY",
}

var MetricWithMetadatas_Type_value = map[string]int32{
	"UNKNOWN":                          0,
	"COUNTER_WITH_METADATAS":           1,
	"BATCH_TIMER_WITH_METADATAS":       2,
	"GAUGE_WITH_METADATAS":             3,
	"FORWARDED_METRIC_WITH_METADATA":   4,
	"TIMED_METRIC_WITH_METADATA":       5,
	"TIMED_METRIC_WITH_METADATAS":      6,
	"TIMED_METRIC_WITH_STORAGE_POLICY": 7,
}

func (x MetricWithMetadatas_Type) String() string {
	return proto.EnumName(MetricWithMetadatas_Type_name, int32(x))
}

func (MetricWithMetadatas_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{8, 0}
}

type CounterWithMetadatas struct {
	Counter   Counter         `protobuf:"bytes,1,opt,name=counter,proto3" json:"counter"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas,proto3" json:"metadatas"`
}

func (m *CounterWithMetadatas) Reset()         { *m = CounterWithMetadatas{} }
func (m *CounterWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*CounterWithMetadatas) ProtoMessage()    {}
func (*CounterWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{0}
}
func (m *CounterWithMetadatas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterWithMetadatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterWithMetadatas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterWithMetadatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterWithMetadatas.Merge(m, src)
}
func (m *CounterWithMetadatas) XXX_Size() int {
	return m.Size()
}
func (m *CounterWithMetadatas) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterWithMetadatas.DiscardUnknown(m)
}

var xxx_messageInfo_CounterWithMetadatas proto.InternalMessageInfo

func (m *CounterWithMetadatas) GetCounter() Counter {
	if m != nil {
		return m.Counter
	}
	return Counter{}
}

func (m *CounterWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type BatchTimerWithMetadatas struct {
	BatchTimer BatchTimer      `protobuf:"bytes,1,opt,name=batch_timer,json=batchTimer,proto3" json:"batch_timer"`
	Metadatas  StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas,proto3" json:"metadatas"`
}

func (m *BatchTimerWithMetadatas) Reset()         { *m = BatchTimerWithMetadatas{} }
func (m *BatchTimerWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*BatchTimerWithMetadatas) ProtoMessage()    {}
func (*BatchTimerWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{1}
}
func (m *BatchTimerWithMetadatas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTimerWithMetadatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTimerWithMetadatas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTimerWithMetadatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTimerWithMetadatas.Merge(m, src)
}
func (m *BatchTimerWithMetadatas) XXX_Size() int {
	return m.Size()
}
func (m *BatchTimerWithMetadatas) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTimerWithMetadatas.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTimerWithMetadatas proto.InternalMessageInfo

func (m *BatchTimerWithMetadatas) GetBatchTimer() BatchTimer {
	if m != nil {
		return m.BatchTimer
	}
	return BatchTimer{}
}

func (m *BatchTimerWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type GaugeWithMetadatas struct {
	Gauge     Gauge           `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas,proto3" json:"metadatas"`
}

func (m *GaugeWithMetadatas) Reset()         { *m = GaugeWithMetadatas{} }
func (m *GaugeWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*GaugeWithMetadatas) ProtoMessage()    {}
func (*GaugeWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{2}
}
func (m *GaugeWithMetadatas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GaugeWithMetadatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GaugeWithMetadatas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GaugeWithMetadatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GaugeWithMetadatas.Merge(m, src)
}
func (m *GaugeWithMetadatas) XXX_Size() int {
	return m.Size()
}
func (m *GaugeWithMetadatas) XXX_DiscardUnknown() {
	xxx_messageInfo_GaugeWithMetadatas.DiscardUnknown(m)
}

var xxx_messageInfo_GaugeWithMetadatas proto.InternalMessageInfo

func (m *GaugeWithMetadatas) GetGauge() Gauge {
	if m != nil {
		return m.Gauge
	}
	return Gauge{}
}

func (m *GaugeWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type ForwardedMetricWithMetadata struct {
	Metric   ForwardedMetric `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric"`
	Metadata ForwardMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
}

func (m *ForwardedMetricWithMetadata) Reset()         { *m = ForwardedMetricWithMetadata{} }
func (m *ForwardedMetricWithMetadata) String() string { return proto.CompactTextString(m) }
func (*ForwardedMetricWithMetadata) ProtoMessage()    {}
func (*ForwardedMetricWithMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{3}
}
func (m *ForwardedMetricWithMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardedMetricWithMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardedMetricWithMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardedMetricWithMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardedMetricWithMetadata.Merge(m, src)
}
func (m *ForwardedMetricWithMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ForwardedMetricWithMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardedMetricWithMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardedMetricWithMetadata proto.InternalMessageInfo

func (m *ForwardedMetricWithMetadata) GetMetric() ForwardedMetric {
	if m != nil {
		return m.Metric
	}
	return ForwardedMetric{}
}

func (m *ForwardedMetricWithMetadata) GetMetadata() ForwardMetadata {
	if m != nil {
		return m.Metadata
	}
	return ForwardMetadata{}
}

type TimedMetricWithMetadata struct {
	Metric   TimedMetric   `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric"`
	Metadata TimedMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
}

func (m *TimedMetricWithMetadata) Reset()         { *m = TimedMetricWithMetadata{} }
func (m *TimedMetricWithMetadata) String() string { return proto.CompactTextString(m) }
func (*TimedMetricWithMetadata) ProtoMessage()    {}
func (*TimedMetricWithMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{4}
}
func (m *TimedMetricWithMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedMetricWithMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedMetricWithMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedMetricWithMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedMetricWithMetadata.Merge(m, src)
}
func (m *TimedMetricWithMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TimedMetricWithMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedMetricWithMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TimedMetricWithMetadata proto.InternalMessageInfo

func (m *TimedMetricWithMetadata) GetMetric() TimedMetric {
	if m != nil {
		return m.Metric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithMetadata) GetMetadata() TimedMetadata {
	if m != nil {
		return m.Metadata
	}
	return TimedMetadata{}
}

type TimedMetricWithMetadatas struct {
	Metric    TimedMetric     `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas,proto3" json:"metadatas"`
}

func (m *TimedMetricWithMetadatas) Reset()         { *m = TimedMetricWithMetadatas{} }
func (m *TimedMetricWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*TimedMetricWithMetadatas) ProtoMessage()    {}
func (*TimedMetricWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{5}
}
func (m *TimedMetricWithMetadatas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedMetricWithMetadatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedMetricWithMetadatas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedMetricWithMetadatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedMetricWithMetadatas.Merge(m, src)
}
func (m *TimedMetricWithMetadatas) XXX_Size() int {
	return m.Size()
}
func (m *TimedMetricWithMetadatas) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedMetricWithMetadatas.DiscardUnknown(m)
}

var xxx_messageInfo_TimedMetricWithMetadatas proto.InternalMessageInfo

func (m *TimedMetricWithMetadatas) GetMetric() TimedMetric {
	if m != nil {
		return m.Metric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type TimedMetricWithStoragePolicy struct {
	TimedMetric   TimedMetric            `protobuf:"bytes,1,opt,name=timed_metric,json=timedMetric,proto3" json:"timed_metric"`
	StoragePolicy policypb.StoragePolicy `protobuf:"bytes,2,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy"`
}

func (m *TimedMetricWithStoragePolicy) Reset()         { *m = TimedMetricWithStoragePolicy{} }
func (m *TimedMetricWithStoragePolicy) String() string { return proto.CompactTextString(m) }
func (*TimedMetricWithStoragePolicy) ProtoMessage()    {}
func (*TimedMetricWithStoragePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{6}
}
func (m *TimedMetricWithStoragePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedMetricWithStoragePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedMetricWithStoragePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedMetricWithStoragePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedMetricWithStoragePolicy.Merge(m, src)
}
func (m *TimedMetricWithStoragePolicy) XXX_Size() int {
	return m.Size()
}
func (m *TimedMetricWithStoragePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedMetricWithStoragePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TimedMetricWithStoragePolicy proto.InternalMessageInfo

func (m *TimedMetricWithStoragePolicy) GetTimedMetric() TimedMetric {
	if m != nil {
		return m.TimedMetric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithStoragePolicy) GetStoragePolicy() policypb.StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return policypb.StoragePolicy{}
}

type AggregatedMetric struct {
	Metric      TimedMetricWithStoragePolicy `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric"`
	EncodeNanos int64                        `protobuf:"varint,2,opt,name=encode_nanos,json=encodeNanos,proto3" json:"encode_nanos,omitempty"`
}

func (m *AggregatedMetric) Reset()         { *m = AggregatedMetric{} }
func (m *AggregatedMetric) String() string { return proto.CompactTextString(m) }
func (*AggregatedMetric) ProtoMessage()    {}
func (*AggregatedMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{7}
}
func (m *AggregatedMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedMetric.Merge(m, src)
}
func (m *AggregatedMetric) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedMetric.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedMetric proto.InternalMessageInfo

func (m *AggregatedMetric) GetMetric() TimedMetricWithStoragePolicy {
	if m != nil {
		return m.Metric
	}
	return TimedMetricWithStoragePolicy{}
}

func (m *AggregatedMetric) GetEncodeNanos() int64 {
	if m != nil {
		return m.EncodeNanos
	}
	return 0
}

// NB: we intentionally choose to explicitly define the message type as well
// as the corresponding payload as opposed to use `oneof` protobuf type here.
// This is because the generated `Unmarshal` method of `oneof` types doesn't
// permit reusing existing protobuf messages for decoding, thus incurring a
// significant performance hit when such message type is used for encoding
// and decoding high volume traffic.
type MetricWithMetadatas struct {
	Type                         MetricWithMetadatas_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=metricpb.MetricWithMetadatas_Type" json:"type,omitempty"`
	CounterWithMetadatas         *CounterWithMetadatas         `protobuf:"bytes,2,opt,name=counter_with_metadatas,json=counterWithMetadatas,proto3" json:"counter_with_metadatas,omitempty"`
	BatchTimerWithMetadatas      *BatchTimerWithMetadatas      `protobuf:"bytes,3,opt,name=batch_timer_with_metadatas,json=batchTimerWithMetadatas,proto3" json:"batch_timer_with_metadatas,omitempty"`
	GaugeWithMetadatas           *GaugeWithMetadatas           `protobuf:"bytes,4,opt,name=gauge_with_metadatas,json=gaugeWithMetadatas,proto3" json:"gauge_with_metadatas,omitempty"`
	ForwardedMetricWithMetadata  *ForwardedMetricWithMetadata  `protobuf:"bytes,5,opt,name=forwarded_metric_with_metadata,json=forwardedMetricWithMetadata,proto3" json:"forwarded_metric_with_metadata,omitempty"`
	TimedMetricWithMetadata      *TimedMetricWithMetadata      `protobuf:"bytes,6,opt,name=timed_metric_with_metadata,json=timedMetricWithMetadata,proto3" json:"timed_metric_with_metadata,omitempty"`
	TimedMetricWithMetadatas     *TimedMetricWithMetadatas     `protobuf:"bytes,7,opt,name=timed_metric_with_metadatas,json=timedMetricWithMetadatas,proto3" json:"timed_metric_with_metadatas,omitempty"`
	TimedMetricWithStoragePolicy *TimedMetricWithStoragePolicy `protobuf:"bytes,8,opt,name=timed_metric_with_storage_policy,json=timedMetricWithStoragePolicy,proto3" json:"timed_metric_with_storage_policy,omitempty"`
}

func (m *MetricWithMetadatas) Reset()         { *m = MetricWithMetadatas{} }
func (m *MetricWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*MetricWithMetadatas) ProtoMessage()    {}
func (*MetricWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfde9d6b40175f89, []int{8}
}
func (m *MetricWithMetadatas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricWithMetadatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricWithMetadatas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricWithMetadatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricWithMetadatas.Merge(m, src)
}
func (m *MetricWithMetadatas) XXX_Size() int {
	return m.Size()
}
func (m *MetricWithMetadatas) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricWithMetadatas.DiscardUnknown(m)
}

var xxx_messageInfo_MetricWithMetadatas proto.InternalMessageInfo

func (m *MetricWithMetadatas) GetType() MetricWithMetadatas_Type {
	if m != nil {
		return m.Type
	}
	return MetricWithMetadatas_UNKNOWN
}

func (m *MetricWithMetadatas) GetCounterWithMetadatas() *CounterWithMetadatas {
	if m != nil {
		return m.CounterWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetBatchTimerWithMetadatas() *BatchTimerWithMetadatas {
	if m != nil {
		return m.BatchTimerWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetGaugeWithMetadatas() *GaugeWithMetadatas {
	if m != nil {
		return m.GaugeWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetForwardedMetricWithMetadata() *ForwardedMetricWithMetadata {
	if m != nil {
		return m.ForwardedMetricWithMetadata
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithMetadata() *TimedMetricWithMetadata {
	if m != nil {
		return m.TimedMetricWithMetadata
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithMetadatas() *TimedMetricWithMetadatas {
	if m != nil {
		return m.TimedMetricWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithStoragePolicy() *TimedMetricWithStoragePolicy {
	if m != nil {
		return m.TimedMetricWithStoragePolicy
	}
	return nil
}

func init() {
	proto.RegisterEnum("metricpb.MetricWithMetadatas_Type", MetricWithMetadatas_Type_name, MetricWithMetadatas_Type_value)
	proto.RegisterType((*CounterWithMetadatas)(nil), "metricpb.CounterWithMetadatas")
	proto.RegisterType((*BatchTimerWithMetadatas)(nil), "metricpb.BatchTimerWithMetadatas")
	proto.RegisterType((*GaugeWithMetadatas)(nil), "metricpb.GaugeWithMetadatas")
	proto.RegisterType((*ForwardedMetricWithMetadata)(nil), "metricpb.ForwardedMetricWithMetadata")
	proto.RegisterType((*TimedMetricWithMetadata)(nil), "metricpb.TimedMetricWithMetadata")
	proto.RegisterType((*TimedMetricWithMetadatas)(nil), "metricpb.TimedMetricWithMetadatas")
	proto.RegisterType((*TimedMetricWithStoragePolicy)(nil), "metricpb.TimedMetricWithStoragePolicy")
	proto.RegisterType((*AggregatedMetric)(nil), "metricpb.AggregatedMetric")
	proto.RegisterType((*MetricWithMetadatas)(nil), "metricpb.MetricWithMetadatas")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto", fileDescriptor_dfde9d6b40175f89)
}

var fileDescriptor_dfde9d6b40175f89 = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x5d, 0x6f, 0xda, 0x56,
	0x18, 0xc7, 0x71, 0x42, 0x20, 0x7b, 0xc8, 0x32, 0x76, 0xc6, 0x02, 0x83, 0xc8, 0x49, 0xac, 0x6d,
	0x9a, 0x34, 0x0d, 0xb4, 0x20, 0x2d, 0x9a, 0xa2, 0x4d, 0x32, 0x2f, 0x21, 0x68, 0x0b, 0x64, 0xc6,
	0x11, 0x5a, 0x2f, 0x62, 0xd9, 0xc6, 0x31, 0xae, 0x0a, 0x46, 0xf6, 0x41, 0x51, 0xd4, 0x9b, 0x5e,
	0xb6, 0x37, 0x55, 0xa5, 0xaa, 0xdf, 0xa0, 0x1f, 0x26, 0x97, 0xb9, 0xec, 0x55, 0x55, 0x25, 0x57,
	0xbd, 0xef, 0x07, 0xa8, 0x6c, 0x1f, 0xe3, 0x37, 0x9c, 0xb6, 0x70, 0x67, 0x3f, 0x2f, 0xbf, 0xe7,
	0xcf, 0xf1, 0x79, 0xfe, 0x02, 0x5a, 0xaa, 0x86, 0x87, 0x53, 0xa9, 0x2c, 0xeb, 0xa3, 0xca, 0xa8,
	0x3a, 0x90, 0x2a, 0xa3, 0x6a, 0xc5, 0x34, 0xe4, 0xca, 0x48, 0xc1, 0x86, 0x26, 0x9b, 0x15, 0x55,
	0x19, 0x2b, 0x86, 0x88, 0x95, 0x41, 0x65, 0x62, 0xe8, 0x58, 0x27, 0xf1, 0x89, 0x54, 0x91, 0xf5,
	0xd1, 0x44, 0x37, 0x35, 0xac, 0x94, 0xed, 0x04, 0x5a, 0x77, 0x33, 0xc5, 0xdf, 0x7c, 0x48, 0x55,
	0x57, 0x75, 0xa7, 0x53, 0x9a, 0x5e, 0xd8, 0x6f, 0x0e, 0xc6, 0x7a, 0x72, 0x1a, 0x8b, 0x8d, 0x45,
	0x15, 0x38, 0x0f, 0x84, 0x72, 0xb4, 0x04, 0x45, 0x1c, 0x88, 0x58, 0x5c, 0x50, 0xcd, 0x44, 0x7f,
	0xa4, 0xc9, 0x57, 0x13, 0x89, 0x3c, 0x38, 0x14, 0xe6, 0x29, 0x05, 0xb9, 0xba, 0x3e, 0x1d, 0x63,
	0xc5, 0xe8, 0x6b, 0x78, 0x78, 0x42, 0x66, 0x98, 0xe8, 0x77, 0x48, 0xcb, 0x4e, 0xbc, 0x40, 0xed,
	0x52, 0xbf, 0x64, 0xf6, 0xbf, 0x2d, 0xbb, 0x4a, 0xca, 0xa4, 0xa1, 0x96, 0xbc, 0x7e, 0xbb, 0x93,
	0xe0, 0xdc, 0x3a, 0xf4, 0x17, 0x7c, 0xe5, 0x6a, 0x34, 0x0b, 0x2b, 0x76, 0xd3, 0x0f, 0x5e, 0x53,
	0x0f, 0x8b, 0xaa, 0x32, 0x98, 0x0d, 0x20, 0xcd, 0x5e, 0x07, 0xf3, 0x8a, 0x82, 0x7c, 0x4d, 0xc4,
	0xf2, 0x90, 0xd7, 0x46, 0x61, 0x35, 0x87, 0x90, 0x91, 0xac, 0x94, 0x80, 0xad, 0x1c, 0x51, 0x94,
	0xf3, 0xe0, 0x5e, 0x1f, 0xe1, 0x82, 0x34, 0x8b, 0x2c, 0xab, 0xeb, 0x09, 0x05, 0xa8, 0x25, 0x4e,
	0x55, 0x25, 0x28, 0xe9, 0x57, 0x58, 0x53, 0xad, 0x28, 0x11, 0xf3, 0x8d, 0x47, 0xb4, 0x8b, 0x09,
	0xc7, 0xa9, 0x59, 0x56, 0xc2, 0x4b, 0x0a, 0x4a, 0x47, 0xba, 0x71, 0x29, 0x1a, 0x03, 0xbb, 0xce,
	0xd0, 0x64, 0xbf, 0x18, 0x74, 0x00, 0x29, 0x07, 0x46, 0xc4, 0xf8, 0xd8, 0xa1, 0x36, 0xc2, 0x26,
	0xe5, 0xe8, 0x10, 0xd6, 0xdd, 0x29, 0x51, 0x59, 0xa4, 0xd5, 0x9d, 0x42, 0x5a, 0x67, 0x0d, 0xcc,
	0x33, 0x0a, 0xf2, 0xd6, 0x09, 0xcf, 0x53, 0x54, 0x0d, 0x29, 0xfa, 0xde, 0xc3, 0xfa, 0x5a, 0x42,
	0x6a, 0xfe, 0x8c, 0xa8, 0xc9, 0x47, 0xdb, 0xe6, 0x6b, 0x79, 0x4e, 0x41, 0x21, 0x46, 0x8b, 0xb9,
	0x98, 0x98, 0x25, 0x3f, 0xd9, 0x6b, 0x0a, 0xb6, 0x43, 0x82, 0x7a, 0x58, 0x37, 0x44, 0x55, 0x39,
	0xb5, 0xf7, 0x0f, 0xfd, 0x0d, 0x1b, 0xd6, 0x65, 0x1e, 0x08, 0x9f, 0x2f, 0x2d, 0x83, 0xbd, 0x10,
	0x6a, 0xc0, 0xa6, 0xe9, 0x00, 0x05, 0x67, 0xa3, 0x67, 0x47, 0xe6, 0x6e, 0x7a, 0x39, 0x30, 0x90,
	0x30, 0xbe, 0x36, 0xfd, 0x41, 0xe6, 0x31, 0x64, 0x59, 0x55, 0x35, 0x14, 0xd5, 0x72, 0x8a, 0x19,
	0x39, 0x78, 0x5c, 0x3f, 0xcf, 0xd5, 0x14, 0xf9, 0x45, 0xa1, 0xf3, 0xdb, 0x83, 0x0d, 0x65, 0x2c,
	0xeb, 0x03, 0x45, 0x18, 0x8b, 0x63, 0xdd, 0x39, 0xc2, 0x55, 0x2e, 0xe3, 0xc4, 0x3a, 0x56, 0x88,
	0x79, 0x9f, 0x86, 0xef, 0xe6, 0x7d, 0xaf, 0x3f, 0x20, 0x89, 0xaf, 0x26, 0xce, 0x66, 0x6d, 0xee,
	0x33, 0xde, 0xf8, 0x39, 0xc5, 0x65, 0xfe, 0x6a, 0xa2, 0x70, 0x76, 0x3d, 0xe2, 0x61, 0x8b, 0x78,
	0x91, 0x70, 0xa9, 0xe1, 0xa1, 0x10, 0xfe, 0x7e, 0x74, 0xc4, 0xc2, 0x02, 0x28, 0x2e, 0x27, 0xcf,
	0x73, 0xc2, 0x73, 0x28, 0xfa, 0xbc, 0x27, 0x4c, 0x5e, 0xb5, 0xc9, 0x7b, 0xf3, 0xac, 0x28, 0x08,
	0xcf, 0x4b, 0x31, 0xde, 0xd6, 0x81, 0x9c, 0x6d, 0x12, 0x61, 0x72, 0xd2, 0x26, 0x6f, 0x87, 0x7c,
	0x25, 0x08, 0x45, 0x6a, 0xd4, 0x98, 0x1e, 0x02, 0x7d, 0xe1, 0x2e, 0x3d, 0xb9, 0x5c, 0x41, 0x74,
	0x61, 0xcd, 0x26, 0xff, 0x14, 0x6b, 0x12, 0x7e, 0x1e, 0x57, 0xba, 0xb8, 0xc7, 0x78, 0xce, 0xa1,
	0xe8, 0xbf, 0xc4, 0xa1, 0x39, 0xa9, 0xf0, 0xd9, 0xc4, 0x6c, 0x28, 0x97, 0xc7, 0x31, 0x36, 0x22,
	0x42, 0x29, 0x9e, 0x6f, 0x16, 0xd2, 0xf6, 0x00, 0xe6, 0x93, 0x03, 0x4c, 0xae, 0x80, 0xe3, 0xcc,
	0x61, 0x0c, 0xbb, 0xd1, 0x11, 0xa1, 0xcd, 0x5a, 0xff, 0x92, 0x3d, 0xe0, 0xb6, 0xf1, 0x3d, 0x59,
	0xe6, 0x03, 0x05, 0x49, 0xeb, 0xce, 0xa2, 0x0c, 0xa4, 0xcf, 0x3a, 0xff, 0x74, 0xba, 0xfd, 0x4e,
	0x36, 0x81, 0x8a, 0xb0, 0x55, 0xef, 0x9e, 0x75, 0xf8, 0x26, 0x27, 0xf4, 0xdb, 0xfc, 0xb1, 0x70,
	0xd2, 0xe4, 0xd9, 0x06, 0xcb, 0xb3, 0xbd, 0x2c, 0x85, 0x68, 0x28, 0xd6, 0x58, 0xbe, 0x7e, 0x2c,
	0xf0, 0xed, 0x93, 0x68, 0x7e, 0x05, 0x15, 0x20, 0xd7, 0x62, 0xcf, 0x5a, 0xcd, 0x70, 0x66, 0x15,
	0x31, 0x40, 0x1f, 0x75, 0xb9, 0x3e, 0xcb, 0x35, 0x9a, 0x0d, 0x2b, 0xc1, 0xb5, 0xeb, 0xc1, 0xa2,
	0x6c, 0xd2, 0xa2, 0x5b, 0xdc, 0x98, 0xfc, 0x1a, 0xda, 0x81, 0x52, 0x7c, 0xbe, 0x97, 0x4d, 0xa1,
	0x1f, 0x61, 0x37, 0x5a, 0xd0, 0xe3, 0xbb, 0x1c, 0xdb, 0x6a, 0x0a, 0xa7, 0xdd, 0x7f, 0xdb, 0xf5,
	0xff, 0xb3, 0xe9, 0xda, 0x7f, 0xd7, 0xb7, 0x34, 0x75, 0x73, 0x4b, 0x53, 0xef, 0x6e, 0x69, 0xea,
	0xc5, 0x1d, 0x9d, 0xb8, 0xb9, 0xa3, 0x13, 0x6f, 0xee, 0xe8, 0xc4, 0x83, 0x83, 0x05, 0xff, 0x10,
	0x49, 0x29, 0xfb, 0xbd, 0xfa, 0x31, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x6b, 0x96, 0x26, 0x1a, 0x0a,
	0x00, 0x00,
}

func (m *CounterWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterWithMetadatas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadatas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BatchTimerWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTimerWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTimerWithMetadatas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadatas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BatchTimer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GaugeWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GaugeWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GaugeWithMetadatas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadatas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ForwardedMetricWithMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardedMetricWithMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardedMetricWithMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Metric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TimedMetricWithMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimedMetricWithMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Metric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TimedMetricWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimedMetricWithMetadatas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadatas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Metric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TimedMetricWithStoragePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithStoragePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimedMetricWithStoragePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoragePolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TimedMetric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AggregatedMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodeNanos != 0 {
		i = encodeVarintComposite(dAtA, i, uint64(m.EncodeNanos))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Metric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComposite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetricWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricWithMetadatas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimedMetricWithStoragePolicy != nil {
		{
			size, err := m.TimedMetricWithStoragePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TimedMetricWithMetadatas != nil {
		{
			size, err := m.TimedMetricWithMetadatas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TimedMetricWithMetadata != nil {
		{
			size, err := m.TimedMetricWithMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ForwardedMetricWithMetadata != nil {
		{
			size, err := m.ForwardedMetricWithMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GaugeWithMetadatas != nil {
		{
			size, err := m.GaugeWithMetadatas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BatchTimerWithMetadatas != nil {
		{
			size, err := m.BatchTimerWithMetadatas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CounterWithMetadatas != nil {
		{
			size, err := m.CounterWithMetadatas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComposite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintComposite(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComposite(dAtA []byte, offset int, v uint64) int {
	offset -= sovComposite(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CounterWithMetadatas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Counter.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *BatchTimerWithMetadatas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BatchTimer.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *GaugeWithMetadatas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gauge.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *ForwardedMetricWithMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithMetadatas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithStoragePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimedMetric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.StoragePolicy.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *AggregatedMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	if m.EncodeNanos != 0 {
		n += 1 + sovComposite(uint64(m.EncodeNanos))
	}
	return n
}

func (m *MetricWithMetadatas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovComposite(uint64(m.Type))
	}
	if m.CounterWithMetadatas != nil {
		l = m.CounterWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.BatchTimerWithMetadatas != nil {
		l = m.BatchTimerWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.GaugeWithMetadatas != nil {
		l = m.GaugeWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.ForwardedMetricWithMetadata != nil {
		l = m.ForwardedMetricWithMetadata.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithMetadata != nil {
		l = m.TimedMetricWithMetadata.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithMetadatas != nil {
		l = m.TimedMetricWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithStoragePolicy != nil {
		l = m.TimedMetricWithStoragePolicy.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	return n
}

func sovComposite(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComposite(x uint64) (n int) {
	return sovComposite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CounterWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTimerWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTimerWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTimerWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchTimer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GaugeWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GaugeWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GaugeWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardedMetricWithMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardedMetricWithMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardedMetricWithMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithStoragePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithStoragePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithStoragePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimedMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodeNanos", wireType)
			}
			m.EncodeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MetricWithMetadatas_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CounterWithMetadatas == nil {
				m.CounterWithMetadatas = &CounterWithMetadatas{}
			}
			if err := m.CounterWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimerWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchTimerWithMetadatas == nil {
				m.BatchTimerWithMetadatas = &BatchTimerWithMetadatas{}
			}
			if err := m.BatchTimerWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GaugeWithMetadatas == nil {
				m.GaugeWithMetadatas = &GaugeWithMetadatas{}
			}
			if err := m.GaugeWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedMetricWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardedMetricWithMetadata == nil {
				m.ForwardedMetricWithMetadata = &ForwardedMetricWithMetadata{}
			}
			if err := m.ForwardedMetricWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithMetadata == nil {
				m.TimedMetricWithMetadata = &TimedMetricWithMetadata{}
			}
			if err := m.TimedMetricWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithMetadatas == nil {
				m.TimedMetricWithMetadatas = &TimedMetricWithMetadatas{}
			}
			if err := m.TimedMetricWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithStoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComposite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithStoragePolicy == nil {
				m.TimedMetricWithStoragePolicy = &TimedMetricWithStoragePolicy{}
			}
			if err := m.TimedMetricWithStoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComposite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComposite
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComposite
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComposite
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComposite        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComposite          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComposite = fmt.Errorf("proto: unexpected end of group")
)
