// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto

// Copyright (c) 2025 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package metricpb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/metadata.proto
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/metric.proto

	It has these top-level messages:
		CounterWithMetadatas
		BatchTimerWithMetadatas
		GaugeWithMetadatas
		ForwardedMetricWithMetadata
		TimedMetricWithMetadata
		TimedMetricWithMetadatas
		TimedMetricWithStoragePolicy
		AggregatedMetric
		MetricWithMetadatas
		PipelineMetadata
		Metadata
		StagedMetadata
		StagedMetadatas
		ForwardMetadata
		TimedMetadata
		Counter
		BatchTimer
		Gauge
		TimedMetric
		ForwardedMetric
		Tag
*/
package metricpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import policypb "github.com/m3db/m3/src/metrics/generated/proto/policypb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricWithMetadatas_Type int32

const (
	MetricWithMetadatas_UNKNOWN                          MetricWithMetadatas_Type = 0
	MetricWithMetadatas_COUNTER_WITH_METADATAS           MetricWithMetadatas_Type = 1
	MetricWithMetadatas_BATCH_TIMER_WITH_METADATAS       MetricWithMetadatas_Type = 2
	MetricWithMetadatas_GAUGE_WITH_METADATAS             MetricWithMetadatas_Type = 3
	MetricWithMetadatas_FORWARDED_METRIC_WITH_METADATA   MetricWithMetadatas_Type = 4
	MetricWithMetadatas_TIMED_METRIC_WITH_METADATA       MetricWithMetadatas_Type = 5
	MetricWithMetadatas_TIMED_METRIC_WITH_METADATAS      MetricWithMetadatas_Type = 6
	MetricWithMetadatas_TIMED_METRIC_WITH_STORAGE_POLICY MetricWithMetadatas_Type = 7
)

var MetricWithMetadatas_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COUNTER_WITH_METADATAS",
	2: "BATCH_TIMER_WITH_METADATAS",
	3: "GAUGE_WITH_METADATAS",
	4: "FORWARDED_METRIC_WITH_METADATA",
	5: "TIMED_METRIC_WITH_METADATA",
	6: "TIMED_METRIC_WITH_METADATAS",
	7: "TIMED_METRIC_WITH_STORAGE_POLICY",
}
var MetricWithMetadatas_Type_value = map[string]int32{
	"UNKNOWN":                          0,
	"COUNTER_WITH_METADATAS":           1,
	"BATCH_TIMER_WITH_METADATAS":       2,
	"GAUGE_WITH_METADATAS":             3,
	"FORWARDED_METRIC_WITH_METADATA":   4,
	"TIMED_METRIC_WITH_METADATA":       5,
	"TIMED_METRIC_WITH_METADATAS":      6,
	"TIMED_METRIC_WITH_STORAGE_POLICY": 7,
}

func (x MetricWithMetadatas_Type) String() string {
	return proto.EnumName(MetricWithMetadatas_Type_name, int32(x))
}
func (MetricWithMetadatas_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorComposite, []int{8, 0}
}

type CounterWithMetadatas struct {
	Counter   Counter         `protobuf:"bytes,1,opt,name=counter" json:"counter"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas" json:"metadatas"`
}

func (m *CounterWithMetadatas) Reset()                    { *m = CounterWithMetadatas{} }
func (m *CounterWithMetadatas) String() string            { return proto.CompactTextString(m) }
func (*CounterWithMetadatas) ProtoMessage()               {}
func (*CounterWithMetadatas) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{0} }

func (m *CounterWithMetadatas) GetCounter() Counter {
	if m != nil {
		return m.Counter
	}
	return Counter{}
}

func (m *CounterWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type BatchTimerWithMetadatas struct {
	BatchTimer BatchTimer      `protobuf:"bytes,1,opt,name=batch_timer,json=batchTimer" json:"batch_timer"`
	Metadatas  StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas" json:"metadatas"`
}

func (m *BatchTimerWithMetadatas) Reset()                    { *m = BatchTimerWithMetadatas{} }
func (m *BatchTimerWithMetadatas) String() string            { return proto.CompactTextString(m) }
func (*BatchTimerWithMetadatas) ProtoMessage()               {}
func (*BatchTimerWithMetadatas) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{1} }

func (m *BatchTimerWithMetadatas) GetBatchTimer() BatchTimer {
	if m != nil {
		return m.BatchTimer
	}
	return BatchTimer{}
}

func (m *BatchTimerWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type GaugeWithMetadatas struct {
	Gauge     Gauge           `protobuf:"bytes,1,opt,name=gauge" json:"gauge"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas" json:"metadatas"`
}

func (m *GaugeWithMetadatas) Reset()                    { *m = GaugeWithMetadatas{} }
func (m *GaugeWithMetadatas) String() string            { return proto.CompactTextString(m) }
func (*GaugeWithMetadatas) ProtoMessage()               {}
func (*GaugeWithMetadatas) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{2} }

func (m *GaugeWithMetadatas) GetGauge() Gauge {
	if m != nil {
		return m.Gauge
	}
	return Gauge{}
}

func (m *GaugeWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type ForwardedMetricWithMetadata struct {
	Metric   ForwardedMetric `protobuf:"bytes,1,opt,name=metric" json:"metric"`
	Metadata ForwardMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata"`
}

func (m *ForwardedMetricWithMetadata) Reset()         { *m = ForwardedMetricWithMetadata{} }
func (m *ForwardedMetricWithMetadata) String() string { return proto.CompactTextString(m) }
func (*ForwardedMetricWithMetadata) ProtoMessage()    {}
func (*ForwardedMetricWithMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorComposite, []int{3}
}

func (m *ForwardedMetricWithMetadata) GetMetric() ForwardedMetric {
	if m != nil {
		return m.Metric
	}
	return ForwardedMetric{}
}

func (m *ForwardedMetricWithMetadata) GetMetadata() ForwardMetadata {
	if m != nil {
		return m.Metadata
	}
	return ForwardMetadata{}
}

type TimedMetricWithMetadata struct {
	Metric   TimedMetric   `protobuf:"bytes,1,opt,name=metric" json:"metric"`
	Metadata TimedMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata"`
}

func (m *TimedMetricWithMetadata) Reset()                    { *m = TimedMetricWithMetadata{} }
func (m *TimedMetricWithMetadata) String() string            { return proto.CompactTextString(m) }
func (*TimedMetricWithMetadata) ProtoMessage()               {}
func (*TimedMetricWithMetadata) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{4} }

func (m *TimedMetricWithMetadata) GetMetric() TimedMetric {
	if m != nil {
		return m.Metric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithMetadata) GetMetadata() TimedMetadata {
	if m != nil {
		return m.Metadata
	}
	return TimedMetadata{}
}

type TimedMetricWithMetadatas struct {
	Metric    TimedMetric     `protobuf:"bytes,1,opt,name=metric" json:"metric"`
	Metadatas StagedMetadatas `protobuf:"bytes,2,opt,name=metadatas" json:"metadatas"`
}

func (m *TimedMetricWithMetadatas) Reset()         { *m = TimedMetricWithMetadatas{} }
func (m *TimedMetricWithMetadatas) String() string { return proto.CompactTextString(m) }
func (*TimedMetricWithMetadatas) ProtoMessage()    {}
func (*TimedMetricWithMetadatas) Descriptor() ([]byte, []int) {
	return fileDescriptorComposite, []int{5}
}

func (m *TimedMetricWithMetadatas) GetMetric() TimedMetric {
	if m != nil {
		return m.Metric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithMetadatas) GetMetadatas() StagedMetadatas {
	if m != nil {
		return m.Metadatas
	}
	return StagedMetadatas{}
}

type TimedMetricWithStoragePolicy struct {
	TimedMetric   TimedMetric            `protobuf:"bytes,1,opt,name=timed_metric,json=timedMetric" json:"timed_metric"`
	StoragePolicy policypb.StoragePolicy `protobuf:"bytes,2,opt,name=storage_policy,json=storagePolicy" json:"storage_policy"`
	RoutingPolicy policypb.RoutingPolicy `protobuf:"bytes,3,opt,name=routing_policy,json=routingPolicy" json:"routing_policy"`
}

func (m *TimedMetricWithStoragePolicy) Reset()         { *m = TimedMetricWithStoragePolicy{} }
func (m *TimedMetricWithStoragePolicy) String() string { return proto.CompactTextString(m) }
func (*TimedMetricWithStoragePolicy) ProtoMessage()    {}
func (*TimedMetricWithStoragePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptorComposite, []int{6}
}

func (m *TimedMetricWithStoragePolicy) GetTimedMetric() TimedMetric {
	if m != nil {
		return m.TimedMetric
	}
	return TimedMetric{}
}

func (m *TimedMetricWithStoragePolicy) GetStoragePolicy() policypb.StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return policypb.StoragePolicy{}
}

func (m *TimedMetricWithStoragePolicy) GetRoutingPolicy() policypb.RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return policypb.RoutingPolicy{}
}

type AggregatedMetric struct {
	Metric      TimedMetricWithStoragePolicy `protobuf:"bytes,1,opt,name=metric" json:"metric"`
	EncodeNanos int64                        `protobuf:"varint,2,opt,name=encode_nanos,json=encodeNanos,proto3" json:"encode_nanos,omitempty"`
}

func (m *AggregatedMetric) Reset()                    { *m = AggregatedMetric{} }
func (m *AggregatedMetric) String() string            { return proto.CompactTextString(m) }
func (*AggregatedMetric) ProtoMessage()               {}
func (*AggregatedMetric) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{7} }

func (m *AggregatedMetric) GetMetric() TimedMetricWithStoragePolicy {
	if m != nil {
		return m.Metric
	}
	return TimedMetricWithStoragePolicy{}
}

func (m *AggregatedMetric) GetEncodeNanos() int64 {
	if m != nil {
		return m.EncodeNanos
	}
	return 0
}

// NB: we intentionally choose to explicitly define the message type as well
// as the corresponding payload as opposed to use `oneof` protobuf type here.
// This is because the generated `Unmarshal` method of `oneof` types doesn't
// permit reusing existing protobuf messages for decoding, thus incurring a
// significant performance hit when such message type is used for encoding
// and decoding high volume traffic.
type MetricWithMetadatas struct {
	Type                         MetricWithMetadatas_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=metricpb.MetricWithMetadatas_Type" json:"type,omitempty"`
	CounterWithMetadatas         *CounterWithMetadatas         `protobuf:"bytes,2,opt,name=counter_with_metadatas,json=counterWithMetadatas" json:"counter_with_metadatas,omitempty"`
	BatchTimerWithMetadatas      *BatchTimerWithMetadatas      `protobuf:"bytes,3,opt,name=batch_timer_with_metadatas,json=batchTimerWithMetadatas" json:"batch_timer_with_metadatas,omitempty"`
	GaugeWithMetadatas           *GaugeWithMetadatas           `protobuf:"bytes,4,opt,name=gauge_with_metadatas,json=gaugeWithMetadatas" json:"gauge_with_metadatas,omitempty"`
	ForwardedMetricWithMetadata  *ForwardedMetricWithMetadata  `protobuf:"bytes,5,opt,name=forwarded_metric_with_metadata,json=forwardedMetricWithMetadata" json:"forwarded_metric_with_metadata,omitempty"`
	TimedMetricWithMetadata      *TimedMetricWithMetadata      `protobuf:"bytes,6,opt,name=timed_metric_with_metadata,json=timedMetricWithMetadata" json:"timed_metric_with_metadata,omitempty"`
	TimedMetricWithMetadatas     *TimedMetricWithMetadatas     `protobuf:"bytes,7,opt,name=timed_metric_with_metadatas,json=timedMetricWithMetadatas" json:"timed_metric_with_metadatas,omitempty"`
	TimedMetricWithStoragePolicy *TimedMetricWithStoragePolicy `protobuf:"bytes,8,opt,name=timed_metric_with_storage_policy,json=timedMetricWithStoragePolicy" json:"timed_metric_with_storage_policy,omitempty"`
}

func (m *MetricWithMetadatas) Reset()                    { *m = MetricWithMetadatas{} }
func (m *MetricWithMetadatas) String() string            { return proto.CompactTextString(m) }
func (*MetricWithMetadatas) ProtoMessage()               {}
func (*MetricWithMetadatas) Descriptor() ([]byte, []int) { return fileDescriptorComposite, []int{8} }

func (m *MetricWithMetadatas) GetType() MetricWithMetadatas_Type {
	if m != nil {
		return m.Type
	}
	return MetricWithMetadatas_UNKNOWN
}

func (m *MetricWithMetadatas) GetCounterWithMetadatas() *CounterWithMetadatas {
	if m != nil {
		return m.CounterWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetBatchTimerWithMetadatas() *BatchTimerWithMetadatas {
	if m != nil {
		return m.BatchTimerWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetGaugeWithMetadatas() *GaugeWithMetadatas {
	if m != nil {
		return m.GaugeWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetForwardedMetricWithMetadata() *ForwardedMetricWithMetadata {
	if m != nil {
		return m.ForwardedMetricWithMetadata
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithMetadata() *TimedMetricWithMetadata {
	if m != nil {
		return m.TimedMetricWithMetadata
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithMetadatas() *TimedMetricWithMetadatas {
	if m != nil {
		return m.TimedMetricWithMetadatas
	}
	return nil
}

func (m *MetricWithMetadatas) GetTimedMetricWithStoragePolicy() *TimedMetricWithStoragePolicy {
	if m != nil {
		return m.TimedMetricWithStoragePolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*CounterWithMetadatas)(nil), "metricpb.CounterWithMetadatas")
	proto.RegisterType((*BatchTimerWithMetadatas)(nil), "metricpb.BatchTimerWithMetadatas")
	proto.RegisterType((*GaugeWithMetadatas)(nil), "metricpb.GaugeWithMetadatas")
	proto.RegisterType((*ForwardedMetricWithMetadata)(nil), "metricpb.ForwardedMetricWithMetadata")
	proto.RegisterType((*TimedMetricWithMetadata)(nil), "metricpb.TimedMetricWithMetadata")
	proto.RegisterType((*TimedMetricWithMetadatas)(nil), "metricpb.TimedMetricWithMetadatas")
	proto.RegisterType((*TimedMetricWithStoragePolicy)(nil), "metricpb.TimedMetricWithStoragePolicy")
	proto.RegisterType((*AggregatedMetric)(nil), "metricpb.AggregatedMetric")
	proto.RegisterType((*MetricWithMetadatas)(nil), "metricpb.MetricWithMetadatas")
	proto.RegisterEnum("metricpb.MetricWithMetadatas_Type", MetricWithMetadatas_Type_name, MetricWithMetadatas_Type_value)
}
func (m *CounterWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Counter.Size()))
	n1, err := m.Counter.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadatas.Size()))
	n2, err := m.Metadatas.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *BatchTimerWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTimerWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.BatchTimer.Size()))
	n3, err := m.BatchTimer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadatas.Size()))
	n4, err := m.Metadatas.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *GaugeWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GaugeWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Gauge.Size()))
	n5, err := m.Gauge.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadatas.Size()))
	n6, err := m.Metadatas.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *ForwardedMetricWithMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardedMetricWithMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metric.Size()))
	n7, err := m.Metric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadata.Size()))
	n8, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *TimedMetricWithMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metric.Size()))
	n9, err := m.Metric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadata.Size()))
	n10, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *TimedMetricWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metric.Size()))
	n11, err := m.Metric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metadatas.Size()))
	n12, err := m.Metadatas.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *TimedMetricWithStoragePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedMetricWithStoragePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.TimedMetric.Size()))
	n13, err := m.TimedMetric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.StoragePolicy.Size()))
	n14, err := m.StoragePolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.RoutingPolicy.Size()))
	n15, err := m.RoutingPolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *AggregatedMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComposite(dAtA, i, uint64(m.Metric.Size()))
	n16, err := m.Metric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.EncodeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.EncodeNanos))
	}
	return i, nil
}

func (m *MetricWithMetadatas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricWithMetadatas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.Type))
	}
	if m.CounterWithMetadatas != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.CounterWithMetadatas.Size()))
		n17, err := m.CounterWithMetadatas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.BatchTimerWithMetadatas != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.BatchTimerWithMetadatas.Size()))
		n18, err := m.BatchTimerWithMetadatas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.GaugeWithMetadatas != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.GaugeWithMetadatas.Size()))
		n19, err := m.GaugeWithMetadatas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.ForwardedMetricWithMetadata != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.ForwardedMetricWithMetadata.Size()))
		n20, err := m.ForwardedMetricWithMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.TimedMetricWithMetadata != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.TimedMetricWithMetadata.Size()))
		n21, err := m.TimedMetricWithMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.TimedMetricWithMetadatas != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.TimedMetricWithMetadatas.Size()))
		n22, err := m.TimedMetricWithMetadatas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.TimedMetricWithStoragePolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintComposite(dAtA, i, uint64(m.TimedMetricWithStoragePolicy.Size()))
		n23, err := m.TimedMetricWithStoragePolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func encodeVarintComposite(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CounterWithMetadatas) Size() (n int) {
	var l int
	_ = l
	l = m.Counter.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *BatchTimerWithMetadatas) Size() (n int) {
	var l int
	_ = l
	l = m.BatchTimer.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *GaugeWithMetadatas) Size() (n int) {
	var l int
	_ = l
	l = m.Gauge.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *ForwardedMetricWithMetadata) Size() (n int) {
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithMetadata) Size() (n int) {
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithMetadatas) Size() (n int) {
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.Metadatas.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *TimedMetricWithStoragePolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TimedMetric.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.StoragePolicy.Size()
	n += 1 + l + sovComposite(uint64(l))
	l = m.RoutingPolicy.Size()
	n += 1 + l + sovComposite(uint64(l))
	return n
}

func (m *AggregatedMetric) Size() (n int) {
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovComposite(uint64(l))
	if m.EncodeNanos != 0 {
		n += 1 + sovComposite(uint64(m.EncodeNanos))
	}
	return n
}

func (m *MetricWithMetadatas) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovComposite(uint64(m.Type))
	}
	if m.CounterWithMetadatas != nil {
		l = m.CounterWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.BatchTimerWithMetadatas != nil {
		l = m.BatchTimerWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.GaugeWithMetadatas != nil {
		l = m.GaugeWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.ForwardedMetricWithMetadata != nil {
		l = m.ForwardedMetricWithMetadata.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithMetadata != nil {
		l = m.TimedMetricWithMetadata.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithMetadatas != nil {
		l = m.TimedMetricWithMetadatas.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	if m.TimedMetricWithStoragePolicy != nil {
		l = m.TimedMetricWithStoragePolicy.Size()
		n += 1 + l + sovComposite(uint64(l))
	}
	return n
}

func sovComposite(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozComposite(x uint64) (n int) {
	return sovComposite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CounterWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTimerWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTimerWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTimerWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchTimer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GaugeWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GaugeWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GaugeWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardedMetricWithMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardedMetricWithMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardedMetricWithMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedMetricWithStoragePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedMetricWithStoragePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedMetricWithStoragePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimedMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoutingPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodeNanos", wireType)
			}
			m.EncodeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricWithMetadatas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricWithMetadatas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricWithMetadatas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MetricWithMetadatas_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CounterWithMetadatas == nil {
				m.CounterWithMetadatas = &CounterWithMetadatas{}
			}
			if err := m.CounterWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimerWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchTimerWithMetadatas == nil {
				m.BatchTimerWithMetadatas = &BatchTimerWithMetadatas{}
			}
			if err := m.BatchTimerWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GaugeWithMetadatas == nil {
				m.GaugeWithMetadatas = &GaugeWithMetadatas{}
			}
			if err := m.GaugeWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedMetricWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardedMetricWithMetadata == nil {
				m.ForwardedMetricWithMetadata = &ForwardedMetricWithMetadata{}
			}
			if err := m.ForwardedMetricWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithMetadata == nil {
				m.TimedMetricWithMetadata = &TimedMetricWithMetadata{}
			}
			if err := m.TimedMetricWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithMetadatas == nil {
				m.TimedMetricWithMetadatas = &TimedMetricWithMetadatas{}
			}
			if err := m.TimedMetricWithMetadatas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedMetricWithStoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComposite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedMetricWithStoragePolicy == nil {
				m.TimedMetricWithStoragePolicy = &TimedMetricWithStoragePolicy{}
			}
			if err := m.TimedMetricWithStoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComposite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComposite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComposite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComposite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComposite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthComposite
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowComposite
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipComposite(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthComposite = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComposite   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto", fileDescriptorComposite)
}

var fileDescriptorComposite = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcd, 0x6e, 0xd3, 0x58,
	0x14, 0xc7, 0xeb, 0x36, 0x4d, 0x3a, 0x27, 0x9d, 0x4e, 0xe6, 0x4e, 0xa6, 0xc9, 0x24, 0x95, 0xdb,
	0x5a, 0x33, 0x23, 0x24, 0x44, 0x22, 0x1a, 0x89, 0x0a, 0x55, 0x20, 0x39, 0x1f, 0x4d, 0x23, 0x68,
	0x52, 0x39, 0xae, 0x22, 0x58, 0xd4, 0xb2, 0x1d, 0xd7, 0x31, 0x22, 0x71, 0x64, 0xdf, 0xa8, 0xaa,
	0xd8, 0xb0, 0x84, 0x0d, 0x42, 0x42, 0xbc, 0x53, 0x97, 0x3c, 0x01, 0x42, 0x65, 0x05, 0x6b, 0x1e,
	0x00, 0xd9, 0xbe, 0x8e, 0xbf, 0xe2, 0x02, 0xc9, 0xce, 0x39, 0x1f, 0xbf, 0xf3, 0xef, 0xbd, 0xf7,
	0xfc, 0x55, 0x68, 0xaa, 0x1a, 0x1e, 0x4c, 0xa4, 0x92, 0xac, 0x0f, 0xcb, 0xc3, 0x4a, 0x5f, 0x2a,
	0x0f, 0x2b, 0x65, 0xd3, 0x90, 0xcb, 0x43, 0x05, 0x1b, 0x9a, 0x6c, 0x96, 0x55, 0x65, 0xa4, 0x18,
	0x22, 0x56, 0xfa, 0xe5, 0xb1, 0xa1, 0x63, 0x9d, 0xc4, 0xc7, 0x52, 0x59, 0xd6, 0x87, 0x63, 0xdd,
	0xd4, 0xb0, 0x52, 0xb2, 0x13, 0x68, 0xcd, 0xcd, 0x14, 0xee, 0xf8, 0x90, 0xaa, 0xae, 0xea, 0x4e,
	0xa7, 0x34, 0x39, 0xb7, 0x7f, 0x39, 0x18, 0xeb, 0xcb, 0x69, 0x2c, 0xd4, 0xe7, 0x55, 0xe0, 0x7c,
	0x10, 0xca, 0xe1, 0x02, 0x14, 0xb1, 0x2f, 0x62, 0x71, 0x4e, 0x35, 0x63, 0xfd, 0xb9, 0x26, 0x5f,
	0x8e, 0x25, 0xf2, 0xe1, 0x50, 0x98, 0x57, 0x14, 0x64, 0x6b, 0xfa, 0x64, 0x84, 0x15, 0xa3, 0xa7,
	0xe1, 0xc1, 0x31, 0x99, 0x61, 0xa2, 0xbb, 0x90, 0x92, 0x9d, 0x78, 0x9e, 0xda, 0xa1, 0x6e, 0xa5,
	0xf7, 0xfe, 0x2c, 0xb9, 0x4a, 0x4a, 0xa4, 0xa1, 0x9a, 0xb8, 0xfa, 0xb8, 0xbd, 0xc4, 0xb9, 0x75,
	0xe8, 0x01, 0xfc, 0xe6, 0x6a, 0x34, 0xf3, 0xcb, 0x76, 0xd3, 0x3f, 0x5e, 0x53, 0x17, 0x8b, 0xaa,
	0xd2, 0x9f, 0x0e, 0x20, 0xcd, 0x5e, 0x07, 0xf3, 0x9e, 0x82, 0x5c, 0x55, 0xc4, 0xf2, 0x80, 0xd7,
	0x86, 0x61, 0x35, 0x07, 0x90, 0x96, 0xac, 0x94, 0x80, 0xad, 0x1c, 0x51, 0x94, 0xf5, 0xe0, 0x5e,
	0x1f, 0xe1, 0x82, 0x34, 0x8d, 0x2c, 0xaa, 0xeb, 0x25, 0x05, 0xa8, 0x29, 0x4e, 0x54, 0x25, 0x28,
	0xe9, 0x36, 0xac, 0xaa, 0x56, 0x94, 0x88, 0xf9, 0xc3, 0x23, 0xda, 0xc5, 0x84, 0xe3, 0xd4, 0x2c,
	0x2a, 0xe1, 0x1d, 0x05, 0xc5, 0x43, 0xdd, 0xb8, 0x10, 0x8d, 0xbe, 0x5d, 0x67, 0x68, 0xb2, 0x5f,
	0x0c, 0xda, 0x87, 0xa4, 0x03, 0x23, 0x62, 0x7c, 0xec, 0x50, 0x1b, 0x61, 0x93, 0x72, 0x74, 0x00,
	0x6b, 0xee, 0x94, 0xa8, 0x2c, 0xd2, 0xea, 0x4e, 0x21, 0xad, 0xd3, 0x06, 0xe6, 0x35, 0x05, 0x39,
	0xeb, 0x84, 0x67, 0x29, 0xaa, 0x84, 0x14, 0xfd, 0xed, 0x61, 0x7d, 0x2d, 0x21, 0x35, 0xf7, 0x23,
	0x6a, 0x72, 0xd1, 0xb6, 0xd9, 0x5a, 0xde, 0x50, 0x90, 0x8f, 0xd1, 0x62, 0xce, 0x27, 0x66, 0xc1,
	0x2b, 0xfb, 0x4a, 0xc1, 0x56, 0x48, 0x50, 0x17, 0xeb, 0x86, 0xa8, 0x2a, 0x27, 0xf6, 0xfe, 0xa1,
	0x87, 0xb0, 0x6e, 0x3d, 0xe6, 0xbe, 0xf0, 0xf3, 0xd2, 0xd2, 0xd8, 0x0b, 0xa1, 0x3a, 0x6c, 0x98,
	0x0e, 0x50, 0x70, 0x36, 0x7a, 0x7a, 0x64, 0xee, 0xa6, 0x97, 0x02, 0x03, 0x09, 0xe3, 0x77, 0x33,
	0xa0, 0xa2, 0x0e, 0x1b, 0x86, 0x3e, 0xc1, 0xda, 0x48, 0x75, 0x29, 0x2b, 0x61, 0x0a, 0xe7, 0xe4,
	0x83, 0x14, 0xc3, 0x1f, 0x64, 0x5e, 0x40, 0x86, 0x55, 0x55, 0x43, 0x51, 0x2d, 0xbf, 0x99, 0xea,
	0x0b, 0x1e, 0xfa, 0xff, 0x33, 0xff, 0xb2, 0xc8, 0xb9, 0x84, 0x6e, 0x61, 0x17, 0xd6, 0x95, 0x91,
	0xac, 0xf7, 0x15, 0x61, 0x24, 0x8e, 0x74, 0xe7, 0x22, 0x56, 0xb8, 0xb4, 0x13, 0x6b, 0x5b, 0x21,
	0xe6, 0x4b, 0x0a, 0xfe, 0x9a, 0x75, 0xeb, 0xf7, 0x20, 0x81, 0x2f, 0xc7, 0xce, 0x7e, 0x6e, 0xec,
	0x31, 0xde, 0xf8, 0x19, 0xc5, 0x25, 0xfe, 0x72, 0xac, 0x70, 0x76, 0x3d, 0xe2, 0x61, 0x93, 0x38,
	0x9a, 0x70, 0xa1, 0xe1, 0x81, 0x10, 0x7e, 0x05, 0x74, 0xc4, 0x08, 0x03, 0x28, 0x2e, 0x2b, 0xcf,
	0xf2, 0xd3, 0x33, 0x28, 0xf8, 0x1c, 0x2c, 0x4c, 0x76, 0x0e, 0x7d, 0x77, 0x96, 0xa1, 0x05, 0xe1,
	0x39, 0x29, 0xc6, 0x21, 0xdb, 0x90, 0xb5, 0xad, 0x26, 0x4c, 0x4e, 0xd8, 0xe4, 0xad, 0x90, 0x3b,
	0x05, 0xa1, 0x48, 0x8d, 0xda, 0xdb, 0x33, 0xa0, 0xcf, 0x5d, 0xeb, 0x20, 0x4f, 0x34, 0x88, 0xce,
	0xaf, 0xda, 0xe4, 0xff, 0x62, 0xad, 0xc6, 0xcf, 0xe3, 0x8a, 0xe7, 0x37, 0xd8, 0xd7, 0x19, 0x14,
	0xfc, 0xab, 0x10, 0x9a, 0x93, 0x0c, 0x9f, 0x4d, 0xcc, 0x9e, 0x73, 0x39, 0x1c, 0x63, 0x46, 0x22,
	0x14, 0xe3, 0xf9, 0x66, 0x3e, 0x65, 0x0f, 0x60, 0x7e, 0x38, 0xc0, 0xe4, 0xf2, 0x38, 0xce, 0x62,
	0x46, 0xb0, 0x13, 0x1d, 0x11, 0xda, 0xcf, 0xb5, 0x5f, 0xd9, 0x03, 0x6e, 0x0b, 0xdf, 0x90, 0x65,
	0xbe, 0x51, 0x90, 0xb0, 0xde, 0x2c, 0x4a, 0x43, 0xea, 0xb4, 0xfd, 0xa8, 0xdd, 0xe9, 0xb5, 0x33,
	0x4b, 0xa8, 0x00, 0x9b, 0xb5, 0xce, 0x69, 0x9b, 0x6f, 0x70, 0x42, 0xaf, 0xc5, 0x1f, 0x09, 0xc7,
	0x0d, 0x9e, 0xad, 0xb3, 0x3c, 0xdb, 0xcd, 0x50, 0x88, 0x86, 0x42, 0x95, 0xe5, 0x6b, 0x47, 0x02,
	0xdf, 0x3a, 0x8e, 0xe6, 0x97, 0x51, 0x1e, 0xb2, 0x4d, 0xf6, 0xb4, 0xd9, 0x08, 0x67, 0x56, 0x10,
	0x03, 0xf4, 0x61, 0x87, 0xeb, 0xb1, 0x5c, 0xbd, 0x51, 0xb7, 0x12, 0x5c, 0xab, 0x16, 0x2c, 0xca,
	0x24, 0x2c, 0xba, 0xc5, 0x8d, 0xc9, 0xaf, 0xa2, 0x6d, 0x28, 0xc6, 0xe7, 0xbb, 0x99, 0x24, 0xfa,
	0x17, 0x76, 0xa2, 0x05, 0x5d, 0xbe, 0xc3, 0xb1, 0xcd, 0x86, 0x70, 0xd2, 0x79, 0xdc, 0xaa, 0x3d,
	0xc9, 0xa4, 0xaa, 0xad, 0xab, 0x6b, 0x9a, 0xfa, 0x70, 0x4d, 0x53, 0x9f, 0xae, 0x69, 0xea, 0xed,
	0x67, 0x7a, 0xe9, 0xe9, 0xfe, 0x9c, 0xff, 0x4e, 0x49, 0x49, 0xfb, 0x77, 0xe5, 0x7b, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x6c, 0x42, 0xc7, 0x42, 0x58, 0x0a, 0x00, 0x00,
}
