// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

option go_package = "github.com/m3db/m3/src/metrics/generated/proto/metricpb";

package metricpb;

enum MetricType {
  UNKNOWN = 0;
  COUNTER = 1;
  TIMER = 2;
  GAUGE = 3;
}

message Counter {
  bytes id = 1;
  int64 value = 2;
  bytes annotation = 3;
  int64 client_time_nanos = 4;
}

message BatchTimer {
  bytes id = 1;
  repeated double values = 2;
  bytes annotation = 3;
  int64 client_time_nanos = 4;
}

message Gauge {
  bytes id = 1;
  double value = 2;
  bytes annotation = 3;
  int64 client_time_nanos = 4;
}

message TimedMetric {
  MetricType type = 1;
  bytes id = 2;
  int64 time_nanos = 3;
  double value = 4;
  bytes annotation = 5;
}

message ForwardedMetric {
  MetricType type = 1;
  bytes id = 2;
  int64 time_nanos = 3;
  // values and prev_values are the same length. a given index to the arrays
  // gives the tuple (value, prev_value) for a given forwarded value.
  repeated double values = 4;
  repeated double prev_values = 6;
  bytes annotation = 5;
  uint32 version = 7;
}


message Tag {
  bytes name = 1;
  bytes value = 2;
}
