// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/pipelinepb/pipeline.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package pipelinepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	aggregationpb "github.com/m3db/m3/src/metrics/generated/proto/aggregationpb"
	transformationpb "github.com/m3db/m3/src/metrics/generated/proto/transformationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RollupOp_Type int32

const (
	RollupOp_GROUP_BY   RollupOp_Type = 0
	RollupOp_EXCLUDE_BY RollupOp_Type = 1
)

var RollupOp_Type_name = map[int32]string{
	0: "GROUP_BY",
	1: "EXCLUDE_BY",
}

var RollupOp_Type_value = map[string]int32{
	"GROUP_BY":   0,
	"EXCLUDE_BY": 1,
}

func (x RollupOp_Type) String() string {
	return proto.EnumName(RollupOp_Type_name, int32(x))
}

func (RollupOp_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{2, 0}
}

type PipelineOp_Type int32

const (
	PipelineOp_UNKNOWN        PipelineOp_Type = 0
	PipelineOp_AGGREGATION    PipelineOp_Type = 1
	PipelineOp_TRANSFORMATION PipelineOp_Type = 2
	PipelineOp_ROLLUP         PipelineOp_Type = 3
)

var PipelineOp_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "AGGREGATION",
	2: "TRANSFORMATION",
	3: "ROLLUP",
}

var PipelineOp_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"AGGREGATION":    1,
	"TRANSFORMATION": 2,
	"ROLLUP":         3,
}

func (x PipelineOp_Type) String() string {
	return proto.EnumName(PipelineOp_Type_name, int32(x))
}

func (PipelineOp_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{3, 0}
}

type AppliedPipelineOp_Type int32

const (
	AppliedPipelineOp_UNKNOWN        AppliedPipelineOp_Type = 0
	AppliedPipelineOp_TRANSFORMATION AppliedPipelineOp_Type = 1
	AppliedPipelineOp_ROLLUP         AppliedPipelineOp_Type = 2
)

var AppliedPipelineOp_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "TRANSFORMATION",
	2: "ROLLUP",
}

var AppliedPipelineOp_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"TRANSFORMATION": 1,
	"ROLLUP":         2,
}

func (x AppliedPipelineOp_Type) String() string {
	return proto.EnumName(AppliedPipelineOp_Type_name, int32(x))
}

func (AppliedPipelineOp_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{6, 0}
}

type AggregationOp struct {
	Type aggregationpb.AggregationType `protobuf:"varint,1,opt,name=type,proto3,enum=aggregationpb.AggregationType" json:"type,omitempty"`
}

func (m *AggregationOp) Reset()         { *m = AggregationOp{} }
func (m *AggregationOp) String() string { return proto.CompactTextString(m) }
func (*AggregationOp) ProtoMessage()    {}
func (*AggregationOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{0}
}
func (m *AggregationOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregationOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregationOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregationOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationOp.Merge(m, src)
}
func (m *AggregationOp) XXX_Size() int {
	return m.Size()
}
func (m *AggregationOp) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationOp.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationOp proto.InternalMessageInfo

func (m *AggregationOp) GetType() aggregationpb.AggregationType {
	if m != nil {
		return m.Type
	}
	return aggregationpb.AggregationType_UNKNOWN
}

type TransformationOp struct {
	Type transformationpb.TransformationType `protobuf:"varint,1,opt,name=type,proto3,enum=transformationpb.TransformationType" json:"type,omitempty"`
}

func (m *TransformationOp) Reset()         { *m = TransformationOp{} }
func (m *TransformationOp) String() string { return proto.CompactTextString(m) }
func (*TransformationOp) ProtoMessage()    {}
func (*TransformationOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{1}
}
func (m *TransformationOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformationOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformationOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformationOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformationOp.Merge(m, src)
}
func (m *TransformationOp) XXX_Size() int {
	return m.Size()
}
func (m *TransformationOp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformationOp.DiscardUnknown(m)
}

var xxx_messageInfo_TransformationOp proto.InternalMessageInfo

func (m *TransformationOp) GetType() transformationpb.TransformationType {
	if m != nil {
		return m.Type
	}
	return transformationpb.TransformationType_UNKNOWN
}

type RollupOp struct {
	NewName          string                          `protobuf:"bytes,1,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Tags             []string                        `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	AggregationTypes []aggregationpb.AggregationType `protobuf:"varint,3,rep,packed,name=aggregation_types,json=aggregationTypes,proto3,enum=aggregationpb.AggregationType" json:"aggregation_types,omitempty"`
	Type             RollupOp_Type                   `protobuf:"varint,4,opt,name=type,proto3,enum=pipelinepb.RollupOp_Type" json:"type,omitempty"`
}

func (m *RollupOp) Reset()         { *m = RollupOp{} }
func (m *RollupOp) String() string { return proto.CompactTextString(m) }
func (*RollupOp) ProtoMessage()    {}
func (*RollupOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{2}
}
func (m *RollupOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupOp.Merge(m, src)
}
func (m *RollupOp) XXX_Size() int {
	return m.Size()
}
func (m *RollupOp) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupOp.DiscardUnknown(m)
}

var xxx_messageInfo_RollupOp proto.InternalMessageInfo

func (m *RollupOp) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *RollupOp) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RollupOp) GetAggregationTypes() []aggregationpb.AggregationType {
	if m != nil {
		return m.AggregationTypes
	}
	return nil
}

func (m *RollupOp) GetType() RollupOp_Type {
	if m != nil {
		return m.Type
	}
	return RollupOp_GROUP_BY
}

type PipelineOp struct {
	Type           PipelineOp_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=pipelinepb.PipelineOp_Type" json:"type,omitempty"`
	Aggregation    *AggregationOp    `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Transformation *TransformationOp `protobuf:"bytes,3,opt,name=transformation,proto3" json:"transformation,omitempty"`
	Rollup         *RollupOp         `protobuf:"bytes,4,opt,name=rollup,proto3" json:"rollup,omitempty"`
}

func (m *PipelineOp) Reset()         { *m = PipelineOp{} }
func (m *PipelineOp) String() string { return proto.CompactTextString(m) }
func (*PipelineOp) ProtoMessage()    {}
func (*PipelineOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{3}
}
func (m *PipelineOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineOp.Merge(m, src)
}
func (m *PipelineOp) XXX_Size() int {
	return m.Size()
}
func (m *PipelineOp) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineOp.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineOp proto.InternalMessageInfo

func (m *PipelineOp) GetType() PipelineOp_Type {
	if m != nil {
		return m.Type
	}
	return PipelineOp_UNKNOWN
}

func (m *PipelineOp) GetAggregation() *AggregationOp {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *PipelineOp) GetTransformation() *TransformationOp {
	if m != nil {
		return m.Transformation
	}
	return nil
}

func (m *PipelineOp) GetRollup() *RollupOp {
	if m != nil {
		return m.Rollup
	}
	return nil
}

type Pipeline struct {
	Ops []PipelineOp `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{4}
}
func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return m.Size()
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetOps() []PipelineOp {
	if m != nil {
		return m.Ops
	}
	return nil
}

// AppliedRollupOp is a rollup operation that has been
// applied against a metric.
type AppliedRollupOp struct {
	Id            []byte                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AggregationId aggregationpb.AggregationID `protobuf:"bytes,2,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id"`
}

func (m *AppliedRollupOp) Reset()         { *m = AppliedRollupOp{} }
func (m *AppliedRollupOp) String() string { return proto.CompactTextString(m) }
func (*AppliedRollupOp) ProtoMessage()    {}
func (*AppliedRollupOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{5}
}
func (m *AppliedRollupOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppliedRollupOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppliedRollupOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppliedRollupOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppliedRollupOp.Merge(m, src)
}
func (m *AppliedRollupOp) XXX_Size() int {
	return m.Size()
}
func (m *AppliedRollupOp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppliedRollupOp.DiscardUnknown(m)
}

var xxx_messageInfo_AppliedRollupOp proto.InternalMessageInfo

func (m *AppliedRollupOp) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AppliedRollupOp) GetAggregationId() aggregationpb.AggregationID {
	if m != nil {
		return m.AggregationId
	}
	return aggregationpb.AggregationID{}
}

// AppliedPipelineOp is a pipeline operation that has
// been applied against a metric.
type AppliedPipelineOp struct {
	Type           AppliedPipelineOp_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pipelinepb.AppliedPipelineOp_Type" json:"type,omitempty"`
	Transformation TransformationOp       `protobuf:"bytes,2,opt,name=transformation,proto3" json:"transformation"`
	Rollup         AppliedRollupOp        `protobuf:"bytes,3,opt,name=rollup,proto3" json:"rollup"`
}

func (m *AppliedPipelineOp) Reset()         { *m = AppliedPipelineOp{} }
func (m *AppliedPipelineOp) String() string { return proto.CompactTextString(m) }
func (*AppliedPipelineOp) ProtoMessage()    {}
func (*AppliedPipelineOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{6}
}
func (m *AppliedPipelineOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppliedPipelineOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppliedPipelineOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppliedPipelineOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppliedPipelineOp.Merge(m, src)
}
func (m *AppliedPipelineOp) XXX_Size() int {
	return m.Size()
}
func (m *AppliedPipelineOp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppliedPipelineOp.DiscardUnknown(m)
}

var xxx_messageInfo_AppliedPipelineOp proto.InternalMessageInfo

func (m *AppliedPipelineOp) GetType() AppliedPipelineOp_Type {
	if m != nil {
		return m.Type
	}
	return AppliedPipelineOp_UNKNOWN
}

func (m *AppliedPipelineOp) GetTransformation() TransformationOp {
	if m != nil {
		return m.Transformation
	}
	return TransformationOp{}
}

func (m *AppliedPipelineOp) GetRollup() AppliedRollupOp {
	if m != nil {
		return m.Rollup
	}
	return AppliedRollupOp{}
}

// AppliedPipelineOp is a pipeline containing operations
// that have been applied against a metric.
type AppliedPipeline struct {
	Ops []AppliedPipelineOp `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops"`
}

func (m *AppliedPipeline) Reset()         { *m = AppliedPipeline{} }
func (m *AppliedPipeline) String() string { return proto.CompactTextString(m) }
func (*AppliedPipeline) ProtoMessage()    {}
func (*AppliedPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4f84148e5f9ffe5, []int{7}
}
func (m *AppliedPipeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppliedPipeline.Unmarshal(m, b)
}
func (m *AppliedPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppliedPipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppliedPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppliedPipeline.Merge(m, src)
}
func (m *AppliedPipeline) XXX_Size() int {
	return m.Size()
}
func (m *AppliedPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_AppliedPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_AppliedPipeline proto.InternalMessageInfo

func (m *AppliedPipeline) GetOps() []AppliedPipelineOp {
	if m != nil {
		return m.Ops
	}
	return nil
}

func init() {
	proto.RegisterEnum("pipelinepb.RollupOp_Type", RollupOp_Type_name, RollupOp_Type_value)
	proto.RegisterEnum("pipelinepb.PipelineOp_Type", PipelineOp_Type_name, PipelineOp_Type_value)
	proto.RegisterEnum("pipelinepb.AppliedPipelineOp_Type", AppliedPipelineOp_Type_name, AppliedPipelineOp_Type_value)
	proto.RegisterType((*AggregationOp)(nil), "pipelinepb.AggregationOp")
	proto.RegisterType((*TransformationOp)(nil), "pipelinepb.TransformationOp")
	proto.RegisterType((*RollupOp)(nil), "pipelinepb.RollupOp")
	proto.RegisterType((*PipelineOp)(nil), "pipelinepb.PipelineOp")
	proto.RegisterType((*Pipeline)(nil), "pipelinepb.Pipeline")
	proto.RegisterType((*AppliedRollupOp)(nil), "pipelinepb.AppliedRollupOp")
	proto.RegisterType((*AppliedPipelineOp)(nil), "pipelinepb.AppliedPipelineOp")
	proto.RegisterType((*AppliedPipeline)(nil), "pipelinepb.AppliedPipeline")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/pipelinepb/pipeline.proto", fileDescriptor_e4f84148e5f9ffe5)
}

var fileDescriptor_e4f84148e5f9ffe5 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x4e, 0xdb, 0x40,
	0x14, 0x86, 0x7d, 0x89, 0x20, 0x9c, 0x40, 0x08, 0xa3, 0xaa, 0x0a, 0x97, 0x9a, 0xc8, 0x62, 0x91,
	0x45, 0xb1, 0xa5, 0x44, 0xad, 0x0a, 0x5d, 0x05, 0x42, 0xd3, 0x94, 0xd4, 0x46, 0x43, 0xa2, 0x5e,
	0x36, 0xc8, 0xc1, 0x83, 0x6b, 0x29, 0xb6, 0x47, 0xb6, 0x11, 0xe2, 0x09, 0xba, 0xe5, 0x15, 0xfa,
	0x0e, 0x7d, 0x08, 0x96, 0x2c, 0x2b, 0x55, 0xaa, 0x2a, 0x78, 0x91, 0x2a, 0xb6, 0x93, 0xcc, 0x84,
	0xf4, 0x42, 0x77, 0x33, 0xe3, 0x73, 0xfe, 0xf3, 0xcf, 0xff, 0x8d, 0x0c, 0xaf, 0x1d, 0x37, 0xfe,
	0x74, 0xde, 0xd7, 0x4e, 0x03, 0x4f, 0xf7, 0xea, 0x76, 0x5f, 0xf7, 0xea, 0x7a, 0x14, 0x9e, 0xea,
	0x1e, 0x89, 0x43, 0xf7, 0x34, 0xd2, 0x1d, 0xe2, 0x93, 0xd0, 0x8a, 0x89, 0xad, 0xd3, 0x30, 0x88,
	0x03, 0x9d, 0xba, 0x94, 0x0c, 0x5c, 0x9f, 0xd0, 0xfe, 0x78, 0xa9, 0x25, 0x5f, 0x10, 0x4c, 0x3e,
	0xad, 0x6d, 0x33, 0xaa, 0x4e, 0xe0, 0x04, 0x69, 0x73, 0xff, 0xfc, 0x2c, 0xd9, 0xa5, 0x4a, 0xc3,
	0x55, 0xda, 0xba, 0x66, 0x3c, 0xd0, 0x84, 0xe5, 0x38, 0x21, 0x71, 0xac, 0xd8, 0x0d, 0x7c, 0xda,
	0x67, 0x77, 0x99, 0x5e, 0xf7, 0x81, 0x7a, 0x71, 0x68, 0xf9, 0xd1, 0x59, 0x10, 0x7a, 0x23, 0x49,
	0xfe, 0x20, 0x55, 0x55, 0xf7, 0x61, 0xa9, 0x31, 0x19, 0x65, 0x52, 0x54, 0x83, 0x5c, 0x7c, 0x49,
	0x49, 0x59, 0xac, 0x88, 0xd5, 0x62, 0x4d, 0xd1, 0x38, 0x5b, 0x1a, 0x53, 0xdb, 0xbd, 0xa4, 0x04,
	0x27, 0xb5, 0x6a, 0x07, 0x4a, 0x5d, 0x4e, 0xdc, 0xa4, 0xe8, 0x05, 0xa7, 0xb3, 0xa5, 0x4d, 0xdb,
	0xd1, 0xf8, 0x0e, 0x46, 0xed, 0xbb, 0x08, 0x79, 0x1c, 0x0c, 0x06, 0xe7, 0xd4, 0xa4, 0x68, 0x15,
	0xf2, 0x3e, 0xb9, 0x38, 0xf1, 0x2d, 0x2f, 0x95, 0x5a, 0xc0, 0xf3, 0x3e, 0xb9, 0x30, 0x2c, 0x8f,
	0x20, 0x04, 0xb9, 0xd8, 0x72, 0xa2, 0xb2, 0x54, 0x91, 0xab, 0x0b, 0x38, 0x59, 0xa3, 0x43, 0x58,
	0x61, 0x0c, 0x9f, 0x0c, 0xf5, 0xa2, 0xb2, 0x5c, 0x91, 0xff, 0xe1, 0x2a, 0x25, 0x8b, 0x3f, 0x88,
	0xd0, 0x76, 0x76, 0x85, 0x5c, 0x72, 0x85, 0x55, 0x6d, 0xf2, 0x16, 0xb4, 0x91, 0x3f, 0x8d, 0xf1,
	0xbd, 0x05, 0xb9, 0xe1, 0x0e, 0x2d, 0x42, 0xbe, 0x85, 0xcd, 0xde, 0xd1, 0xc9, 0xde, 0x87, 0x92,
	0x80, 0x8a, 0x00, 0x07, 0xef, 0xf7, 0x3b, 0xbd, 0xe6, 0xc1, 0x70, 0x2f, 0xaa, 0x5f, 0x25, 0x80,
	0xa3, 0x4c, 0xc8, 0xa4, 0x48, 0xe7, 0x62, 0x5a, 0x67, 0x67, 0x4c, 0xaa, 0x98, 0x29, 0xe8, 0x25,
	0x14, 0x18, 0xa3, 0x65, 0xa9, 0x22, 0x56, 0x0b, 0xbc, 0x37, 0x8e, 0x27, 0x66, 0xab, 0x51, 0x13,
	0x8a, 0x3c, 0x87, 0xb2, 0x9c, 0xf4, 0x6f, 0xb0, 0xfd, 0xd3, 0x28, 0xf1, 0x54, 0x0f, 0x7a, 0x0a,
	0x73, 0x61, 0x72, 0xff, 0x24, 0x99, 0x42, 0xed, 0xd1, 0xac, 0x64, 0x70, 0x56, 0xa3, 0x36, 0xb3,
	0x58, 0x0a, 0x30, 0xdf, 0x33, 0x0e, 0x0d, 0xf3, 0x9d, 0x51, 0x12, 0xd0, 0x32, 0x14, 0x1a, 0xad,
	0x16, 0x3e, 0x68, 0x35, 0xba, 0x6d, 0xd3, 0x28, 0x89, 0x08, 0x41, 0xb1, 0x8b, 0x1b, 0xc6, 0xf1,
	0x2b, 0x13, 0xbf, 0x4d, 0xcf, 0x24, 0x04, 0x30, 0x87, 0xcd, 0x4e, 0xa7, 0x77, 0x54, 0x92, 0xd5,
	0x5d, 0xc8, 0x8f, 0xf2, 0x40, 0x1a, 0xc8, 0x01, 0x8d, 0xca, 0x62, 0x45, 0xae, 0x16, 0x6a, 0x8f,
	0x67, 0x47, 0xb6, 0x97, 0xbb, 0xfe, 0xb1, 0x29, 0xe0, 0x61, 0xa1, 0x3a, 0x80, 0xe5, 0x06, 0xa5,
	0x03, 0x97, 0xd8, 0xe3, 0x67, 0x55, 0x04, 0xc9, 0xb5, 0x93, 0xd0, 0x17, 0xb1, 0xe4, 0xda, 0xa8,
	0x0d, 0x45, 0xf6, 0xdd, 0xb8, 0x76, 0x16, 0xec, 0xc6, 0xef, 0x1f, 0x4d, 0xbb, 0x99, 0xcd, 0x58,
	0x62, 0x4a, 0xda, 0xb6, 0xfa, 0x59, 0x82, 0x95, 0x6c, 0x1c, 0xc3, 0xf9, 0x39, 0xc7, 0x59, 0xe5,
	0x78, 0x4d, 0x17, 0xb3, 0xb8, 0xdf, 0xdc, 0x23, 0x26, 0xfd, 0x9d, 0x58, 0x66, 0x6c, 0x9a, 0xdb,
	0xce, 0x98, 0x5b, 0x4a, 0x7d, 0x7d, 0x86, 0x8b, 0x51, 0x42, 0x99, 0xc4, 0x08, 0x62, 0x7d, 0x16,
	0xc4, 0xfb, 0xcc, 0x44, 0x86, 0x99, 0xa4, 0x1a, 0xe3, 0xdc, 0xc7, 0xe8, 0x9e, 0xb1, 0xe8, 0x9e,
	0xfc, 0x31, 0x05, 0x86, 0xe0, 0x6e, 0xee, 0xea, 0xcb, 0xa6, 0xb0, 0x77, 0x7c, 0x7d, 0xab, 0x88,
	0x37, 0xb7, 0x8a, 0xf8, 0xf3, 0x56, 0x11, 0xaf, 0xee, 0x14, 0xe1, 0xe6, 0x4e, 0x11, 0xbe, 0xdd,
	0x29, 0xc2, 0xc7, 0x9d, 0xff, 0xfe, 0xe1, 0xf7, 0xe7, 0x92, 0x93, 0xfa, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x22, 0x31, 0xfd, 0x0e, 0x34, 0x06, 0x00, 0x00,
}

func (m *AggregationOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransformationOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformationOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformationOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RollupOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AggregationTypes) > 0 {
		dAtA2 := make([]byte, len(m.AggregationTypes)*10)
		var j1 int
		for _, num := range m.AggregationTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPipeline(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintPipeline(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PipelineOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rollup != nil {
		{
			size, err := m.Rollup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Transformation != nil {
		{
			size, err := m.Transformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Aggregation != nil {
		{
			size, err := m.Aggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for iNdEx := len(m.Ops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipeline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppliedRollupOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedRollupOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppliedRollupOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregationId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipeline(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppliedPipelineOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedPipelineOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppliedPipelineOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rollup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipeline(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Transformation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipeline(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppliedPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppliedPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for iNdEx := len(m.Ops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipeline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipeline(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipeline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AggregationOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	return n
}

func (m *TransformationOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	return n
}

func (m *RollupOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	if len(m.AggregationTypes) > 0 {
		l = 0
		for _, e := range m.AggregationTypes {
			l += sovPipeline(uint64(e))
		}
		n += 1 + sovPipeline(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	return n
}

func (m *PipelineOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Transformation != nil {
		l = m.Transformation.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Rollup != nil {
		l = m.Rollup.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	return n
}

func (m *AppliedRollupOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = m.AggregationId.Size()
	n += 1 + l + sovPipeline(uint64(l))
	return n
}

func (m *AppliedPipelineOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	l = m.Transformation.Size()
	n += 1 + l + sovPipeline(uint64(l))
	l = m.Rollup.Size()
	n += 1 + l + sovPipeline(uint64(l))
	return n
}

func (m *AppliedPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	return n
}

func sovPipeline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipeline(x uint64) (n int) {
	return sovPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggregationOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= aggregationpb.AggregationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransformationOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformationOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformationOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= transformationpb.TransformationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v aggregationpb.AggregationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipeline
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= aggregationpb.AggregationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AggregationTypes = append(m.AggregationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipeline
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPipeline
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPipeline
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AggregationTypes) == 0 {
					m.AggregationTypes = make([]aggregationpb.AggregationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v aggregationpb.AggregationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipeline
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= aggregationpb.AggregationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AggregationTypes = append(m.AggregationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationTypes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RollupOp_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PipelineOp_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &AggregationOp{}
			}
			if err := m.Aggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transformation == nil {
				m.Transformation = &TransformationOp{}
			}
			if err := m.Transformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rollup == nil {
				m.Rollup = &RollupOp{}
			}
			if err := m.Rollup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, PipelineOp{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedRollupOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedRollupOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedRollupOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedPipelineOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedPipelineOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedPipelineOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppliedPipelineOp_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rollup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipeline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipeline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipeline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipeline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipeline = fmt.Errorf("proto: unexpected end of group")
)
