// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pipeline.proto

/*
	Package pipelinepb is a generated protocol buffer package.

	It is generated from these files:
		pipeline.proto

	It has these top-level messages:
		AggregationOp
		TransformationOp
		RollupOp
		PipelineOp
		Pipeline
		AppliedRollupOp
		AppliedPipelineOp
		AppliedPipeline
*/
package pipelinepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import aggregationpb "github.com/m3db/m3metrics/generated/proto/aggregationpb"
import transformationpb "github.com/m3db/m3metrics/generated/proto/transformationpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PipelineOp_Type int32

const (
	PipelineOp_UNKNOWN        PipelineOp_Type = 0
	PipelineOp_AGGREGATION    PipelineOp_Type = 1
	PipelineOp_TRANSFORMATION PipelineOp_Type = 2
	PipelineOp_ROLLUP         PipelineOp_Type = 3
)

var PipelineOp_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "AGGREGATION",
	2: "TRANSFORMATION",
	3: "ROLLUP",
}
var PipelineOp_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"AGGREGATION":    1,
	"TRANSFORMATION": 2,
	"ROLLUP":         3,
}

func (x PipelineOp_Type) String() string {
	return proto.EnumName(PipelineOp_Type_name, int32(x))
}
func (PipelineOp_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{3, 0} }

type AppliedPipelineOp_Type int32

const (
	AppliedPipelineOp_UNKNOWN        AppliedPipelineOp_Type = 0
	AppliedPipelineOp_TRANSFORMATION AppliedPipelineOp_Type = 1
	AppliedPipelineOp_ROLLUP         AppliedPipelineOp_Type = 2
)

var AppliedPipelineOp_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "TRANSFORMATION",
	2: "ROLLUP",
}
var AppliedPipelineOp_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"TRANSFORMATION": 1,
	"ROLLUP":         2,
}

func (x AppliedPipelineOp_Type) String() string {
	return proto.EnumName(AppliedPipelineOp_Type_name, int32(x))
}
func (AppliedPipelineOp_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPipeline, []int{6, 0}
}

type AggregationOp struct {
	Type aggregationpb.AggregationType `protobuf:"varint,1,opt,name=type,proto3,enum=aggregationpb.AggregationType" json:"type,omitempty"`
}

func (m *AggregationOp) Reset()                    { *m = AggregationOp{} }
func (m *AggregationOp) String() string            { return proto.CompactTextString(m) }
func (*AggregationOp) ProtoMessage()               {}
func (*AggregationOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{0} }

func (m *AggregationOp) GetType() aggregationpb.AggregationType {
	if m != nil {
		return m.Type
	}
	return aggregationpb.AggregationType_UNKNOWN
}

type TransformationOp struct {
	Type transformationpb.TransformationType `protobuf:"varint,1,opt,name=type,proto3,enum=transformationpb.TransformationType" json:"type,omitempty"`
}

func (m *TransformationOp) Reset()                    { *m = TransformationOp{} }
func (m *TransformationOp) String() string            { return proto.CompactTextString(m) }
func (*TransformationOp) ProtoMessage()               {}
func (*TransformationOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{1} }

func (m *TransformationOp) GetType() transformationpb.TransformationType {
	if m != nil {
		return m.Type
	}
	return transformationpb.TransformationType_UNKNOWN
}

type RollupOp struct {
	NewName         string                        `protobuf:"bytes,1,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Tags            []string                      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	AggregationType aggregationpb.AggregationType `protobuf:"varint,3,opt,name=aggregation_type,json=aggregationType,proto3,enum=aggregationpb.AggregationType" json:"aggregation_type,omitempty"`
}

func (m *RollupOp) Reset()                    { *m = RollupOp{} }
func (m *RollupOp) String() string            { return proto.CompactTextString(m) }
func (*RollupOp) ProtoMessage()               {}
func (*RollupOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{2} }

func (m *RollupOp) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *RollupOp) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RollupOp) GetAggregationType() aggregationpb.AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return aggregationpb.AggregationType_UNKNOWN
}

type PipelineOp struct {
	Type           PipelineOp_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=pipelinepb.PipelineOp_Type" json:"type,omitempty"`
	Aggregation    *AggregationOp    `protobuf:"bytes,2,opt,name=aggregation" json:"aggregation,omitempty"`
	Transformation *TransformationOp `protobuf:"bytes,3,opt,name=transformation" json:"transformation,omitempty"`
	Rollup         *RollupOp         `protobuf:"bytes,4,opt,name=rollup" json:"rollup,omitempty"`
}

func (m *PipelineOp) Reset()                    { *m = PipelineOp{} }
func (m *PipelineOp) String() string            { return proto.CompactTextString(m) }
func (*PipelineOp) ProtoMessage()               {}
func (*PipelineOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{3} }

func (m *PipelineOp) GetType() PipelineOp_Type {
	if m != nil {
		return m.Type
	}
	return PipelineOp_UNKNOWN
}

func (m *PipelineOp) GetAggregation() *AggregationOp {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *PipelineOp) GetTransformation() *TransformationOp {
	if m != nil {
		return m.Transformation
	}
	return nil
}

func (m *PipelineOp) GetRollup() *RollupOp {
	if m != nil {
		return m.Rollup
	}
	return nil
}

type Pipeline struct {
	Ops []PipelineOp `protobuf:"bytes,1,rep,name=ops" json:"ops"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{4} }

func (m *Pipeline) GetOps() []PipelineOp {
	if m != nil {
		return m.Ops
	}
	return nil
}

// AppliedRollupOp is a rollup operation that has been
// applied against a metric.
type AppliedRollupOp struct {
	Id            []byte                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AggregationId aggregationpb.AggregationID `protobuf:"bytes,2,opt,name=aggregation_id,json=aggregationId" json:"aggregation_id"`
}

func (m *AppliedRollupOp) Reset()                    { *m = AppliedRollupOp{} }
func (m *AppliedRollupOp) String() string            { return proto.CompactTextString(m) }
func (*AppliedRollupOp) ProtoMessage()               {}
func (*AppliedRollupOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{5} }

func (m *AppliedRollupOp) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AppliedRollupOp) GetAggregationId() aggregationpb.AggregationID {
	if m != nil {
		return m.AggregationId
	}
	return aggregationpb.AggregationID{}
}

// AppliedPipelineOp is a pipeline operation that has
// been applied against a metric.
type AppliedPipelineOp struct {
	Type           AppliedPipelineOp_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pipelinepb.AppliedPipelineOp_Type" json:"type,omitempty"`
	Transformation *TransformationOp      `protobuf:"bytes,2,opt,name=transformation" json:"transformation,omitempty"`
	Rollup         *AppliedRollupOp       `protobuf:"bytes,3,opt,name=rollup" json:"rollup,omitempty"`
}

func (m *AppliedPipelineOp) Reset()                    { *m = AppliedPipelineOp{} }
func (m *AppliedPipelineOp) String() string            { return proto.CompactTextString(m) }
func (*AppliedPipelineOp) ProtoMessage()               {}
func (*AppliedPipelineOp) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{6} }

func (m *AppliedPipelineOp) GetType() AppliedPipelineOp_Type {
	if m != nil {
		return m.Type
	}
	return AppliedPipelineOp_UNKNOWN
}

func (m *AppliedPipelineOp) GetTransformation() *TransformationOp {
	if m != nil {
		return m.Transformation
	}
	return nil
}

func (m *AppliedPipelineOp) GetRollup() *AppliedRollupOp {
	if m != nil {
		return m.Rollup
	}
	return nil
}

// AppliedPipelineOp is a pipeline containing operations
// that have been applied against a metric.
type AppliedPipeline struct {
	Ops []AppliedPipelineOp `protobuf:"bytes,1,rep,name=ops" json:"ops"`
}

func (m *AppliedPipeline) Reset()                    { *m = AppliedPipeline{} }
func (m *AppliedPipeline) String() string            { return proto.CompactTextString(m) }
func (*AppliedPipeline) ProtoMessage()               {}
func (*AppliedPipeline) Descriptor() ([]byte, []int) { return fileDescriptorPipeline, []int{7} }

func (m *AppliedPipeline) GetOps() []AppliedPipelineOp {
	if m != nil {
		return m.Ops
	}
	return nil
}

func init() {
	proto.RegisterType((*AggregationOp)(nil), "pipelinepb.AggregationOp")
	proto.RegisterType((*TransformationOp)(nil), "pipelinepb.TransformationOp")
	proto.RegisterType((*RollupOp)(nil), "pipelinepb.RollupOp")
	proto.RegisterType((*PipelineOp)(nil), "pipelinepb.PipelineOp")
	proto.RegisterType((*Pipeline)(nil), "pipelinepb.Pipeline")
	proto.RegisterType((*AppliedRollupOp)(nil), "pipelinepb.AppliedRollupOp")
	proto.RegisterType((*AppliedPipelineOp)(nil), "pipelinepb.AppliedPipelineOp")
	proto.RegisterType((*AppliedPipeline)(nil), "pipelinepb.AppliedPipeline")
	proto.RegisterEnum("pipelinepb.PipelineOp_Type", PipelineOp_Type_name, PipelineOp_Type_value)
	proto.RegisterEnum("pipelinepb.AppliedPipelineOp_Type", AppliedPipelineOp_Type_name, AppliedPipelineOp_Type_value)
}
func (m *AggregationOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *TransformationOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformationOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *RollupOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AggregationType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.AggregationType))
	}
	return i, nil
}

func (m *PipelineOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
	}
	if m.Aggregation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Aggregation.Size()))
		n1, err := m.Aggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Transformation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Transformation.Size()))
		n2, err := m.Transformation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Rollup != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Rollup.Size()))
		n3, err := m.Rollup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Pipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pipeline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPipeline(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppliedRollupOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedRollupOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPipeline(dAtA, i, uint64(m.AggregationId.Size()))
	n4, err := m.AggregationId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AppliedPipelineOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedPipelineOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Type))
	}
	if m.Transformation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Transformation.Size()))
		n5, err := m.Transformation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Rollup != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPipeline(dAtA, i, uint64(m.Rollup.Size()))
		n6, err := m.Rollup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AppliedPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedPipeline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPipeline(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPipeline(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AggregationOp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	return n
}

func (m *TransformationOp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	return n
}

func (m *RollupOp) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	if m.AggregationType != 0 {
		n += 1 + sovPipeline(uint64(m.AggregationType))
	}
	return n
}

func (m *PipelineOp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Transformation != nil {
		l = m.Transformation.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Rollup != nil {
		l = m.Rollup.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *Pipeline) Size() (n int) {
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	return n
}

func (m *AppliedRollupOp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = m.AggregationId.Size()
	n += 1 + l + sovPipeline(uint64(l))
	return n
}

func (m *AppliedPipelineOp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipeline(uint64(m.Type))
	}
	if m.Transformation != nil {
		l = m.Transformation.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Rollup != nil {
		l = m.Rollup.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *AppliedPipeline) Size() (n int) {
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	return n
}

func sovPipeline(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPipeline(x uint64) (n int) {
	return sovPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggregationOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (aggregationpb.AggregationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransformationOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformationOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformationOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (transformationpb.TransformationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationType", wireType)
			}
			m.AggregationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregationType |= (aggregationpb.AggregationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PipelineOp_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &AggregationOp{}
			}
			if err := m.Aggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transformation == nil {
				m.Transformation = &TransformationOp{}
			}
			if err := m.Transformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rollup == nil {
				m.Rollup = &RollupOp{}
			}
			if err := m.Rollup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, PipelineOp{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedRollupOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedRollupOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedRollupOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedPipelineOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedPipelineOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedPipelineOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AppliedPipelineOp_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transformation == nil {
				m.Transformation = &TransformationOp{}
			}
			if err := m.Transformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rollup == nil {
				m.Rollup = &AppliedRollupOp{}
			}
			if err := m.Rollup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, AppliedPipelineOp{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPipeline
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPipeline(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPipeline = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipeline   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pipeline.proto", fileDescriptorPipeline) }

var fileDescriptorPipeline = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0x4e, 0xd4, 0xa6, 0x63, 0xea, 0x84, 0x15, 0x42, 0xe9, 0x1f, 0x42, 0x64, 0x71,
	0xc8, 0x01, 0x6c, 0x29, 0x01, 0x84, 0xe0, 0x94, 0x12, 0x1a, 0x2c, 0x82, 0x5d, 0x2d, 0xa9, 0x90,
	0xb8, 0x54, 0x76, 0xbd, 0x35, 0x96, 0x62, 0x7b, 0xe5, 0x38, 0xaa, 0x7a, 0xe7, 0x01, 0x78, 0x18,
	0x1e, 0xa2, 0x47, 0x9e, 0x00, 0xa1, 0xf0, 0x18, 0x5c, 0x50, 0xd7, 0x4e, 0xb2, 0x9b, 0x04, 0x14,
	0x71, 0xf3, 0x8e, 0xbe, 0xf9, 0x66, 0xe6, 0xfb, 0x45, 0x01, 0x8d, 0x85, 0x8c, 0x8e, 0xc2, 0x98,
	0x1a, 0x2c, 0x4d, 0xb2, 0x04, 0xc3, 0xec, 0xcd, 0xbc, 0x83, 0x27, 0x41, 0x98, 0x7d, 0x9e, 0x78,
	0xc6, 0x45, 0x12, 0x99, 0x41, 0x12, 0x24, 0x26, 0x97, 0x78, 0x93, 0x4b, 0xfe, 0xe2, 0x0f, 0xfe,
	0x95, 0xb7, 0x1e, 0x58, 0x82, 0x3c, 0xea, 0xf8, 0x9e, 0x19, 0x75, 0x22, 0x9a, 0xa5, 0xe1, 0xc5,
	0xd8, 0x0c, 0x68, 0x4c, 0x53, 0x37, 0xa3, 0x7e, 0x6e, 0x61, 0xba, 0x41, 0x90, 0xd2, 0xc0, 0xcd,
	0xc2, 0x24, 0x66, 0x9e, 0xf8, 0x2a, 0xac, 0x9c, 0xcd, 0xad, 0xb2, 0xd4, 0x8d, 0xc7, 0x97, 0x49,
	0x1a, 0xcd, 0xdc, 0xe4, 0x42, 0x6e, 0xa8, 0xbf, 0x86, 0xbd, 0xee, 0x62, 0x8a, 0xc3, 0x70, 0x1b,
	0xca, 0xd9, 0x35, 0xa3, 0x75, 0xd4, 0x44, 0x2d, 0xad, 0xdd, 0x30, 0xa4, 0x8d, 0x0c, 0x41, 0x3b,
	0xbc, 0x66, 0x94, 0x70, 0xad, 0x3e, 0x80, 0xda, 0x50, 0x32, 0x77, 0x18, 0x7e, 0x21, 0xf9, 0x3c,
	0x32, 0x96, 0xd7, 0x31, 0xe4, 0x0e, 0xc1, 0xed, 0x0b, 0x82, 0x0a, 0x49, 0x46, 0xa3, 0x09, 0x73,
	0x18, 0xde, 0x87, 0x4a, 0x4c, 0xaf, 0xce, 0x63, 0x37, 0xca, 0xad, 0x76, 0xc9, 0x4e, 0x4c, 0xaf,
	0x6c, 0x37, 0xa2, 0x18, 0x43, 0x39, 0x73, 0x83, 0x71, 0x5d, 0x69, 0x96, 0x5a, 0xbb, 0x84, 0x7f,
	0x63, 0x0b, 0x6a, 0xc2, 0xc2, 0xe7, 0x7c, 0x83, 0xd2, 0x46, 0x97, 0x54, 0x5d, 0xb9, 0xa0, 0x7f,
	0x53, 0x00, 0x4e, 0x0b, 0xe6, 0x0e, 0xc3, 0xa6, 0x74, 0xcf, 0xa1, 0xb1, 0xf8, 0x39, 0x18, 0x0b,
	0x95, 0xb1, 0x38, 0x03, 0xbf, 0x02, 0x55, 0xb0, 0xac, 0x2b, 0x4d, 0xd4, 0x52, 0xdb, 0xfb, 0x62,
	0x9f, 0x14, 0x3c, 0x11, 0xd5, 0xb8, 0x07, 0x9a, 0x1c, 0x18, 0xbf, 0x42, 0x6d, 0x1f, 0x89, 0xfd,
	0xcb, 0x99, 0x93, 0xa5, 0x1e, 0xfc, 0x18, 0xb6, 0x53, 0x1e, 0x64, 0xbd, 0xcc, 0xbb, 0xef, 0x89,
	0xdd, 0xb3, 0x88, 0x49, 0xa1, 0xd1, 0x7b, 0x50, 0xbe, 0x5d, 0x1f, 0xab, 0xb0, 0x73, 0x66, 0xbf,
	0xb3, 0x9d, 0x8f, 0x76, 0x6d, 0x0b, 0x57, 0x41, 0xed, 0xf6, 0xfb, 0xe4, 0x4d, 0xbf, 0x3b, 0xb4,
	0x1c, 0xbb, 0x86, 0x30, 0x06, 0x6d, 0x48, 0xba, 0xf6, 0x87, 0x13, 0x87, 0xbc, 0xcf, 0x6b, 0x0a,
	0x06, 0xd8, 0x26, 0xce, 0x60, 0x70, 0x76, 0x5a, 0x2b, 0xe9, 0x2f, 0xa1, 0x32, 0xcb, 0x03, 0x1b,
	0x50, 0x4a, 0xd8, 0xb8, 0x8e, 0x9a, 0xa5, 0x96, 0xda, 0xbe, 0xbf, 0x3e, 0xb2, 0xe3, 0xf2, 0xcd,
	0x8f, 0x87, 0x5b, 0xe4, 0x56, 0xa8, 0x8f, 0xa0, 0xda, 0x65, 0x6c, 0x14, 0x52, 0x7f, 0xce, 0x5f,
	0x03, 0x25, 0xf4, 0x79, 0xe8, 0x77, 0x88, 0x12, 0xfa, 0xd8, 0x02, 0x4d, 0x04, 0x1c, 0xfa, 0x45,
	0xb0, 0x47, 0x7f, 0xc7, 0x6b, 0xf5, 0x8a, 0x19, 0x7b, 0x82, 0xc4, 0xf2, 0xf5, 0xdf, 0x08, 0xee,
	0x16, 0xe3, 0x04, 0xce, 0xcf, 0x25, 0xce, 0xba, 0xc4, 0x6b, 0x59, 0x2c, 0xe2, 0x5e, 0x25, 0xa6,
	0xfc, 0x07, 0xb1, 0xce, 0x9c, 0x58, 0xce, 0xfb, 0x70, 0xcd, 0xfc, 0x15, 0x70, 0x9d, 0x75, 0xe0,
	0x56, 0x39, 0x21, 0x81, 0x93, 0xa2, 0xbf, 0x9d, 0x67, 0x3d, 0xc7, 0xf5, 0x4c, 0xc4, 0xf5, 0xe0,
	0x9f, 0x97, 0x0b, 0xd4, 0x8e, 0x4f, 0x6e, 0xa6, 0x0d, 0xf4, 0x7d, 0xda, 0x40, 0x3f, 0xa7, 0x0d,
	0xf4, 0xf5, 0x57, 0x63, 0xeb, 0xd3, 0xd3, 0xcd, 0xff, 0xa5, 0x16, 0x43, 0xbc, 0x6d, 0x5e, 0xe9,
	0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x55, 0x45, 0x4d, 0x7a, 0x05, 0x00, 0x00,
}
