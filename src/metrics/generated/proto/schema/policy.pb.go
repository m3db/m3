// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: policy.proto
// DO NOT EDIT!

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AggregationType int32

const (
	AggregationType_UNKNOWN AggregationType = 0
	AggregationType_LAST    AggregationType = 1
	AggregationType_LOWER   AggregationType = 2
	AggregationType_UPPER   AggregationType = 3
	AggregationType_MEAN    AggregationType = 4
	AggregationType_MEDIAN  AggregationType = 5
	AggregationType_COUNT   AggregationType = 6
	AggregationType_SUM     AggregationType = 7
	AggregationType_SUMSQ   AggregationType = 8
	AggregationType_STDEV   AggregationType = 9
	AggregationType_P50     AggregationType = 10
	AggregationType_P95     AggregationType = 11
	AggregationType_P99     AggregationType = 12
	AggregationType_P999    AggregationType = 13
	AggregationType_P9999   AggregationType = 14
)

var AggregationType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "LAST",
	2:  "LOWER",
	3:  "UPPER",
	4:  "MEAN",
	5:  "MEDIAN",
	6:  "COUNT",
	7:  "SUM",
	8:  "SUMSQ",
	9:  "STDEV",
	10: "P50",
	11: "P95",
	12: "P99",
	13: "P999",
	14: "P9999",
}
var AggregationType_value = map[string]int32{
	"UNKNOWN": 0,
	"LAST":    1,
	"LOWER":   2,
	"UPPER":   3,
	"MEAN":    4,
	"MEDIAN":  5,
	"COUNT":   6,
	"SUM":     7,
	"SUMSQ":   8,
	"STDEV":   9,
	"P50":     10,
	"P95":     11,
	"P99":     12,
	"P999":    13,
	"P9999":   14,
}

func (x AggregationType) String() string {
	return proto.EnumName(AggregationType_name, int32(x))
}
func (AggregationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Resolution struct {
	WindowSize int64 `protobuf:"varint,1,opt,name=window_size,json=windowSize" json:"window_size,omitempty"`
	Precision  int64 `protobuf:"varint,2,opt,name=precision" json:"precision,omitempty"`
}

func (m *Resolution) Reset()                    { *m = Resolution{} }
func (m *Resolution) String() string            { return proto.CompactTextString(m) }
func (*Resolution) ProtoMessage()               {}
func (*Resolution) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Retention struct {
	Period int64 `protobuf:"varint,1,opt,name=period" json:"period,omitempty"`
}

func (m *Retention) Reset()                    { *m = Retention{} }
func (m *Retention) String() string            { return proto.CompactTextString(m) }
func (*Retention) ProtoMessage()               {}
func (*Retention) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type StoragePolicy struct {
	Resolution *Resolution `protobuf:"bytes,1,opt,name=resolution" json:"resolution,omitempty"`
	Retention  *Retention  `protobuf:"bytes,2,opt,name=retention" json:"retention,omitempty"`
}

func (m *StoragePolicy) Reset()                    { *m = StoragePolicy{} }
func (m *StoragePolicy) String() string            { return proto.CompactTextString(m) }
func (*StoragePolicy) ProtoMessage()               {}
func (*StoragePolicy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *StoragePolicy) GetResolution() *Resolution {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (m *StoragePolicy) GetRetention() *Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

type Policy struct {
	StoragePolicy    *StoragePolicy    `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy" json:"storage_policy,omitempty"`
	AggregationTypes []AggregationType `protobuf:"varint,2,rep,packed,name=aggregation_types,json=aggregationTypes,enum=schema.AggregationType" json:"aggregation_types,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Policy) GetStoragePolicy() *StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*Resolution)(nil), "schema.Resolution")
	proto.RegisterType((*Retention)(nil), "schema.Retention")
	proto.RegisterType((*StoragePolicy)(nil), "schema.StoragePolicy")
	proto.RegisterType((*Policy)(nil), "schema.Policy")
	proto.RegisterEnum("schema.AggregationType", AggregationType_name, AggregationType_value)
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x8f, 0x93, 0x40,
	0x1c, 0xc5, 0xa5, 0xec, 0xd2, 0xe5, 0xcf, 0xb6, 0xfe, 0x77, 0x12, 0xb5, 0x07, 0x13, 0x37, 0x78,
	0xd9, 0x78, 0xa8, 0x06, 0xb3, 0x07, 0x12, 0x2f, 0xc4, 0x72, 0x30, 0xbb, 0x50, 0x1c, 0xc0, 0x1e,
	0x1b, 0x6c, 0x27, 0x38, 0x49, 0x65, 0x08, 0x83, 0x69, 0xda, 0xcf, 0xe0, 0x67, 0xf1, 0x33, 0x9a,
	0x19, 0xa8, 0xd8, 0xbd, 0x3d, 0xde, 0x7b, 0xbc, 0xff, 0x2f, 0x04, 0xb8, 0xae, 0xc5, 0x8e, 0x6f,
	0x0e, 0xf3, 0xba, 0x11, 0xad, 0x20, 0x96, 0xdc, 0xfc, 0x60, 0x3f, 0x0b, 0xf7, 0x01, 0x80, 0x32,
	0x29, 0x76, 0xbf, 0x5a, 0x2e, 0x2a, 0xf2, 0x06, 0x9c, 0x3d, 0xaf, 0xb6, 0x62, 0xbf, 0x96, 0xfc,
	0xc8, 0x66, 0xc6, 0xad, 0x71, 0x67, 0x52, 0xe8, 0xac, 0x94, 0x1f, 0x19, 0x79, 0x0d, 0x76, 0xdd,
	0xb0, 0x0d, 0x97, 0x5c, 0x54, 0xb3, 0x91, 0x8e, 0x07, 0xc3, 0x7d, 0x0b, 0x36, 0x65, 0x2d, 0xab,
	0xf4, 0xd6, 0x4b, 0xb0, 0x6a, 0xd6, 0x70, 0xb1, 0xed, 0x67, 0xfa, 0x27, 0xb7, 0x85, 0x49, 0xda,
	0x8a, 0xa6, 0x28, 0x59, 0xa2, 0x81, 0x88, 0x07, 0xd0, 0xfc, 0x43, 0xd0, 0x65, 0xc7, 0x23, 0xf3,
	0x8e, 0x6f, 0x3e, 0xc0, 0xd1, 0xff, 0x5a, 0xe4, 0x3d, 0xd8, 0xcd, 0xe9, 0x92, 0xe6, 0x70, 0xbc,
	0x9b, 0xe1, 0x95, 0x3e, 0xa0, 0x43, 0xc7, 0xfd, 0x6d, 0x80, 0xd5, 0xdf, 0xfb, 0x04, 0x53, 0xd9,
	0x01, 0xac, 0xbb, 0x4f, 0xd2, 0xdf, 0x7c, 0x71, 0x1a, 0x38, 0xc3, 0xa3, 0x13, 0x79, 0x46, 0xbb,
	0x80, 0x9b, 0xa2, 0x2c, 0x1b, 0x56, 0x16, 0x6a, 0x77, 0xdd, 0x1e, 0x6a, 0x26, 0x67, 0xa3, 0x5b,
	0xf3, 0x6e, 0xea, 0xbd, 0x3a, 0x0d, 0x04, 0x43, 0x21, 0x3b, 0xd4, 0x8c, 0x62, 0x71, 0x6e, 0xc8,
	0x77, 0x7f, 0x0c, 0x78, 0xfe, 0xa4, 0x45, 0x1c, 0x18, 0xe7, 0xf1, 0x43, 0xbc, 0x5c, 0xc5, 0xf8,
	0x8c, 0x5c, 0xc1, 0xc5, 0x63, 0x90, 0x66, 0x68, 0x10, 0x1b, 0x2e, 0x1f, 0x97, 0xab, 0x90, 0xe2,
	0x48, 0xc9, 0x3c, 0x49, 0x42, 0x8a, 0xa6, 0xca, 0xa3, 0x30, 0x88, 0xf1, 0x82, 0x00, 0x58, 0x51,
	0xb8, 0xf8, 0x12, 0xc4, 0x78, 0xa9, 0x0a, 0x9f, 0x97, 0x79, 0x9c, 0xa1, 0x45, 0xc6, 0x60, 0xa6,
	0x79, 0x84, 0x63, 0xe5, 0xa5, 0x79, 0x94, 0x7e, 0xc5, 0x2b, 0x2d, 0xb3, 0x45, 0xf8, 0x0d, 0x6d,
	0x15, 0x27, 0xf7, 0x1f, 0x10, 0xb4, 0xf0, 0xef, 0xd1, 0xe9, 0x84, 0x8f, 0xd7, 0x6a, 0x3a, 0xf1,
	0x7d, 0x1f, 0x27, 0xaa, 0xaf, 0x94, 0x8f, 0xd3, 0xef, 0x96, 0xfe, 0x6d, 0x3e, 0xfe, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x39, 0x87, 0xa5, 0x4b, 0x46, 0x02, 0x00, 0x00,
}
