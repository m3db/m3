// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3ctl/service/r2/store (interfaces: Store)

package store

import (
	"github.com/m3db/m3metrics/rules/models"
	"github.com/m3db/m3metrics/rules/models/changes"

	"github.com/golang/mock/gomock"
)

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockStoreRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockStore) CreateMappingRule(_param0 string, _param1 *models.MappingRuleView, _param2 UpdateOptions) (*models.MappingRuleView, error) {
	ret := _m.ctrl.Call(_m, "CreateMappingRule", _param0, _param1, _param2)
	ret0, _ := ret[0].(*models.MappingRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CreateMappingRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMappingRule", arg0, arg1, arg2)
}

func (_m *MockStore) CreateNamespace(_param0 string, _param1 UpdateOptions) (*models.NamespaceView, error) {
	ret := _m.ctrl.Call(_m, "CreateNamespace", _param0, _param1)
	ret0, _ := ret[0].(*models.NamespaceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CreateNamespace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNamespace", arg0, arg1)
}

func (_m *MockStore) CreateRollupRule(_param0 string, _param1 *models.RollupRuleView, _param2 UpdateOptions) (*models.RollupRuleView, error) {
	ret := _m.ctrl.Call(_m, "CreateRollupRule", _param0, _param1, _param2)
	ret0, _ := ret[0].(*models.RollupRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CreateRollupRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRollupRule", arg0, arg1, arg2)
}

func (_m *MockStore) DeleteMappingRule(_param0 string, _param1 string, _param2 UpdateOptions) error {
	ret := _m.ctrl.Call(_m, "DeleteMappingRule", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) DeleteMappingRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMappingRule", arg0, arg1, arg2)
}

func (_m *MockStore) DeleteNamespace(_param0 string, _param1 UpdateOptions) error {
	ret := _m.ctrl.Call(_m, "DeleteNamespace", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) DeleteNamespace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteNamespace", arg0, arg1)
}

func (_m *MockStore) DeleteRollupRule(_param0 string, _param1 string, _param2 UpdateOptions) error {
	ret := _m.ctrl.Call(_m, "DeleteRollupRule", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) DeleteRollupRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRollupRule", arg0, arg1, arg2)
}

func (_m *MockStore) FetchMappingRule(_param0 string, _param1 string) (*models.MappingRuleView, error) {
	ret := _m.ctrl.Call(_m, "FetchMappingRule", _param0, _param1)
	ret0, _ := ret[0].(*models.MappingRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchMappingRule(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchMappingRule", arg0, arg1)
}

func (_m *MockStore) FetchMappingRuleHistory(_param0 string, _param1 string) ([]*models.MappingRuleView, error) {
	ret := _m.ctrl.Call(_m, "FetchMappingRuleHistory", _param0, _param1)
	ret0, _ := ret[0].([]*models.MappingRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchMappingRuleHistory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchMappingRuleHistory", arg0, arg1)
}

func (_m *MockStore) FetchNamespaces() (*models.NamespacesView, error) {
	ret := _m.ctrl.Call(_m, "FetchNamespaces")
	ret0, _ := ret[0].(*models.NamespacesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchNamespaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchNamespaces")
}

func (_m *MockStore) FetchRollupRule(_param0 string, _param1 string) (*models.RollupRuleView, error) {
	ret := _m.ctrl.Call(_m, "FetchRollupRule", _param0, _param1)
	ret0, _ := ret[0].(*models.RollupRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchRollupRule(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRollupRule", arg0, arg1)
}

func (_m *MockStore) FetchRollupRuleHistory(_param0 string, _param1 string) ([]*models.RollupRuleView, error) {
	ret := _m.ctrl.Call(_m, "FetchRollupRuleHistory", _param0, _param1)
	ret0, _ := ret[0].([]*models.RollupRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchRollupRuleHistory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRollupRuleHistory", arg0, arg1)
}

func (_m *MockStore) FetchRuleSetSnapshot(_param0 string) (*models.RuleSetSnapshotView, error) {
	ret := _m.ctrl.Call(_m, "FetchRuleSetSnapshot", _param0)
	ret0, _ := ret[0].(*models.RuleSetSnapshotView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) FetchRuleSetSnapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchRuleSetSnapshot", arg0)
}

func (_m *MockStore) UpdateMappingRule(_param0 string, _param1 string, _param2 *models.MappingRuleView, _param3 UpdateOptions) (*models.MappingRuleView, error) {
	ret := _m.ctrl.Call(_m, "UpdateMappingRule", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*models.MappingRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) UpdateMappingRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMappingRule", arg0, arg1, arg2, arg3)
}

func (_m *MockStore) UpdateRollupRule(_param0 string, _param1 string, _param2 *models.RollupRuleView, _param3 UpdateOptions) (*models.RollupRuleView, error) {
	ret := _m.ctrl.Call(_m, "UpdateRollupRule", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*models.RollupRuleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) UpdateRollupRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRollupRule", arg0, arg1, arg2, arg3)
}

func (_m *MockStore) UpdateRuleSet(_param0 changes.RuleSetChanges, _param1 int, _param2 UpdateOptions) (*models.RuleSetSnapshotView, error) {
	ret := _m.ctrl.Call(_m, "UpdateRuleSet", _param0, _param1, _param2)
	ret0, _ := ret[0].(*models.RuleSetSnapshotView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) UpdateRuleSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRuleSet", arg0, arg1, arg2)
}

func (_m *MockStore) ValidateRuleSet(_param0 *models.RuleSetSnapshotView) error {
	ret := _m.ctrl.Call(_m, "ValidateRuleSet", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) ValidateRuleSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateRuleSet", arg0)
}
