// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/collector/reporter (interfaces: Reporter)

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package reporter is a generated GoMock package.
package reporter

import (
	"reflect"

	"github.com/m3db/m3/src/metrics/metric/id"

	"github.com/golang/mock/gomock"
)

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockReporter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockReporterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReporter)(nil).Close))
}

// Flush mocks base method
func (m *MockReporter) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockReporterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockReporter)(nil).Flush))
}

// ReportBatchTimer mocks base method
func (m *MockReporter) ReportBatchTimer(arg0 id.ID, arg1 []float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportBatchTimer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportBatchTimer indicates an expected call of ReportBatchTimer
func (mr *MockReporterMockRecorder) ReportBatchTimer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportBatchTimer", reflect.TypeOf((*MockReporter)(nil).ReportBatchTimer), arg0, arg1)
}

// ReportCounter mocks base method
func (m *MockReporter) ReportCounter(arg0 id.ID, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportCounter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportCounter indicates an expected call of ReportCounter
func (mr *MockReporterMockRecorder) ReportCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCounter", reflect.TypeOf((*MockReporter)(nil).ReportCounter), arg0, arg1)
}

// ReportGauge mocks base method
func (m *MockReporter) ReportGauge(arg0 id.ID, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportGauge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportGauge indicates an expected call of ReportGauge
func (mr *MockReporterMockRecorder) ReportGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportGauge", reflect.TypeOf((*MockReporter)(nil).ReportGauge), arg0, arg1)
}
