// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package m3em;

service Operator {
  rpc Setup(SetupRequest)              returns (SetupResponse);
  rpc Transfer(stream TransferRequest) returns (TransferResponse);
  rpc Start(StartRequest)              returns (StartResponse);
  rpc Stop(StopRequest)                returns (StopResponse);
  rpc Teardown(TeardownRequest)        returns (TeardownResponse);
}

enum FileType {
  UNKNOWN        = 0;
  SERVICE_BINARY = 1;
  SERVICE_CONFIG = 2;
  DATA_FILE      = 3;
  // log file
}

message SetupRequest {
  string session_token            = 1;
  string operator_uuid            = 2;
  bool   force                    = 3;
  bool   heartbeat_enabled        = 4;
  string heartbeat_endpoint       = 5;
  uint32 heartbeat_frequency_secs = 6;
}

message SetupResponse {
}

// TransferRequest(s) are used to transfer files from the master to
// remote agents.
message TransferRequest {
           FileType  type         = 1;
           bool      overwrite    = 2;
  // target_paths indicate the copies, and relative paths to copy the file to
  repeated string    target_paths = 3;
           DataChunk data         = 4;
}

message DataChunk {
  int32  idx   = 1;
  bytes  bytes = 2;
}

message TransferResponse {
  uint32 file_checksum    = 1;
  int32  num_chunks_recvd = 2;
}

message StartRequest {
}

message StartResponse {
}

message StopRequest {
}

message StopResponse {
}

message TeardownRequest {
}

message TeardownResponse {
}
