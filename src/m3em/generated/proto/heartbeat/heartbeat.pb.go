// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package heartbeat

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HeartbeatCode int32

const (
	HeartbeatCode_UNKNOWN             HeartbeatCode = 0
	HeartbeatCode_HEALTHY             HeartbeatCode = 1
	HeartbeatCode_PROCESS_TERMINATION HeartbeatCode = 2
	HeartbeatCode_OVERWRITTEN         HeartbeatCode = 3
)

var HeartbeatCode_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTHY",
	2: "PROCESS_TERMINATION",
	3: "OVERWRITTEN",
}

var HeartbeatCode_value = map[string]int32{
	"UNKNOWN":             0,
	"HEALTHY":             1,
	"PROCESS_TERMINATION": 2,
	"OVERWRITTEN":         3,
}

func (x HeartbeatCode) String() string {
	return proto.EnumName(HeartbeatCode_name, int32(x))
}

func (HeartbeatCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aa2e22f71a707392, []int{0}
}

type HeartbeatRequest struct {
	OperatorUuid   string        `protobuf:"bytes,1,opt,name=operator_uuid,json=operatorUuid,proto3" json:"operator_uuid,omitempty"`
	Code           HeartbeatCode `protobuf:"varint,2,opt,name=code,proto3,enum=heartbeat.HeartbeatCode" json:"code,omitempty"`
	Error          string        `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ProcessRunning bool          `protobuf:"varint,4,opt,name=process_running,json=processRunning,proto3" json:"process_running,omitempty"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa2e22f71a707392, []int{0}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetOperatorUuid() string {
	if m != nil {
		return m.OperatorUuid
	}
	return ""
}

func (m *HeartbeatRequest) GetCode() HeartbeatCode {
	if m != nil {
		return m.Code
	}
	return HeartbeatCode_UNKNOWN
}

func (m *HeartbeatRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HeartbeatRequest) GetProcessRunning() bool {
	if m != nil {
		return m.ProcessRunning
	}
	return false
}

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa2e22f71a707392, []int{1}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("heartbeat.HeartbeatCode", HeartbeatCode_name, HeartbeatCode_value)
	proto.RegisterType((*HeartbeatRequest)(nil), "heartbeat.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "heartbeat.HeartbeatResponse")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto", fileDescriptor_aa2e22f71a707392)
}

var fileDescriptor_aa2e22f71a707392 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0x87, 0x3b, 0x80, 0x7f, 0x18, 0x04, 0xea, 0x60, 0x62, 0xa3, 0xa6, 0x21, 0xb8, 0x90, 0x18,
	0xc3, 0x24, 0xf4, 0x04, 0x48, 0x6a, 0x20, 0x6a, 0x6b, 0x86, 0x22, 0x71, 0x45, 0x68, 0xfb, 0x02,
	0x5d, 0xb4, 0x53, 0xa7, 0xed, 0x3d, 0x3c, 0x84, 0x87, 0x71, 0xc9, 0xd2, 0xa5, 0x81, 0x8b, 0x18,
	0x0a, 0x14, 0x4d, 0xd8, 0xcd, 0xef, 0x7b, 0x93, 0xef, 0xbd, 0x99, 0x87, 0xf5, 0xa9, 0x17, 0xcf,
	0x12, 0xbb, 0xe5, 0x70, 0x9f, 0xfa, 0x9a, 0x6b, 0x53, 0x5f, 0xa3, 0x91, 0x70, 0xa8, 0xaf, 0x81,
	0x4f, 0xa7, 0x10, 0x80, 0x98, 0xc4, 0xe0, 0xd2, 0x50, 0xf0, 0x98, 0xd3, 0x19, 0x4c, 0x44, 0x6c,
	0xc3, 0x24, 0xde, 0x9d, 0x5a, 0x69, 0x85, 0x14, 0x33, 0xd0, 0xf8, 0x44, 0x58, 0xee, 0x6d, 0x13,
	0x83, 0xf7, 0x04, 0xa2, 0x98, 0x5c, 0xe3, 0x32, 0x0f, 0x57, 0x2e, 0x2e, 0xc6, 0x49, 0xe2, 0xb9,
	0x0a, 0xaa, 0xa3, 0x66, 0x91, 0x9d, 0x6c, 0xe1, 0x30, 0xf1, 0x5c, 0x72, 0x87, 0x0b, 0x0e, 0x77,
	0x41, 0xc9, 0xd5, 0x51, 0xb3, 0xd2, 0x56, 0x5a, 0xbb, 0x26, 0x99, 0xaf, 0xcb, 0x5d, 0x60, 0xe9,
	0x2d, 0x72, 0x86, 0x0f, 0x40, 0x08, 0x2e, 0x94, 0x7c, 0xaa, 0x5a, 0x07, 0x72, 0x83, 0xab, 0xa1,
	0xe0, 0x0e, 0x44, 0xd1, 0x58, 0x24, 0x41, 0xe0, 0x05, 0x53, 0xa5, 0x50, 0x47, 0xcd, 0x63, 0x56,
	0xd9, 0x60, 0xb6, 0xa6, 0x8d, 0x1a, 0x3e, 0xfd, 0x33, 0x65, 0x14, 0xf2, 0x20, 0x82, 0xdb, 0x01,
	0x2e, 0xff, 0x6b, 0x45, 0x4a, 0xf8, 0x68, 0x68, 0x3c, 0x1a, 0xe6, 0xc8, 0x90, 0xa5, 0x55, 0xe8,
	0xe9, 0x9d, 0x27, 0xab, 0xf7, 0x26, 0x23, 0x72, 0x8e, 0x6b, 0x2f, 0xcc, 0xec, 0xea, 0x83, 0xc1,
	0xd8, 0xd2, 0xd9, 0x73, 0xdf, 0xe8, 0x58, 0x7d, 0xd3, 0x90, 0x73, 0xa4, 0x8a, 0x4b, 0xe6, 0xab,
	0xce, 0x46, 0xac, 0x6f, 0x59, 0xba, 0x21, 0xe7, 0xdb, 0x43, 0x5c, 0xca, 0xa4, 0x20, 0xc8, 0x03,
	0x2e, 0x66, 0x91, 0x5c, 0xee, 0x7b, 0xe4, 0xe6, 0xd3, 0x2e, 0xae, 0xf6, 0x17, 0xd7, 0xb3, 0xde,
	0x2b, 0x5f, 0x0b, 0x15, 0xcd, 0x17, 0x2a, 0xfa, 0x59, 0xa8, 0xe8, 0x63, 0xa9, 0x4a, 0xf3, 0xa5,
	0x2a, 0x7d, 0x2f, 0x55, 0xc9, 0x3e, 0x4c, 0x77, 0xa2, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xf4, 0x88, 0xe2, 0xdc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeaterClient is the client API for Heartbeater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeaterClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeaterClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeaterClient(cc *grpc.ClientConn) HeartbeaterClient {
	return &heartbeaterClient{cc}
}

func (c *heartbeaterClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/heartbeat.Heartbeater/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeaterServer is the server API for Heartbeater service.
type HeartbeaterServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

// UnimplementedHeartbeaterServer can be embedded to have forward compatible implementations.
type UnimplementedHeartbeaterServer struct {
}

func (*UnimplementedHeartbeaterServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterHeartbeaterServer(s *grpc.Server, srv HeartbeaterServer) {
	s.RegisterService(&_Heartbeater_serviceDesc, srv)
}

func _Heartbeater_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeaterServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.Heartbeater/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeaterServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.Heartbeater",
	HandlerType: (*HeartbeaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Heartbeater_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto",
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessRunning {
		i--
		if m.ProcessRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorUuid) > 0 {
		i -= len(m.OperatorUuid)
		copy(dAtA[i:], m.OperatorUuid)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.OperatorUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeartbeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorUuid)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovHeartbeat(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ProcessRunning {
		n += 2
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovHeartbeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= HeartbeatCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessRunning = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeartbeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeartbeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeartbeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeartbeat = fmt.Errorf("proto: unexpected end of group")
)
