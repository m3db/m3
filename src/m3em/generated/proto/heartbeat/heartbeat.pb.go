// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package heartbeat is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto

	It has these top-level messages:
		HeartbeatRequest
		HeartbeatResponse
*/
package heartbeat

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HeartbeatCode int32

const (
	HeartbeatCode_UNKNOWN             HeartbeatCode = 0
	HeartbeatCode_HEALTHY             HeartbeatCode = 1
	HeartbeatCode_PROCESS_TERMINATION HeartbeatCode = 2
	HeartbeatCode_OVERWRITTEN         HeartbeatCode = 3
)

var HeartbeatCode_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTHY",
	2: "PROCESS_TERMINATION",
	3: "OVERWRITTEN",
}
var HeartbeatCode_value = map[string]int32{
	"UNKNOWN":             0,
	"HEALTHY":             1,
	"PROCESS_TERMINATION": 2,
	"OVERWRITTEN":         3,
}

func (x HeartbeatCode) String() string {
	return proto.EnumName(HeartbeatCode_name, int32(x))
}
func (HeartbeatCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{0} }

type HeartbeatRequest struct {
	OperatorUuid   string        `protobuf:"bytes,1,opt,name=operator_uuid,json=operatorUuid,proto3" json:"operator_uuid,omitempty"`
	Code           HeartbeatCode `protobuf:"varint,2,opt,name=code,proto3,enum=heartbeat.HeartbeatCode" json:"code,omitempty"`
	Error          string        `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ProcessRunning bool          `protobuf:"varint,4,opt,name=process_running,json=processRunning,proto3" json:"process_running,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{0} }

func (m *HeartbeatRequest) GetOperatorUuid() string {
	if m != nil {
		return m.OperatorUuid
	}
	return ""
}

func (m *HeartbeatRequest) GetCode() HeartbeatCode {
	if m != nil {
		return m.Code
	}
	return HeartbeatCode_UNKNOWN
}

func (m *HeartbeatRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HeartbeatRequest) GetProcessRunning() bool {
	if m != nil {
		return m.ProcessRunning
	}
	return false
}

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{1} }

func init() {
	proto.RegisterType((*HeartbeatRequest)(nil), "heartbeat.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "heartbeat.HeartbeatResponse")
	proto.RegisterEnum("heartbeat.HeartbeatCode", HeartbeatCode_name, HeartbeatCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heartbeater service

type HeartbeaterClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeaterClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeaterClient(cc *grpc.ClientConn) HeartbeaterClient {
	return &heartbeaterClient{cc}
}

func (c *heartbeaterClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/heartbeat.Heartbeater/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heartbeater service

type HeartbeaterServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterHeartbeaterServer(s *grpc.Server, srv HeartbeaterServer) {
	s.RegisterService(&_Heartbeater_serviceDesc, srv)
}

func _Heartbeater_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeaterServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.Heartbeater/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeaterServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.Heartbeater",
	HandlerType: (*HeartbeaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Heartbeater_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto",
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OperatorUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.OperatorUuid)))
		i += copy(dAtA[i:], m.OperatorUuid)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.ProcessRunning {
		dAtA[i] = 0x20
		i++
		if m.ProcessRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OperatorUuid)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovHeartbeat(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ProcessRunning {
		n += 2
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovHeartbeat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (HeartbeatCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessRunning = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHeartbeat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHeartbeat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHeartbeat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/m3em/generated/proto/heartbeat/heartbeat.proto", fileDescriptorHeartbeat)
}

var fileDescriptorHeartbeat = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4e, 0xea, 0x40,
	0x14, 0x87, 0x19, 0xe0, 0xfe, 0xe1, 0x70, 0x81, 0xde, 0xc1, 0xc4, 0x46, 0x4d, 0x43, 0xf0, 0x41,
	0x62, 0x0c, 0x93, 0xd0, 0x15, 0x20, 0xa9, 0x81, 0xa8, 0xad, 0x19, 0x8a, 0xc4, 0x27, 0x42, 0xdb,
	0x13, 0xe8, 0x43, 0x3b, 0x75, 0xda, 0xee, 0xc3, 0x45, 0xb8, 0x18, 0x1f, 0x5d, 0x82, 0xc1, 0x8d,
	0x18, 0x0a, 0x14, 0x4d, 0x78, 0x9b, 0xdf, 0x77, 0x26, 0xdf, 0x39, 0x33, 0x07, 0x8c, 0x85, 0x9f,
	0x2c, 0x53, 0xa7, 0xeb, 0x8a, 0x80, 0x05, 0xba, 0xe7, 0xb0, 0x40, 0x67, 0xb1, 0x74, 0x59, 0xa0,
	0x63, 0xc0, 0x16, 0x18, 0xa2, 0x9c, 0x27, 0xe8, 0xb1, 0x48, 0x8a, 0x44, 0xb0, 0x25, 0xce, 0x65,
	0xe2, 0xe0, 0x3c, 0xd9, 0x9f, 0xba, 0x59, 0x85, 0x56, 0x72, 0xd0, 0x7e, 0x25, 0xa0, 0x0c, 0x77,
	0x89, 0xe3, 0x73, 0x8a, 0x71, 0x42, 0xcf, 0xa1, 0x26, 0xa2, 0xb5, 0x4b, 0xc8, 0x59, 0x9a, 0xfa,
	0x9e, 0x4a, 0x5a, 0xa4, 0x53, 0xe1, 0xff, 0x76, 0x70, 0x92, 0xfa, 0x1e, 0xbd, 0x82, 0xb2, 0x2b,
	0x3c, 0x54, 0x8b, 0x2d, 0xd2, 0xa9, 0xf7, 0xd4, 0xee, 0xbe, 0x49, 0xee, 0x1b, 0x08, 0x0f, 0x79,
	0x76, 0x8b, 0x1e, 0xc1, 0x2f, 0x94, 0x52, 0x48, 0xb5, 0x94, 0xa9, 0x36, 0x81, 0x5e, 0x40, 0x23,
	0x92, 0xc2, 0xc5, 0x38, 0x9e, 0xc9, 0x34, 0x0c, 0xfd, 0x70, 0xa1, 0x96, 0x5b, 0xa4, 0xf3, 0x97,
	0xd7, 0xb7, 0x98, 0x6f, 0x68, 0xbb, 0x09, 0xff, 0xbf, 0x4d, 0x19, 0x47, 0x22, 0x8c, 0xf1, 0x72,
	0x0c, 0xb5, 0x1f, 0xad, 0x68, 0x15, 0xfe, 0x4c, 0xcc, 0x5b, 0xd3, 0x9a, 0x9a, 0x4a, 0x61, 0x1d,
	0x86, 0x46, 0xff, 0xce, 0x1e, 0x3e, 0x29, 0x84, 0x1e, 0x43, 0xf3, 0x81, 0x5b, 0x03, 0x63, 0x3c,
	0x9e, 0xd9, 0x06, 0xbf, 0x1f, 0x99, 0x7d, 0x7b, 0x64, 0x99, 0x4a, 0x91, 0x36, 0xa0, 0x6a, 0x3d,
	0x1a, 0x7c, 0xca, 0x47, 0xb6, 0x6d, 0x98, 0x4a, 0xa9, 0x37, 0x81, 0x6a, 0x2e, 0x45, 0x49, 0x6f,
	0xa0, 0x92, 0x47, 0x7a, 0x7a, 0xe8, 0x91, 0xdb, 0x4f, 0x3b, 0x39, 0x3b, 0x5c, 0xdc, 0xcc, 0x7a,
	0xad, 0xbc, 0xad, 0x34, 0xf2, 0xbe, 0xd2, 0xc8, 0xc7, 0x4a, 0x23, 0x2f, 0x9f, 0x5a, 0xc1, 0xf9,
	0x9d, 0xed, 0x42, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x69, 0x51, 0x07, 0x63, 0xd4, 0x01, 0x00,
	0x00,
}
