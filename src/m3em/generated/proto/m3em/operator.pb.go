// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/m3em/generated/proto/m3em/operator.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package m3em

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullFileType int32

const (
	PullFileType_PULL_FILE_TYPE_UNKNOWN        PullFileType = 0
	PullFileType_PULL_FILE_TYPE_SERVICE_STDOUT PullFileType = 1
	PullFileType_PULL_FILE_TYPE_SERVICE_STDERR PullFileType = 2
)

var PullFileType_name = map[int32]string{
	0: "PULL_FILE_TYPE_UNKNOWN",
	1: "PULL_FILE_TYPE_SERVICE_STDOUT",
	2: "PULL_FILE_TYPE_SERVICE_STDERR",
}

var PullFileType_value = map[string]int32{
	"PULL_FILE_TYPE_UNKNOWN":        0,
	"PULL_FILE_TYPE_SERVICE_STDOUT": 1,
	"PULL_FILE_TYPE_SERVICE_STDERR": 2,
}

func (x PullFileType) String() string {
	return proto.EnumName(PullFileType_name, int32(x))
}

func (PullFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{0}
}

type PullFileContentType int32

const (
	PullFileContentType_PULL_FILE_CONTENT_TYPE_UNKNOWN PullFileContentType = 0
	PullFileContentType_PULL_FILE_CONTENT_TYPE_LAST    PullFileContentType = 1
	PullFileContentType_PULL_FILE_CONTENT_TYPE_FULL    PullFileContentType = 2
)

var PullFileContentType_name = map[int32]string{
	0: "PULL_FILE_CONTENT_TYPE_UNKNOWN",
	1: "PULL_FILE_CONTENT_TYPE_LAST",
	2: "PULL_FILE_CONTENT_TYPE_FULL",
}

var PullFileContentType_value = map[string]int32{
	"PULL_FILE_CONTENT_TYPE_UNKNOWN": 0,
	"PULL_FILE_CONTENT_TYPE_LAST":    1,
	"PULL_FILE_CONTENT_TYPE_FULL":    2,
}

func (x PullFileContentType) String() string {
	return proto.EnumName(PullFileContentType_name, int32(x))
}

func (PullFileContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{1}
}

type PushFileType int32

const (
	PushFileType_PUSH_FILE_TYPE_UNKNOWN        PushFileType = 0
	PushFileType_PUSH_FILE_TYPE_SERVICE_BINARY PushFileType = 1
	PushFileType_PUSH_FILE_TYPE_SERVICE_CONFIG PushFileType = 2
	PushFileType_PUSH_FILE_TYPE_DATA_FILE      PushFileType = 3
)

var PushFileType_name = map[int32]string{
	0: "PUSH_FILE_TYPE_UNKNOWN",
	1: "PUSH_FILE_TYPE_SERVICE_BINARY",
	2: "PUSH_FILE_TYPE_SERVICE_CONFIG",
	3: "PUSH_FILE_TYPE_DATA_FILE",
}

var PushFileType_value = map[string]int32{
	"PUSH_FILE_TYPE_UNKNOWN":        0,
	"PUSH_FILE_TYPE_SERVICE_BINARY": 1,
	"PUSH_FILE_TYPE_SERVICE_CONFIG": 2,
	"PUSH_FILE_TYPE_DATA_FILE":      3,
}

func (x PushFileType) String() string {
	return proto.EnumName(PushFileType_name, int32(x))
}

func (PushFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{2}
}

type SetupRequest struct {
	SessionToken           string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	OperatorUuid           string `protobuf:"bytes,2,opt,name=operator_uuid,json=operatorUuid,proto3" json:"operator_uuid,omitempty"`
	Force                  bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	HeartbeatEnabled       bool   `protobuf:"varint,4,opt,name=heartbeat_enabled,json=heartbeatEnabled,proto3" json:"heartbeat_enabled,omitempty"`
	HeartbeatEndpoint      string `protobuf:"bytes,5,opt,name=heartbeat_endpoint,json=heartbeatEndpoint,proto3" json:"heartbeat_endpoint,omitempty"`
	HeartbeatFrequencySecs uint32 `protobuf:"varint,6,opt,name=heartbeat_frequency_secs,json=heartbeatFrequencySecs,proto3" json:"heartbeat_frequency_secs,omitempty"`
}

func (m *SetupRequest) Reset()         { *m = SetupRequest{} }
func (m *SetupRequest) String() string { return proto.CompactTextString(m) }
func (*SetupRequest) ProtoMessage()    {}
func (*SetupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{0}
}
func (m *SetupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupRequest.Merge(m, src)
}
func (m *SetupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupRequest proto.InternalMessageInfo

func (m *SetupRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *SetupRequest) GetOperatorUuid() string {
	if m != nil {
		return m.OperatorUuid
	}
	return ""
}

func (m *SetupRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *SetupRequest) GetHeartbeatEnabled() bool {
	if m != nil {
		return m.HeartbeatEnabled
	}
	return false
}

func (m *SetupRequest) GetHeartbeatEndpoint() string {
	if m != nil {
		return m.HeartbeatEndpoint
	}
	return ""
}

func (m *SetupRequest) GetHeartbeatFrequencySecs() uint32 {
	if m != nil {
		return m.HeartbeatFrequencySecs
	}
	return 0
}

type SetupResponse struct {
}

func (m *SetupResponse) Reset()         { *m = SetupResponse{} }
func (m *SetupResponse) String() string { return proto.CompactTextString(m) }
func (*SetupResponse) ProtoMessage()    {}
func (*SetupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{1}
}
func (m *SetupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupResponse.Merge(m, src)
}
func (m *SetupResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupResponse proto.InternalMessageInfo

type StartRequest struct {
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{2}
}
func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

type StartResponse struct {
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{3}
}
func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

type StopRequest struct {
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{4}
}
func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

type StopResponse struct {
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{5}
}
func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return m.Size()
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

type TeardownRequest struct {
}

func (m *TeardownRequest) Reset()         { *m = TeardownRequest{} }
func (m *TeardownRequest) String() string { return proto.CompactTextString(m) }
func (*TeardownRequest) ProtoMessage()    {}
func (*TeardownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{6}
}
func (m *TeardownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeardownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeardownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeardownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeardownRequest.Merge(m, src)
}
func (m *TeardownRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeardownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeardownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeardownRequest proto.InternalMessageInfo

type TeardownResponse struct {
}

func (m *TeardownResponse) Reset()         { *m = TeardownResponse{} }
func (m *TeardownResponse) String() string { return proto.CompactTextString(m) }
func (*TeardownResponse) ProtoMessage()    {}
func (*TeardownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{7}
}
func (m *TeardownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeardownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeardownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeardownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeardownResponse.Merge(m, src)
}
func (m *TeardownResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeardownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeardownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeardownResponse proto.InternalMessageInfo

// PullFileRequest(s) are used to transfer files from remote agents to the master.
type PullFileRequest struct {
	FileType  PullFileType `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3,enum=m3em.PullFileType" json:"file_type,omitempty"`
	ChunkSize int64        `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	MaxSize   int64        `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (m *PullFileRequest) Reset()         { *m = PullFileRequest{} }
func (m *PullFileRequest) String() string { return proto.CompactTextString(m) }
func (*PullFileRequest) ProtoMessage()    {}
func (*PullFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{8}
}
func (m *PullFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullFileRequest.Merge(m, src)
}
func (m *PullFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullFileRequest proto.InternalMessageInfo

func (m *PullFileRequest) GetFileType() PullFileType {
	if m != nil {
		return m.FileType
	}
	return PullFileType_PULL_FILE_TYPE_UNKNOWN
}

func (m *PullFileRequest) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *PullFileRequest) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type PullFileResponse struct {
	Data      *DataChunk `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Truncated bool       `protobuf:"varint,2,opt,name=truncated,proto3" json:"truncated,omitempty"`
}

func (m *PullFileResponse) Reset()         { *m = PullFileResponse{} }
func (m *PullFileResponse) String() string { return proto.CompactTextString(m) }
func (*PullFileResponse) ProtoMessage()    {}
func (*PullFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{9}
}
func (m *PullFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullFileResponse.Merge(m, src)
}
func (m *PullFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullFileResponse proto.InternalMessageInfo

func (m *PullFileResponse) GetData() *DataChunk {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PullFileResponse) GetTruncated() bool {
	if m != nil {
		return m.Truncated
	}
	return false
}

// PushFileRequest(s) are used to transfer files from the master to remote agents.
type PushFileRequest struct {
	Type        PushFileType `protobuf:"varint,1,opt,name=type,proto3,enum=m3em.PushFileType" json:"type,omitempty"`
	Overwrite   bool         `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Data        *DataChunk   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	TargetPaths []string     `protobuf:"bytes,4,rep,name=target_paths,json=targetPaths,proto3" json:"target_paths,omitempty"`
}

func (m *PushFileRequest) Reset()         { *m = PushFileRequest{} }
func (m *PushFileRequest) String() string { return proto.CompactTextString(m) }
func (*PushFileRequest) ProtoMessage()    {}
func (*PushFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{10}
}
func (m *PushFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileRequest.Merge(m, src)
}
func (m *PushFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileRequest proto.InternalMessageInfo

func (m *PushFileRequest) GetType() PushFileType {
	if m != nil {
		return m.Type
	}
	return PushFileType_PUSH_FILE_TYPE_UNKNOWN
}

func (m *PushFileRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *PushFileRequest) GetData() *DataChunk {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushFileRequest) GetTargetPaths() []string {
	if m != nil {
		return m.TargetPaths
	}
	return nil
}

type PushFileResponse struct {
	FileChecksum   uint32 `protobuf:"varint,1,opt,name=file_checksum,json=fileChecksum,proto3" json:"file_checksum,omitempty"`
	NumChunksRecvd int32  `protobuf:"varint,2,opt,name=num_chunks_recvd,json=numChunksRecvd,proto3" json:"num_chunks_recvd,omitempty"`
}

func (m *PushFileResponse) Reset()         { *m = PushFileResponse{} }
func (m *PushFileResponse) String() string { return proto.CompactTextString(m) }
func (*PushFileResponse) ProtoMessage()    {}
func (*PushFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{11}
}
func (m *PushFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileResponse.Merge(m, src)
}
func (m *PushFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileResponse proto.InternalMessageInfo

func (m *PushFileResponse) GetFileChecksum() uint32 {
	if m != nil {
		return m.FileChecksum
	}
	return 0
}

func (m *PushFileResponse) GetNumChunksRecvd() int32 {
	if m != nil {
		return m.NumChunksRecvd
	}
	return 0
}

type DataChunk struct {
	Idx   int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_73be41c2fcc7ce5e, []int{12}
}
func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(m, src)
}
func (m *DataChunk) XXX_Size() int {
	return m.Size()
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

func (m *DataChunk) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *DataChunk) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterEnum("m3em.PullFileType", PullFileType_name, PullFileType_value)
	proto.RegisterEnum("m3em.PullFileContentType", PullFileContentType_name, PullFileContentType_value)
	proto.RegisterEnum("m3em.PushFileType", PushFileType_name, PushFileType_value)
	proto.RegisterType((*SetupRequest)(nil), "m3em.SetupRequest")
	proto.RegisterType((*SetupResponse)(nil), "m3em.SetupResponse")
	proto.RegisterType((*StartRequest)(nil), "m3em.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "m3em.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "m3em.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "m3em.StopResponse")
	proto.RegisterType((*TeardownRequest)(nil), "m3em.TeardownRequest")
	proto.RegisterType((*TeardownResponse)(nil), "m3em.TeardownResponse")
	proto.RegisterType((*PullFileRequest)(nil), "m3em.PullFileRequest")
	proto.RegisterType((*PullFileResponse)(nil), "m3em.PullFileResponse")
	proto.RegisterType((*PushFileRequest)(nil), "m3em.PushFileRequest")
	proto.RegisterType((*PushFileResponse)(nil), "m3em.PushFileResponse")
	proto.RegisterType((*DataChunk)(nil), "m3em.DataChunk")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/m3em/generated/proto/m3em/operator.proto", fileDescriptor_73be41c2fcc7ce5e)
}

var fileDescriptor_73be41c2fcc7ce5e = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcf, 0x6f, 0xdb, 0x36,
	0x18, 0x8d, 0xfc, 0xa3, 0xb3, 0xbf, 0xd8, 0x89, 0xc2, 0x6e, 0x81, 0x96, 0xb5, 0x5e, 0xea, 0x02,
	0x83, 0x91, 0xa1, 0x71, 0x11, 0x5f, 0x36, 0xec, 0x30, 0xa4, 0x8e, 0xbd, 0x05, 0x33, 0xec, 0x80,
	0x92, 0x37, 0xf4, 0x24, 0xc8, 0x12, 0x13, 0x0b, 0xb1, 0x7e, 0x4c, 0xa4, 0xda, 0xa4, 0xdb, 0x71,
	0xe7, 0x61, 0xff, 0xc1, 0xfe, 0x9d, 0x1d, 0x8b, 0x9d, 0x76, 0x1c, 0x92, 0x7f, 0xa4, 0x20, 0x29,
	0x4a, 0x8a, 0xd1, 0xe4, 0x66, 0xbe, 0xf7, 0x3e, 0x7e, 0xdf, 0x23, 0xa9, 0x67, 0xf8, 0xfe, 0xc2,
	0x67, 0xcb, 0x74, 0x71, 0xe8, 0x46, 0x41, 0x3f, 0x18, 0x78, 0x8b, 0x7e, 0x30, 0xe8, 0xd3, 0xc4,
	0xed, 0x07, 0x03, 0x12, 0xf4, 0x2f, 0x48, 0x48, 0x12, 0x87, 0x11, 0xaf, 0x1f, 0x27, 0x11, 0x8b,
	0x24, 0x18, 0xc5, 0x1c, 0x8b, 0x92, 0x43, 0x81, 0xa1, 0x1a, 0x07, 0xbb, 0x7f, 0x54, 0xa0, 0x65,
	0x12, 0x96, 0xc6, 0x98, 0xfc, 0x9a, 0x12, 0xca, 0xd0, 0x73, 0x68, 0x53, 0x42, 0xa9, 0x1f, 0x85,
	0x36, 0x8b, 0x2e, 0x49, 0x68, 0x68, 0xfb, 0x5a, 0xaf, 0x89, 0x5b, 0x19, 0x68, 0x71, 0x8c, 0x8b,
	0xd4, 0x6e, 0x76, 0x9a, 0xfa, 0x9e, 0x51, 0x91, 0x22, 0x05, 0xce, 0x53, 0xdf, 0x43, 0x9f, 0x42,
	0xfd, 0x3c, 0x4a, 0x5c, 0x62, 0x54, 0xf7, 0xb5, 0x5e, 0x03, 0xcb, 0x05, 0xfa, 0x1a, 0x76, 0x96,
	0xc4, 0x49, 0xd8, 0x82, 0x38, 0xcc, 0x26, 0xa1, 0xb3, 0x58, 0x11, 0xcf, 0xa8, 0x09, 0x85, 0x9e,
	0x13, 0x23, 0x89, 0xa3, 0x17, 0x80, 0xca, 0x62, 0x2f, 0x8e, 0xfc, 0x90, 0x19, 0x75, 0xd1, 0x6c,
	0xa7, 0xa4, 0x96, 0x04, 0xfa, 0x06, 0x8c, 0x42, 0x7e, 0x9e, 0x70, 0x47, 0xa1, 0x7b, 0x6d, 0x53,
	0xe2, 0x52, 0xe3, 0xd1, 0xbe, 0xd6, 0x6b, 0xe3, 0xdd, 0x9c, 0x1f, 0x2b, 0xda, 0x24, 0x2e, 0xed,
	0x6e, 0x43, 0x3b, 0x3b, 0x05, 0x1a, 0x47, 0x21, 0x25, 0xdd, 0x2d, 0x68, 0x99, 0xcc, 0x49, 0x58,
	0x76, 0x2c, 0x42, 0x20, 0xd7, 0x99, 0xa0, 0x0d, 0x9b, 0x26, 0x8b, 0xd4, 0xb1, 0x49, 0x7d, 0x54,
	0xd4, 0xef, 0xc0, 0xb6, 0x45, 0x9c, 0xc4, 0x8b, 0xde, 0x86, 0x4a, 0x82, 0x40, 0x2f, 0xa0, 0x4c,
	0xf6, 0x3b, 0x6c, 0x9f, 0xa5, 0xab, 0xd5, 0xd8, 0x5f, 0x11, 0x75, 0x01, 0x7d, 0x68, 0x9e, 0xfb,
	0x2b, 0x62, 0xb3, 0xeb, 0x98, 0x88, 0xc3, 0xdf, 0x3a, 0x42, 0x87, 0xfc, 0xae, 0x0e, 0x95, 0xd2,
	0xba, 0x8e, 0x09, 0x6e, 0x9c, 0x67, 0xbf, 0xd0, 0x53, 0x00, 0x77, 0x99, 0x86, 0x97, 0x36, 0xf5,
	0xdf, 0x11, 0x71, 0x13, 0x55, 0xdc, 0x14, 0x88, 0xe9, 0xbf, 0x23, 0xe8, 0x73, 0x68, 0x04, 0xce,
	0x95, 0x24, 0xab, 0x82, 0xfc, 0x24, 0x70, 0xae, 0x38, 0xd5, 0x9d, 0x83, 0x5e, 0x74, 0x97, 0x13,
	0xa1, 0xe7, 0x50, 0xf3, 0x1c, 0xe6, 0x88, 0xce, 0x9b, 0x47, 0xdb, 0xb2, 0xf3, 0x89, 0xc3, 0x9c,
	0x21, 0xdf, 0x11, 0x0b, 0x12, 0x3d, 0x81, 0x26, 0x4b, 0xd2, 0xd0, 0xe5, 0x4f, 0x4c, 0x74, 0x6c,
	0xe0, 0x02, 0xe8, 0xfe, 0xad, 0x71, 0x57, 0x74, 0x59, 0x76, 0xf5, 0x15, 0xd4, 0x3e, 0x66, 0x48,
	0x8a, 0x84, 0x21, 0xc1, 0xf3, 0x9d, 0xa3, 0x37, 0x24, 0x79, 0x9b, 0xf8, 0x8c, 0xa8, 0x9d, 0x73,
	0x20, 0x1f, 0xae, 0xfa, 0xd0, 0x70, 0xcf, 0xa0, 0xc5, 0x9c, 0xe4, 0x82, 0x30, 0x3b, 0x76, 0xd8,
	0x92, 0x1a, 0xb5, 0xfd, 0x6a, 0xaf, 0x89, 0x37, 0x25, 0x76, 0xc6, 0xa1, 0xae, 0xc3, 0x8d, 0xab,
	0x01, 0x73, 0xe3, 0x6d, 0x71, 0xee, 0xee, 0x92, 0xb8, 0x97, 0x34, 0x0d, 0xc4, 0xa8, 0x6d, 0xdc,
	0xe2, 0xe0, 0x30, 0xc3, 0x50, 0x0f, 0xf4, 0x30, 0x0d, 0x6c, 0x71, 0xba, 0xd4, 0x4e, 0x88, 0xfb,
	0x46, 0xfa, 0xaf, 0xe3, 0xad, 0x30, 0x0d, 0xc4, 0x14, 0x14, 0x73, 0xb4, 0x3b, 0x80, 0x66, 0x3e,
	0x18, 0xd2, 0xa1, 0xea, 0x7b, 0x57, 0x62, 0xc7, 0x3a, 0xe6, 0x3f, 0xf9, 0xc7, 0xb1, 0xb8, 0x66,
	0x84, 0x8a, 0xea, 0x16, 0x96, 0x8b, 0x83, 0x18, 0x5a, 0xe5, 0x4b, 0x46, 0x7b, 0xb0, 0x7b, 0x36,
	0x9f, 0x4c, 0xec, 0xf1, 0xe9, 0x64, 0x64, 0x5b, 0xaf, 0xcf, 0x46, 0xf6, 0x7c, 0xfa, 0xd3, 0x74,
	0xf6, 0xcb, 0x54, 0xdf, 0x40, 0xcf, 0xe0, 0xe9, 0x1a, 0x67, 0x8e, 0xf0, 0xcf, 0xa7, 0xc3, 0x91,
	0x6d, 0x5a, 0x27, 0xb3, 0xb9, 0xa5, 0x6b, 0x0f, 0x4b, 0x46, 0x18, 0xeb, 0x95, 0x83, 0xdf, 0xe0,
	0xb1, 0xea, 0x38, 0x8c, 0x42, 0x46, 0x42, 0x26, 0x1a, 0x77, 0xa1, 0x53, 0x54, 0x0e, 0x67, 0x53,
	0x6b, 0x34, 0xb5, 0xd6, 0x07, 0xf8, 0x12, 0xbe, 0xb8, 0x47, 0x33, 0x39, 0x36, 0x79, 0xfb, 0xfb,
	0x05, 0xe3, 0xf9, 0x64, 0xa2, 0x57, 0x0e, 0xfe, 0xd4, 0xb8, 0xdf, 0xe2, 0x0d, 0x48, 0xbf, 0xe6,
	0x8f, 0xf7, 0xfb, 0xbd, 0xc3, 0x29, 0x33, 0xaf, 0x4e, 0xa7, 0xc7, 0xf8, 0xb5, 0xf2, 0xfb, 0x51,
	0xc9, 0x70, 0x36, 0x1d, 0x9f, 0xfe, 0xa0, 0x57, 0xd0, 0x13, 0x30, 0xd6, 0x24, 0x27, 0xc7, 0xd6,
	0xb1, 0x58, 0xea, 0xd5, 0xa3, 0x7f, 0x2b, 0xd0, 0x98, 0x65, 0x19, 0x86, 0x5e, 0x42, 0x5d, 0x64,
	0x02, 0xca, 0x5e, 0x6b, 0x39, 0x26, 0xf7, 0x1e, 0xdf, 0xc1, 0xb2, 0x27, 0xc4, 0x2b, 0x78, 0x48,
	0xe4, 0x15, 0xa5, 0x04, 0xc9, 0x2b, 0xca, 0x29, 0x82, 0x5e, 0x40, 0x8d, 0xc7, 0x06, 0xda, 0x51,
	0x64, 0x9e, 0x28, 0x7b, 0xa8, 0x0c, 0x65, 0xf2, 0x6f, 0xa1, 0xa1, 0x22, 0x04, 0x7d, 0x26, 0xf9,
	0xb5, 0x94, 0xd9, 0xdb, 0x5d, 0x87, 0xb3, 0xd2, 0xef, 0xa0, 0xa1, 0x2e, 0x5a, 0x95, 0xae, 0x25,
	0x8f, 0x2a, 0x5d, 0x8f, 0x84, 0x97, 0x9a, 0x2c, 0x96, 0xf7, 0x54, 0x14, 0xdf, 0xf9, 0xc0, 0x8b,
	0xe2, 0xbb, 0x9f, 0x55, 0x4f, 0x7b, 0x65, 0xfc, 0x73, 0xd3, 0xd1, 0xde, 0xdf, 0x74, 0xb4, 0xff,
	0x6f, 0x3a, 0xda, 0x5f, 0xb7, 0x9d, 0x8d, 0xf7, 0xb7, 0x9d, 0x8d, 0xff, 0x6e, 0x3b, 0x1b, 0x8b,
	0x47, 0xe2, 0x9f, 0x68, 0xf0, 0x21, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x18, 0xe2, 0x3d, 0xcc, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorClient interface {
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error)
	PullFile(ctx context.Context, in *PullFileRequest, opts ...grpc.CallOption) (Operator_PullFileClient, error)
	PushFile(ctx context.Context, opts ...grpc.CallOption) (Operator_PushFileClient, error)
}

type operatorClient struct {
	cc *grpc.ClientConn
}

func NewOperatorClient(cc *grpc.ClientConn) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := c.cc.Invoke(ctx, "/m3em.Operator/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/m3em.Operator/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/m3em.Operator/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	out := new(TeardownResponse)
	err := c.cc.Invoke(ctx, "/m3em.Operator/Teardown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) PullFile(ctx context.Context, in *PullFileRequest, opts ...grpc.CallOption) (Operator_PullFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Operator_serviceDesc.Streams[0], "/m3em.Operator/PullFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorPullFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Operator_PullFileClient interface {
	Recv() (*PullFileResponse, error)
	grpc.ClientStream
}

type operatorPullFileClient struct {
	grpc.ClientStream
}

func (x *operatorPullFileClient) Recv() (*PullFileResponse, error) {
	m := new(PullFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operatorClient) PushFile(ctx context.Context, opts ...grpc.CallOption) (Operator_PushFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Operator_serviceDesc.Streams[1], "/m3em.Operator/PushFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorPushFileClient{stream}
	return x, nil
}

type Operator_PushFileClient interface {
	Send(*PushFileRequest) error
	CloseAndRecv() (*PushFileResponse, error)
	grpc.ClientStream
}

type operatorPushFileClient struct {
	grpc.ClientStream
}

func (x *operatorPushFileClient) Send(m *PushFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operatorPushFileClient) CloseAndRecv() (*PushFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperatorServer is the server API for Operator service.
type OperatorServer interface {
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Teardown(context.Context, *TeardownRequest) (*TeardownResponse, error)
	PullFile(*PullFileRequest, Operator_PullFileServer) error
	PushFile(Operator_PushFileServer) error
}

// UnimplementedOperatorServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorServer struct {
}

func (*UnimplementedOperatorServer) Setup(ctx context.Context, req *SetupRequest) (*SetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedOperatorServer) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedOperatorServer) Stop(ctx context.Context, req *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedOperatorServer) Teardown(ctx context.Context, req *TeardownRequest) (*TeardownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (*UnimplementedOperatorServer) PullFile(req *PullFileRequest, srv Operator_PullFileServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFile not implemented")
}
func (*UnimplementedOperatorServer) PushFile(srv Operator_PushFileServer) error {
	return status.Errorf(codes.Unimplemented, "method PushFile not implemented")
}

func RegisterOperatorServer(s *grpc.Server, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeardownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Teardown(ctx, req.(*TeardownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_PullFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServer).PullFile(m, &operatorPullFileServer{stream})
}

type Operator_PullFileServer interface {
	Send(*PullFileResponse) error
	grpc.ServerStream
}

type operatorPullFileServer struct {
	grpc.ServerStream
}

func (x *operatorPullFileServer) Send(m *PullFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Operator_PushFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServer).PushFile(&operatorPushFileServer{stream})
}

type Operator_PushFileServer interface {
	SendAndClose(*PushFileResponse) error
	Recv() (*PushFileRequest, error)
	grpc.ServerStream
}

type operatorPushFileServer struct {
	grpc.ServerStream
}

func (x *operatorPushFileServer) SendAndClose(m *PushFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operatorPushFileServer) Recv() (*PushFileRequest, error) {
	m := new(PushFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m3em.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Operator_Setup_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Operator_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Operator_Stop_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _Operator_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullFile",
			Handler:       _Operator_PullFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushFile",
			Handler:       _Operator_PushFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/m3db/m3/src/m3em/generated/proto/m3em/operator.proto",
}

func (m *SetupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeartbeatFrequencySecs != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.HeartbeatFrequencySecs))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HeartbeatEndpoint) > 0 {
		i -= len(m.HeartbeatEndpoint)
		copy(dAtA[i:], m.HeartbeatEndpoint)
		i = encodeVarintOperator(dAtA, i, uint64(len(m.HeartbeatEndpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HeartbeatEnabled {
		i--
		if m.HeartbeatEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OperatorUuid) > 0 {
		i -= len(m.OperatorUuid)
		copy(dAtA[i:], m.OperatorUuid)
		i = encodeVarintOperator(dAtA, i, uint64(len(m.OperatorUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionToken) > 0 {
		i -= len(m.SessionToken)
		copy(dAtA[i:], m.SessionToken)
		i = encodeVarintOperator(dAtA, i, uint64(len(m.SessionToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StopResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeardownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeardownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeardownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeardownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeardownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeardownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PullFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x18
	}
	if m.ChunkSize != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x10
	}
	if m.FileType != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Truncated {
		i--
		if m.Truncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetPaths) > 0 {
		for iNdEx := len(m.TargetPaths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TargetPaths[iNdEx])
			copy(dAtA[i:], m.TargetPaths[iNdEx])
			i = encodeVarintOperator(dAtA, i, uint64(len(m.TargetPaths[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Overwrite {
		i--
		if m.Overwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumChunksRecvd != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.NumChunksRecvd))
		i--
		dAtA[i] = 0x10
	}
	if m.FileChecksum != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.FileChecksum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintOperator(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Idx != 0 {
		i = encodeVarintOperator(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOperator(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionToken)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	l = len(m.OperatorUuid)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.HeartbeatEnabled {
		n += 2
	}
	l = len(m.HeartbeatEndpoint)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	if m.HeartbeatFrequencySecs != 0 {
		n += 1 + sovOperator(uint64(m.HeartbeatFrequencySecs))
	}
	return n
}

func (m *SetupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeardownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeardownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PullFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileType != 0 {
		n += 1 + sovOperator(uint64(m.FileType))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovOperator(uint64(m.ChunkSize))
	}
	if m.MaxSize != 0 {
		n += 1 + sovOperator(uint64(m.MaxSize))
	}
	return n
}

func (m *PullFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovOperator(uint64(l))
	}
	if m.Truncated {
		n += 2
	}
	return n
}

func (m *PushFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOperator(uint64(m.Type))
	}
	if m.Overwrite {
		n += 2
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovOperator(uint64(l))
	}
	if len(m.TargetPaths) > 0 {
		for _, s := range m.TargetPaths {
			l = len(s)
			n += 1 + l + sovOperator(uint64(l))
		}
	}
	return n
}

func (m *PushFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileChecksum != 0 {
		n += 1 + sovOperator(uint64(m.FileChecksum))
	}
	if m.NumChunksRecvd != 0 {
		n += 1 + sovOperator(uint64(m.NumChunksRecvd))
	}
	return n
}

func (m *DataChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovOperator(uint64(m.Idx))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	return n
}

func sovOperator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperator(x uint64) (n int) {
	return sovOperator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeartbeatEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatFrequencySecs", wireType)
			}
			m.HeartbeatFrequencySecs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatFrequencySecs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeardownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeardownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeardownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeardownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeardownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeardownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= PullFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataChunk{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Truncated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PushFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataChunk{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPaths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPaths = append(m.TargetPaths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileChecksum", wireType)
			}
			m.FileChecksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileChecksum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChunksRecvd", wireType)
			}
			m.NumChunksRecvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChunksRecvd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperator = fmt.Errorf("proto: unexpected end of group")
)
