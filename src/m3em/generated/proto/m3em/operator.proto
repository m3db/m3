// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package m3em;

service Operator {
  rpc Setup(SetupRequest)              returns (SetupResponse);
  rpc Start(StartRequest)              returns (StartResponse);
  rpc Stop(StopRequest)                returns (StopResponse);
  rpc Teardown(TeardownRequest)        returns (TeardownResponse);
  rpc PullFile(PullFileRequest)        returns (stream PullFileResponse);
  rpc PushFile(stream PushFileRequest) returns (PushFileResponse);
}

message SetupRequest {
  string session_token            = 1;
  string operator_uuid            = 2;
  bool   force                    = 3;
  bool   heartbeat_enabled        = 4;
  string heartbeat_endpoint       = 5;
  uint32 heartbeat_frequency_secs = 6;
}

message SetupResponse {
}

message StartRequest {
}

message StartResponse {
}

message StopRequest {
}

message StopResponse {
}

message TeardownRequest {
}

message TeardownResponse {
}

// PullFileRequest(s) are used to transfer files from remote agents to the master.
message PullFileRequest {
  PullFileType file_type  = 1;
  int64        chunk_size = 2; // DataChunk bytes size used if multiple messages
  int64        max_size   = 3; // if the file is larger than `max_size`, the last
                               // `max_size` bytes are returned. if 0, the entire
}

message PullFileResponse {
  DataChunk data      = 1;
  bool      truncated = 2; // indicates if the data chunks comprise the entire contents
                           // of the file
}

enum PullFileType {
  PULL_FILE_TYPE_UNKNOWN        = 0;
  PULL_FILE_TYPE_SERVICE_STDOUT = 1;
  PULL_FILE_TYPE_SERVICE_STDERR = 2;
}

enum PullFileContentType {
  PULL_FILE_CONTENT_TYPE_UNKNOWN = 0;
  PULL_FILE_CONTENT_TYPE_LAST    = 1;
  PULL_FILE_CONTENT_TYPE_FULL    = 2;
}

// PushFileRequest(s) are used to transfer files from the master to remote agents.
message PushFileRequest {
           PushFileType type         = 1;
           bool         overwrite    = 2;
           DataChunk    data         = 3;
  repeated string       target_paths = 4; // target_paths indicate the copies, and
                                          // relative paths to copy the file to
}

message PushFileResponse {
  uint32 file_checksum    = 1;
  int32  num_chunks_recvd = 2;
}

message DataChunk {
  int32  idx   = 1;
  bytes  bytes = 2;
}

enum PushFileType {
  PUSH_FILE_TYPE_UNKNOWN        = 0;
  PUSH_FILE_TYPE_SERVICE_BINARY = 1;
  PUSH_FILE_TYPE_SERVICE_CONFIG = 2;
  PUSH_FILE_TYPE_DATA_FILE      = 3;
}