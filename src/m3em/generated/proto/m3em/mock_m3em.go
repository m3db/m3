// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3em/generated/proto/m3em (interfaces: OperatorClient,Operator_PushFileClient,Operator_PullFileClient,Operator_PullFileServer)

package m3em

import (
	context "context"
	gomock "github.com/golang/mock/gomock"

	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockOperatorClient is a mock of OperatorClient interface
type MockOperatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorClientMockRecorder
}

// MockOperatorClientMockRecorder is the mock recorder for MockOperatorClient
type MockOperatorClientMockRecorder struct {
	mock *MockOperatorClient
}

// NewMockOperatorClient creates a new mock instance
func NewMockOperatorClient(ctrl *gomock.Controller) *MockOperatorClient {
	mock := &MockOperatorClient{ctrl: ctrl}
	mock.recorder = &MockOperatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOperatorClient) EXPECT() *MockOperatorClientMockRecorder {
	return _m.recorder
}

// PullFile mocks base method
func (_m *MockOperatorClient) PullFile(_param0 context.Context, _param1 *PullFileRequest, _param2 ...grpc.CallOption) (Operator_PullFileClient, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PullFile", _s...)
	ret0, _ := ret[0].(Operator_PullFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullFile indicates an expected call of PullFile
func (_mr *MockOperatorClientMockRecorder) PullFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PullFile", reflect.TypeOf((*MockOperatorClient)(nil).PullFile), _s...)
}

// PushFile mocks base method
func (_m *MockOperatorClient) PushFile(_param0 context.Context, _param1 ...grpc.CallOption) (Operator_PushFileClient, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PushFile", _s...)
	ret0, _ := ret[0].(Operator_PushFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushFile indicates an expected call of PushFile
func (_mr *MockOperatorClientMockRecorder) PushFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PushFile", reflect.TypeOf((*MockOperatorClient)(nil).PushFile), _s...)
}

// Setup mocks base method
func (_m *MockOperatorClient) Setup(_param0 context.Context, _param1 *SetupRequest, _param2 ...grpc.CallOption) (*SetupResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Setup", _s...)
	ret0, _ := ret[0].(*SetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup
func (_mr *MockOperatorClientMockRecorder) Setup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Setup", reflect.TypeOf((*MockOperatorClient)(nil).Setup), _s...)
}

// Start mocks base method
func (_m *MockOperatorClient) Start(_param0 context.Context, _param1 *StartRequest, _param2 ...grpc.CallOption) (*StartResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Start", _s...)
	ret0, _ := ret[0].(*StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (_mr *MockOperatorClientMockRecorder) Start(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockOperatorClient)(nil).Start), _s...)
}

// Stop mocks base method
func (_m *MockOperatorClient) Stop(_param0 context.Context, _param1 *StopRequest, _param2 ...grpc.CallOption) (*StopResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Stop", _s...)
	ret0, _ := ret[0].(*StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (_mr *MockOperatorClientMockRecorder) Stop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockOperatorClient)(nil).Stop), _s...)
}

// Teardown mocks base method
func (_m *MockOperatorClient) Teardown(_param0 context.Context, _param1 *TeardownRequest, _param2 ...grpc.CallOption) (*TeardownResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Teardown", _s...)
	ret0, _ := ret[0].(*TeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown
func (_mr *MockOperatorClientMockRecorder) Teardown(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Teardown", reflect.TypeOf((*MockOperatorClient)(nil).Teardown), _s...)
}

// MockOperator_PushFileClient is a mock of Operator_PushFileClient interface
type MockOperator_PushFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperator_PushFileClientMockRecorder
}

// MockOperator_PushFileClientMockRecorder is the mock recorder for MockOperator_PushFileClient
type MockOperator_PushFileClientMockRecorder struct {
	mock *MockOperator_PushFileClient
}

// NewMockOperator_PushFileClient creates a new mock instance
func NewMockOperator_PushFileClient(ctrl *gomock.Controller) *MockOperator_PushFileClient {
	mock := &MockOperator_PushFileClient{ctrl: ctrl}
	mock.recorder = &MockOperator_PushFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOperator_PushFileClient) EXPECT() *MockOperator_PushFileClientMockRecorder {
	return _m.recorder
}

// CloseAndRecv mocks base method
func (_m *MockOperator_PushFileClient) CloseAndRecv() (*PushFileResponse, error) {
	ret := _m.ctrl.Call(_m, "CloseAndRecv")
	ret0, _ := ret[0].(*PushFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (_mr *MockOperator_PushFileClientMockRecorder) CloseAndRecv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseAndRecv", reflect.TypeOf((*MockOperator_PushFileClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (_m *MockOperator_PushFileClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (_mr *MockOperator_PushFileClientMockRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseSend", reflect.TypeOf((*MockOperator_PushFileClient)(nil).CloseSend))
}

// Context mocks base method
func (_m *MockOperator_PushFileClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockOperator_PushFileClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockOperator_PushFileClient)(nil).Context))
}

// Header mocks base method
func (_m *MockOperator_PushFileClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (_mr *MockOperator_PushFileClientMockRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Header", reflect.TypeOf((*MockOperator_PushFileClient)(nil).Header))
}

// RecvMsg mocks base method
func (_m *MockOperator_PushFileClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockOperator_PushFileClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockOperator_PushFileClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (_m *MockOperator_PushFileClient) Send(_param0 *PushFileRequest) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockOperator_PushFileClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockOperator_PushFileClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (_m *MockOperator_PushFileClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockOperator_PushFileClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockOperator_PushFileClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (_m *MockOperator_PushFileClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (_mr *MockOperator_PushFileClientMockRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Trailer", reflect.TypeOf((*MockOperator_PushFileClient)(nil).Trailer))
}

// MockOperator_PullFileClient is a mock of Operator_PullFileClient interface
type MockOperator_PullFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperator_PullFileClientMockRecorder
}

// MockOperator_PullFileClientMockRecorder is the mock recorder for MockOperator_PullFileClient
type MockOperator_PullFileClientMockRecorder struct {
	mock *MockOperator_PullFileClient
}

// NewMockOperator_PullFileClient creates a new mock instance
func NewMockOperator_PullFileClient(ctrl *gomock.Controller) *MockOperator_PullFileClient {
	mock := &MockOperator_PullFileClient{ctrl: ctrl}
	mock.recorder = &MockOperator_PullFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOperator_PullFileClient) EXPECT() *MockOperator_PullFileClientMockRecorder {
	return _m.recorder
}

// CloseSend mocks base method
func (_m *MockOperator_PullFileClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (_mr *MockOperator_PullFileClientMockRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseSend", reflect.TypeOf((*MockOperator_PullFileClient)(nil).CloseSend))
}

// Context mocks base method
func (_m *MockOperator_PullFileClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockOperator_PullFileClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockOperator_PullFileClient)(nil).Context))
}

// Header mocks base method
func (_m *MockOperator_PullFileClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (_mr *MockOperator_PullFileClientMockRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Header", reflect.TypeOf((*MockOperator_PullFileClient)(nil).Header))
}

// Recv mocks base method
func (_m *MockOperator_PullFileClient) Recv() (*PullFileResponse, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*PullFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (_mr *MockOperator_PullFileClientMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Recv", reflect.TypeOf((*MockOperator_PullFileClient)(nil).Recv))
}

// RecvMsg mocks base method
func (_m *MockOperator_PullFileClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockOperator_PullFileClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockOperator_PullFileClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (_m *MockOperator_PullFileClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockOperator_PullFileClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockOperator_PullFileClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (_m *MockOperator_PullFileClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (_mr *MockOperator_PullFileClientMockRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Trailer", reflect.TypeOf((*MockOperator_PullFileClient)(nil).Trailer))
}

// MockOperator_PullFileServer is a mock of Operator_PullFileServer interface
type MockOperator_PullFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockOperator_PullFileServerMockRecorder
}

// MockOperator_PullFileServerMockRecorder is the mock recorder for MockOperator_PullFileServer
type MockOperator_PullFileServerMockRecorder struct {
	mock *MockOperator_PullFileServer
}

// NewMockOperator_PullFileServer creates a new mock instance
func NewMockOperator_PullFileServer(ctrl *gomock.Controller) *MockOperator_PullFileServer {
	mock := &MockOperator_PullFileServer{ctrl: ctrl}
	mock.recorder = &MockOperator_PullFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOperator_PullFileServer) EXPECT() *MockOperator_PullFileServerMockRecorder {
	return _m.recorder
}

// Context mocks base method
func (_m *MockOperator_PullFileServer) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockOperator_PullFileServerMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockOperator_PullFileServer)(nil).Context))
}

// RecvMsg mocks base method
func (_m *MockOperator_PullFileServer) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockOperator_PullFileServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockOperator_PullFileServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (_m *MockOperator_PullFileServer) Send(_param0 *PullFileResponse) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockOperator_PullFileServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockOperator_PullFileServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (_m *MockOperator_PullFileServer) SendHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SendHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (_mr *MockOperator_PullFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendHeader", reflect.TypeOf((*MockOperator_PullFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (_m *MockOperator_PullFileServer) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockOperator_PullFileServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockOperator_PullFileServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (_m *MockOperator_PullFileServer) SetHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SetHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (_mr *MockOperator_PullFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHeader", reflect.TypeOf((*MockOperator_PullFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (_m *MockOperator_PullFileServer) SetTrailer(_param0 metadata.MD) {
	_m.ctrl.Call(_m, "SetTrailer", _param0)
}

// SetTrailer indicates an expected call of SetTrailer
func (_mr *MockOperator_PullFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTrailer", reflect.TypeOf((*MockOperator_PullFileServer)(nil).SetTrailer), arg0)
}
