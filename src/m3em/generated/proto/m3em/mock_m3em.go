// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3em/generated/proto/m3em (interfaces: OperatorClient,Operator_TransferClient)

package m3em

import (
	gomock "github.com/golang/mock/gomock"

	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// Mock of OperatorClient interface
type MockOperatorClient struct {
	ctrl     *gomock.Controller
	recorder *_MockOperatorClientRecorder
}

// Recorder for MockOperatorClient (not exported)
type _MockOperatorClientRecorder struct {
	mock *MockOperatorClient
}

func NewMockOperatorClient(ctrl *gomock.Controller) *MockOperatorClient {
	mock := &MockOperatorClient{ctrl: ctrl}
	mock.recorder = &_MockOperatorClientRecorder{mock}
	return mock
}

func (_m *MockOperatorClient) EXPECT() *_MockOperatorClientRecorder {
	return _m.recorder
}

func (_m *MockOperatorClient) Setup(_param0 context.Context, _param1 *SetupRequest, _param2 ...grpc.CallOption) (*SetupResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Setup", _s...)
	ret0, _ := ret[0].(*SetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperatorClientRecorder) Setup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Setup", _s...)
}

func (_m *MockOperatorClient) Start(_param0 context.Context, _param1 *StartRequest, _param2 ...grpc.CallOption) (*StartResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Start", _s...)
	ret0, _ := ret[0].(*StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperatorClientRecorder) Start(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", _s...)
}

func (_m *MockOperatorClient) Stop(_param0 context.Context, _param1 *StopRequest, _param2 ...grpc.CallOption) (*StopResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Stop", _s...)
	ret0, _ := ret[0].(*StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperatorClientRecorder) Stop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop", _s...)
}

func (_m *MockOperatorClient) Teardown(_param0 context.Context, _param1 *TeardownRequest, _param2 ...grpc.CallOption) (*TeardownResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Teardown", _s...)
	ret0, _ := ret[0].(*TeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperatorClientRecorder) Teardown(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Teardown", _s...)
}

func (_m *MockOperatorClient) Transfer(_param0 context.Context, _param1 ...grpc.CallOption) (Operator_TransferClient, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Transfer", _s...)
	ret0, _ := ret[0].(Operator_TransferClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperatorClientRecorder) Transfer(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Transfer", _s...)
}

// Mock of Operator_TransferClient interface
type MockOperator_TransferClient struct {
	ctrl     *gomock.Controller
	recorder *_MockOperator_TransferClientRecorder
}

// Recorder for MockOperator_TransferClient (not exported)
type _MockOperator_TransferClientRecorder struct {
	mock *MockOperator_TransferClient
}

func NewMockOperator_TransferClient(ctrl *gomock.Controller) *MockOperator_TransferClient {
	mock := &MockOperator_TransferClient{ctrl: ctrl}
	mock.recorder = &_MockOperator_TransferClientRecorder{mock}
	return mock
}

func (_m *MockOperator_TransferClient) EXPECT() *_MockOperator_TransferClientRecorder {
	return _m.recorder
}

func (_m *MockOperator_TransferClient) CloseAndRecv() (*TransferResponse, error) {
	ret := _m.ctrl.Call(_m, "CloseAndRecv")
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperator_TransferClientRecorder) CloseAndRecv() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloseAndRecv")
}

func (_m *MockOperator_TransferClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloseSend")
}

func (_m *MockOperator_TransferClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Context")
}

func (_m *MockOperator_TransferClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOperator_TransferClientRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Header")
}

func (_m *MockOperator_TransferClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecvMsg", arg0)
}

func (_m *MockOperator_TransferClient) Send(_param0 *TransferRequest) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

func (_m *MockOperator_TransferClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMsg", arg0)
}

func (_m *MockOperator_TransferClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

func (_mr *_MockOperator_TransferClientRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Trailer")
}
