// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/m3em/os/fs/types.go

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package fs is a generated GoMock package.
package fs

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockFileReaderIter is a mock of FileReaderIter interface
type MockFileReaderIter struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderIterMockRecorder
}

// MockFileReaderIterMockRecorder is the mock recorder for MockFileReaderIter
type MockFileReaderIterMockRecorder struct {
	mock *MockFileReaderIter
}

// NewMockFileReaderIter creates a new mock instance
func NewMockFileReaderIter(ctrl *gomock.Controller) *MockFileReaderIter {
	mock := &MockFileReaderIter{ctrl: ctrl}
	mock.recorder = &MockFileReaderIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileReaderIter) EXPECT() *MockFileReaderIterMockRecorder {
	return m.recorder
}

// Current mocks base method
func (m *MockFileReaderIter) Current() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockFileReaderIterMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockFileReaderIter)(nil).Current))
}

// Next mocks base method
func (m *MockFileReaderIter) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockFileReaderIterMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockFileReaderIter)(nil).Next))
}

// Err mocks base method
func (m *MockFileReaderIter) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockFileReaderIterMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockFileReaderIter)(nil).Err))
}

// Checksum mocks base method
func (m *MockFileReaderIter) Checksum() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checksum")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Checksum indicates an expected call of Checksum
func (mr *MockFileReaderIterMockRecorder) Checksum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checksum", reflect.TypeOf((*MockFileReaderIter)(nil).Checksum))
}

// Close mocks base method
func (m *MockFileReaderIter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFileReaderIterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileReaderIter)(nil).Close))
}
