// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3aggregator/client (interfaces: AdminClient)

package client

import (
	"github.com/m3db/m3metrics/metadata"
	"github.com/m3db/m3metrics/metric/aggregated"
	"github.com/m3db/m3metrics/metric/unaggregated"

	"github.com/golang/mock/gomock"
)

// Mock of AdminClient interface
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAdminClientRecorder
}

// Recorder for MockAdminClient (not exported)
type _MockAdminClientRecorder struct {
	mock *MockAdminClient
}

func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &_MockAdminClientRecorder{mock}
	return mock
}

func (_m *MockAdminClient) EXPECT() *_MockAdminClientRecorder {
	return _m.recorder
}

func (_m *MockAdminClient) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockAdminClient) Flush() error {
	ret := _m.ctrl.Call(_m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) Flush() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flush")
}

func (_m *MockAdminClient) Init() error {
	ret := _m.ctrl.Call(_m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init")
}

func (_m *MockAdminClient) WriteForwarded(_param0 aggregated.Metric, _param1 metadata.ForwardMetadata) error {
	ret := _m.ctrl.Call(_m, "WriteForwarded", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) WriteForwarded(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteForwarded", arg0, arg1)
}

func (_m *MockAdminClient) WriteUntimedBatchTimer(_param0 unaggregated.BatchTimer, _param1 metadata.StagedMetadatas) error {
	ret := _m.ctrl.Call(_m, "WriteUntimedBatchTimer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) WriteUntimedBatchTimer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteUntimedBatchTimer", arg0, arg1)
}

func (_m *MockAdminClient) WriteUntimedCounter(_param0 unaggregated.Counter, _param1 metadata.StagedMetadatas) error {
	ret := _m.ctrl.Call(_m, "WriteUntimedCounter", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) WriteUntimedCounter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteUntimedCounter", arg0, arg1)
}

func (_m *MockAdminClient) WriteUntimedGauge(_param0 unaggregated.Gauge, _param1 metadata.StagedMetadatas) error {
	ret := _m.ctrl.Call(_m, "WriteUntimedGauge", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAdminClientRecorder) WriteUntimedGauge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteUntimedGauge", arg0, arg1)
}
