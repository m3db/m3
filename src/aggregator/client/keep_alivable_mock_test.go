// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/aggregator/client/conn.go

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package client is a generated GoMock package.
package client

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockkeepAlivable is a mock of keepAlivable interface.
type MockkeepAlivable struct {
	ctrl     *gomock.Controller
	recorder *MockkeepAlivableMockRecorder
}

// MockkeepAlivableMockRecorder is the mock recorder for MockkeepAlivable.
type MockkeepAlivableMockRecorder struct {
	mock *MockkeepAlivable
}

// NewMockkeepAlivable creates a new mock instance.
func NewMockkeepAlivable(ctrl *gomock.Controller) *MockkeepAlivable {
	mock := &MockkeepAlivable{ctrl: ctrl}
	mock.recorder = &MockkeepAlivableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeepAlivable) EXPECT() *MockkeepAlivableMockRecorder {
	return m.recorder
}

// SetKeepAlive mocks base method.
func (m *MockkeepAlivable) SetKeepAlive(shouldKeepAlive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAlive", shouldKeepAlive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAlive indicates an expected call of SetKeepAlive.
func (mr *MockkeepAlivableMockRecorder) SetKeepAlive(shouldKeepAlive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlive", reflect.TypeOf((*MockkeepAlivable)(nil).SetKeepAlive), shouldKeepAlive)
}
