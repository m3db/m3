// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3aggregator/aggregator (interfaces: ElectionManager,FlushTimesManager,PeriodicFlusher,PlacementManager,Handler,Writer)

package aggregator

import (
	"context"
	"reflect"
	"time"

	"github.com/m3db/m3aggregator/generated/proto/flush"
	"github.com/m3db/m3cluster/placement"
	"github.com/m3db/m3cluster/shard"
	"github.com/m3db/m3metrics/metric/aggregated"
	"github.com/m3db/m3x/watch"

	"github.com/golang/mock/gomock"
	"github.com/uber-go/tally"
)

// MockElectionManager is a mock of ElectionManager interface
type MockElectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockElectionManagerMockRecorder
}

// MockElectionManagerMockRecorder is the mock recorder for MockElectionManager
type MockElectionManagerMockRecorder struct {
	mock *MockElectionManager
}

// NewMockElectionManager creates a new mock instance
func NewMockElectionManager(ctrl *gomock.Controller) *MockElectionManager {
	mock := &MockElectionManager{ctrl: ctrl}
	mock.recorder = &MockElectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockElectionManager) EXPECT() *MockElectionManagerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockElectionManager) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockElectionManagerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockElectionManager)(nil).Close))
}

// ElectionState mocks base method
func (_m *MockElectionManager) ElectionState() ElectionState {
	ret := _m.ctrl.Call(_m, "ElectionState")
	ret0, _ := ret[0].(ElectionState)
	return ret0
}

// ElectionState indicates an expected call of ElectionState
func (_mr *MockElectionManagerMockRecorder) ElectionState() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ElectionState", reflect.TypeOf((*MockElectionManager)(nil).ElectionState))
}

// IsCampaigning mocks base method
func (_m *MockElectionManager) IsCampaigning() bool {
	ret := _m.ctrl.Call(_m, "IsCampaigning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCampaigning indicates an expected call of IsCampaigning
func (_mr *MockElectionManagerMockRecorder) IsCampaigning() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsCampaigning", reflect.TypeOf((*MockElectionManager)(nil).IsCampaigning))
}

// Open mocks base method
func (_m *MockElectionManager) Open(_param0 uint32) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockElectionManagerMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockElectionManager)(nil).Open), arg0)
}

// Reset mocks base method
func (_m *MockElectionManager) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (_mr *MockElectionManagerMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockElectionManager)(nil).Reset))
}

// Resign mocks base method
func (_m *MockElectionManager) Resign(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "Resign", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resign indicates an expected call of Resign
func (_mr *MockElectionManagerMockRecorder) Resign(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Resign", reflect.TypeOf((*MockElectionManager)(nil).Resign), arg0)
}

// MockFlushTimesManager is a mock of FlushTimesManager interface
type MockFlushTimesManager struct {
	ctrl     *gomock.Controller
	recorder *MockFlushTimesManagerMockRecorder
}

// MockFlushTimesManagerMockRecorder is the mock recorder for MockFlushTimesManager
type MockFlushTimesManagerMockRecorder struct {
	mock *MockFlushTimesManager
}

// NewMockFlushTimesManager creates a new mock instance
func NewMockFlushTimesManager(ctrl *gomock.Controller) *MockFlushTimesManager {
	mock := &MockFlushTimesManager{ctrl: ctrl}
	mock.recorder = &MockFlushTimesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFlushTimesManager) EXPECT() *MockFlushTimesManagerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockFlushTimesManager) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockFlushTimesManagerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockFlushTimesManager)(nil).Close))
}

// Get mocks base method
func (_m *MockFlushTimesManager) Get() (*flush.ShardSetFlushTimes, error) {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(*flush.ShardSetFlushTimes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockFlushTimesManagerMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFlushTimesManager)(nil).Get))
}

// Open mocks base method
func (_m *MockFlushTimesManager) Open(_param0 uint32) error {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockFlushTimesManagerMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockFlushTimesManager)(nil).Open), arg0)
}

// Reset mocks base method
func (_m *MockFlushTimesManager) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (_mr *MockFlushTimesManagerMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockFlushTimesManager)(nil).Reset))
}

// StoreAsync mocks base method
func (_m *MockFlushTimesManager) StoreAsync(_param0 *flush.ShardSetFlushTimes) error {
	ret := _m.ctrl.Call(_m, "StoreAsync", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAsync indicates an expected call of StoreAsync
func (_mr *MockFlushTimesManagerMockRecorder) StoreAsync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StoreAsync", reflect.TypeOf((*MockFlushTimesManager)(nil).StoreAsync), arg0)
}

// Watch mocks base method
func (_m *MockFlushTimesManager) Watch() (watch.Watch, error) {
	ret := _m.ctrl.Call(_m, "Watch")
	ret0, _ := ret[0].(watch.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockFlushTimesManagerMockRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockFlushTimesManager)(nil).Watch))
}

// MockPeriodicFlusher is a mock of PeriodicFlusher interface
type MockPeriodicFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodicFlusherMockRecorder
}

// MockPeriodicFlusherMockRecorder is the mock recorder for MockPeriodicFlusher
type MockPeriodicFlusherMockRecorder struct {
	mock *MockPeriodicFlusher
}

// NewMockPeriodicFlusher creates a new mock instance
func NewMockPeriodicFlusher(ctrl *gomock.Controller) *MockPeriodicFlusher {
	mock := &MockPeriodicFlusher{ctrl: ctrl}
	mock.recorder = &MockPeriodicFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPeriodicFlusher) EXPECT() *MockPeriodicFlusherMockRecorder {
	return _m.recorder
}

// DiscardBefore mocks base method
func (_m *MockPeriodicFlusher) DiscardBefore(_param0 int64) {
	_m.ctrl.Call(_m, "DiscardBefore", _param0)
}

// DiscardBefore indicates an expected call of DiscardBefore
func (_mr *MockPeriodicFlusherMockRecorder) DiscardBefore(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DiscardBefore", reflect.TypeOf((*MockPeriodicFlusher)(nil).DiscardBefore), arg0)
}

// Flush mocks base method
func (_m *MockPeriodicFlusher) Flush(_param0 FlushRequest) {
	_m.ctrl.Call(_m, "Flush", _param0)
}

// Flush indicates an expected call of Flush
func (_mr *MockPeriodicFlusherMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockPeriodicFlusher)(nil).Flush), arg0)
}

// FlushInterval mocks base method
func (_m *MockPeriodicFlusher) FlushInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "FlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// FlushInterval indicates an expected call of FlushInterval
func (_mr *MockPeriodicFlusherMockRecorder) FlushInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlushInterval", reflect.TypeOf((*MockPeriodicFlusher)(nil).FlushInterval))
}

// LastFlushedNanos mocks base method
func (_m *MockPeriodicFlusher) LastFlushedNanos() int64 {
	ret := _m.ctrl.Call(_m, "LastFlushedNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// LastFlushedNanos indicates an expected call of LastFlushedNanos
func (_mr *MockPeriodicFlusherMockRecorder) LastFlushedNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LastFlushedNanos", reflect.TypeOf((*MockPeriodicFlusher)(nil).LastFlushedNanos))
}

// Resolution mocks base method
func (_m *MockPeriodicFlusher) Resolution() time.Duration {
	ret := _m.ctrl.Call(_m, "Resolution")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Resolution indicates an expected call of Resolution
func (_mr *MockPeriodicFlusherMockRecorder) Resolution() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Resolution", reflect.TypeOf((*MockPeriodicFlusher)(nil).Resolution))
}

// Shard mocks base method
func (_m *MockPeriodicFlusher) Shard() uint32 {
	ret := _m.ctrl.Call(_m, "Shard")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Shard indicates an expected call of Shard
func (_mr *MockPeriodicFlusherMockRecorder) Shard() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shard", reflect.TypeOf((*MockPeriodicFlusher)(nil).Shard))
}

// MockPlacementManager is a mock of PlacementManager interface
type MockPlacementManager struct {
	ctrl     *gomock.Controller
	recorder *MockPlacementManagerMockRecorder
}

// MockPlacementManagerMockRecorder is the mock recorder for MockPlacementManager
type MockPlacementManagerMockRecorder struct {
	mock *MockPlacementManager
}

// NewMockPlacementManager creates a new mock instance
func NewMockPlacementManager(ctrl *gomock.Controller) *MockPlacementManager {
	mock := &MockPlacementManager{ctrl: ctrl}
	mock.recorder = &MockPlacementManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPlacementManager) EXPECT() *MockPlacementManagerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockPlacementManager) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockPlacementManagerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockPlacementManager)(nil).Close))
}

// HasReplacementInstance mocks base method
func (_m *MockPlacementManager) HasReplacementInstance() (bool, error) {
	ret := _m.ctrl.Call(_m, "HasReplacementInstance")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReplacementInstance indicates an expected call of HasReplacementInstance
func (_mr *MockPlacementManagerMockRecorder) HasReplacementInstance() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasReplacementInstance", reflect.TypeOf((*MockPlacementManager)(nil).HasReplacementInstance))
}

// Instance mocks base method
func (_m *MockPlacementManager) Instance() (placement.Instance, error) {
	ret := _m.ctrl.Call(_m, "Instance")
	ret0, _ := ret[0].(placement.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instance indicates an expected call of Instance
func (_mr *MockPlacementManagerMockRecorder) Instance() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Instance", reflect.TypeOf((*MockPlacementManager)(nil).Instance))
}

// InstanceFrom mocks base method
func (_m *MockPlacementManager) InstanceFrom(_param0 placement.Placement) (placement.Instance, error) {
	ret := _m.ctrl.Call(_m, "InstanceFrom", _param0)
	ret0, _ := ret[0].(placement.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceFrom indicates an expected call of InstanceFrom
func (_mr *MockPlacementManagerMockRecorder) InstanceFrom(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstanceFrom", reflect.TypeOf((*MockPlacementManager)(nil).InstanceFrom), arg0)
}

// Open mocks base method
func (_m *MockPlacementManager) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockPlacementManagerMockRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockPlacementManager)(nil).Open))
}

// Placement mocks base method
func (_m *MockPlacementManager) Placement() (placement.ActiveStagedPlacement, placement.Placement, error) {
	ret := _m.ctrl.Call(_m, "Placement")
	ret0, _ := ret[0].(placement.ActiveStagedPlacement)
	ret1, _ := ret[1].(placement.Placement)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Placement indicates an expected call of Placement
func (_mr *MockPlacementManagerMockRecorder) Placement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Placement", reflect.TypeOf((*MockPlacementManager)(nil).Placement))
}

// Shards mocks base method
func (_m *MockPlacementManager) Shards() (shard.Shards, error) {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shards indicates an expected call of Shards
func (_mr *MockPlacementManagerMockRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Shards", reflect.TypeOf((*MockPlacementManager)(nil).Shards))
}

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockHandler) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockHandlerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockHandler)(nil).Close))
}

// NewWriter mocks base method
func (_m *MockHandler) NewWriter(_param0 tally.Scope) (Writer, error) {
	ret := _m.ctrl.Call(_m, "NewWriter", _param0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWriter indicates an expected call of NewWriter
func (_mr *MockHandlerMockRecorder) NewWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewWriter", reflect.TypeOf((*MockHandler)(nil).NewWriter), arg0)
}

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockWriterMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// Flush mocks base method
func (_m *MockWriter) Flush() error {
	ret := _m.ctrl.Call(_m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (_mr *MockWriterMockRecorder) Flush() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Flush", reflect.TypeOf((*MockWriter)(nil).Flush))
}

// Write mocks base method
func (_m *MockWriter) Write(_param0 aggregated.ChunkedMetricWithStoragePolicy) error {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), arg0)
}
