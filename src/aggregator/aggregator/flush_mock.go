// Code generated by MockGen. DO NOT EDIT.
// Source: ../../aggregator/flush.go

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package aggregator is a generated GoMock package.
package aggregator

import (
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
)

// MockflushingMetricList is a mock of flushingMetricList interface.
type MockflushingMetricList struct {
	ctrl     *gomock.Controller
	recorder *MockflushingMetricListMockRecorder
}

// MockflushingMetricListMockRecorder is the mock recorder for MockflushingMetricList.
type MockflushingMetricListMockRecorder struct {
	mock *MockflushingMetricList
}

// NewMockflushingMetricList creates a new mock instance.
func NewMockflushingMetricList(ctrl *gomock.Controller) *MockflushingMetricList {
	mock := &MockflushingMetricList{ctrl: ctrl}
	mock.recorder = &MockflushingMetricListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflushingMetricList) EXPECT() *MockflushingMetricListMockRecorder {
	return m.recorder
}

// DiscardBefore mocks base method.
func (m *MockflushingMetricList) DiscardBefore(beforeNanos int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DiscardBefore", beforeNanos)
}

// DiscardBefore indicates an expected call of DiscardBefore.
func (mr *MockflushingMetricListMockRecorder) DiscardBefore(beforeNanos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardBefore", reflect.TypeOf((*MockflushingMetricList)(nil).DiscardBefore), beforeNanos)
}

// FixedFlushOffset mocks base method.
func (m *MockflushingMetricList) FixedFlushOffset() (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixedFlushOffset")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FixedFlushOffset indicates an expected call of FixedFlushOffset.
func (mr *MockflushingMetricListMockRecorder) FixedFlushOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixedFlushOffset", reflect.TypeOf((*MockflushingMetricList)(nil).FixedFlushOffset))
}

// Flush mocks base method.
func (m *MockflushingMetricList) Flush(req flushRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush", req)
}

// Flush indicates an expected call of Flush.
func (mr *MockflushingMetricListMockRecorder) Flush(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockflushingMetricList)(nil).Flush), req)
}

// FlushInterval mocks base method.
func (m *MockflushingMetricList) FlushInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// FlushInterval indicates an expected call of FlushInterval.
func (mr *MockflushingMetricListMockRecorder) FlushInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushInterval", reflect.TypeOf((*MockflushingMetricList)(nil).FlushInterval))
}

// ID mocks base method.
func (m *MockflushingMetricList) ID() metricListID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(metricListID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockflushingMetricListMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockflushingMetricList)(nil).ID))
}

// LastFlushedNanos mocks base method.
func (m *MockflushingMetricList) LastFlushedNanos() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastFlushedNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// LastFlushedNanos indicates an expected call of LastFlushedNanos.
func (mr *MockflushingMetricListMockRecorder) LastFlushedNanos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastFlushedNanos", reflect.TypeOf((*MockflushingMetricList)(nil).LastFlushedNanos))
}

// Shard mocks base method.
func (m *MockflushingMetricList) Shard() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shard")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Shard indicates an expected call of Shard.
func (mr *MockflushingMetricListMockRecorder) Shard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shard", reflect.TypeOf((*MockflushingMetricList)(nil).Shard))
}
