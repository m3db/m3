// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3aggregator/aggregator/flush_mgr.go

package aggregator

import (
	"time"

	"github.com/golang/mock/gomock"
)

// Mock of FlushManager interface
type MockFlushManager struct {
	ctrl     *gomock.Controller
	recorder *_MockFlushManagerRecorder
}

// Recorder for MockFlushManager (not exported)
type _MockFlushManagerRecorder struct {
	mock *MockFlushManager
}

func NewMockFlushManager(ctrl *gomock.Controller) *MockFlushManager {
	mock := &MockFlushManager{ctrl: ctrl}
	mock.recorder = &_MockFlushManagerRecorder{mock}
	return mock
}

func (_m *MockFlushManager) EXPECT() *_MockFlushManagerRecorder {
	return _m.recorder
}

func (_m *MockFlushManager) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

func (_m *MockFlushManager) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockFlushManager) Status() FlushStatus {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(FlushStatus)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

func (_m *MockFlushManager) Register(flusher flushingMetricList) error {
	ret := _m.ctrl.Call(_m, "Register", flusher)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0)
}

func (_m *MockFlushManager) Unregister(flusher flushingMetricList) error {
	ret := _m.ctrl.Call(_m, "Unregister", flusher)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Unregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unregister", arg0)
}

func (_m *MockFlushManager) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFlushManagerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of flushTask interface
type MockflushTask struct {
	ctrl     *gomock.Controller
	recorder *_MockflushTaskRecorder
}

// Recorder for MockflushTask (not exported)
type _MockflushTaskRecorder struct {
	mock *MockflushTask
}

func NewMockflushTask(ctrl *gomock.Controller) *MockflushTask {
	mock := &MockflushTask{ctrl: ctrl}
	mock.recorder = &_MockflushTaskRecorder{mock}
	return mock
}

func (_m *MockflushTask) EXPECT() *_MockflushTaskRecorder {
	return _m.recorder
}

func (_m *MockflushTask) Run() {
	_m.ctrl.Call(_m, "Run")
}

func (_mr *_MockflushTaskRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run")
}

// Mock of roleBasedFlushManager interface
type MockroleBasedFlushManager struct {
	ctrl     *gomock.Controller
	recorder *_MockroleBasedFlushManagerRecorder
}

// Recorder for MockroleBasedFlushManager (not exported)
type _MockroleBasedFlushManagerRecorder struct {
	mock *MockroleBasedFlushManager
}

func NewMockroleBasedFlushManager(ctrl *gomock.Controller) *MockroleBasedFlushManager {
	mock := &MockroleBasedFlushManager{ctrl: ctrl}
	mock.recorder = &_MockroleBasedFlushManagerRecorder{mock}
	return mock
}

func (_m *MockroleBasedFlushManager) EXPECT() *_MockroleBasedFlushManagerRecorder {
	return _m.recorder
}

func (_m *MockroleBasedFlushManager) Open() {
	_m.ctrl.Call(_m, "Open")
}

func (_mr *_MockroleBasedFlushManagerRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockroleBasedFlushManager) Init(buckets []*flushBucket) {
	_m.ctrl.Call(_m, "Init", buckets)
}

func (_mr *_MockroleBasedFlushManagerRecorder) Init(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0)
}

func (_m *MockroleBasedFlushManager) Prepare(buckets []*flushBucket) (flushTask, time.Duration) {
	ret := _m.ctrl.Call(_m, "Prepare", buckets)
	ret0, _ := ret[0].(flushTask)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

func (_mr *_MockroleBasedFlushManagerRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prepare", arg0)
}

func (_m *MockroleBasedFlushManager) OnBucketAdded(bucketIdx int, bucket *flushBucket) {
	_m.ctrl.Call(_m, "OnBucketAdded", bucketIdx, bucket)
}

func (_mr *_MockroleBasedFlushManagerRecorder) OnBucketAdded(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnBucketAdded", arg0, arg1)
}

func (_m *MockroleBasedFlushManager) OnFlusherAdded(bucketIdx int, bucket *flushBucket, flusher flushingMetricList) {
	_m.ctrl.Call(_m, "OnFlusherAdded", bucketIdx, bucket, flusher)
}

func (_mr *_MockroleBasedFlushManagerRecorder) OnFlusherAdded(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnFlusherAdded", arg0, arg1, arg2)
}

func (_m *MockroleBasedFlushManager) CanLead() bool {
	ret := _m.ctrl.Call(_m, "CanLead")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockroleBasedFlushManagerRecorder) CanLead() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CanLead")
}

func (_m *MockroleBasedFlushManager) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockroleBasedFlushManagerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
