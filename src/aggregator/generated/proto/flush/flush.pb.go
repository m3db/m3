// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/aggregator/generated/proto/flush/flush.proto

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package flush is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/aggregator/generated/proto/flush/flush.proto

	It has these top-level messages:
		ShardSetFlushTimes
		ShardFlushTimes
		ForwardedFlushTimesForResolution
*/
package flush

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShardSetFlushTimes struct {
	ByShard            map[uint32]*ShardFlushTimes `protobuf:"bytes,1,rep,name=by_shard,json=byShard" json:"by_shard,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	LastPersistedNanos int64                       `protobuf:"varint,2,opt,name=last_persisted_nanos,json=lastPersistedNanos,proto3" json:"last_persisted_nanos,omitempty"`
}

func (m *ShardSetFlushTimes) Reset()                    { *m = ShardSetFlushTimes{} }
func (m *ShardSetFlushTimes) String() string            { return proto.CompactTextString(m) }
func (*ShardSetFlushTimes) ProtoMessage()               {}
func (*ShardSetFlushTimes) Descriptor() ([]byte, []int) { return fileDescriptorFlush, []int{0} }

func (m *ShardSetFlushTimes) GetByShard() map[uint32]*ShardFlushTimes {
	if m != nil {
		return m.ByShard
	}
	return nil
}

func (m *ShardSetFlushTimes) GetLastPersistedNanos() int64 {
	if m != nil {
		return m.LastPersistedNanos
	}
	return 0
}

type ShardFlushTimes struct {
	StandardByResolution  map[int64]int64                             `protobuf:"bytes,1,rep,name=standard_by_resolution,json=standardByResolution" json:"standard_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Tombstoned            bool                                        `protobuf:"varint,2,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	ForwardedByResolution map[int64]*ForwardedFlushTimesForResolution `protobuf:"bytes,3,rep,name=forwarded_by_resolution,json=forwardedByResolution" json:"forwarded_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	TimedByResolution     map[int64]int64                             `protobuf:"bytes,4,rep,name=timed_by_resolution,json=timedByResolution" json:"timed_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ShardFlushTimes) Reset()                    { *m = ShardFlushTimes{} }
func (m *ShardFlushTimes) String() string            { return proto.CompactTextString(m) }
func (*ShardFlushTimes) ProtoMessage()               {}
func (*ShardFlushTimes) Descriptor() ([]byte, []int) { return fileDescriptorFlush, []int{1} }

func (m *ShardFlushTimes) GetStandardByResolution() map[int64]int64 {
	if m != nil {
		return m.StandardByResolution
	}
	return nil
}

func (m *ShardFlushTimes) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *ShardFlushTimes) GetForwardedByResolution() map[int64]*ForwardedFlushTimesForResolution {
	if m != nil {
		return m.ForwardedByResolution
	}
	return nil
}

func (m *ShardFlushTimes) GetTimedByResolution() map[int64]int64 {
	if m != nil {
		return m.TimedByResolution
	}
	return nil
}

type ForwardedFlushTimesForResolution struct {
	ByNumForwardedTimes map[int32]int64 `protobuf:"bytes,1,rep,name=by_num_forwarded_times,json=byNumForwardedTimes" json:"by_num_forwarded_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ForwardedFlushTimesForResolution) Reset()         { *m = ForwardedFlushTimesForResolution{} }
func (m *ForwardedFlushTimesForResolution) String() string { return proto.CompactTextString(m) }
func (*ForwardedFlushTimesForResolution) ProtoMessage()    {}
func (*ForwardedFlushTimesForResolution) Descriptor() ([]byte, []int) {
	return fileDescriptorFlush, []int{2}
}

func (m *ForwardedFlushTimesForResolution) GetByNumForwardedTimes() map[int32]int64 {
	if m != nil {
		return m.ByNumForwardedTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardSetFlushTimes)(nil), "ShardSetFlushTimes")
	proto.RegisterType((*ShardFlushTimes)(nil), "ShardFlushTimes")
	proto.RegisterType((*ForwardedFlushTimesForResolution)(nil), "ForwardedFlushTimesForResolution")
}
func (m *ShardSetFlushTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSetFlushTimes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ByShard) > 0 {
		for k, _ := range m.ByShard {
			dAtA[i] = 0xa
			i++
			v := m.ByShard[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFlush(uint64(msgSize))
			}
			mapSize := 1 + sovFlush(uint64(k)) + msgSize
			i = encodeVarintFlush(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFlush(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFlush(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.LastPersistedNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFlush(dAtA, i, uint64(m.LastPersistedNanos))
	}
	return i, nil
}

func (m *ShardFlushTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardFlushTimes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StandardByResolution) > 0 {
		for k, _ := range m.StandardByResolution {
			dAtA[i] = 0xa
			i++
			v := m.StandardByResolution[k]
			mapSize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			i = encodeVarintFlush(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFlush(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFlush(dAtA, i, uint64(v))
		}
	}
	if m.Tombstoned {
		dAtA[i] = 0x10
		i++
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ForwardedByResolution) > 0 {
		for k, _ := range m.ForwardedByResolution {
			dAtA[i] = 0x1a
			i++
			v := m.ForwardedByResolution[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFlush(uint64(msgSize))
			}
			mapSize := 1 + sovFlush(uint64(k)) + msgSize
			i = encodeVarintFlush(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFlush(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFlush(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.TimedByResolution) > 0 {
		for k, _ := range m.TimedByResolution {
			dAtA[i] = 0x22
			i++
			v := m.TimedByResolution[k]
			mapSize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			i = encodeVarintFlush(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFlush(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFlush(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ForwardedFlushTimesForResolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardedFlushTimesForResolution) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ByNumForwardedTimes) > 0 {
		for k, _ := range m.ByNumForwardedTimes {
			dAtA[i] = 0xa
			i++
			v := m.ByNumForwardedTimes[k]
			mapSize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			i = encodeVarintFlush(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFlush(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFlush(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintFlush(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardSetFlushTimes) Size() (n int) {
	var l int
	_ = l
	if len(m.ByShard) > 0 {
		for k, v := range m.ByShard {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFlush(uint64(l))
			}
			mapEntrySize := 1 + sovFlush(uint64(k)) + l
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	if m.LastPersistedNanos != 0 {
		n += 1 + sovFlush(uint64(m.LastPersistedNanos))
	}
	return n
}

func (m *ShardFlushTimes) Size() (n int) {
	var l int
	_ = l
	if len(m.StandardByResolution) > 0 {
		for k, v := range m.StandardByResolution {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	if m.Tombstoned {
		n += 2
	}
	if len(m.ForwardedByResolution) > 0 {
		for k, v := range m.ForwardedByResolution {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFlush(uint64(l))
			}
			mapEntrySize := 1 + sovFlush(uint64(k)) + l
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	if len(m.TimedByResolution) > 0 {
		for k, v := range m.TimedByResolution {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ForwardedFlushTimesForResolution) Size() (n int) {
	var l int
	_ = l
	if len(m.ByNumForwardedTimes) > 0 {
		for k, v := range m.ByNumForwardedTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	return n
}

func sovFlush(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFlush(x uint64) (n int) {
	return sovFlush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardSetFlushTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSetFlushTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSetFlushTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ByShard == nil {
				m.ByShard = make(map[uint32]*ShardFlushTimes)
			}
			var mapkey uint32
			var mapvalue *ShardFlushTimes
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ShardFlushTimes{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ByShard[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPersistedNanos", wireType)
			}
			m.LastPersistedNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPersistedNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardFlushTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardFlushTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardFlushTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StandardByResolution == nil {
				m.StandardByResolution = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StandardByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardedByResolution == nil {
				m.ForwardedByResolution = make(map[int64]*ForwardedFlushTimesForResolution)
			}
			var mapkey int64
			var mapvalue *ForwardedFlushTimesForResolution
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ForwardedFlushTimesForResolution{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ForwardedByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedByResolution == nil {
				m.TimedByResolution = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TimedByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardedFlushTimesForResolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardedFlushTimesForResolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardedFlushTimesForResolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByNumForwardedTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ByNumForwardedTimes == nil {
				m.ByNumForwardedTimes = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ByNumForwardedTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFlush
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlush(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlush = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlush   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/aggregator/generated/proto/flush/flush.proto", fileDescriptorFlush)
}

var fileDescriptorFlush = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0xc5, 0xcb, 0x06, 0xd3, 0x37, 0x10, 0xc5, 0x2b, 0xa5, 0xe4, 0x10, 0x85, 0x1e, 0xa0, 0x02,
	0x29, 0x41, 0xeb, 0x01, 0x34, 0x6e, 0x05, 0xca, 0x05, 0x4d, 0x28, 0x45, 0xe2, 0x18, 0xec, 0xc6,
	0x4d, 0xa3, 0x35, 0xf1, 0x64, 0x3b, 0x20, 0xff, 0x0b, 0x7e, 0x16, 0x17, 0x24, 0x38, 0x73, 0x41,
	0xe5, 0x8f, 0xa0, 0x38, 0xdd, 0x12, 0x9a, 0x54, 0xd5, 0x2e, 0x56, 0xfb, 0xbd, 0x97, 0xf7, 0xbd,
	0xe7, 0x17, 0x05, 0x5e, 0xc7, 0x89, 0x5a, 0xe4, 0xd4, 0x9b, 0xf1, 0xd4, 0x4f, 0x47, 0x11, 0xf5,
	0xd3, 0x91, 0x2f, 0xc5, 0xcc, 0x27, 0x71, 0x2c, 0x58, 0x4c, 0x14, 0x17, 0x7e, 0xcc, 0x32, 0x26,
	0x88, 0x62, 0x91, 0x7f, 0x21, 0xb8, 0xe2, 0xfe, 0x7c, 0x99, 0xcb, 0x45, 0x79, 0x7a, 0x66, 0x32,
	0xf8, 0x85, 0x00, 0x4f, 0x17, 0x44, 0x44, 0x53, 0xa6, 0x26, 0xc5, 0xfc, 0x63, 0x92, 0x32, 0x89,
	0x5f, 0xc1, 0x21, 0xd5, 0xa1, 0x2c, 0x80, 0x3e, 0x72, 0xad, 0xe1, 0xd1, 0x89, 0xeb, 0x35, 0x69,
	0xde, 0x58, 0x9b, 0xe1, 0xdb, 0x4c, 0x09, 0x1d, 0xdc, 0xa2, 0xe5, 0x3f, 0xfc, 0x1c, 0xba, 0x4b,
	0x22, 0x55, 0x78, 0xc1, 0x84, 0x4c, 0xa4, 0x62, 0x51, 0x98, 0x91, 0x8c, 0xcb, 0xfe, 0x9e, 0x8b,
	0x86, 0x56, 0x80, 0x0b, 0xec, 0xc3, 0x25, 0x74, 0x56, 0x20, 0xf6, 0x7b, 0xb8, 0x5d, 0x97, 0xc2,
	0x1d, 0xb0, 0xce, 0x99, 0xee, 0x23, 0x17, 0x0d, 0xef, 0x04, 0xc5, 0x4f, 0xfc, 0x18, 0x0e, 0xbe,
	0x90, 0x65, 0xce, 0x8c, 0xc8, 0xd1, 0x49, 0xa7, 0x74, 0x53, 0x59, 0x09, 0x4a, 0xf8, 0x74, 0xef,
	0x25, 0x1a, 0xfc, 0xd8, 0x87, 0xbb, 0x1b, 0x30, 0xfe, 0x0c, 0x3d, 0xa9, 0x48, 0x16, 0x11, 0x11,
	0x85, 0x54, 0x87, 0x82, 0x49, 0xbe, 0xcc, 0x55, 0xc2, 0xb3, 0x75, 0xbc, 0xa7, 0x9b, 0x82, 0xde,
	0x74, 0x4d, 0x1f, 0xeb, 0xe0, 0x8a, 0x5c, 0x06, 0xed, 0xca, 0x16, 0x08, 0x3b, 0x00, 0x8a, 0xa7,
	0x54, 0x2a, 0x9e, 0xb1, 0xc8, 0xd8, 0x3c, 0x0c, 0x6a, 0x13, 0x3c, 0x83, 0x07, 0x73, 0x2e, 0xbe,
	0x12, 0x11, 0xb1, 0x4d, 0x0b, 0x96, 0xb1, 0xf0, 0xac, 0x61, 0x61, 0x72, 0xc9, 0x6f, 0x7a, 0xb8,
	0x3f, 0x6f, 0xc3, 0xf0, 0x27, 0x38, 0x56, 0x49, 0xda, 0x58, 0xb0, 0x6f, 0x16, 0x3c, 0x69, 0x2c,
	0x28, 0xce, 0x16, 0xf1, 0x7b, 0x6a, 0x73, 0x6e, 0xbf, 0x83, 0x87, 0x5b, 0x2f, 0xa4, 0x5e, 0x97,
	0x55, 0xd6, 0xd5, 0xad, 0xd7, 0x65, 0xd5, 0xca, 0xb1, 0xcf, 0xc1, 0xde, 0x1e, 0xab, 0x45, 0xe9,
	0xc5, 0xff, 0xc5, 0x3f, 0xaa, 0x2e, 0xa5, 0xca, 0x31, 0xe1, 0xa2, 0x12, 0xaa, 0x2f, 0x7b, 0x03,
	0xbd, 0xf6, 0x88, 0xd7, 0xb1, 0x3c, 0xf8, 0x8d, 0xc0, 0xdd, 0xb5, 0x15, 0x73, 0xe8, 0x51, 0x1d,
	0x66, 0x79, 0x1a, 0x56, 0x2d, 0x17, 0xd7, 0x28, 0xd7, 0x2f, 0xd8, 0xe9, 0x4e, 0xe3, 0xde, 0x58,
	0x9f, 0xe5, 0xe9, 0x15, 0xcb, 0x10, 0xca, 0x3e, 0x8e, 0x69, 0x13, 0xb1, 0x27, 0xd0, 0xdf, 0xf6,
	0x40, 0x3d, 0xdd, 0xc1, 0x8e, 0x74, 0xe3, 0xce, 0xf7, 0x95, 0x83, 0x7e, 0xae, 0x1c, 0xf4, 0x67,
	0xe5, 0xa0, 0x6f, 0x7f, 0x9d, 0x1b, 0xf4, 0xa6, 0xf9, 0x34, 0x8c, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xe2, 0xb1, 0xcf, 0x66, 0x61, 0x04, 0x00, 0x00,
}
