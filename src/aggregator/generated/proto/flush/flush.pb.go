// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/aggregator/generated/proto/flush/flush.proto

// Copyright (c) 2024 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package flush

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShardSetFlushTimes struct {
	ByShard map[uint32]*ShardFlushTimes `protobuf:"bytes,1,rep,name=by_shard,json=byShard,proto3" json:"by_shard,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ShardSetFlushTimes) Reset()         { *m = ShardSetFlushTimes{} }
func (m *ShardSetFlushTimes) String() string { return proto.CompactTextString(m) }
func (*ShardSetFlushTimes) ProtoMessage()    {}
func (*ShardSetFlushTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db4a002ab848d6, []int{0}
}
func (m *ShardSetFlushTimes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardSetFlushTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardSetFlushTimes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardSetFlushTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSetFlushTimes.Merge(m, src)
}
func (m *ShardSetFlushTimes) XXX_Size() int {
	return m.Size()
}
func (m *ShardSetFlushTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSetFlushTimes.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSetFlushTimes proto.InternalMessageInfo

func (m *ShardSetFlushTimes) GetByShard() map[uint32]*ShardFlushTimes {
	if m != nil {
		return m.ByShard
	}
	return nil
}

type ShardFlushTimes struct {
	StandardByResolution  map[int64]int64                             `protobuf:"bytes,1,rep,name=standard_by_resolution,json=standardByResolution,proto3" json:"standard_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Tombstoned            bool                                        `protobuf:"varint,2,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	ForwardedByResolution map[int64]*ForwardedFlushTimesForResolution `protobuf:"bytes,3,rep,name=forwarded_by_resolution,json=forwardedByResolution,proto3" json:"forwarded_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimedByResolution     map[int64]int64                             `protobuf:"bytes,4,rep,name=timed_by_resolution,json=timedByResolution,proto3" json:"timed_by_resolution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ShardFlushTimes) Reset()         { *m = ShardFlushTimes{} }
func (m *ShardFlushTimes) String() string { return proto.CompactTextString(m) }
func (*ShardFlushTimes) ProtoMessage()    {}
func (*ShardFlushTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db4a002ab848d6, []int{1}
}
func (m *ShardFlushTimes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardFlushTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardFlushTimes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardFlushTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardFlushTimes.Merge(m, src)
}
func (m *ShardFlushTimes) XXX_Size() int {
	return m.Size()
}
func (m *ShardFlushTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardFlushTimes.DiscardUnknown(m)
}

var xxx_messageInfo_ShardFlushTimes proto.InternalMessageInfo

func (m *ShardFlushTimes) GetStandardByResolution() map[int64]int64 {
	if m != nil {
		return m.StandardByResolution
	}
	return nil
}

func (m *ShardFlushTimes) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *ShardFlushTimes) GetForwardedByResolution() map[int64]*ForwardedFlushTimesForResolution {
	if m != nil {
		return m.ForwardedByResolution
	}
	return nil
}

func (m *ShardFlushTimes) GetTimedByResolution() map[int64]int64 {
	if m != nil {
		return m.TimedByResolution
	}
	return nil
}

type ForwardedFlushTimesForResolution struct {
	ByNumForwardedTimes map[int32]int64 `protobuf:"bytes,1,rep,name=by_num_forwarded_times,json=byNumForwardedTimes,proto3" json:"by_num_forwarded_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ForwardedFlushTimesForResolution) Reset()         { *m = ForwardedFlushTimesForResolution{} }
func (m *ForwardedFlushTimesForResolution) String() string { return proto.CompactTextString(m) }
func (*ForwardedFlushTimesForResolution) ProtoMessage()    {}
func (*ForwardedFlushTimesForResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db4a002ab848d6, []int{2}
}
func (m *ForwardedFlushTimesForResolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardedFlushTimesForResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardedFlushTimesForResolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardedFlushTimesForResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardedFlushTimesForResolution.Merge(m, src)
}
func (m *ForwardedFlushTimesForResolution) XXX_Size() int {
	return m.Size()
}
func (m *ForwardedFlushTimesForResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardedFlushTimesForResolution.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardedFlushTimesForResolution proto.InternalMessageInfo

func (m *ForwardedFlushTimesForResolution) GetByNumForwardedTimes() map[int32]int64 {
	if m != nil {
		return m.ByNumForwardedTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardSetFlushTimes)(nil), "ShardSetFlushTimes")
	proto.RegisterMapType((map[uint32]*ShardFlushTimes)(nil), "ShardSetFlushTimes.ByShardEntry")
	proto.RegisterType((*ShardFlushTimes)(nil), "ShardFlushTimes")
	proto.RegisterMapType((map[int64]*ForwardedFlushTimesForResolution)(nil), "ShardFlushTimes.ForwardedByResolutionEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "ShardFlushTimes.StandardByResolutionEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "ShardFlushTimes.TimedByResolutionEntry")
	proto.RegisterType((*ForwardedFlushTimesForResolution)(nil), "ForwardedFlushTimesForResolution")
	proto.RegisterMapType((map[int32]int64)(nil), "ForwardedFlushTimesForResolution.ByNumForwardedTimesEntry")
}

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/aggregator/generated/proto/flush/flush.proto", fileDescriptor_30db4a002ab848d6)
}

var fileDescriptor_30db4a002ab848d6 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0xad, 0x37, 0xbb, 0xb0, 0x9a, 0x05, 0xb1, 0x78, 0x97, 0x12, 0x72, 0x88, 0x42, 0x0f, 0x50,
	0x81, 0x94, 0x48, 0xdb, 0x03, 0x68, 0xb9, 0x15, 0x28, 0x17, 0xc4, 0x21, 0x45, 0xe2, 0x18, 0xec,
	0xc6, 0x4d, 0xab, 0xad, 0x63, 0x64, 0x3b, 0x20, 0xff, 0x05, 0x7f, 0xc0, 0xef, 0x70, 0x41, 0xda,
	0x23, 0x12, 0x17, 0xd4, 0xfe, 0x08, 0x4a, 0x52, 0x9a, 0xd0, 0xa4, 0xaa, 0xb8, 0x58, 0xc9, 0xbc,
	0x97, 0x37, 0x6f, 0xe6, 0xc5, 0xf0, 0x32, 0x99, 0xeb, 0x59, 0x46, 0xfd, 0x89, 0xe0, 0x01, 0x1f,
	0xc4, 0x34, 0xe0, 0x83, 0x40, 0xc9, 0x49, 0x40, 0x92, 0x44, 0xb2, 0x84, 0x68, 0x21, 0x83, 0x84,
	0xa5, 0x4c, 0x12, 0xcd, 0xe2, 0xe0, 0x93, 0x14, 0x5a, 0x04, 0xd3, 0x45, 0xa6, 0x66, 0xe5, 0xe9,
	0x17, 0x95, 0xde, 0x37, 0x04, 0x78, 0x3c, 0x23, 0x32, 0x1e, 0x33, 0x3d, 0xca, 0xeb, 0xef, 0xe7,
	0x9c, 0x29, 0xfc, 0x02, 0x8e, 0xa9, 0x89, 0x54, 0x0e, 0xd8, 0xc8, 0xb3, 0xfa, 0x27, 0x17, 0x9e,
	0xdf, 0xa4, 0xf9, 0x43, 0x53, 0x14, 0x5f, 0xa7, 0x5a, 0x9a, 0xf0, 0x26, 0x2d, 0xdf, 0x9c, 0xb7,
	0x70, 0xab, 0x0e, 0xe0, 0x53, 0xb0, 0xae, 0x98, 0xb1, 0x91, 0x87, 0xfa, 0xb7, 0xc3, 0xfc, 0x11,
	0x3f, 0x82, 0xa3, 0xcf, 0x64, 0x91, 0x31, 0xfb, 0xc0, 0x43, 0xfd, 0x93, 0x8b, 0xd3, 0x52, 0xbb,
	0x12, 0x0e, 0x4b, 0xf8, 0xf2, 0xe0, 0x39, 0xea, 0xfd, 0x38, 0x84, 0x3b, 0x5b, 0x30, 0xfe, 0x08,
	0x5d, 0xa5, 0x49, 0x1a, 0x13, 0x19, 0x47, 0xd4, 0x44, 0x92, 0x29, 0xb1, 0xc8, 0xf4, 0x5c, 0xa4,
	0x6b, 0xb3, 0x4f, 0xb6, 0x05, 0xfd, 0xf1, 0x9a, 0x3e, 0x34, 0xe1, 0x86, 0x5c, 0xda, 0x3e, 0x57,
	0x2d, 0x10, 0x76, 0x01, 0xb4, 0xe0, 0x54, 0x69, 0x91, 0xb2, 0xb8, 0xb0, 0x79, 0x1c, 0xd6, 0x2a,
	0x78, 0x02, 0xf7, 0xa7, 0x42, 0x7e, 0x21, 0x32, 0x66, 0xdb, 0x16, 0xac, 0xc2, 0xc2, 0xd3, 0x86,
	0x85, 0xd1, 0x5f, 0x7e, 0xd3, 0xc3, 0xbd, 0x69, 0x1b, 0x86, 0x3f, 0xc0, 0x99, 0x9e, 0xf3, 0x46,
	0x83, 0xc3, 0xa2, 0xc1, 0xe3, 0x46, 0x83, 0xfc, 0x6c, 0x11, 0xbf, 0xab, 0xb7, 0xeb, 0xce, 0x1b,
	0x78, 0xb0, 0x73, 0x21, 0xf5, 0xb8, 0xac, 0x32, 0xae, 0xf3, 0x7a, 0x5c, 0x56, 0x2d, 0x1c, 0xe7,
	0x0a, 0x9c, 0xdd, 0x63, 0xb5, 0x28, 0x3d, 0xfb, 0x37, 0xf8, 0x87, 0xd5, 0x52, 0xaa, 0x39, 0x46,
	0x42, 0x56, 0x42, 0xf5, 0x66, 0xaf, 0xa0, 0xdb, 0x3e, 0xe2, 0xff, 0x58, 0xee, 0xfd, 0x42, 0xe0,
	0xed, 0xeb, 0x8a, 0x05, 0x74, 0xa9, 0x89, 0xd2, 0x8c, 0x47, 0x55, 0xca, 0xf9, 0x1a, 0xd5, 0xfa,
	0x07, 0xbb, 0xdc, 0x6b, 0xdc, 0x1f, 0x9a, 0x77, 0x19, 0xdf, 0xb0, 0x0a, 0x42, 0x99, 0xc7, 0x19,
	0x6d, 0x22, 0xce, 0x08, 0xec, 0x5d, 0x1f, 0xd4, 0xa7, 0x3b, 0xda, 0x33, 0xdd, 0xd0, 0xfe, 0xbe,
	0x74, 0xd1, 0xf5, 0xd2, 0x45, 0xbf, 0x97, 0x2e, 0xfa, 0xba, 0x72, 0x3b, 0xd7, 0x2b, 0xb7, 0xf3,
	0x73, 0xe5, 0x76, 0xe8, 0x8d, 0xe2, 0xc2, 0x0f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x48, 0x45,
	0xf3, 0xf6, 0x37, 0x04, 0x00, 0x00,
}

func (m *ShardSetFlushTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSetFlushTimes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardSetFlushTimes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ByShard) > 0 {
		for k := range m.ByShard {
			v := m.ByShard[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFlush(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFlush(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFlush(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShardFlushTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardFlushTimes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardFlushTimes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimedByResolution) > 0 {
		for k := range m.TimedByResolution {
			v := m.TimedByResolution[k]
			baseI := i
			i = encodeVarintFlush(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintFlush(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFlush(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ForwardedByResolution) > 0 {
		for k := range m.ForwardedByResolution {
			v := m.ForwardedByResolution[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFlush(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFlush(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFlush(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.StandardByResolution) > 0 {
		for k := range m.StandardByResolution {
			v := m.StandardByResolution[k]
			baseI := i
			i = encodeVarintFlush(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintFlush(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFlush(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForwardedFlushTimesForResolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardedFlushTimesForResolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardedFlushTimesForResolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ByNumForwardedTimes) > 0 {
		for k := range m.ByNumForwardedTimes {
			v := m.ByNumForwardedTimes[k]
			baseI := i
			i = encodeVarintFlush(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintFlush(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFlush(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlush(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlush(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShardSetFlushTimes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ByShard) > 0 {
		for k, v := range m.ByShard {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFlush(uint64(l))
			}
			mapEntrySize := 1 + sovFlush(uint64(k)) + l
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ShardFlushTimes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StandardByResolution) > 0 {
		for k, v := range m.StandardByResolution {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	if m.Tombstoned {
		n += 2
	}
	if len(m.ForwardedByResolution) > 0 {
		for k, v := range m.ForwardedByResolution {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFlush(uint64(l))
			}
			mapEntrySize := 1 + sovFlush(uint64(k)) + l
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	if len(m.TimedByResolution) > 0 {
		for k, v := range m.TimedByResolution {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ForwardedFlushTimesForResolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ByNumForwardedTimes) > 0 {
		for k, v := range m.ByNumForwardedTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFlush(uint64(k)) + 1 + sovFlush(uint64(v))
			n += mapEntrySize + 1 + sovFlush(uint64(mapEntrySize))
		}
	}
	return n
}

func sovFlush(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlush(x uint64) (n int) {
	return sovFlush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardSetFlushTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSetFlushTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSetFlushTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ByShard == nil {
				m.ByShard = make(map[uint32]*ShardFlushTimes)
			}
			var mapkey uint32
			var mapvalue *ShardFlushTimes
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFlush
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ShardFlushTimes{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ByShard[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardFlushTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardFlushTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardFlushTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StandardByResolution == nil {
				m.StandardByResolution = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StandardByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardedByResolution == nil {
				m.ForwardedByResolution = make(map[int64]*ForwardedFlushTimesForResolution)
			}
			var mapkey int64
			var mapvalue *ForwardedFlushTimesForResolution
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFlush
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFlush
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ForwardedFlushTimesForResolution{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ForwardedByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedByResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedByResolution == nil {
				m.TimedByResolution = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TimedByResolution[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardedFlushTimesForResolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardedFlushTimesForResolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardedFlushTimesForResolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByNumForwardedTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ByNumForwardedTimes == nil {
				m.ByNumForwardedTimes = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlush
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlush
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlush(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlush
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ByNumForwardedTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlush
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlush
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlush
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlush        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlush          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlush = fmt.Errorf("proto: unexpected end of group")
)
