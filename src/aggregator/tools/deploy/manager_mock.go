// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3aggregator/tools/deploy/manager.go

package deploy

import (
	"github.com/golang/mock/gomock"
)

// Mock of Instance interface
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *_MockInstanceRecorder
}

// Recorder for MockInstance (not exported)
type _MockInstanceRecorder struct {
	mock *MockInstance
}

func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &_MockInstanceRecorder{mock}
	return mock
}

func (_m *MockInstance) EXPECT() *_MockInstanceRecorder {
	return _m.recorder
}

func (_m *MockInstance) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockInstance) Revision() string {
	ret := _m.ctrl.Call(_m, "Revision")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInstanceRecorder) Revision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Revision")
}

func (_m *MockInstance) IsHealthy() bool {
	ret := _m.ctrl.Call(_m, "IsHealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInstanceRecorder) IsHealthy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsHealthy")
}

func (_m *MockInstance) IsDeploying() bool {
	ret := _m.ctrl.Call(_m, "IsDeploying")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInstanceRecorder) IsDeploying() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDeploying")
}

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) QueryAll() ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "QueryAll")
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) QueryAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryAll")
}

func (_m *MockManager) Query(instanceIDs []string) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "Query", instanceIDs)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

func (_m *MockManager) Deploy(instanceIDs []string, revision string) error {
	ret := _m.ctrl.Call(_m, "Deploy", instanceIDs, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Deploy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deploy", arg0, arg1)
}
