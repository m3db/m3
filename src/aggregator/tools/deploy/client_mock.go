// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3aggregator/tools/deploy/client.go

package deploy

import (
	"github.com/m3db/m3aggregator/aggregator"

	"github.com/golang/mock/gomock"
)

// Mock of aggregatorClient interface
type MockaggregatorClient struct {
	ctrl     *gomock.Controller
	recorder *_MockaggregatorClientRecorder
}

// Recorder for MockaggregatorClient (not exported)
type _MockaggregatorClientRecorder struct {
	mock *MockaggregatorClient
}

func NewMockaggregatorClient(ctrl *gomock.Controller) *MockaggregatorClient {
	mock := &MockaggregatorClient{ctrl: ctrl}
	mock.recorder = &_MockaggregatorClientRecorder{mock}
	return mock
}

func (_m *MockaggregatorClient) EXPECT() *_MockaggregatorClientRecorder {
	return _m.recorder
}

func (_m *MockaggregatorClient) IsHealthy(instance string) error {
	ret := _m.ctrl.Call(_m, "IsHealthy", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockaggregatorClientRecorder) IsHealthy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsHealthy", arg0)
}

func (_m *MockaggregatorClient) Status(instance string) (aggregator.RuntimeStatus, error) {
	ret := _m.ctrl.Call(_m, "Status", instance)
	ret0, _ := ret[0].(aggregator.RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockaggregatorClientRecorder) Status(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0)
}

func (_m *MockaggregatorClient) Resign(instance string) error {
	ret := _m.ctrl.Call(_m, "Resign", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockaggregatorClientRecorder) Resign(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resign", arg0)
}
