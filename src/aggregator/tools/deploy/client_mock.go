// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/aggregator/tools/deploy/client.go

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package deploy is a generated GoMock package.
package deploy

import (
	"reflect"

	"github.com/m3db/m3/src/aggregator/aggregator"

	"github.com/golang/mock/gomock"
)

// MockAggregatorClient is a mock of AggregatorClient interface.
type MockAggregatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorClientMockRecorder
}

// MockAggregatorClientMockRecorder is the mock recorder for MockAggregatorClient.
type MockAggregatorClientMockRecorder struct {
	mock *MockAggregatorClient
}

// NewMockAggregatorClient creates a new mock instance.
func NewMockAggregatorClient(ctrl *gomock.Controller) *MockAggregatorClient {
	mock := &MockAggregatorClient{ctrl: ctrl}
	mock.recorder = &MockAggregatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregatorClient) EXPECT() *MockAggregatorClientMockRecorder {
	return m.recorder
}

// IsHealthy mocks base method.
func (m *MockAggregatorClient) IsHealthy(instance string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockAggregatorClientMockRecorder) IsHealthy(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockAggregatorClient)(nil).IsHealthy), instance)
}

// Resign mocks base method.
func (m *MockAggregatorClient) Resign(instance string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resign", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resign indicates an expected call of Resign.
func (mr *MockAggregatorClientMockRecorder) Resign(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resign", reflect.TypeOf((*MockAggregatorClient)(nil).Resign), instance)
}

// Status mocks base method.
func (m *MockAggregatorClient) Status(instance string) (aggregator.RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", instance)
	ret0, _ := ret[0].(aggregator.RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAggregatorClientMockRecorder) Status(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAggregatorClient)(nil).Status), instance)
}
