// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	query.proto

It has these top-level messages:
	WriteMessage
	WriteQuery
	WriteOptions
	Datapoint
	Error
	FetchMessage
	FetchQuery
	FetchOptions
	Matcher
	FetchResult
	Series
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteMessage struct {
	Query   *WriteQuery   `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Options *WriteOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *WriteMessage) Reset()                    { *m = WriteMessage{} }
func (m *WriteMessage) String() string            { return proto.CompactTextString(m) }
func (*WriteMessage) ProtoMessage()               {}
func (*WriteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WriteMessage) GetQuery() *WriteQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *WriteMessage) GetOptions() *WriteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type WriteQuery struct {
	Unit       int32             `protobuf:"varint,1,opt,name=unit" json:"unit,omitempty"`
	Annotation []byte            `protobuf:"bytes,2,opt,name=annotation,proto3" json:"annotation,omitempty"`
	Datapoints []*Datapoint      `protobuf:"bytes,3,rep,name=datapoints" json:"datapoints,omitempty"`
	Tags       map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WriteQuery) Reset()                    { *m = WriteQuery{} }
func (m *WriteQuery) String() string            { return proto.CompactTextString(m) }
func (*WriteQuery) ProtoMessage()               {}
func (*WriteQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WriteQuery) GetUnit() int32 {
	if m != nil {
		return m.Unit
	}
	return 0
}

func (m *WriteQuery) GetAnnotation() []byte {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (m *WriteQuery) GetDatapoints() []*Datapoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

func (m *WriteQuery) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WriteOptions struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *WriteOptions) Reset()                    { *m = WriteOptions{} }
func (m *WriteOptions) String() string            { return proto.CompactTextString(m) }
func (*WriteOptions) ProtoMessage()               {}
func (*WriteOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WriteOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Datapoint struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *Datapoint) Reset()                    { *m = Datapoint{} }
func (m *Datapoint) String() string            { return proto.CompactTextString(m) }
func (*Datapoint) ProtoMessage()               {}
func (*Datapoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Datapoint) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Datapoint) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Error struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FetchMessage struct {
	Query   *FetchQuery   `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Options *FetchOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *FetchMessage) Reset()                    { *m = FetchMessage{} }
func (m *FetchMessage) String() string            { return proto.CompactTextString(m) }
func (*FetchMessage) ProtoMessage()               {}
func (*FetchMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchMessage) GetQuery() *FetchQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *FetchMessage) GetOptions() *FetchOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type FetchQuery struct {
	Start       int64      `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End         int64      `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	TagMatchers []*Matcher `protobuf:"bytes,3,rep,name=tagMatchers" json:"tagMatchers,omitempty"`
}

func (m *FetchQuery) Reset()                    { *m = FetchQuery{} }
func (m *FetchQuery) String() string            { return proto.CompactTextString(m) }
func (*FetchQuery) ProtoMessage()               {}
func (*FetchQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FetchQuery) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FetchQuery) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *FetchQuery) GetTagMatchers() []*Matcher {
	if m != nil {
		return m.TagMatchers
	}
	return nil
}

type FetchOptions struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FetchOptions) Reset()                    { *m = FetchOptions{} }
func (m *FetchOptions) String() string            { return proto.CompactTextString(m) }
func (*FetchOptions) ProtoMessage()               {}
func (*FetchOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FetchOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Matcher struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type  int64  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *Matcher) Reset()                    { *m = Matcher{} }
func (m *Matcher) String() string            { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()               {}
func (*Matcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Matcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Matcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Matcher) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type FetchResult struct {
	Series []*Series `protobuf:"bytes,1,rep,name=series" json:"series,omitempty"`
}

func (m *FetchResult) Reset()                    { *m = FetchResult{} }
func (m *FetchResult) String() string            { return proto.CompactTextString(m) }
func (*FetchResult) ProtoMessage()               {}
func (*FetchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FetchResult) GetSeries() []*Series {
	if m != nil {
		return m.Series
	}
	return nil
}

type Series struct {
	Name          string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartTime     int64             `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	Values        []float32         `protobuf:"fixed32,3,rep,packed,name=values" json:"values,omitempty"`
	Tags          map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Specification string            `protobuf:"bytes,5,opt,name=specification" json:"specification,omitempty"`
	MillisPerStep int32             `protobuf:"varint,6,opt,name=millisPerStep" json:"millisPerStep,omitempty"`
}

func (m *Series) Reset()                    { *m = Series{} }
func (m *Series) String() string            { return proto.CompactTextString(m) }
func (*Series) ProtoMessage()               {}
func (*Series) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Series) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Series) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Series) GetValues() []float32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Series) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Series) GetSpecification() string {
	if m != nil {
		return m.Specification
	}
	return ""
}

func (m *Series) GetMillisPerStep() int32 {
	if m != nil {
		return m.MillisPerStep
	}
	return 0
}

func init() {
	proto.RegisterType((*WriteMessage)(nil), "rpc.WriteMessage")
	proto.RegisterType((*WriteQuery)(nil), "rpc.WriteQuery")
	proto.RegisterType((*WriteOptions)(nil), "rpc.WriteOptions")
	proto.RegisterType((*Datapoint)(nil), "rpc.Datapoint")
	proto.RegisterType((*Error)(nil), "rpc.Error")
	proto.RegisterType((*FetchMessage)(nil), "rpc.FetchMessage")
	proto.RegisterType((*FetchQuery)(nil), "rpc.FetchQuery")
	proto.RegisterType((*FetchOptions)(nil), "rpc.FetchOptions")
	proto.RegisterType((*Matcher)(nil), "rpc.Matcher")
	proto.RegisterType((*FetchResult)(nil), "rpc.FetchResult")
	proto.RegisterType((*Series)(nil), "rpc.Series")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	Fetch(ctx context.Context, in *FetchMessage, opts ...grpc.CallOption) (Query_FetchClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Query_WriteClient, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Fetch(ctx context.Context, in *FetchMessage, opts ...grpc.CallOption) (Query_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[0], c.cc, "/rpc.Query/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_FetchClient interface {
	Recv() (*FetchResult, error)
	grpc.ClientStream
}

type queryFetchClient struct {
	grpc.ClientStream
}

func (x *queryFetchClient) Recv() (*FetchResult, error) {
	m := new(FetchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) Write(ctx context.Context, opts ...grpc.CallOption) (Query_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[1], c.cc, "/rpc.Query/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryWriteClient{stream}
	return x, nil
}

type Query_WriteClient interface {
	Send(*WriteMessage) error
	CloseAndRecv() (*Error, error)
	grpc.ClientStream
}

type queryWriteClient struct {
	grpc.ClientStream
}

func (x *queryWriteClient) Send(m *WriteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryWriteClient) CloseAndRecv() (*Error, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Query service

type QueryServer interface {
	Fetch(*FetchMessage, Query_FetchServer) error
	Write(Query_WriteServer) error
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Fetch(m, &queryFetchServer{stream})
}

type Query_FetchServer interface {
	Send(*FetchResult) error
	grpc.ServerStream
}

type queryFetchServer struct {
	grpc.ServerStream
}

func (x *queryFetchServer) Send(m *FetchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServer).Write(&queryWriteServer{stream})
}

type Query_WriteServer interface {
	SendAndClose(*Error) error
	Recv() (*WriteMessage, error)
	grpc.ServerStream
}

type queryWriteServer struct {
	grpc.ServerStream
}

func (x *queryWriteServer) SendAndClose(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryWriteServer) Recv() (*WriteMessage, error) {
	m := new(WriteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Query_Fetch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _Query_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "query.proto",
}

func init() { proto.RegisterFile("query.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x55, 0x92, 0x4d, 0xaa, 0x4c, 0x96, 0x52, 0x2c, 0x40, 0xa1, 0x2a, 0x55, 0x15, 0x40, 0x5a,
	0x84, 0x88, 0xd0, 0x72, 0x00, 0x71, 0xe1, 0x42, 0xe1, 0x54, 0x01, 0x6e, 0x25, 0xce, 0x6e, 0x32,
	0x6c, 0x2d, 0x36, 0x1f, 0xd8, 0x5e, 0xa4, 0xbd, 0xf2, 0x2b, 0xf9, 0x39, 0xc8, 0x63, 0x6f, 0x93,
	0x6d, 0x2b, 0x84, 0x7a, 0x1b, 0xbf, 0x79, 0x99, 0x37, 0x7e, 0x33, 0x0e, 0x64, 0x3f, 0x57, 0xa8,
	0xd6, 0x65, 0xaf, 0x3a, 0xd3, 0xb1, 0x48, 0xf5, 0x55, 0x71, 0x0e, 0xd3, 0x6f, 0x4a, 0x1a, 0x3c,
	0x41, 0xad, 0xc5, 0x02, 0xd9, 0x33, 0x88, 0x89, 0x93, 0x07, 0x47, 0xc1, 0x2c, 0x9b, 0xdf, 0x2d,
	0x55, 0x5f, 0x95, 0xc4, 0xf8, 0x6a, 0x61, 0xee, 0xb2, 0xec, 0x05, 0xec, 0x74, 0xbd, 0x91, 0x5d,
	0xab, 0xf3, 0x90, 0x88, 0xf7, 0x06, 0xe2, 0x67, 0x97, 0xe0, 0x1b, 0x46, 0xf1, 0x27, 0x00, 0x18,
	0x4a, 0x30, 0x06, 0x93, 0x55, 0x2b, 0x0d, 0x29, 0xc4, 0x9c, 0x62, 0x76, 0x08, 0x20, 0xda, 0xb6,
	0x33, 0xc2, 0x7e, 0x41, 0x25, 0xa7, 0x7c, 0x84, 0xb0, 0x12, 0xa0, 0x16, 0x46, 0xf4, 0x9d, 0x6c,
	0x8d, 0xce, 0xa3, 0xa3, 0x68, 0x96, 0xcd, 0x77, 0x49, 0xf2, 0xc3, 0x06, 0xe6, 0x23, 0x06, 0x7b,
	0x09, 0x13, 0x23, 0x16, 0x3a, 0x9f, 0x10, 0xf3, 0xd1, 0x95, 0x5b, 0x94, 0x67, 0x62, 0xa1, 0x8f,
	0x5b, 0xa3, 0xd6, 0x9c, 0x68, 0xfb, 0x6f, 0x20, 0xbd, 0x84, 0xd8, 0x1e, 0x44, 0x3f, 0xd0, 0x19,
	0x90, 0x72, 0x1b, 0xb2, 0xfb, 0x10, 0xff, 0x12, 0xcb, 0x15, 0x52, 0x63, 0x29, 0x77, 0x87, 0x77,
	0xe1, 0xdb, 0xa0, 0x38, 0xf4, 0xf6, 0xf9, 0x3b, 0xb3, 0x5d, 0x08, 0x65, 0xed, 0x3f, 0x0d, 0x65,
	0x5d, 0xbc, 0x87, 0xf4, 0xb2, 0x41, 0x76, 0x00, 0xa9, 0x91, 0x0d, 0x6a, 0x23, 0x9a, 0x9e, 0x38,
	0x11, 0x1f, 0x80, 0x6d, 0x91, 0xd0, 0x8b, 0x14, 0x8f, 0x21, 0x3e, 0x56, 0xaa, 0x53, 0x36, 0x8d,
	0x36, 0xf0, 0xc5, 0xdd, 0xc1, 0x8e, 0xef, 0x23, 0x9a, 0xea, 0xe2, 0x9f, 0xe3, 0x23, 0xc6, 0xff,
	0x8c, 0x8f, 0x88, 0xd7, 0xc6, 0x57, 0x03, 0x0c, 0x15, 0x6c, 0x1f, 0xda, 0x08, 0x65, 0xfc, 0x05,
	0xdc, 0xc1, 0x7a, 0x86, 0x6d, 0x4d, 0xc5, 0x22, 0x6e, 0x43, 0x56, 0x42, 0x66, 0xc4, 0xe2, 0x44,
	0x98, 0xea, 0x02, 0xd5, 0x66, 0x64, 0x53, 0x92, 0xf1, 0x20, 0x1f, 0x13, 0xac, 0x93, 0x63, 0xf9,
	0x6b, 0x4e, 0x7e, 0x82, 0x1d, 0xcf, 0xb5, 0x0b, 0xd4, 0x8a, 0x06, 0x7d, 0x92, 0xe2, 0x9b, 0x47,
	0x64, 0x99, 0x66, 0xdd, 0x63, 0x1e, 0x51, 0x5f, 0x14, 0x17, 0x73, 0xc8, 0x48, 0x88, 0xa3, 0x5e,
	0x2d, 0x0d, 0x7b, 0x02, 0x89, 0x46, 0x25, 0x51, 0xe7, 0x01, 0xb5, 0x98, 0x51, 0x8b, 0xa7, 0x04,
	0x71, 0x9f, 0x2a, 0x7e, 0x87, 0x90, 0x38, 0xe8, 0x46, 0xf1, 0x03, 0x48, 0xc9, 0x86, 0x33, 0xd9,
	0xa0, 0xf7, 0x60, 0x00, 0xd8, 0x43, 0x48, 0xa8, 0x1b, 0x67, 0x42, 0xc8, 0xfd, 0x89, 0x3d, 0xdf,
	0xda, 0xd1, 0x07, 0x23, 0xdd, 0xab, 0xfb, 0xc9, 0x9e, 0xc2, 0x1d, 0xdd, 0x63, 0x25, 0xbf, 0xcb,
	0xca, 0xbd, 0x90, 0x98, 0xd4, 0xb7, 0x41, 0xcb, 0x6a, 0xe4, 0x72, 0x29, 0xf5, 0x17, 0x54, 0xa7,
	0x06, 0xfb, 0x3c, 0xa1, 0x17, 0xb6, 0x0d, 0xde, 0x7a, 0xd7, 0xe7, 0x02, 0x62, 0xb7, 0x02, 0x25,
	0xc4, 0xe4, 0x20, 0x1b, 0x6d, 0x8d, 0x5f, 0xc0, 0xfd, 0xbd, 0x01, 0x72, 0x06, 0xbf, 0x0a, 0xd8,
	0x0c, 0x62, 0x7a, 0x24, 0x6c, 0xf4, 0x93, 0xd8, 0xf0, 0x81, 0x20, 0x5a, 0xf1, 0x59, 0x70, 0x9e,
	0xd0, 0x9f, 0xe9, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x5f, 0x0c, 0xe1, 0xa8, 0x04,
	0x00, 0x00,
}
