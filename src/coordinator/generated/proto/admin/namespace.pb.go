// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace.proto

/*
	Package admin is a generated protocol buffer package.

	It is generated from these files:
		namespace.proto
		placement.proto

	It has these top-level messages:
		NamespaceGetResponse
		NamespaceAddRequest
		NamespaceDeleteRequest
		PlacementInitRequest
		PlacementGetResponse
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import namespace "github.com/m3db/m3db/generated/proto/namespace"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NamespaceGetResponse struct {
	Registry *namespace.Registry `protobuf:"bytes,1,opt,name=registry" json:"registry,omitempty"`
}

func (m *NamespaceGetResponse) Reset()                    { *m = NamespaceGetResponse{} }
func (m *NamespaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceGetResponse) ProtoMessage()               {}
func (*NamespaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{0} }

func (m *NamespaceGetResponse) GetRegistry() *namespace.Registry {
	if m != nil {
		return m.Registry
	}
	return nil
}

type NamespaceAddRequest struct {
	Name                  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RetentionPeriod       string `protobuf:"bytes,2,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	BlockSize             string `protobuf:"bytes,3,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BufferFuture          string `protobuf:"bytes,4,opt,name=buffer_future,json=bufferFuture,proto3" json:"buffer_future,omitempty"`
	BufferPast            string `protobuf:"bytes,5,opt,name=buffer_past,json=bufferPast,proto3" json:"buffer_past,omitempty"`
	BlockDataExpiry       bool   `protobuf:"varint,6,opt,name=block_data_expiry,json=blockDataExpiry,proto3" json:"block_data_expiry,omitempty"`
	BlockDataExpiryPeriod string `protobuf:"bytes,7,opt,name=block_data_expiry_period,json=blockDataExpiryPeriod,proto3" json:"block_data_expiry_period,omitempty"`
	NeedsBootstrap        bool   `protobuf:"varint,8,opt,name=needs_bootstrap,json=needsBootstrap,proto3" json:"needs_bootstrap,omitempty"`
	NeedsFilesetCleanup   bool   `protobuf:"varint,9,opt,name=needs_fileset_cleanup,json=needsFilesetCleanup,proto3" json:"needs_fileset_cleanup,omitempty"`
	NeedsFlush            bool   `protobuf:"varint,10,opt,name=needs_flush,json=needsFlush,proto3" json:"needs_flush,omitempty"`
	NeedsRepair           bool   `protobuf:"varint,11,opt,name=needs_repair,json=needsRepair,proto3" json:"needs_repair,omitempty"`
	WritesToCommitlog     bool   `protobuf:"varint,12,opt,name=writes_to_commitlog,json=writesToCommitlog,proto3" json:"writes_to_commitlog,omitempty"`
}

func (m *NamespaceAddRequest) Reset()                    { *m = NamespaceAddRequest{} }
func (m *NamespaceAddRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceAddRequest) ProtoMessage()               {}
func (*NamespaceAddRequest) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{1} }

func (m *NamespaceAddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamespaceAddRequest) GetRetentionPeriod() string {
	if m != nil {
		return m.RetentionPeriod
	}
	return ""
}

func (m *NamespaceAddRequest) GetBlockSize() string {
	if m != nil {
		return m.BlockSize
	}
	return ""
}

func (m *NamespaceAddRequest) GetBufferFuture() string {
	if m != nil {
		return m.BufferFuture
	}
	return ""
}

func (m *NamespaceAddRequest) GetBufferPast() string {
	if m != nil {
		return m.BufferPast
	}
	return ""
}

func (m *NamespaceAddRequest) GetBlockDataExpiry() bool {
	if m != nil {
		return m.BlockDataExpiry
	}
	return false
}

func (m *NamespaceAddRequest) GetBlockDataExpiryPeriod() string {
	if m != nil {
		return m.BlockDataExpiryPeriod
	}
	return ""
}

func (m *NamespaceAddRequest) GetNeedsBootstrap() bool {
	if m != nil {
		return m.NeedsBootstrap
	}
	return false
}

func (m *NamespaceAddRequest) GetNeedsFilesetCleanup() bool {
	if m != nil {
		return m.NeedsFilesetCleanup
	}
	return false
}

func (m *NamespaceAddRequest) GetNeedsFlush() bool {
	if m != nil {
		return m.NeedsFlush
	}
	return false
}

func (m *NamespaceAddRequest) GetNeedsRepair() bool {
	if m != nil {
		return m.NeedsRepair
	}
	return false
}

func (m *NamespaceAddRequest) GetWritesToCommitlog() bool {
	if m != nil {
		return m.WritesToCommitlog
	}
	return false
}

type NamespaceDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NamespaceDeleteRequest) Reset()                    { *m = NamespaceDeleteRequest{} }
func (m *NamespaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceDeleteRequest) ProtoMessage()               {}
func (*NamespaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{2} }

func (m *NamespaceDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*NamespaceGetResponse)(nil), "admin.NamespaceGetResponse")
	proto.RegisterType((*NamespaceAddRequest)(nil), "admin.NamespaceAddRequest")
	proto.RegisterType((*NamespaceDeleteRequest)(nil), "admin.NamespaceDeleteRequest")
}
func (m *NamespaceGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Registry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.Registry.Size()))
		n1, err := m.Registry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *NamespaceAddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceAddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.RetentionPeriod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.RetentionPeriod)))
		i += copy(dAtA[i:], m.RetentionPeriod)
	}
	if len(m.BlockSize) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.BlockSize)))
		i += copy(dAtA[i:], m.BlockSize)
	}
	if len(m.BufferFuture) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.BufferFuture)))
		i += copy(dAtA[i:], m.BufferFuture)
	}
	if len(m.BufferPast) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.BufferPast)))
		i += copy(dAtA[i:], m.BufferPast)
	}
	if m.BlockDataExpiry {
		dAtA[i] = 0x30
		i++
		if m.BlockDataExpiry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BlockDataExpiryPeriod) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.BlockDataExpiryPeriod)))
		i += copy(dAtA[i:], m.BlockDataExpiryPeriod)
	}
	if m.NeedsBootstrap {
		dAtA[i] = 0x40
		i++
		if m.NeedsBootstrap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsFilesetCleanup {
		dAtA[i] = 0x48
		i++
		if m.NeedsFilesetCleanup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsFlush {
		dAtA[i] = 0x50
		i++
		if m.NeedsFlush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsRepair {
		dAtA[i] = 0x58
		i++
		if m.NeedsRepair {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WritesToCommitlog {
		dAtA[i] = 0x60
		i++
		if m.WritesToCommitlog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NamespaceDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NamespaceGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Registry != nil {
		l = m.Registry.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *NamespaceAddRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	l = len(m.RetentionPeriod)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	l = len(m.BlockSize)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	l = len(m.BufferFuture)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	l = len(m.BufferPast)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.BlockDataExpiry {
		n += 2
	}
	l = len(m.BlockDataExpiryPeriod)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.NeedsBootstrap {
		n += 2
	}
	if m.NeedsFilesetCleanup {
		n += 2
	}
	if m.NeedsFlush {
		n += 2
	}
	if m.NeedsRepair {
		n += 2
	}
	if m.WritesToCommitlog {
		n += 2
	}
	return n
}

func (m *NamespaceDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func sovNamespace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespaceGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Registry == nil {
				m.Registry = &namespace.Registry{}
			}
			if err := m.Registry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceAddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferFuture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BufferFuture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BufferPast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockDataExpiry = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiryPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockDataExpiryPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsBootstrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsBootstrap = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsFilesetCleanup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsFilesetCleanup = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsFlush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsFlush = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsRepair", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsRepair = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesToCommitlog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WritesToCommitlog = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("namespace.proto", fileDescriptorNamespace) }

var fileDescriptorNamespace = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x31, 0xfd, 0x43, 0x32, 0x09, 0xa4, 0xdd, 0x50, 0xb4, 0x42, 0x22, 0x94, 0x70, 0xa0,
	0x20, 0x14, 0x4b, 0xed, 0x81, 0x1b, 0x12, 0x6d, 0x69, 0x6f, 0xa8, 0x32, 0xdc, 0xad, 0xb5, 0x3d,
	0x49, 0x57, 0xd8, 0xde, 0x65, 0x77, 0x2c, 0x68, 0x9f, 0x84, 0x47, 0xe2, 0xc8, 0x23, 0xa0, 0xf0,
	0x00, 0xbc, 0x02, 0xca, 0x6c, 0x6c, 0xa4, 0x22, 0xf5, 0x62, 0x59, 0xbf, 0xef, 0xf7, 0xcd, 0x6a,
	0xb4, 0x0b, 0xa3, 0x5a, 0x55, 0xe8, 0xad, 0xca, 0x71, 0x66, 0x9d, 0x21, 0x23, 0xb6, 0x54, 0x51,
	0xe9, 0xfa, 0xf1, 0xdb, 0x85, 0xa6, 0xcb, 0x26, 0x9b, 0xe5, 0xa6, 0x8a, 0xab, 0xa3, 0x22, 0x0b,
	0x9f, 0x05, 0xd6, 0xe8, 0x14, 0x61, 0x11, 0xb3, 0x1c, 0x77, 0xe5, 0xf8, 0xc6, 0x98, 0xe9, 0x39,
	0x3c, 0xfc, 0xd0, 0xa2, 0x73, 0xa4, 0x04, 0xbd, 0x35, 0xb5, 0x47, 0x11, 0x43, 0xcf, 0xe1, 0x42,
	0x7b, 0x72, 0x57, 0x32, 0xda, 0x8f, 0x0e, 0x06, 0x87, 0xe3, 0xd9, 0xbf, 0x6e, 0xb2, 0x8e, 0x92,
	0x4e, 0x9a, 0xfe, 0xd9, 0x80, 0x71, 0x37, 0xe9, 0x5d, 0x51, 0x24, 0xf8, 0xa5, 0x41, 0x4f, 0x42,
	0xc0, 0xe6, 0xaa, 0xc7, 0x43, 0xfa, 0x09, 0xff, 0x8b, 0x97, 0xb0, 0xe3, 0x90, 0xb0, 0x26, 0x6d,
	0xea, 0xd4, 0xa2, 0xd3, 0xa6, 0x90, 0x77, 0x39, 0x1f, 0x75, 0xfc, 0x82, 0xb1, 0x78, 0x02, 0x90,
	0x95, 0x26, 0xff, 0x9c, 0x7a, 0x7d, 0x8d, 0x72, 0x83, 0xa5, 0x3e, 0x93, 0x8f, 0xfa, 0x1a, 0xc5,
	0x73, 0xb8, 0x9f, 0x35, 0xf3, 0x39, 0xba, 0x74, 0xde, 0x50, 0xe3, 0x50, 0x6e, 0xb2, 0x31, 0x0c,
	0xf0, 0x8c, 0x99, 0x78, 0x0a, 0x83, 0xb5, 0x64, 0x95, 0x27, 0xb9, 0xc5, 0x0a, 0x04, 0x74, 0xa1,
	0x3c, 0x89, 0x57, 0xb0, 0x1b, 0x0e, 0x29, 0x14, 0xa9, 0x14, 0xbf, 0x59, 0xed, 0xae, 0xe4, 0xf6,
	0x7e, 0x74, 0xd0, 0x4b, 0x46, 0x1c, 0x9c, 0x2a, 0x52, 0xef, 0x19, 0x8b, 0x37, 0x20, 0xff, 0x73,
	0xdb, 0x1d, 0xee, 0xf1, 0xe4, 0xbd, 0x1b, 0x95, 0xf5, 0x26, 0x2f, 0x60, 0x54, 0x23, 0x16, 0x3e,
	0xcd, 0x8c, 0x21, 0x4f, 0x4e, 0x59, 0xd9, 0xe3, 0x23, 0x1e, 0x30, 0x3e, 0x6e, 0xa9, 0x38, 0x84,
	0xbd, 0x20, 0xce, 0x75, 0x89, 0x1e, 0x29, 0xcd, 0x4b, 0x54, 0x75, 0x63, 0x65, 0x9f, 0xf5, 0x31,
	0x87, 0x67, 0x21, 0x3b, 0x09, 0xd1, 0x6a, 0xc5, 0x75, 0xa7, 0x6c, 0xfc, 0xa5, 0x04, 0x36, 0x21,
	0x98, 0x2b, 0x22, 0x9e, 0xc1, 0x30, 0x08, 0x0e, 0xad, 0xd2, 0x4e, 0x0e, 0xd8, 0x08, 0xa5, 0x84,
	0x91, 0x98, 0xc1, 0xf8, 0xab, 0xd3, 0x84, 0x3e, 0x25, 0x93, 0xe6, 0xa6, 0xaa, 0x34, 0x95, 0x66,
	0x21, 0x87, 0x6c, 0xee, 0x86, 0xe8, 0x93, 0x39, 0x69, 0x83, 0xe9, 0x6b, 0x78, 0xd4, 0x5d, 0xf8,
	0x29, 0x96, 0x48, 0x78, 0xcb, 0x9d, 0x1f, 0xef, 0xfc, 0x58, 0x4e, 0xa2, 0x9f, 0xcb, 0x49, 0xf4,
	0x6b, 0x39, 0x89, 0xbe, 0xff, 0x9e, 0xdc, 0xc9, 0xb6, 0xf9, 0x05, 0x1e, 0xfd, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xe0, 0x91, 0x4d, 0x26, 0xdb, 0x02, 0x00, 0x00,
}
