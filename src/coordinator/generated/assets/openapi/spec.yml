# NOTE: Run `make asset-gen-coordinator` if you make any changes to this file!
swagger: "2.0"
info:
  title: "M3DB"
  description: "A distributed time series database using M3TSZ float64 compression. You can find out more about M3DB at [http://m3db.github.io/m3db/](http://m3db.github.io/m3db/) or on [GitHub](https://github.com/m3db/m3db)."
  version: "1.0.0"
  contact:
    name: "M3BD Google Group"
    url: "https://groups.google.com/forum/#!forum/m3db"
  license:
    name: "Apache License 2.0"
    url: "https://github.com/m3db/m3db/blob/master/LICENSE"
host: "hostname:7201"
basePath: "/api/v1"
tags:
- name: "namespace"
  description: "Configuring M3DB namespaces"
- name: "placement"
  description: "Configuring M3DB placement"
schemes:
- "http"
paths:
  /namespace:
    get:
      tags:
        - "namespace"
      summary: "Get namespaces"
      operationId: "namespaceGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/NamespaceGetResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "namespace"
      summary: "Add a namespace"
      operationId: "namespaceAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/NamespaceAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/NamespaceGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /namespace/{namespaceID}:
    delete:
      tags:
      - "namespace"
      summary: "Delete a namespace"
      operationId: "namespaceDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "namespaceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        404:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /placement:
    get:
      tags:
      - "placement"
      summary: "Get the placement"
      operationId: "placementGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    post:
      tags:
      - "placement"
      summary: "Add an instance to the placement"
      operationId: "placementAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementAddRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
    delete:
      tags:
      - "placement"
      summary: "Delete the placement"
      operationId: "placementDeleteAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DeleteConfirmation"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /placement/init:
    post:
      tags:
      - "placement"
      summary: "Initialize the placement"
      operationId: "placementInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/PlacementInitRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
  /placement/{instanceID}:
    delete:
      tags:
      - "placement"
      summary: "Delete an instance from the placement"
      operationId: "placementDelete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instanceID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/PlacementGetResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
        500:
          description: ""
          schema:
            $ref: "#/definitions/GenericError"
definitions:
  NamespaceAddRequest:
    type: "object"
    properties:
      name:
        type: "string"
      options:
        $ref: "#/definitions/NamespaceOptions"
  NamespaceOptions:
    type: "object"
    properties:
      bootstrapEnabled:
        type: "boolean"
      flushEnabled:
        type: "boolean"
      writesToCommitLog:
        type: "boolean"
      cleanupEnabled:
        type: "boolean"
      repairEnabled:
        type: "boolean"
      retentionOptions:
        $ref: "#/definitions/RetentionOptions"
      snapshotEnabled:
        type: "boolean"
      indexOptions:
        $ref: "#/definitions/IndexOptions"
  RetentionOptions:
    type: "object"
    properties:
      retentionPeriodNanos:
        type: "integer"
        format: "int64"
      blockSizeNanos:
        type: "integer"
        format: "int64"
      bufferFutureNanos:
        type: "integer"
        format: "int64"
      bufferPastNanos:
        type: "integer"
        format: "int64"
      blockDataExpiry:
        type: "boolean"
      blockDataExpiryAfterNotAccessPeriodNanos:
        type: "integer"
        format: "int64"
  IndexOptions:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      blockSizeNanos:
        type: "integer"
        format: "int64"
  NamespaceGetResponse:
    type: "object"
    properties:
      registry:
        $ref: "#/definitions/NamespaceRegistry"
  NamespaceRegistry:
    type: "object"
    properties:
      namespaces:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/NamespaceOptions"
  DeleteConfirmation:
    type: "object"
    properties:
      deleted:
        type: "boolean"
  PlacementGetResponse:
    type: "object"
    properties:
      placement:
        $ref: "#/definitions/Placement"
      version:
        type: "integer"
        format: "int32"
  Placement:
    type: "object"
    properties:
      instances:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Instance"
      replicaFactor:
        type: "integer"
      numShards:
        type: "integer"
      isSharded:
        type: "boolean"
      cutoverTime:
        type: "integer"
        format: "int64"
      isMirrored:
        type: "boolean"
      maxShardSetId:
        type: "integer"
  Instance:
    type: "object"
    properties:
      id:
        type: "string"
      isolationGroup:
        type: "string"
      zone:
        type: "string"
      weight:
        type: "integer"
      endpoint:
        type: "string"
      shards:
        type: "array"
        items:
          $ref: "#/definitions/Shard"
      shardSetId:
        type: "integer"
      hostname:
        type: "string"
      port:
        type: "integer"
  Shard:
    type: "object"
    properties:
      id:
        type: "integer"
      state:
        $ref: "#/definitions/ShardState"
      sourceId:
        type: "string"
      cutoverNanos:
        type: "integer"
        format: "int64"
      cutoffNanos:
        type: "integer"
        format: "int64"
  ShardState:
    type: "string"
    enum:
    - "INITIALIZING"
    - "AVAILABLE"
    - "LEAVING"
  PlacementAddRequest:
    type: "object"
    properties:
      instances:
        type: "array"
        items:
          $ref: "#/definitions/Instance"
  PlacementInitRequest:
    type: "object"
    properties:
      instances:
        type: "array"
        items:
          $ref: "#/definitions/Instance"
      numShards:
        type: "integer"
        format: "int32"
      replicationFactor:
        type: "integer"
        format: "int32"
  GenericError:
    type: "object"
    properties:
      error:
        type: "string"
