// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    639,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySwW7bMAyG73kKRpdeIstDB2zI5GzY0mPXIehltyoSbauVJUNkUhjb3n1wlLS5iR/p
jz8I6+X24cfj71930PMQNgu9lHLx8+Hxbg27Q4SnwbwgGCJk2WGUNqXsfDSc8hP4FqZ0gDISJ7C9iR0S
cALuPUHrAy4XUm4WusgBdI/GzQ8AzZ4Dbu5vt99hh9tktSqkdAdkMxszITfiwK38LNR1L5oBG3H0+Dqm
zAJsioyRG/HqHfeNw6O3KE/FCnz07E2QZE3A5oM4i4KPL9BnbBvRM4+0VqpNkanqUuoCmtFTZdOgLNHX
1gw+TM393MecDa9v63r1sa5Xn+r67y7tE6drJCBjaATxFJB6RL4sPZHyBtgnN8GfcwEwmNz5uIb6yxsa
jXM+dlfsX/GoN5FWl7Pq2Xfek9ElCzSilYccmhuXLCliw96qmVbTEG42Wp3mLtls9iMDZft+Eeti9UwO
gz/mKiKrOA7lo2/BMBKr/SG6gFRgRWyiMyFFrJ5JbOagJ2tJWgJqVf6I/wEAAP//yE0CVn8CAAA=
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    9261,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/+xZX2+cSBJ/n09RIfdwebBxbF9OmrdxPPEhObZlW5Eu0Upp6AI6gS7SXSRxov3uq4YZ
hvmzwGQSJ+tdHuyB/tX/H1UNPIaLy9vpGK5LDW9z8R5BWIu8l6Dei4iMVFowmbegYrijEmqIvoMoFTpB
C0zAqbIQqwwfjewnkSRoxuAd7h94I6VjGo8AWHGGY/BeHp2eeCMAiTYyqmBFegzeBKSybFRYMkpglSNY
NAotSMEiFBahtEon8PLo9uY1xBkJfnYMEeWFQWsV6X34P5UQCQ2x0hKoZMjJIIjQ/XRWQTC8SZmLse/n
RzLcTxSnZbivqDr1f/t3x+ITIAOk4c2Z4v+VYY21Y9+f4SLKa6D782TfRfgRja2je7p/4FIBEJFmEbHL
B4AWeZ2Qk1M4I0oyhDNDZeFVq6XJxuA1VtyC3U8qWGUsJlPm/uNH9X9n1cllKkJtccnApBBRinBeL8Fh
7cqahQ1x+GFGoZ8Ly2j88+D59OJm6o1SsuwEyXJl4b+HB0+9kavRleB0DJ4vCuV/fOqNWCR2PNqbO+L+
2UJEuF7/56RjlZSmLvHpCTRY6y0UFJmIMEfNAxS0sDZKMcfKkypcb1QITq1Lkt/YqVOW4Kw4ALXzMDv2
Vtx3hy3zXJi7MXhnyEse1+tUoBHOv0C2oz9DniMi0rasXGusiKLIVFSJ+e8s6Tm0MCTLaBDUoC1IW2y5
f3hwsDhZzZ3XWqlyJdpYgH8ZjMfgPfYlxkorJ2X9i1Y41zODC0X/+e72zlCjUdHUGDK1gsLxcEOxuks1
kRIErAH+pFYTKX9srQphRI6MpgWesT0kebdIldJrl9Zz112piZTX+KFEy78QU47vgSn3w8hFL/G/Nj+D
099rVRIzZNyer6eV3BaUrQV+Gmtbka+Q1zXdxSWDH0plUI6BTYnNZb4rnBa3F9DJvdK0zls1R0xehXz/
JD0+OH4oN0MzfzsH697KUF8fq5wirEGWqd8sP4zJetUK55ebrB3VqiarBqUtCx1h/VgwvHgPYdRetYL5
GaO2mzoPZ9T2jNMOks7G6TbErEUmWfYAekvXkLvPoeA7zHiHZhM4GyJTX7arpRN7OF3GRfNPm7kXvn6d
j7VhG/r+DtSelLGh/Bta0k8j8iIXf60t/t+Dt60VJ7vh8b9WOasDhe8wmhGuMI5wrBZlqCreXToqGltD
3gJc1nCv7dplW8Ugv0IitmxEMdUizFCu+RgSZSgaNsdZadOB2E9GMdpbek55rvickj6ByJ2UQ10xWAhl
BoMZtUvO5aAsX6/Am/ajRWFT4oFWlZb4eZjFoAV14tcbHR5U0ybWKzSK5IXQZNc8VZoxwdbtFJPbydQr
z47n18OMovc36gvupqWMYzQvSi7N91B0JSzvHtWpYDH9XChz11fGFfgkZjQXxJMoQmt3THKwRpFBNcZh
BNy9fJveOm7FxURZbqe4u6tdz/BLpq+XlAzut/VXhLWg24LuEFJWXojsak3NVm14/aFgC4frbVBnQTeN
3S0srLxJ6p/u8xTNP8BtxZ6jwyWXt/Bzviv6QZULZupbY8Tt216IiMn0xajL/CYVRvbeSspWuP47NCqZ
PqK5VRv2BwO7mbIvlduy9BvLxefKrRvkQHaZmydpm7LJnv2NspRVd0X1dbYH/IV0337pE6ok5b6koZYF
Kc09yuzmqgpjRPtZkzHvZ1iV4iXFvfl2R/MhuNvTgkxn0JX13eq24phlwdjTNGpaOWAjRaWJMOhjxYz/
O41zpyOOv1nFwveltLX9RF3m9eIeeMFFcBtMzoPXwcWZN784eTUJzicn59Pmyvl08mqG2PA+87s0xG+i
Z7sBbnoF8mt4tlW33TR6Wr3daR/W3zcpaj8VbrNDW+A3kOqPAAAA///TBJfQLSQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
