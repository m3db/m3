// Code generated by MockGen. DO NOT EDIT.
// Source: policy/resolver/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/m3db/m3coordinator/models"
	tsdb "github.com/m3db/m3coordinator/tsdb"
	reflect "reflect"
	time "time"
)

// MockPolicyResolver is a mock of PolicyResolver interface
type MockPolicyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyResolverMockRecorder
}

// MockPolicyResolverMockRecorder is the mock recorder for MockPolicyResolver
type MockPolicyResolverMockRecorder struct {
	mock *MockPolicyResolver
}

// NewMockPolicyResolver creates a new mock instance
func NewMockPolicyResolver(ctrl *gomock.Controller) *MockPolicyResolver {
	mock := &MockPolicyResolver{ctrl: ctrl}
	mock.recorder = &MockPolicyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPolicyResolver) EXPECT() *MockPolicyResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockPolicyResolver) Resolve(ctx context.Context, tagMatchers models.Matchers, startTime, endTime time.Time) ([]tsdb.FetchRequest, error) {
	ret := m.ctrl.Call(m, "Resolve", ctx, tagMatchers, startTime, endTime)
	ret0, _ := ret[0].([]tsdb.FetchRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockPolicyResolverMockRecorder) Resolve(ctx, tagMatchers, startTime, endTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockPolicyResolver)(nil).Resolve), ctx, tagMatchers, startTime, endTime)
}
