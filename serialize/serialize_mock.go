// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3db/serialize (interfaces: Encoder,EncoderPool,Decoder,DecoderPool)

package serialize

import (
	"github.com/m3db/m3x/ident"

	"github.com/golang/mock/gomock"
)

// Mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *_MockEncoderRecorder
}

// Recorder for MockEncoder (not exported)
type _MockEncoderRecorder struct {
	mock *MockEncoder
}

func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &_MockEncoderRecorder{mock}
	return mock
}

func (_m *MockEncoder) EXPECT() *_MockEncoderRecorder {
	return _m.recorder
}

func (_m *MockEncoder) Data() []byte {
	ret := _m.ctrl.Call(_m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockEncoderRecorder) Data() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Data")
}

func (_m *MockEncoder) Encode(_param0 ident.ID, _param1 ident.TagIterator) error {
	ret := _m.ctrl.Call(_m, "Encode", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEncoderRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0, arg1)
}

func (_m *MockEncoder) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockEncoderRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}

func (_m *MockEncoder) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

func (_mr *_MockEncoderRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

// Mock of EncoderPool interface
type MockEncoderPool struct {
	ctrl     *gomock.Controller
	recorder *_MockEncoderPoolRecorder
}

// Recorder for MockEncoderPool (not exported)
type _MockEncoderPoolRecorder struct {
	mock *MockEncoderPool
}

func NewMockEncoderPool(ctrl *gomock.Controller) *MockEncoderPool {
	mock := &MockEncoderPool{ctrl: ctrl}
	mock.recorder = &_MockEncoderPoolRecorder{mock}
	return mock
}

func (_m *MockEncoderPool) EXPECT() *_MockEncoderPoolRecorder {
	return _m.recorder
}

func (_m *MockEncoderPool) Get() Encoder {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Encoder)
	return ret0
}

func (_mr *_MockEncoderPoolRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockEncoderPool) Init() {
	_m.ctrl.Call(_m, "Init")
}

func (_mr *_MockEncoderPoolRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init")
}

func (_m *MockEncoderPool) Put(_param0 Encoder) {
	_m.ctrl.Call(_m, "Put", _param0)
}

func (_mr *_MockEncoderPoolRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}

// Mock of Decoder interface
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderRecorder
}

// Recorder for MockDecoder (not exported)
type _MockDecoderRecorder struct {
	mock *MockDecoder
}

func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &_MockDecoderRecorder{mock}
	return mock
}

func (_m *MockDecoder) EXPECT() *_MockDecoderRecorder {
	return _m.recorder
}

func (_m *MockDecoder) Clone() ident.TagIterator {
	ret := _m.ctrl.Call(_m, "Clone")
	ret0, _ := ret[0].(ident.TagIterator)
	return ret0
}

func (_mr *_MockDecoderRecorder) Clone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clone")
}

func (_m *MockDecoder) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDecoderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDecoder) Current() ident.Tag {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(ident.Tag)
	return ret0
}

func (_mr *_MockDecoderRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockDecoder) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDecoderRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockDecoder) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockDecoderRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}

func (_m *MockDecoder) ID() ident.ID {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(ident.ID)
	return ret0
}

func (_mr *_MockDecoderRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockDecoder) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDecoderRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockDecoder) Remaining() int {
	ret := _m.ctrl.Call(_m, "Remaining")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDecoderRecorder) Remaining() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remaining")
}

func (_m *MockDecoder) Reset(_param0 []byte) {
	_m.ctrl.Call(_m, "Reset", _param0)
}

func (_mr *_MockDecoderRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

// Mock of DecoderPool interface
type MockDecoderPool struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderPoolRecorder
}

// Recorder for MockDecoderPool (not exported)
type _MockDecoderPoolRecorder struct {
	mock *MockDecoderPool
}

func NewMockDecoderPool(ctrl *gomock.Controller) *MockDecoderPool {
	mock := &MockDecoderPool{ctrl: ctrl}
	mock.recorder = &_MockDecoderPoolRecorder{mock}
	return mock
}

func (_m *MockDecoderPool) EXPECT() *_MockDecoderPoolRecorder {
	return _m.recorder
}

func (_m *MockDecoderPool) Get() Decoder {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(Decoder)
	return ret0
}

func (_mr *_MockDecoderPoolRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockDecoderPool) Init() {
	_m.ctrl.Call(_m, "Init")
}

func (_mr *_MockDecoderPoolRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init")
}

func (_m *MockDecoderPool) Put(_param0 Decoder) {
	_m.ctrl.Call(_m, "Put", _param0)
}

func (_mr *_MockDecoderPoolRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}
